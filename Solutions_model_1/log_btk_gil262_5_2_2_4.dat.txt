Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 505 (-22) rows, 261 (-3) columns and 1501 (-44) elements
Clp1000I sum of infeasibilities 0.000222686 - average 4.40963e-07, 134 fixed columns
Coin0506I Presolve 239 (-266) rows, 127 (-134) columns and 709 (-792) elements
Clp0029I End of values pass after 127 iterations
Clp0014I Perturbing problem by 0.001% of 2.5277775 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 180.36592
Clp0000I Optimal - objective value 180.36592
Coin0511I After Postsolve, objective 180.36592, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13645076 - largest nonzero change 0 ( 0%) - largest zero change 2.9825882e-05
Clp0000I Optimal - objective value 180.36592
Clp0000I Optimal - objective value 180.36592
Clp0000I Optimal - objective value 180.36592
Coin0511I After Postsolve, objective 180.36592, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 180.3659222 - 0 iterations time 0.102, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 505 rows, 261 columns (260 integer (260 of which binary)) and 1501 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 74 integers unsatisfied sum - 13.0211
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 9.19021 iterations 213
Cbc0038I Solution found of 9.19021
Cbc0038I Relaxing continuous gives 9.19021
Cbc0038I Rounding solution of -24.8762 is better than previous of 9.19021

Cbc0038I Before mini branch and bound, 186 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 134 rows 75 columns
Cbc0038I Mini branch and bound improved solution from -24.8762 to -88.4038 (0.23 seconds)
Cbc0038I Round again with cutoff of -97.6001
Cbc0038I Pass   2: suminf.    4.57424 (23) obj. -97.6001 iterations 80
Cbc0038I Pass   3: suminf.    2.62890 (6) obj. -97.6001 iterations 46
Cbc0038I Pass   4: suminf.    2.62890 (6) obj. -97.6001 iterations 1
Cbc0038I Pass   5: suminf.    2.10211 (8) obj. -97.6001 iterations 36
Cbc0038I Pass   6: suminf.    2.02511 (7) obj. -97.6001 iterations 47
Cbc0038I Pass   7: suminf.    2.98445 (7) obj. -97.6001 iterations 42
Cbc0038I Pass   8: suminf.    2.80773 (7) obj. -97.6001 iterations 23
Cbc0038I Pass   9: suminf.    2.59946 (7) obj. -97.6001 iterations 27
Cbc0038I Pass  10: suminf.    2.60604 (9) obj. -97.6001 iterations 7
Cbc0038I Pass  11: suminf.    2.19903 (6) obj. -97.6001 iterations 20
Cbc0038I Pass  12: suminf.    1.82138 (5) obj. -97.6001 iterations 28
Cbc0038I Pass  13: suminf.    1.82138 (5) obj. -97.6001 iterations 2
Cbc0038I Pass  14: suminf.    1.48801 (6) obj. -97.6001 iterations 33
Cbc0038I Pass  15: suminf.    1.64854 (4) obj. -97.6001 iterations 23
Cbc0038I Pass  16: suminf.    1.35616 (5) obj. -97.6001 iterations 16
Cbc0038I Pass  17: suminf.    1.96341 (5) obj. -97.6001 iterations 14
Cbc0038I Pass  18: suminf.    1.73363 (5) obj. -97.6001 iterations 19
Cbc0038I Pass  19: suminf.    5.34124 (15) obj. -97.6001 iterations 80
Cbc0038I Pass  20: suminf.    4.46513 (14) obj. -97.6001 iterations 42
Cbc0038I Pass  21: suminf.    4.32844 (15) obj. -97.6001 iterations 4
Cbc0038I Pass  22: suminf.    1.75799 (6) obj. -97.6001 iterations 47
Cbc0038I Pass  23: suminf.    1.29003 (6) obj. -97.6001 iterations 16
Cbc0038I Pass  24: suminf.    1.65366 (6) obj. -97.6001 iterations 25
Cbc0038I Pass  25: suminf.    1.55576 (6) obj. -97.6001 iterations 23
Cbc0038I Pass  26: suminf.    2.36266 (8) obj. -97.6001 iterations 51
Cbc0038I Pass  27: suminf.    2.18485 (8) obj. -97.6001 iterations 10
Cbc0038I Pass  28: suminf.    2.57849 (7) obj. -97.6001 iterations 30
Cbc0038I Pass  29: suminf.    2.42355 (6) obj. -97.6001 iterations 1
Cbc0038I Pass  30: suminf.    1.75049 (5) obj. -97.6001 iterations 6
Cbc0038I Pass  31: suminf.    1.60505 (6) obj. -97.6001 iterations 5
Cbc0038I Rounding solution of -89.2523 is better than previous of -88.4038

Cbc0038I Before mini branch and bound, 164 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 176 rows 97 columns
Cbc0038I Mini branch and bound improved solution from -89.2523 to -103.594 (0.44 seconds)
Cbc0038I Round again with cutoff of -118.948
Cbc0038I Pass  31: suminf.    5.56023 (26) obj. -118.948 iterations 6
Cbc0038I Pass  32: suminf.    4.02634 (11) obj. -118.948 iterations 53
Cbc0038I Pass  33: suminf.    3.34071 (11) obj. -118.948 iterations 33
Cbc0038I Pass  34: suminf.    3.28412 (11) obj. -118.948 iterations 4
Cbc0038I Pass  35: suminf.    3.16900 (8) obj. -118.948 iterations 42
Cbc0038I Pass  36: suminf.    2.99623 (8) obj. -118.948 iterations 11
Cbc0038I Pass  37: suminf.    3.31653 (10) obj. -118.948 iterations 27
Cbc0038I Pass  38: suminf.    3.20670 (8) obj. -118.948 iterations 8
Cbc0038I Pass  39: suminf.    3.19714 (10) obj. -118.948 iterations 4
Cbc0038I Pass  40: suminf.    3.88166 (10) obj. -118.948 iterations 40
Cbc0038I Pass  41: suminf.    3.45332 (12) obj. -118.948 iterations 5
Cbc0038I Pass  42: suminf.    3.16978 (12) obj. -118.948 iterations 18
Cbc0038I Pass  43: suminf.    3.14595 (12) obj. -118.948 iterations 7
Cbc0038I Pass  44: suminf.    3.25384 (10) obj. -118.948 iterations 22
Cbc0038I Pass  45: suminf.    2.73536 (9) obj. -118.948 iterations 25
Cbc0038I Pass  46: suminf.    2.72809 (9) obj. -118.948 iterations 11
Cbc0038I Pass  47: suminf.    3.03980 (9) obj. -118.948 iterations 18
Cbc0038I Pass  48: suminf.    2.63961 (11) obj. -118.948 iterations 18
Cbc0038I Pass  49: suminf.    3.78795 (11) obj. -118.948 iterations 24
Cbc0038I Pass  50: suminf.    3.28974 (13) obj. -118.948 iterations 34
Cbc0038I Pass  51: suminf.    3.28974 (13) obj. -118.948 iterations 0
Cbc0038I Pass  52: suminf.    2.72214 (10) obj. -118.948 iterations 33
Cbc0038I Pass  53: suminf.    2.44044 (10) obj. -118.948 iterations 22
Cbc0038I Pass  54: suminf.    3.56964 (9) obj. -118.948 iterations 13
Cbc0038I Pass  55: suminf.    2.37366 (8) obj. -118.948 iterations 23
Cbc0038I Pass  56: suminf.    2.37157 (7) obj. -118.948 iterations 2
Cbc0038I Pass  57: suminf.    3.14336 (9) obj. -118.948 iterations 20
Cbc0038I Pass  58: suminf.    2.26720 (9) obj. -118.948 iterations 27
Cbc0038I Pass  59: suminf.    4.15173 (10) obj. -118.948 iterations 25
Cbc0038I Pass  60: suminf.    3.66884 (13) obj. -118.948 iterations 28
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 170 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 164 rows 91 columns
Cbc0038I Mini branch and bound did not improve solution (0.64 seconds)
Cbc0038I After 0.64 seconds - Feasibility pump exiting with objective of -103.594 - took 0.58 seconds
Cbc0012I Integer solution of -103.59355 found by feasibility pump after 0 iterations and 0 nodes (0.64 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 134 rows 75 columns
Cbc0031I 36 added rows had average density of 170.80556
Cbc0013I At root node, 36 cuts changed objective from -180.36592 to -165.48646 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 27301 row cuts average 3.2 elements, 1 column cuts (1 active)  in 1.063 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3389 row cuts average 255.2 elements, 0 column cuts (0 active)  in 1.067 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.189 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 19 row cuts average 5.0 elements, 0 column cuts (0 active)  in 1.122 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.080 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 225 row cuts average 248.0 elements, 0 column cuts (0 active)  in 0.427 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -103.59355 best solution, best possible -165.48646 (10.75 seconds)
Cbc0010I After 3 nodes, 4 on tree, -103.59355 best solution, best possible -165.48646 (11.78 seconds)
Cbc0010I After 6 nodes, 7 on tree, -103.59355 best solution, best possible -165.48646 (12.52 seconds)
Cbc0010I After 21 nodes, 10 on tree, -103.59355 best solution, best possible -165.48646 (13.26 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 9 rows 12 columns
Cbc0038I Full problem 505 rows 261 columns, reduced to 8 rows 14 columns
Cbc0010I After 98 nodes, 21 on tree, -103.59355 best solution, best possible -165.48646 (13.97 seconds)
Cbc0016I Integer solution of -103.78695 found by strong branching after 21282 iterations and 101 nodes (13.98 seconds)
Cbc0010I After 231 nodes, 12 on tree, -103.78695 best solution, best possible -165.48646 (14.67 seconds)
Cbc0010I After 288 nodes, 11 on tree, -103.78695 best solution, best possible -165.48646 (15.41 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 49 rows 30 columns
Cbc0010I After 330 nodes, 19 on tree, -103.78695 best solution, best possible -165.48646 (16.11 seconds)
Cbc0012I Integer solution of -105.49053 found by rounding after 30473 iterations and 400 nodes (16.49 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 0 rows 0 columns
Cbc0010I After 443 nodes, 27 on tree, -105.49053 best solution, best possible -165.48646 (16.82 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 34 rows 22 columns
Cbc0010I After 546 nodes, 18 on tree, -105.49053 best solution, best possible -165.48646 (17.52 seconds)
Cbc0010I After 610 nodes, 1 on tree, -105.49053 best solution, best possible -165.2611 (18.30 seconds)
Cbc0010I After 614 nodes, 5 on tree, -105.49053 best solution, best possible -165.2611 (19.23 seconds)
Cbc0010I After 638 nodes, 10 on tree, -105.49053 best solution, best possible -165.2611 (19.94 seconds)
Cbc0010I After 692 nodes, 22 on tree, -105.49053 best solution, best possible -165.2611 (20.64 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 67 rows 40 columns
Cbc0038I Full problem 505 rows 261 columns, reduced to 3 rows 6 columns
Cbc0010I After 800 nodes, 16 on tree, -105.49053 best solution, best possible -165.2611 (21.35 seconds)
Cbc0001I Search completed - best objective -105.49053, took 45892 iterations and 840 nodes (21.48 seconds)
Cbc0032I Strong branching done 6070 times (111976 iterations), fathomed 178 nodes and fixed 415 variables
Cbc0035I Maximum depth 90, 5326 variables fixed on reduced cost
Total time (CPU seconds):       19.96   (Wallclock seconds):       21.59

