Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 137 (-18) rows, 76 (-2) columns and 418 (-35) elements
Clp1000I sum of infeasibilities 6.34594e-05 - average 4.63208e-07, 10 fixed columns
Coin0506I Presolve 119 (-18) rows, 66 (-10) columns and 362 (-56) elements
Clp0029I End of values pass after 66 iterations
Clp0000I Optimal - objective value 53.928239
Clp0000I Optimal - objective value 53.928239
Coin0511I After Postsolve, objective 53.928239, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 53.928239
Clp0000I Optimal - objective value 53.928239
Clp0000I Optimal - objective value 53.928239
Coin0511I After Postsolve, objective 53.928239, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 53.92823926 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 137 rows, 76 columns (75 integer (75 of which binary)) and 418 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.161%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 46 integers unsatisfied sum - 11.5562
Cbc0038I Solution found of 8.07349
Cbc0038I Relaxing continuous gives -3.78799
Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 76 columns, reduced to 86 rows 47 columns
Cbc0038I Mini branch and bound improved solution from -3.78799 to -22.5694 (0.06 seconds)
Cbc0038I Round again with cutoff of -25.7053
Cbc0038I Pass   1: suminf.    4.75669 (49) obj. -25.7053 iterations 32
Cbc0038I Pass   2: suminf.    1.46530 (8) obj. -25.7053 iterations 62
Cbc0038I Pass   3: suminf.    0.85201 (6) obj. -25.7053 iterations 4
Cbc0038I Pass   4: suminf.    1.98268 (6) obj. -25.7053 iterations 12
Cbc0038I Pass   5: suminf.    1.98268 (6) obj. -25.7053 iterations 0
Cbc0038I Pass   6: suminf.    1.91117 (5) obj. -25.7053 iterations 3
Cbc0038I Pass   7: suminf.    1.44096 (5) obj. -25.7053 iterations 1
Cbc0038I Pass   8: suminf.    1.41473 (4) obj. -25.7053 iterations 5
Cbc0038I Pass   9: suminf.    1.40747 (5) obj. -25.7053 iterations 1
Cbc0038I Pass  10: suminf.    1.85886 (5) obj. -25.7053 iterations 3
Cbc0038I Pass  11: suminf.    1.85886 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  12: suminf.    1.29119 (5) obj. -25.7053 iterations 7
Cbc0038I Pass  13: suminf.    1.29119 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  14: suminf.    1.51699 (5) obj. -25.7053 iterations 8
Cbc0038I Pass  15: suminf.    1.85886 (5) obj. -25.7053 iterations 4
Cbc0038I Pass  16: suminf.    1.85886 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  17: suminf.    1.29119 (5) obj. -25.7053 iterations 7
Cbc0038I Pass  18: suminf.    1.29119 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  19: suminf.    1.51699 (5) obj. -25.7053 iterations 8
Cbc0038I Pass  20: suminf.    1.85886 (5) obj. -25.7053 iterations 4
Cbc0038I Pass  21: suminf.    1.85886 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  22: suminf.    1.29119 (5) obj. -25.7053 iterations 7
Cbc0038I Pass  23: suminf.    1.29119 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  24: suminf.    1.51699 (5) obj. -25.7053 iterations 8
Cbc0038I Pass  25: suminf.    1.85886 (5) obj. -25.7053 iterations 4
Cbc0038I Pass  26: suminf.    1.85886 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  27: suminf.    1.29119 (5) obj. -25.7053 iterations 7
Cbc0038I Pass  28: suminf.    1.29119 (5) obj. -25.7053 iterations 0
Cbc0038I Pass  29: suminf.    1.51699 (5) obj. -25.7053 iterations 8
Cbc0038I Pass  30: suminf.    1.85886 (5) obj. -25.7053 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 76 columns, reduced to 103 rows 56 columns
Cbc0038I Mini branch and bound did not improve solution (0.12 seconds)
Cbc0038I After 0.12 seconds - Feasibility pump exiting with objective of -22.5694 - took 0.10 seconds
Cbc0012I Integer solution of -22.56936 found by feasibility pump after 0 iterations and 0 nodes (0.12 seconds)
Cbc0038I Full problem 137 rows 76 columns, reduced to 86 rows 47 columns
Cbc0031I 22 added rows had average density of 59.409091
Cbc0013I At root node, 22 cuts changed objective from -53.928239 to -46.45667 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13576 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.084 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1832 row cuts average 76.0 elements, 0 column cuts (0 active)  in 0.090 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 35 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.080 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 189 row cuts average 75.6 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -22.56936 best solution, best possible -46.45667 (0.96 seconds)
Cbc0038I Full problem 137 rows 76 columns, reduced to 63 rows 38 columns
Cbc0001I Search completed - best objective -22.56936, took 9517 iterations and 66 nodes (1.30 seconds)
Cbc0032I Strong branching done 838 times (17170 iterations), fathomed 6 nodes and fixed 17 variables
Cbc0035I Maximum depth 28, 133 variables fixed on reduced cost
Total time (CPU seconds):       1.26   (Wallclock seconds):       1.31

