Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 108 (-47) rows, 61 (-17) columns and 332 (-121) elements
Clp1000I sum of infeasibilities 0.000154 - average 1.42593e-06, 37 fixed columns
Coin0506I Presolve 12 (-96) rows, 13 (-48) columns and 44 (-288) elements
Clp0029I End of values pass after 13 iterations
Clp0000I Optimal - objective value 316.26924
Clp0000I Optimal - objective value 316.26924
Coin0511I After Postsolve, objective 316.26924, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 316.26924
Clp0000I Optimal - objective value 316.26924
Clp0000I Optimal - objective value 316.26924
Coin0511I After Postsolve, objective 316.26924, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 316.2692446 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 108 rows, 61 columns (60 integer (60 of which binary)) and 332 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.413%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 2.96678
Cbc0038I Pass   1: suminf.    0.23333 (1) obj. -300.227 iterations 17
Cbc0038I Solution found of -262.322
Cbc0038I Relaxing continuous gives -262.322
Cbc0038I Rounding solution of -271.505 is better than previous of -262.322

Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 108 rows 61 columns, reduced to 11 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -275.982
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.23333 (1) obj. -300.227 iterations 0
Cbc0038I Pass   3: suminf.    0.27629 (1) obj. -275.982 iterations 2
Cbc0038I Pass   4: suminf.    0.98545 (6) obj. -275.982 iterations 9
Cbc0038I Pass   5: suminf.    0.65469 (4) obj. -275.982 iterations 8
Cbc0038I Pass   6: suminf.    0.92063 (4) obj. -275.982 iterations 13
Cbc0038I Pass   7: suminf.    0.08661 (1) obj. -275.982 iterations 3
Cbc0038I Pass   8: suminf.    0.10000 (1) obj. -276.77 iterations 2
Cbc0038I Pass   9: suminf.    1.34247 (6) obj. -275.982 iterations 10
Cbc0038I Pass  10: suminf.    0.17469 (3) obj. -275.982 iterations 8
Cbc0038I Pass  11: suminf.    0.17469 (3) obj. -275.982 iterations 0
Cbc0038I Pass  12: suminf.    0.06267 (2) obj. -275.982 iterations 8
Cbc0038I Pass  13: suminf.    0.19014 (3) obj. -275.982 iterations 12
Cbc0038I Pass  14: suminf.    1.87836 (8) obj. -275.982 iterations 10
Cbc0038I Pass  15: suminf.    0.17469 (3) obj. -275.982 iterations 7
Cbc0038I Pass  16: suminf.    2.21009 (7) obj. -275.982 iterations 16
Cbc0038I Pass  17: suminf.    0.96657 (5) obj. -275.982 iterations 10
Cbc0038I Pass  18: suminf.    0.71334 (3) obj. -275.982 iterations 10
Cbc0038I Pass  19: suminf.    0.62853 (3) obj. -275.982 iterations 3
Cbc0038I Pass  20: suminf.    0.45807 (3) obj. -275.982 iterations 8
Cbc0038I Pass  21: suminf.    0.33758 (2) obj. -275.982 iterations 5
Cbc0038I Pass  22: suminf.    0.00000 (0) obj. -281.702 iterations 3
Cbc0038I Solution found of -281.702
Cbc0038I Relaxing continuous gives -281.702
Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 108 rows 61 columns, reduced to 33 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -281.702 to -282.624 (0.02 seconds)
Cbc0038I Round again with cutoff of -289.353
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 3
Cbc0038I Pass  23: suminf.    0.23333 (1) obj. -300.227 iterations 0
Cbc0038I Pass  24: suminf.    0.45327 (1) obj. -289.353 iterations 2
Cbc0038I Pass  25: suminf.    1.54281 (4) obj. -289.353 iterations 18
Cbc0038I Pass  26: suminf.    0.51898 (2) obj. -289.353 iterations 14
Cbc0038I Pass  27: suminf.    0.57734 (2) obj. -289.353 iterations 7
Cbc0038I Pass  28: suminf.    1.36844 (3) obj. -289.353 iterations 9
Cbc0038I Pass  29: suminf.    0.97901 (2) obj. -289.353 iterations 6
Cbc0038I Pass  30: suminf.    0.59733 (2) obj. -289.353 iterations 5
Cbc0038I Pass  31: suminf.    0.67515 (2) obj. -289.353 iterations 2
Cbc0038I Pass  32: suminf.    1.31888 (5) obj. -289.353 iterations 10
Cbc0038I Pass  33: suminf.    1.08802 (4) obj. -289.353 iterations 4
Cbc0038I Pass  34: suminf.    0.47616 (6) obj. -289.353 iterations 18
Cbc0038I Pass  35: suminf.    0.36904 (3) obj. -289.353 iterations 6
Cbc0038I Pass  36: suminf.    1.58115 (6) obj. -289.353 iterations 13
Cbc0038I Pass  37: suminf.    1.11152 (6) obj. -289.353 iterations 10
Cbc0038I Pass  38: suminf.    0.65370 (5) obj. -289.353 iterations 10
Cbc0038I Pass  39: suminf.    0.65370 (5) obj. -289.353 iterations 1
Cbc0038I Pass  40: suminf.    0.27658 (5) obj. -289.353 iterations 12
Cbc0038I Pass  41: suminf.    0.27658 (5) obj. -289.353 iterations 1
Cbc0038I Pass  42: suminf.    0.99120 (3) obj. -289.353 iterations 5
Cbc0038I Pass  43: suminf.    0.97901 (2) obj. -289.353 iterations 8
Cbc0038I Pass  44: suminf.    0.59733 (2) obj. -289.353 iterations 5
Cbc0038I Pass  45: suminf.    0.67515 (2) obj. -289.353 iterations 2
Cbc0038I Pass  46: suminf.    0.23333 (1) obj. -300.227 iterations 10
Cbc0038I Pass  47: suminf.    0.23333 (1) obj. -300.227 iterations 5
Cbc0038I Pass  48: suminf.    0.45327 (1) obj. -289.353 iterations 2
Cbc0038I Pass  49: suminf.    1.34075 (4) obj. -289.353 iterations 8
Cbc0038I Pass  50: suminf.    1.72922 (7) obj. -289.353 iterations 17
Cbc0038I Pass  51: suminf.    1.68331 (7) obj. -289.353 iterations 4
Cbc0038I Pass  52: suminf.    0.96581 (4) obj. -289.353 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 108 rows 61 columns, reduced to 31 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -282.624 - took 0.03 seconds
Cbc0012I Integer solution of -282.62381 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 108 rows 61 columns, reduced to 11 rows 10 columns
Cbc0031I 7 added rows had average density of 19
Cbc0013I At root node, 7 cuts changed objective from -316.26924 to -300.21623 in 8 passes
Cbc0014I Cut generator 0 (Probing) - 38 row cuts average 3.3 elements, 12 column cuts (12 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 51 row cuts average 26.2 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 60.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -282.62381, took 276 iterations and 8 nodes (0.08 seconds)
Cbc0032I Strong branching done 58 times (310 iterations), fathomed 1 nodes and fixed 7 variables
Cbc0035I Maximum depth 2, 35 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.08

