Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 56 (-13) rows, 31 (-4) columns and 166 (-29) elements
Clp1000I sum of infeasibilities 2.55826e-05 - average 4.56832e-07, 2 fixed columns
Coin0506I Presolve 46 (-10) rows, 29 (-2) columns and 142 (-24) elements
Clp0029I End of values pass after 28 iterations
Clp0000I Optimal - objective value 88.435217
Clp0000I Optimal - objective value 88.435217
Coin0511I After Postsolve, objective 88.435217, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 88.435217
Clp0000I Optimal - objective value 88.435217
Clp0000I Optimal - objective value 88.435217
Coin0511I After Postsolve, objective 88.435217, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 88.43521746 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0004I processed model has 56 rows, 31 columns (30 integer (30 of which binary)) and 171 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.277%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 3.81613
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -31.18 iterations 15
Cbc0038I Solution found of -31.18
Cbc0038I Relaxing continuous gives -31.18
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 56 rows 31 columns, reduced to 31 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -31.18 to -36.63 (0.01 seconds)
Cbc0038I Round again with cutoff of -40.6406
Cbc0038I Pass   2: suminf.    0.14677 (1) obj. -40.6406 iterations 1
Cbc0038I Pass   3: suminf.    0.18000 (1) obj. -40.6406 iterations 1
Cbc0038I Pass   4: suminf.    0.38255 (5) obj. -40.6406 iterations 5
Cbc0038I Pass   5: suminf.    0.37921 (3) obj. -40.6406 iterations 2
Cbc0038I Pass   6: suminf.    0.92650 (3) obj. -40.6406 iterations 6
Cbc0038I Pass   7: suminf.    0.36111 (1) obj. -40.6406 iterations 3
Cbc0038I Pass   8: suminf.    0.06222 (1) obj. -40.6406 iterations 1
Cbc0038I Pass   9: suminf.    0.20732 (4) obj. -40.6406 iterations 5
Cbc0038I Pass  10: suminf.    0.14909 (2) obj. -40.6406 iterations 3
Cbc0038I Pass  11: suminf.    2.58205 (8) obj. -40.6406 iterations 12
Cbc0038I Pass  12: suminf.    1.73968 (8) obj. -40.6406 iterations 6
Cbc0038I Pass  13: suminf.    1.05297 (8) obj. -40.6406 iterations 7
Cbc0038I Pass  14: suminf.    0.17834 (3) obj. -40.6406 iterations 10
Cbc0038I Pass  15: suminf.    0.00000 (0) obj. -40.6406 iterations 6
Cbc0038I Solution found of -40.6406
Cbc0038I Relaxing continuous gives -43.13
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 56 rows 31 columns, reduced to 41 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -49.8412
Cbc0038I Pass  16: suminf.    0.32607 (2) obj. -49.8412 iterations 2
Cbc0038I Pass  17: suminf.    0.36111 (1) obj. -49.8412 iterations 2
Cbc0038I Pass  18: suminf.    0.20495 (1) obj. -49.8412 iterations 1
Cbc0038I Pass  19: suminf.    0.61040 (5) obj. -49.8412 iterations 7
Cbc0038I Pass  20: suminf.    0.61040 (5) obj. -49.8412 iterations 1
Cbc0038I Pass  21: suminf.    0.92000 (3) obj. -49.8412 iterations 8
Cbc0038I Pass  22: suminf.    0.36111 (1) obj. -49.8412 iterations 4
Cbc0038I Pass  23: suminf.    2.03368 (10) obj. -49.8412 iterations 20
Cbc0038I Pass  24: suminf.    1.76075 (6) obj. -49.8412 iterations 6
Cbc0038I Pass  25: suminf.    0.36111 (1) obj. -59.9072 iterations 10
Cbc0038I Pass  26: suminf.    0.20495 (1) obj. -49.8412 iterations 2
Cbc0038I Pass  27: suminf.    0.36111 (1) obj. -49.8412 iterations 1
Cbc0038I Pass  28: suminf.    1.97276 (7) obj. -49.8412 iterations 13
Cbc0038I Pass  29: suminf.    1.24006 (5) obj. -49.8412 iterations 8
Cbc0038I Pass  30: suminf.    1.38974 (6) obj. -49.8412 iterations 10
Cbc0038I Pass  31: suminf.    1.33688 (3) obj. -49.8412 iterations 6
Cbc0038I Pass  32: suminf.    0.90212 (3) obj. -49.8412 iterations 3
Cbc0038I Pass  33: suminf.    0.75946 (5) obj. -49.8412 iterations 3
Cbc0038I Pass  34: suminf.    1.70260 (6) obj. -49.8412 iterations 8
Cbc0038I Pass  35: suminf.    1.27542 (4) obj. -49.8412 iterations 1
Cbc0038I Pass  36: suminf.    0.67942 (2) obj. -49.8412 iterations 5
Cbc0038I Pass  37: suminf.    0.21822 (3) obj. -49.8412 iterations 3
Cbc0038I Pass  38: suminf.    0.21822 (3) obj. -49.8412 iterations 0
Cbc0038I Pass  39: suminf.    1.30000 (3) obj. -49.8412 iterations 2
Cbc0038I Pass  40: suminf.    4.54384 (12) obj. -49.8412 iterations 14
Cbc0038I Pass  41: suminf.    2.30631 (11) obj. -49.8412 iterations 8
Cbc0038I Pass  42: suminf.    2.01432 (9) obj. -49.8412 iterations 3
Cbc0038I Pass  43: suminf.    1.13439 (6) obj. -49.8412 iterations 14
Cbc0038I Pass  44: suminf.    0.67942 (2) obj. -49.8412 iterations 5
Cbc0038I Pass  45: suminf.    0.21822 (3) obj. -49.8412 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 56 rows 31 columns, reduced to 41 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -43.13 - took 0.03 seconds
Cbc0012I Integer solution of -43.13 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 56 rows 31 columns, reduced to 32 rows 18 columns
Cbc0031I 12 added rows had average density of 14.166667
Cbc0013I At root node, 12 cuts changed objective from -76.646087 to -45.515858 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 498 row cuts average 4.7 elements, 4 column cuts (4 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 591 row cuts average 26.9 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 11 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 11 row cuts average 26.5 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 150 row cuts average 23.3 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -43.13, took 1842 iterations and 2 nodes (0.18 seconds)
Cbc0032I Strong branching done 30 times (352 iterations), fathomed 1 nodes and fixed 1 variables
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.17   (Wallclock seconds):       0.18

