Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 58 (-11) rows, 32 (-3) columns and 172 (-23) elements
Clp1000I sum of infeasibilities 9.0507e-05 - average 1.56047e-06, 2 fixed columns
Coin0506I Presolve 54 (-4) rows, 30 (-2) columns and 160 (-12) elements
Clp0029I End of values pass after 30 iterations
Clp0014I Perturbing problem by 0.001% of 3.3278196 - largest nonzero change 1.3360784e-05 ( 0.00091204228%) - largest zero change 2.3530591e-05
Clp0000I Optimal - objective value 107.34904
Clp0000I Optimal - objective value 107.34904
Coin0511I After Postsolve, objective 107.34904, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 107.34904
Clp0000I Optimal - objective value 107.34904
Clp0000I Optimal - objective value 107.34904
Coin0511I After Postsolve, objective 107.34904, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 107.3490432 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 58 rows, 32 columns (31 integer (31 of which binary)) and 173 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.788%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 21 integers unsatisfied sum - 7.28343
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -51.4171 iterations 19
Cbc0038I Solution found of -51.4171
Cbc0038I Relaxing continuous gives -51.4171
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 58 rows 32 columns, reduced to 37 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -51.4171 to -52.7483 (0.02 seconds)
Cbc0038I Round again with cutoff of -58.2085
Cbc0038I Pass   2: suminf.    0.22438 (6) obj. -58.2085 iterations 4
Cbc0038I Pass   3: suminf.    0.43934 (3) obj. -58.2085 iterations 13
Cbc0038I Pass   4: suminf.    0.41748 (2) obj. -58.2085 iterations 1
Cbc0038I Pass   5: suminf.    0.37580 (2) obj. -58.2085 iterations 2
Cbc0038I Pass   6: suminf.    0.86119 (3) obj. -58.2085 iterations 2
Cbc0038I Pass   7: suminf.    0.37580 (2) obj. -58.2085 iterations 2
Cbc0038I Pass   8: suminf.    1.24876 (4) obj. -58.2085 iterations 9
Cbc0038I Pass   9: suminf.    1.22033 (5) obj. -58.2085 iterations 4
Cbc0038I Pass  10: suminf.    0.90443 (3) obj. -58.2085 iterations 8
Cbc0038I Pass  11: suminf.    0.90443 (3) obj. -58.2085 iterations 0
Cbc0038I Pass  12: suminf.    1.27491 (3) obj. -58.2085 iterations 2
Cbc0038I Pass  13: suminf.    1.13962 (3) obj. -58.2085 iterations 4
Cbc0038I Pass  14: suminf.    0.56763 (3) obj. -58.2085 iterations 1
Cbc0038I Pass  15: suminf.    0.86502 (2) obj. -58.2085 iterations 2
Cbc0038I Pass  16: suminf.    0.81059 (2) obj. -58.2085 iterations 1
Cbc0038I Pass  17: suminf.    0.76923 (2) obj. -58.2085 iterations 2
Cbc0038I Pass  18: suminf.    0.76923 (2) obj. -58.2085 iterations 0
Cbc0038I Pass  19: suminf.    2.82058 (6) obj. -58.2085 iterations 15
Cbc0038I Pass  20: suminf.    1.64338 (9) obj. -58.2085 iterations 6
Cbc0038I Pass  21: suminf.    0.97260 (7) obj. -58.2085 iterations 3
Cbc0038I Pass  22: suminf.    0.92092 (2) obj. -58.2085 iterations 15
Cbc0038I Pass  23: suminf.    0.72013 (2) obj. -58.2085 iterations 1
Cbc0038I Pass  24: suminf.    0.68260 (2) obj. -58.2085 iterations 2
Cbc0038I Pass  25: suminf.    0.68260 (2) obj. -58.2085 iterations 0
Cbc0038I Pass  26: suminf.    0.47092 (4) obj. -58.2085 iterations 5
Cbc0038I Pass  27: suminf.    0.38628 (2) obj. -58.2085 iterations 2
Cbc0038I Pass  28: suminf.    0.68260 (2) obj. -58.2085 iterations 3
Cbc0038I Pass  29: suminf.    0.68260 (2) obj. -58.2085 iterations 0
Cbc0038I Pass  30: suminf.    0.79110 (2) obj. -58.2085 iterations 1
Cbc0038I Pass  31: suminf.    1.39767 (7) obj. -58.2085 iterations 6
Cbc0038I Rounding solution of -54.6433 is better than previous of -52.7483

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 58 rows 32 columns, reduced to 46 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -68.0366
Cbc0038I Pass  31: suminf.    0.58554 (6) obj. -68.0366 iterations 1
Cbc0038I Pass  32: suminf.    0.92419 (3) obj. -68.0366 iterations 11
Cbc0038I Pass  33: suminf.    0.66605 (3) obj. -68.0366 iterations 3
Cbc0038I Pass  34: suminf.    0.97646 (4) obj. -68.0366 iterations 4
Cbc0038I Pass  35: suminf.    0.97181 (4) obj. -68.0366 iterations 1
Cbc0038I Pass  36: suminf.    0.99335 (4) obj. -68.0366 iterations 5
Cbc0038I Pass  37: suminf.    0.91508 (3) obj. -68.0366 iterations 1
Cbc0038I Pass  38: suminf.    0.92419 (3) obj. -68.0366 iterations 2
Cbc0038I Pass  39: suminf.    0.66605 (3) obj. -68.0366 iterations 3
Cbc0038I Pass  40: suminf.    0.97646 (4) obj. -68.0366 iterations 4
Cbc0038I Pass  41: suminf.    0.97181 (4) obj. -68.0366 iterations 1
Cbc0038I Pass  42: suminf.    0.99335 (4) obj. -68.0366 iterations 5
Cbc0038I Pass  43: suminf.    0.91508 (3) obj. -68.0366 iterations 1
Cbc0038I Pass  44: suminf.    0.92419 (3) obj. -68.0366 iterations 2
Cbc0038I Pass  45: suminf.    0.66605 (3) obj. -68.0366 iterations 3
Cbc0038I Pass  46: suminf.    0.97646 (4) obj. -68.0366 iterations 4
Cbc0038I Pass  47: suminf.    0.97181 (4) obj. -68.0366 iterations 1
Cbc0038I Pass  48: suminf.    0.99335 (4) obj. -68.0366 iterations 5
Cbc0038I Pass  49: suminf.    0.91508 (3) obj. -68.0366 iterations 1
Cbc0038I Pass  50: suminf.    0.92419 (3) obj. -68.0366 iterations 2
Cbc0038I Pass  51: suminf.    0.66605 (3) obj. -68.0366 iterations 3
Cbc0038I Pass  52: suminf.    0.97646 (4) obj. -68.0366 iterations 4
Cbc0038I Pass  53: suminf.    0.97181 (4) obj. -68.0366 iterations 1
Cbc0038I Pass  54: suminf.    0.99335 (4) obj. -68.0366 iterations 5
Cbc0038I Pass  55: suminf.    0.91508 (3) obj. -68.0366 iterations 1
Cbc0038I Pass  56: suminf.    0.92419 (3) obj. -68.0366 iterations 2
Cbc0038I Pass  57: suminf.    0.66605 (3) obj. -68.0366 iterations 3
Cbc0038I Pass  58: suminf.    0.97646 (4) obj. -68.0366 iterations 4
Cbc0038I Pass  59: suminf.    0.97181 (4) obj. -68.0366 iterations 1
Cbc0038I Pass  60: suminf.    0.99335 (4) obj. -68.0366 iterations 5
Cbc0038I Rounding solution of -58.1528 is better than previous of -54.6433

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 58 rows 32 columns, reduced to 37 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -79.8303
Cbc0038I Pass  60: suminf.    1.13684 (6) obj. -79.8303 iterations 0
Cbc0038I Pass  61: suminf.    1.29624 (4) obj. -79.8303 iterations 13
Cbc0038I Pass  62: suminf.    1.28176 (4) obj. -79.8303 iterations 1
Cbc0038I Pass  63: suminf.    1.49576 (4) obj. -79.8303 iterations 2
Cbc0038I Pass  64: suminf.    1.29302 (4) obj. -79.8303 iterations 2
Cbc0038I Pass  65: suminf.    2.94072 (15) obj. -79.8303 iterations 16
Cbc0038I Pass  66: suminf.    1.17799 (5) obj. -79.8303 iterations 11
Cbc0038I Pass  67: suminf.    0.74532 (4) obj. -79.8303 iterations 5
Cbc0038I Pass  68: suminf.    0.72979 (5) obj. -79.8303 iterations 2
Cbc0038I Pass  69: suminf.    0.92662 (5) obj. -79.8303 iterations 11
Cbc0038I Pass  70: suminf.    0.90230 (4) obj. -79.8303 iterations 2
Cbc0038I Pass  71: suminf.    1.20503 (4) obj. -79.8303 iterations 3
Cbc0038I Pass  72: suminf.    0.99263 (5) obj. -79.8303 iterations 3
Cbc0038I Pass  73: suminf.    1.64668 (5) obj. -79.8303 iterations 4
Cbc0038I Pass  74: suminf.    1.30409 (5) obj. -79.8303 iterations 3
Cbc0038I Pass  75: suminf.    1.42305 (4) obj. -79.8303 iterations 4
Cbc0038I Pass  76: suminf.    0.95344 (3) obj. -79.8303 iterations 4
Cbc0038I Pass  77: suminf.    1.09282 (3) obj. -79.8303 iterations 1
Cbc0038I Pass  78: suminf.    3.35180 (10) obj. -79.8303 iterations 16
Cbc0038I Pass  79: suminf.    1.40053 (5) obj. -79.8303 iterations 5
Cbc0038I Pass  80: suminf.    1.53799 (5) obj. -79.8303 iterations 11
Cbc0038I Pass  81: suminf.    1.49477 (5) obj. -79.8303 iterations 2
Cbc0038I Pass  82: suminf.    1.94595 (6) obj. -79.8303 iterations 4
Cbc0038I Pass  83: suminf.    1.86047 (5) obj. -79.8303 iterations 4
Cbc0038I Pass  84: suminf.    1.51779 (5) obj. -79.8303 iterations 4
Cbc0038I Pass  85: suminf.    2.55813 (6) obj. -79.8303 iterations 13
Cbc0038I Pass  86: suminf.    2.01374 (5) obj. -79.8303 iterations 4
Cbc0038I Pass  87: suminf.    1.93119 (5) obj. -79.8303 iterations 2
Cbc0038I Pass  88: suminf.    1.91905 (5) obj. -79.8303 iterations 2
Cbc0038I Pass  89: suminf.    1.58277 (5) obj. -79.8303 iterations 5
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 58 rows 32 columns, reduced to 50 rows 28 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I Round again with cutoff of -88.0859
Cbc0038I Pass  89: suminf.    1.57129 (7) obj. -88.0859 iterations 1
Cbc0038I Pass  90: suminf.    1.86735 (6) obj. -88.0859 iterations 12
Cbc0038I Pass  91: suminf.    1.71151 (5) obj. -88.0859 iterations 3
Cbc0038I Pass  92: suminf.    2.74350 (7) obj. -88.0859 iterations 4
Cbc0038I Pass  93: suminf.    2.08622 (6) obj. -88.0859 iterations 2
Cbc0038I Pass  94: suminf.    2.08622 (6) obj. -88.0859 iterations 0
Cbc0038I Pass  95: suminf.    1.96429 (6) obj. -88.0859 iterations 3
Cbc0038I Pass  96: suminf.    1.72422 (6) obj. -88.0859 iterations 1
Cbc0038I Pass  97: suminf.    1.81637 (6) obj. -88.0859 iterations 5
Cbc0038I Pass  98: suminf.    1.71151 (5) obj. -88.0859 iterations 2
Cbc0038I Pass  99: suminf.    2.74350 (7) obj. -88.0859 iterations 4
Cbc0038I Pass 100: suminf.    2.08622 (6) obj. -88.0859 iterations 2
Cbc0038I Pass 101: suminf.    2.08622 (6) obj. -88.0859 iterations 0
Cbc0038I Pass 102: suminf.    1.96429 (6) obj. -88.0859 iterations 3
Cbc0038I Pass 103: suminf.    1.72422 (6) obj. -88.0859 iterations 1
Cbc0038I Pass 104: suminf.    1.81637 (6) obj. -88.0859 iterations 5
Cbc0038I Pass 105: suminf.    1.71151 (5) obj. -88.0859 iterations 2
Cbc0038I Pass 106: suminf.    2.74350 (7) obj. -88.0859 iterations 4
Cbc0038I Pass 107: suminf.    2.08622 (6) obj. -88.0859 iterations 2
Cbc0038I Pass 108: suminf.    2.08622 (6) obj. -88.0859 iterations 0
Cbc0038I Pass 109: suminf.    1.96429 (6) obj. -88.0859 iterations 3
Cbc0038I Pass 110: suminf.    1.72422 (6) obj. -88.0859 iterations 1
Cbc0038I Pass 111: suminf.    1.81637 (6) obj. -88.0859 iterations 5
Cbc0038I Pass 112: suminf.    1.71151 (5) obj. -88.0859 iterations 2
Cbc0038I Pass 113: suminf.    2.74350 (7) obj. -88.0859 iterations 4
Cbc0038I Pass 114: suminf.    2.08622 (6) obj. -88.0859 iterations 2
Cbc0038I Pass 115: suminf.    2.08622 (6) obj. -88.0859 iterations 0
Cbc0038I Pass 116: suminf.    1.96429 (6) obj. -88.0859 iterations 3
Cbc0038I Pass 117: suminf.    1.72422 (6) obj. -88.0859 iterations 1
Cbc0038I Pass 118: suminf.    1.81637 (6) obj. -88.0859 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 58 rows 32 columns, reduced to 37 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -58.1528 - took 0.08 seconds
Cbc0012I Integer solution of -58.15279 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 58 rows 32 columns, reduced to 38 rows 24 columns
Cbc0031I 18 added rows had average density of 27.444444
Cbc0013I At root node, 18 cuts changed objective from -107.34904 to -85.411441 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1780 row cuts average 3.0 elements, 1 column cuts (1 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 872 row cuts average 32.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 68 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0001I Search completed - best objective -58.15279, took 3410 iterations and 18 nodes (0.39 seconds)
Cbc0032I Strong branching done 236 times (3199 iterations), fathomed 2 nodes and fixed 11 variables
Cbc0035I Maximum depth 7, 18 variables fixed on reduced cost
Total time (CPU seconds):       0.37   (Wallclock seconds):       0.39

