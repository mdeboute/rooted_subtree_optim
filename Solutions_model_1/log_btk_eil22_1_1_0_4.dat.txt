Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 9 (-38) rows, 7 (-17) columns and 26 (-103) elements
Clp0000I Optimal - objective value 43.649367
Coin0511I After Postsolve, objective 43.649367, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 43.64936675 - 7 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 9 rows, 7 columns (6 integer (6 of which binary)) and 26 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.667%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 1.27059
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -11 iterations 5
Cbc0038I Solution found of -11
Cbc0038I Relaxing continuous gives -11
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 9 rows 7 columns, reduced to 6 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -11 to -22 (0.01 seconds)
Cbc0038I Round again with cutoff of -25.0648
Cbc0038I Pass   2: suminf.    0.30576 (1) obj. -25.0648 iterations 1
Cbc0038I Pass   3: suminf.    0.42741 (1) obj. -25.0648 iterations 1
Cbc0038I Pass   4: suminf.    0.84714 (3) obj. -25.0648 iterations 4
Cbc0038I Pass   5: suminf.    0.73505 (4) obj. -25.0648 iterations 1
Cbc0038I Pass   6: suminf.    0.80418 (2) obj. -25.0648 iterations 6
Cbc0038I Pass   7: suminf.    0.86095 (2) obj. -25.0648 iterations 2
Cbc0038I Pass   8: suminf.    0.83512 (2) obj. -25.0648 iterations 2
Cbc0038I Pass   9: suminf.    0.80418 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  10: suminf.    0.80418 (2) obj. -25.0648 iterations 0
Cbc0038I Pass  11: suminf.    0.93525 (3) obj. -25.0648 iterations 2
Cbc0038I Pass  12: suminf.    0.30576 (1) obj. -25.0648 iterations 4
Cbc0038I Pass  13: suminf.    0.42741 (1) obj. -25.0648 iterations 1
Cbc0038I Pass  14: suminf.    0.80418 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  15: suminf.    0.93525 (3) obj. -25.0648 iterations 2
Cbc0038I Pass  16: suminf.    0.86095 (2) obj. -25.0648 iterations 3
Cbc0038I Pass  17: suminf.    0.83512 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  18: suminf.    0.80418 (2) obj. -25.0648 iterations 1
Cbc0038I Pass  19: suminf.    0.86095 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  20: suminf.    0.80418 (2) obj. -25.0648 iterations 3
Cbc0038I Pass  21: suminf.    0.86095 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  22: suminf.    0.80418 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  23: suminf.    0.19759 (1) obj. -25.0648 iterations 3
Cbc0038I Pass  24: suminf.    0.41587 (2) obj. -25.0648 iterations 2
Cbc0038I Pass  25: suminf.    0.19759 (1) obj. -25.0648 iterations 2
Cbc0038I Pass  26: suminf.    0.19759 (1) obj. -25.0648 iterations 0
Cbc0038I Pass  27: suminf.    0.19759 (1) obj. -25.0648 iterations 0
Cbc0038I Pass  28: suminf.    0.49548 (2) obj. -25.0648 iterations 1
Cbc0038I Pass  29: suminf.    0.19759 (1) obj. -25.0648 iterations 1
Cbc0038I Pass  30: suminf.    0.19759 (1) obj. -25.0648 iterations 0
Cbc0038I Pass  31: suminf.    0.86095 (2) obj. -25.0648 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 9 rows 7 columns, reduced to 9 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -22 to -27 (0.01 seconds)
Cbc0038I Round again with cutoff of -31.1298
Cbc0038I Pass  31: suminf.    0.50266 (2) obj. -31.1298 iterations 1
Cbc0038I Pass  32: suminf.    0.81128 (4) obj. -31.1298 iterations 3
Cbc0038I Pass  33: suminf.    1.28805 (3) obj. -31.1298 iterations 2
Cbc0038I Pass  34: suminf.    0.70596 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  35: suminf.    0.82447 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  36: suminf.    1.28805 (3) obj. -31.1298 iterations 5
Cbc0038I Pass  37: suminf.    1.28805 (3) obj. -31.1298 iterations 0
Cbc0038I Pass  38: suminf.    1.29837 (3) obj. -31.1298 iterations 2
Cbc0038I Pass  39: suminf.    1.28805 (3) obj. -31.1298 iterations 3
Cbc0038I Pass  40: suminf.    1.28805 (3) obj. -31.1298 iterations 0
Cbc0038I Pass  41: suminf.    0.70596 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  42: suminf.    0.82447 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  43: suminf.    1.28805 (3) obj. -31.1298 iterations 5
Cbc0038I Pass  44: suminf.    1.28805 (3) obj. -31.1298 iterations 0
Cbc0038I Pass  45: suminf.    1.28805 (3) obj. -31.1298 iterations 0
Cbc0038I Pass  46: suminf.    0.98031 (3) obj. -31.1298 iterations 3
Cbc0038I Pass  47: suminf.    0.81128 (4) obj. -31.1298 iterations 1
Cbc0038I Pass  48: suminf.    1.28805 (3) obj. -31.1298 iterations 2
Cbc0038I Pass  49: suminf.    0.70596 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  50: suminf.    0.82447 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  51: suminf.    1.28805 (3) obj. -31.1298 iterations 5
Cbc0038I Pass  52: suminf.    0.70596 (4) obj. -31.1298 iterations 4
Cbc0038I Pass  53: suminf.    0.70596 (4) obj. -31.1298 iterations 0
Cbc0038I Pass  54: suminf.    0.70596 (4) obj. -31.1298 iterations 0
Cbc0038I Pass  55: suminf.    0.70596 (4) obj. -31.1298 iterations 0
Cbc0038I Pass  56: suminf.    0.70596 (4) obj. -31.1298 iterations 0
Cbc0038I Pass  57: suminf.    1.28805 (3) obj. -31.1298 iterations 2
Cbc0038I Pass  58: suminf.    0.80761 (2) obj. -31.1298 iterations 4
Cbc0038I Pass  59: suminf.    0.22048 (2) obj. -31.1298 iterations 1
Cbc0038I Pass  60: suminf.    0.80761 (2) obj. -31.1298 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 9 rows 7 columns, reduced to 9 rows 7 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -27 - took 0.01 seconds
Cbc0012I Integer solution of -27 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from -43.649367 to -11 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -27, took 0 iterations and 0 nodes (0.01 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.01   (Wallclock seconds):       0.01

