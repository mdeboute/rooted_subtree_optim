Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 509 (-18) rows, 262 (-2) columns and 1510 (-35) elements
Clp1000I sum of infeasibilities 0.000108379 - average 2.12925e-07, 127 fixed columns
Coin0506I Presolve 235 (-274) rows, 128 (-134) columns and 707 (-803) elements
Clp0029I End of values pass after 128 iterations
Clp0014I Perturbing problem by 0.001% of 0.16985791 - largest nonzero change 0 ( 0%) - largest zero change 2.8506464e-05
Clp0000I Optimal - objective value 144.83214
Clp0000I Optimal - objective value 144.83214
Coin0511I After Postsolve, objective 144.83214, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13574183 - largest nonzero change 0 ( 0%) - largest zero change 2.9790359e-05
Clp0000I Optimal - objective value 144.83214
Clp0000I Optimal - objective value 144.83214
Clp0000I Optimal - objective value 144.83214
Coin0511I After Postsolve, objective 144.83214, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 144.832141 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 509 rows, 262 columns (261 integer (261 of which binary)) and 1510 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.369%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 68 integers unsatisfied sum - 12.7038
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -15.1058 iterations 159
Cbc0038I Solution found of -15.1058
Cbc0038I Relaxing continuous gives -15.1058
Cbc0038I Rounding solution of -57.3165 is better than previous of -15.1058

Cbc0038I Before mini branch and bound, 193 integers at bound fixed and 0 continuous
Cbc0038I Full problem 509 rows 262 columns, reduced to 125 rows 69 columns
Cbc0038I Mini branch and bound improved solution from -57.3165 to -58.3582 (0.07 seconds)
Cbc0038I Round again with cutoff of -67.0057
Cbc0038I Pass   2: suminf.    1.81493 (5) obj. -67.0057 iterations 20
Cbc0038I Pass   3: suminf.    1.59476 (4) obj. -67.0057 iterations 1
Cbc0038I Pass   4: suminf.    1.59476 (4) obj. -67.0057 iterations 0
Cbc0038I Pass   5: suminf.    0.99941 (3) obj. -67.0057 iterations 14
Cbc0038I Pass   6: suminf.    0.99941 (3) obj. -67.0057 iterations 0
Cbc0038I Pass   7: suminf.    0.71881 (2) obj. -67.0057 iterations 6
Cbc0038I Pass   8: suminf.    0.70331 (2) obj. -67.0057 iterations 3
Cbc0038I Pass   9: suminf.    0.86054 (2) obj. -67.0057 iterations 6
Cbc0038I Pass  10: suminf.    4.09337 (20) obj. -67.0057 iterations 54
Cbc0038I Pass  11: suminf.    2.74160 (18) obj. -67.0057 iterations 39
Cbc0038I Pass  12: suminf.    0.85477 (3) obj. -67.0057 iterations 26
Cbc0038I Pass  13: suminf.    0.55190 (4) obj. -67.0057 iterations 4
Cbc0038I Pass  14: suminf.    1.18857 (4) obj. -67.0057 iterations 19
Cbc0038I Pass  15: suminf.    0.59751 (9) obj. -67.0057 iterations 4
Cbc0038I Pass  16: suminf.    1.29780 (4) obj. -67.0057 iterations 14
Cbc0038I Pass  17: suminf.    1.29780 (4) obj. -67.0057 iterations 0
Cbc0038I Pass  18: suminf.    0.64687 (3) obj. -67.0057 iterations 14
Cbc0038I Pass  19: suminf.    0.64687 (3) obj. -67.0057 iterations 0
Cbc0038I Pass  20: suminf.    0.80138 (8) obj. -67.0057 iterations 15
Cbc0038I Pass  21: suminf.    0.75758 (3) obj. -67.0057 iterations 4
Cbc0038I Pass  22: suminf.    1.12406 (3) obj. -67.0057 iterations 1
Cbc0038I Pass  23: suminf.    4.75760 (15) obj. -67.0057 iterations 41
Cbc0038I Pass  24: suminf.    2.63914 (14) obj. -67.0057 iterations 25
Cbc0038I Pass  25: suminf.    1.66777 (5) obj. -67.0057 iterations 18
Cbc0038I Pass  26: suminf.    1.58631 (5) obj. -67.0057 iterations 3
Cbc0038I Pass  27: suminf.    2.42731 (5) obj. -67.0057 iterations 8
Cbc0038I Pass  28: suminf.    1.42846 (4) obj. -67.0057 iterations 6
Cbc0038I Pass  29: suminf.    1.37441 (4) obj. -67.0057 iterations 2
Cbc0038I Pass  30: suminf.    1.52784 (6) obj. -67.0057 iterations 9
Cbc0038I Pass  31: suminf.    0.93324 (3) obj. -67.0057 iterations 11
Cbc0038I Rounding solution of -77.446 is better than previous of -58.3582

Cbc0038I Before mini branch and bound, 174 integers at bound fixed and 0 continuous
Cbc0038I Full problem 509 rows 262 columns, reduced to 165 rows 88 columns
Cbc0038I Mini branch and bound improved solution from -77.446 to -80.8159 (0.14 seconds)
Cbc0038I Round again with cutoff of -93.6192
Cbc0038I Pass  31: suminf.    2.74522 (11) obj. -93.6192 iterations 3
Cbc0038I Pass  32: suminf.    2.28037 (9) obj. -93.6192 iterations 8
Cbc0038I Pass  33: suminf.    2.90826 (8) obj. -93.6192 iterations 12
Cbc0038I Pass  34: suminf.    2.76338 (8) obj. -93.6192 iterations 6
Cbc0038I Pass  35: suminf.    2.76338 (8) obj. -93.6192 iterations 1
Cbc0038I Pass  36: suminf.    2.51138 (8) obj. -93.6192 iterations 12
Cbc0038I Pass  37: suminf.    2.50789 (8) obj. -93.6192 iterations 1
Cbc0038I Pass  38: suminf.    2.96197 (8) obj. -93.6192 iterations 9
Cbc0038I Pass  39: suminf.    2.57348 (7) obj. -93.6192 iterations 4
Cbc0038I Pass  40: suminf.    2.52991 (7) obj. -93.6192 iterations 3
Cbc0038I Pass  41: suminf.    2.64366 (8) obj. -93.6192 iterations 9
Cbc0038I Pass  42: suminf.    2.29565 (9) obj. -93.6192 iterations 9
Cbc0038I Pass  43: suminf.    2.29565 (9) obj. -93.6192 iterations 0
Cbc0038I Pass  44: suminf.    2.84336 (8) obj. -93.6192 iterations 12
Cbc0038I Pass  45: suminf.    2.54500 (8) obj. -93.6192 iterations 6
Cbc0038I Pass  46: suminf.    2.52412 (9) obj. -93.6192 iterations 5
Cbc0038I Pass  47: suminf.    3.69261 (9) obj. -93.6192 iterations 13
Cbc0038I Pass  48: suminf.    1.89892 (8) obj. -93.6192 iterations 19
Cbc0038I Pass  49: suminf.    2.93238 (11) obj. -93.6192 iterations 40
Cbc0038I Pass  50: suminf.    2.36047 (11) obj. -93.6192 iterations 3
Cbc0038I Pass  51: suminf.    2.36047 (11) obj. -93.6192 iterations 0
Cbc0038I Pass  52: suminf.    2.95904 (8) obj. -93.6192 iterations 21
Cbc0038I Pass  53: suminf.    2.49610 (7) obj. -93.6192 iterations 5
Cbc0038I Pass  54: suminf.    2.67082 (8) obj. -93.6192 iterations 9
Cbc0038I Pass  55: suminf.    2.42892 (9) obj. -93.6192 iterations 9
Cbc0038I Pass  56: suminf.    2.42892 (9) obj. -93.6192 iterations 0
Cbc0038I Pass  57: suminf.    2.95904 (8) obj. -93.6192 iterations 11
Cbc0038I Pass  58: suminf.    2.49610 (7) obj. -93.6192 iterations 5
Cbc0038I Pass  59: suminf.    2.67082 (8) obj. -93.6192 iterations 9
Cbc0038I Pass  60: suminf.    2.42892 (9) obj. -93.6192 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 189 integers at bound fixed and 0 continuous
Cbc0038I Full problem 509 rows 262 columns, reduced to 130 rows 73 columns
Cbc0038I Mini branch and bound did not improve solution (0.21 seconds)
Cbc0038I After 0.21 seconds - Feasibility pump exiting with objective of -80.8159 - took 0.19 seconds
Cbc0012I Integer solution of -80.81585 found by feasibility pump after 0 iterations and 0 nodes (0.21 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 126 rows 70 columns
Cbc0031I 38 added rows had average density of 169.97368
Cbc0013I At root node, 38 cuts changed objective from -144.83214 to -131.6205 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 34965 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.498 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2915 row cuts average 256.0 elements, 0 column cuts (0 active)  in 0.451 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.077 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 36 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.546 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 239 row cuts average 250.6 elements, 0 column cuts (0 active)  in 0.175 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -80.81585 best solution, best possible -131.6205 (5.19 seconds)
Cbc0010I After 21 nodes, 9 on tree, -80.81585 best solution, best possible -131.6205 (5.90 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 162 rows 91 columns
Cbc0012I Integer solution of -84.09705 found by rounding after 22811 iterations and 61 nodes (6.41 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 5 rows 10 columns
Cbc0010I After 112 nodes, 24 on tree, -84.09705 best solution, best possible -131.6205 (6.60 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 6 rows 12 columns
Cbc0012I Integer solution of -84.35322 found by rounding after 31446 iterations and 384 nodes (7.30 seconds)
Cbc0010I After 384 nodes, 10 on tree, -84.35322 best solution, best possible -131.6205 (7.30 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 3 rows 5 columns
Cbc0004I Integer solution of -84.44314 found after 32462 iterations and 429 nodes (7.41 seconds)
Cbc0038I Full problem 509 rows 262 columns, reduced to 4 rows 6 columns
Cbc0010I After 545 nodes, 28 on tree, -84.44314 best solution, best possible -131.6205 (8.01 seconds)
Cbc0001I Search completed - best objective -84.44314, took 40750 iterations and 692 nodes (8.35 seconds)
Cbc0032I Strong branching done 3934 times (79212 iterations), fathomed 175 nodes and fixed 385 variables
Cbc0035I Maximum depth 89, 3603 variables fixed on reduced cost
Total time (CPU seconds):       8.14   (Wallclock seconds):       8.41

