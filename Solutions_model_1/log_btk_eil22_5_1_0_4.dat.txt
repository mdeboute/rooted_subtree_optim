Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 22 (-25) rows, 14 (-10) columns and 65 (-64) elements
Clp1000I sum of infeasibilities 8.76278e-08 - average 3.98308e-09, 4 fixed columns
Coin0506I Presolve 14 (-8) rows, 10 (-4) columns and 41 (-24) elements
Clp0029I End of values pass after 10 iterations
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 106.5726413 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 22 rows, 14 columns (13 integer (13 of which binary)) and 66 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.419%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.861819
Cbc0038I Pass   1: suminf.    0.12000 (1) obj. -98.84 iterations 6
Cbc0038I Solution found of -61
Cbc0038I Relaxing continuous gives -61
Cbc0038I Rounding solution of -71 is better than previous of -61

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -71 to -89 (0.00 seconds)
Cbc0038I Round again with cutoff of -91.6572
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.12000 (1) obj. -98.84 iterations 0
Cbc0038I Pass   3: suminf.    0.28704 (1) obj. -91.6572 iterations 2
Cbc0038I Pass   4: suminf.    1.38928 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   5: suminf.    0.52987 (2) obj. -91.6572 iterations 2
Cbc0038I Pass   6: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   7: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass   8: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I Pass   9: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  10: suminf.    1.07893 (4) obj. -91.6572 iterations 4
Cbc0038I Pass  11: suminf.    1.22913 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  12: suminf.    1.07893 (4) obj. -91.6572 iterations 1
Cbc0038I Pass  13: suminf.    1.43469 (5) obj. -91.6572 iterations 4
Cbc0038I Pass  14: suminf.    1.43469 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  15: suminf.    2.25854 (5) obj. -91.6572 iterations 3
Cbc0038I Pass  16: suminf.    0.19954 (2) obj. -91.6572 iterations 4
Cbc0038I Pass  17: suminf.    0.19954 (2) obj. -91.6572 iterations 0
Cbc0038I Pass  18: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  19: suminf.    0.19954 (2) obj. -91.6572 iterations 2
Cbc0038I Pass  20: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  21: suminf.    1.12624 (4) obj. -91.6572 iterations 3
Cbc0038I Pass  22: suminf.    0.94146 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  23: suminf.    0.92980 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  24: suminf.    0.44170 (1) obj. -91.6572 iterations 6
Cbc0038I Pass  25: suminf.    0.12000 (1) obj. -91.6572 iterations 2
Cbc0038I Pass  26: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  27: suminf.    0.52987 (2) obj. -91.6572 iterations 6
Cbc0038I Pass  28: suminf.    0.52987 (2) obj. -91.6572 iterations 1
Cbc0038I Pass  29: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass  30: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass  31: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 14 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -89 - took 0.01 seconds
Cbc0012I Integer solution of -89 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0031I 5 added rows had average density of 6.6
Cbc0013I At root node, 22 cuts changed objective from -106.57264 to -89.749177 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 29 row cuts average 3.5 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 39 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 53 row cuts average 7.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89, took 49 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

