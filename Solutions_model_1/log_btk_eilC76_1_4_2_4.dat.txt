Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 129 (-26) rows, 76 (-2) columns and 402 (-51) elements
Clp1000I sum of infeasibilities 2.16212e-05 - average 1.67606e-07, 14 fixed columns
Coin0506I Presolve 105 (-24) rows, 62 (-14) columns and 326 (-76) elements
Clp0029I End of values pass after 62 iterations
Clp0014I Perturbing problem by 0.001% of 3.0730803 - largest nonzero change 0 ( 0%) - largest zero change 2.6625829e-05
Clp0000I Optimal - objective value 40.53484
Clp0000I Optimal - objective value 40.53484
Coin0511I After Postsolve, objective 40.53484, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 40.53484
Clp0000I Optimal - objective value 40.53484
Clp0000I Optimal - objective value 40.53484
Coin0511I After Postsolve, objective 40.53484, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 40.53484038 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 129 rows, 76 columns (75 integer (75 of which binary)) and 402 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.092%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 34 integers unsatisfied sum - 9.38273
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 10.2487 iterations 45
Cbc0038I Solution found of 10.2487
Cbc0038I Relaxing continuous gives 10.2488
Cbc0038I Rounding solution of -10.5289 is better than previous of 10.2488

Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 129 rows 76 columns, reduced to 55 rows 35 columns
Cbc0038I Mini branch and bound improved solution from -10.5289 to -13.1628 (0.04 seconds)
Cbc0038I Round again with cutoff of -15.9001
Cbc0038I Pass   2: suminf.    2.93642 (9) obj. -15.9001 iterations 9
Cbc0038I Pass   3: suminf.    0.48807 (4) obj. -15.9001 iterations 9
Cbc0038I Pass   4: suminf.    0.47256 (4) obj. -15.9001 iterations 1
Cbc0038I Pass   5: suminf.    1.16481 (5) obj. -15.9001 iterations 6
Cbc0038I Pass   6: suminf.    0.89968 (3) obj. -15.9001 iterations 1
Cbc0038I Pass   7: suminf.    0.46647 (3) obj. -15.9001 iterations 4
Cbc0038I Pass   8: suminf.    0.71436 (5) obj. -15.9001 iterations 6
Cbc0038I Pass   9: suminf.    0.49943 (5) obj. -15.9001 iterations 1
Cbc0038I Pass  10: suminf.    1.14248 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  11: suminf.    0.47256 (4) obj. -15.9001 iterations 3
Cbc0038I Pass  12: suminf.    1.16481 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  13: suminf.    0.89968 (3) obj. -15.9001 iterations 1
Cbc0038I Pass  14: suminf.    0.46647 (3) obj. -15.9001 iterations 4
Cbc0038I Pass  15: suminf.    0.71436 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  16: suminf.    0.49943 (5) obj. -15.9001 iterations 1
Cbc0038I Pass  17: suminf.    1.14248 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  18: suminf.    0.47256 (4) obj. -15.9001 iterations 3
Cbc0038I Pass  19: suminf.    1.16481 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  20: suminf.    0.89968 (3) obj. -15.9001 iterations 1
Cbc0038I Pass  21: suminf.    0.46647 (3) obj. -15.9001 iterations 4
Cbc0038I Pass  22: suminf.    0.71436 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  23: suminf.    0.49943 (5) obj. -15.9001 iterations 1
Cbc0038I Pass  24: suminf.    1.14248 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  25: suminf.    0.47256 (4) obj. -15.9001 iterations 3
Cbc0038I Pass  26: suminf.    1.16481 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  27: suminf.    0.89968 (3) obj. -15.9001 iterations 1
Cbc0038I Pass  28: suminf.    0.46647 (3) obj. -15.9001 iterations 4
Cbc0038I Pass  29: suminf.    0.71436 (5) obj. -15.9001 iterations 6
Cbc0038I Pass  30: suminf.    0.49943 (5) obj. -15.9001 iterations 1
Cbc0038I Pass  31: suminf.    1.14248 (5) obj. -15.9001 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 129 rows 76 columns, reduced to 57 rows 36 columns
Cbc0038I Mini branch and bound improved solution from -13.1628 to -13.6024 (0.09 seconds)
Cbc0038I Round again with cutoff of -20.8271
Cbc0038I Pass  31: suminf.    3.74698 (13) obj. -20.8271 iterations 5
Cbc0038I Pass  32: suminf.    1.86927 (7) obj. -20.8271 iterations 10
Cbc0038I Pass  33: suminf.    0.96155 (8) obj. -20.8271 iterations 3
Cbc0038I Pass  34: suminf.    1.94233 (7) obj. -20.8271 iterations 9
Cbc0038I Pass  35: suminf.    0.72513 (9) obj. -20.8271 iterations 7
Cbc0038I Pass  36: suminf.    1.77517 (6) obj. -20.8271 iterations 13
Cbc0038I Pass  37: suminf.    1.68866 (7) obj. -20.8271 iterations 1
Cbc0038I Pass  38: suminf.    2.35807 (8) obj. -20.8271 iterations 7
Cbc0038I Pass  39: suminf.    1.10571 (5) obj. -20.8271 iterations 8
Cbc0038I Pass  40: suminf.    2.15062 (7) obj. -20.8271 iterations 5
Cbc0038I Pass  41: suminf.    2.92914 (11) obj. -20.8271 iterations 19
Cbc0038I Pass  42: suminf.    2.43319 (9) obj. -20.8271 iterations 9
Cbc0038I Pass  43: suminf.    3.14842 (9) obj. -20.8271 iterations 15
Cbc0038I Pass  44: suminf.    3.03397 (8) obj. -20.8271 iterations 2
Cbc0038I Pass  45: suminf.    2.04324 (8) obj. -20.8271 iterations 1
Cbc0038I Pass  46: suminf.    1.75871 (8) obj. -20.8271 iterations 1
Cbc0038I Pass  47: suminf.    2.95666 (7) obj. -20.8271 iterations 8
Cbc0038I Pass  48: suminf.    1.93488 (6) obj. -20.8271 iterations 1
Cbc0038I Pass  49: suminf.    1.70787 (6) obj. -20.8271 iterations 2
Cbc0038I Pass  50: suminf.    1.45091 (7) obj. -20.8271 iterations 4
Cbc0038I Pass  51: suminf.    3.64082 (10) obj. -20.8271 iterations 12
Cbc0038I Pass  52: suminf.    2.24497 (10) obj. -20.8271 iterations 5
Cbc0038I Pass  53: suminf.    2.07818 (9) obj. -20.8271 iterations 2
Cbc0038I Pass  54: suminf.    2.79566 (9) obj. -20.8271 iterations 16
Cbc0038I Pass  55: suminf.    2.43181 (10) obj. -20.8271 iterations 11
Cbc0038I Pass  56: suminf.    1.34312 (6) obj. -20.8271 iterations 17
Cbc0038I Pass  57: suminf.    1.21350 (5) obj. -20.8271 iterations 2
Cbc0038I Pass  58: suminf.    2.54231 (6) obj. -20.8271 iterations 7
Cbc0038I Pass  59: suminf.    2.54231 (6) obj. -20.8271 iterations 0
Cbc0038I Pass  60: suminf.    2.37662 (6) obj. -20.8271 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 129 rows 76 columns, reduced to 68 rows 43 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of -13.6024 - took 0.12 seconds
Cbc0012I Integer solution of -13.60238 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 129 rows 76 columns, reduced to 55 rows 35 columns
Cbc0031I 24 added rows had average density of 48.75
Cbc0013I At root node, 24 cuts changed objective from -40.53484 to -32.389396 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13008 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.080 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1211 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.080 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 108 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.066 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 143 row cuts average 68.2 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -13.60238 best solution, best possible -32.389396 (0.89 seconds)
Cbc0038I Full problem 129 rows 76 columns, reduced to 59 rows 37 columns
Cbc0038I Full problem 129 rows 76 columns, reduced to 26 rows 19 columns
Cbc0001I Search completed - best objective -13.60238, took 11929 iterations and 112 nodes (1.52 seconds)
Cbc0032I Strong branching done 1154 times (17867 iterations), fathomed 10 nodes and fixed 41 variables
Cbc0035I Maximum depth 31, 446 variables fixed on reduced cost
Total time (CPU seconds):       1.47   (Wallclock seconds):       1.53

