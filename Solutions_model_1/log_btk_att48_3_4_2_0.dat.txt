Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 67 (-32) rows, 36 (-14) columns and 198 (-87) elements
Clp1000I sum of infeasibilities 9.46508e-07 - average 1.4127e-08, 11 fixed columns
Coin0506I Presolve 41 (-26) rows, 25 (-11) columns and 124 (-74) elements
Clp0029I End of values pass after 24 iterations
Clp0000I Optimal - objective value 2391.4066
Clp0000I Optimal - objective value 2391.4066
Coin0511I After Postsolve, objective 2391.4066, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2391.4066
Clp0000I Optimal - objective value 2391.4066
Clp0000I Optimal - objective value 2391.4066
Coin0511I After Postsolve, objective 2391.4066, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2391.406649 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 67 rows, 36 columns (35 integer (35 of which binary)) and 198 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.473%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 19 integers unsatisfied sum - 6.84266
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 210.121 iterations 27
Cbc0038I Solution found of 210.121
Cbc0038I Relaxing continuous gives 210.121
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 67 rows 36 columns, reduced to 32 rows 21 columns
Cbc0038I Mini branch and bound improved solution from 210.121 to -560.429 (0.02 seconds)
Cbc0038I Round again with cutoff of -743.527
Cbc0038I Pass   2: suminf.    1.00000 (5) obj. -743.527 iterations 9
Cbc0038I Pass   3: suminf.    1.00000 (5) obj. -743.527 iterations 0
Cbc0038I Pass   4: suminf.    0.87960 (4) obj. -743.527 iterations 10
Cbc0038I Pass   5: suminf.    0.87960 (4) obj. -743.527 iterations 0
Cbc0038I Pass   6: suminf.    0.88928 (3) obj. -743.527 iterations 3
Cbc0038I Pass   7: suminf.    0.67469 (2) obj. -743.527 iterations 1
Cbc0038I Pass   8: suminf.    0.73617 (4) obj. -743.527 iterations 4
Cbc0038I Pass   9: suminf.    1.04381 (3) obj. -743.527 iterations 3
Cbc0038I Pass  10: suminf.    0.83563 (3) obj. -743.527 iterations 1
Cbc0038I Pass  11: suminf.    0.70608 (3) obj. -743.527 iterations 4
Cbc0038I Pass  12: suminf.    0.68846 (4) obj. -743.527 iterations 1
Cbc0038I Pass  13: suminf.    0.65824 (2) obj. -743.527 iterations 3
Cbc0038I Pass  14: suminf.    0.63531 (2) obj. -743.527 iterations 1
Cbc0038I Pass  15: suminf.    0.87606 (3) obj. -743.527 iterations 2
Cbc0038I Pass  16: suminf.    1.31311 (4) obj. -743.527 iterations 10
Cbc0038I Pass  17: suminf.    1.06661 (4) obj. -743.527 iterations 2
Cbc0038I Pass  18: suminf.    1.02989 (4) obj. -743.527 iterations 1
Cbc0038I Pass  19: suminf.    0.49502 (3) obj. -743.527 iterations 3
Cbc0038I Pass  20: suminf.    0.49502 (3) obj. -743.527 iterations 0
Cbc0038I Pass  21: suminf.    1.08185 (4) obj. -743.527 iterations 4
Cbc0038I Pass  22: suminf.    0.60941 (2) obj. -743.527 iterations 3
Cbc0038I Pass  23: suminf.    0.60187 (2) obj. -743.527 iterations 1
Cbc0038I Pass  24: suminf.    0.92856 (3) obj. -743.527 iterations 2
Cbc0038I Pass  25: suminf.    0.92014 (4) obj. -743.527 iterations 1
Cbc0038I Pass  26: suminf.    1.04092 (3) obj. -743.527 iterations 3
Cbc0038I Pass  27: suminf.    1.01821 (3) obj. -743.527 iterations 1
Cbc0038I Pass  28: suminf.    0.87606 (3) obj. -743.527 iterations 2
Cbc0038I Pass  29: suminf.    0.63531 (2) obj. -743.527 iterations 2
Cbc0038I Pass  30: suminf.    1.25766 (6) obj. -743.527 iterations 10
Cbc0038I Pass  31: suminf.    0.42865 (3) obj. -743.527 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 67 rows 36 columns, reduced to 39 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -560.429 - took 0.02 seconds
Cbc0012I Integer solution of -560.4291 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 67 rows 36 columns, reduced to 32 rows 20 columns
Cbc0031I 17 added rows had average density of 23
Cbc0013I At root node, 17 cuts changed objective from -2391.4066 to -931.98273 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1740 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 877 row cuts average 32.2 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 165 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 94 row cuts average 21.3 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -560.4290999999994, took 2915 iterations and 6 nodes (0.27 seconds)
Cbc0032I Strong branching done 142 times (2018 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 2, 12 variables fixed on reduced cost
Total time (CPU seconds):       0.27   (Wallclock seconds):       0.28

