Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 126 (-29) rows, 69 (-9) columns and 383 (-70) elements
Clp1000I sum of infeasibilities 1.93669e-06 - average 1.53705e-08, 58 fixed columns
Coin0506I Presolve 7 (-119) rows, 7 (-62) columns and 22 (-361) elements
Clp0029I End of values pass after 7 iterations
Clp0000I Optimal - objective value 13064.526
Clp0000I Optimal - objective value 13064.526
Coin0511I After Postsolve, objective 13064.526, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5826601 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 13064.526
Clp0000I Optimal - objective value 13064.526
Clp0000I Optimal - objective value 13064.526
Coin0511I After Postsolve, objective 13064.526, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 13064.52601 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 20 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 11 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 124 rows, 69 columns (68 integer (68 of which binary)) and 411 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.856%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.66419
Cbc0038I Pass   1: suminf.    0.31111 (2) obj. -12801.3 iterations 17
Cbc0038I Solution found of -7898.72
Cbc0038I Relaxing continuous gives -7898.72
Cbc0038I Rounding solution of -10922.9 is better than previous of -7898.72

Cbc0038I Before mini branch and bound, 63 integers at bound fixed and 0 continuous
Cbc0038I Full problem 124 rows 69 columns, reduced to 8 rows 6 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -11137.1
Cbc0038I Reduced cost fixing fixed 10 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.31111 (2) obj. -12801.3 iterations 0
Cbc0038I Pass   3: suminf.    0.06060 (1) obj. -11137.1 iterations 4
Cbc0038I Solution found of -11346
Cbc0038I Relaxing continuous gives -11346
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 124 rows 69 columns, reduced to 8 rows 7 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -11689.7
Cbc0038I Reduced cost fixing fixed 20 variables on major pass 3
Cbc0038I Pass   4: suminf.    0.31111 (2) obj. -12801.3 iterations 0
Cbc0038I Pass   5: suminf.    0.10818 (3) obj. -11689.7 iterations 7
Cbc0038I Pass   6: suminf.    0.10818 (3) obj. -11689.7 iterations 0
Cbc0038I Pass   7: suminf.    0.66667 (2) obj. -12575.4 iterations 5
Cbc0038I Pass   8: suminf.    0.32143 (2) obj. -12921.9 iterations 12
Cbc0038I Pass   9: suminf.    0.32143 (2) obj. -12921.9 iterations 4
Cbc0038I Pass  10: suminf.    1.11065 (3) obj. -11689.7 iterations 5
Cbc0038I Pass  11: suminf.    0.67574 (3) obj. -11689.7 iterations 4
Cbc0038I Pass  12: suminf.    0.62794 (3) obj. -11689.7 iterations 1
Cbc0038I Pass  13: suminf.    0.15881 (3) obj. -11689.7 iterations 6
Cbc0038I Pass  14: suminf.    1.07220 (3) obj. -11689.7 iterations 5
Cbc0038I Pass  15: suminf.    1.07220 (3) obj. -11689.7 iterations 0
Cbc0038I Pass  16: suminf.    0.59100 (3) obj. -11689.7 iterations 4
Cbc0038I Pass  17: suminf.    0.52168 (2) obj. -11689.7 iterations 1
Cbc0038I Pass  18: suminf.    0.67574 (3) obj. -11689.7 iterations 3
Cbc0038I Pass  19: suminf.    0.62794 (3) obj. -11689.7 iterations 1
Cbc0038I Pass  20: suminf.    0.15881 (3) obj. -11689.7 iterations 6
Cbc0038I Pass  21: suminf.    1.07220 (3) obj. -11689.7 iterations 5
Cbc0038I Pass  22: suminf.    1.07220 (3) obj. -11689.7 iterations 0
Cbc0038I Pass  23: suminf.    0.59100 (3) obj. -11689.7 iterations 4
Cbc0038I Pass  24: suminf.    0.52168 (2) obj. -11689.7 iterations 1
Cbc0038I Pass  25: suminf.    0.67574 (3) obj. -11689.7 iterations 3
Cbc0038I Pass  26: suminf.    0.62794 (3) obj. -11689.7 iterations 1
Cbc0038I Pass  27: suminf.    0.15881 (3) obj. -11689.7 iterations 6
Cbc0038I Pass  28: suminf.    1.07220 (3) obj. -11689.7 iterations 5
Cbc0038I Pass  29: suminf.    1.07220 (3) obj. -11689.7 iterations 0
Cbc0038I Pass  30: suminf.    0.59100 (3) obj. -11689.7 iterations 4
Cbc0038I Pass  31: suminf.    0.52168 (2) obj. -11689.7 iterations 1
Cbc0038I Pass  32: suminf.    0.67574 (3) obj. -11689.7 iterations 3
Cbc0038I Pass  33: suminf.    0.62794 (3) obj. -11689.7 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 60 integers at bound fixed and 0 continuous
Cbc0038I Full problem 124 rows 69 columns, reduced to 9 rows 9 columns
Cbc0038I Mini branch and bound improved solution from -11346 to -11927.8 (0.03 seconds)
Cbc0038I Round again with cutoff of -12268.8
Cbc0038I Reduced cost fixing fixed 35 variables on major pass 4
Cbc0038I Pass  33: suminf.    0.31111 (2) obj. -12801.3 iterations 0
Cbc0038I Pass  34: suminf.    0.29045 (3) obj. -12268.8 iterations 5
Cbc0038I Pass  35: suminf.    0.29045 (3) obj. -12268.8 iterations 0
Cbc0038I Pass  36: suminf.    0.66667 (2) obj. -12575.4 iterations 3
Cbc0038I Pass  37: suminf.    0.93673 (3) obj. -12268.8 iterations 10
Cbc0038I Pass  38: suminf.    0.59678 (6) obj. -12268.8 iterations 15
Cbc0038I Pass  39: suminf.    0.44444 (1) obj. -12432.5 iterations 11
Cbc0038I Pass  40: suminf.    0.44444 (1) obj. -12432.5 iterations 1
Cbc0038I Pass  41: suminf.    0.49193 (1) obj. -12268.8 iterations 2
Cbc0038I Pass  42: suminf.    1.07852 (3) obj. -12268.8 iterations 18
Cbc0038I Pass  43: suminf.    1.07852 (3) obj. -12268.8 iterations 5
Cbc0038I Pass  44: suminf.    0.74287 (3) obj. -12268.8 iterations 3
Cbc0038I Pass  45: suminf.    0.74287 (3) obj. -12268.8 iterations 0
Cbc0038I Pass  46: suminf.    0.84811 (3) obj. -12268.8 iterations 2
Cbc0038I Pass  47: suminf.    1.11128 (4) obj. -12268.8 iterations 13
Cbc0038I Pass  48: suminf.    0.62372 (2) obj. -12268.8 iterations 7
Cbc0038I Pass  49: suminf.    0.92925 (2) obj. -12268.8 iterations 4
Cbc0038I Pass  50: suminf.    0.19565 (2) obj. -12576.1 iterations 8
Cbc0038I Pass  51: suminf.    0.08398 (2) obj. -12268.8 iterations 6
Cbc0038I Pass  52: suminf.    0.40256 (2) obj. -12400.3 iterations 4
Cbc0038I Pass  53: suminf.    0.85258 (10) obj. -12268.8 iterations 13
Cbc0038I Pass  54: suminf.    0.40256 (2) obj. -12400.3 iterations 14
Cbc0038I Pass  55: suminf.    0.21547 (5) obj. -12268.8 iterations 11
Cbc0038I Pass  56: suminf.    0.50385 (4) obj. -12268.8 iterations 8
Cbc0038I Pass  57: suminf.    1.17343 (5) obj. -12268.8 iterations 12
Cbc0038I Pass  58: suminf.    0.49193 (1) obj. -12268.8 iterations 13
Cbc0038I Pass  59: suminf.    0.44444 (1) obj. -12432.5 iterations 2
Cbc0038I Pass  60: suminf.    1.05083 (3) obj. -12268.8 iterations 11
Cbc0038I Pass  61: suminf.    1.05083 (3) obj. -12268.8 iterations 5
Cbc0038I Pass  62: suminf.    0.47825 (3) obj. -12268.8 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 44 integers at bound fixed and 0 continuous
Cbc0038I Full problem 124 rows 69 columns, reduced to 15 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -11927.8 - took 0.03 seconds
Cbc0012I Integer solution of -11927.781 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 124 rows 69 columns, reduced to 8 rows 7 columns
Cbc0031I 8 added rows had average density of 24
Cbc0013I At root node, 8 cuts changed objective from -13064.526 to -12220.067 in 16 passes
Cbc0014I Cut generator 0 (Probing) - 25 row cuts average 2.6 elements, 15 column cuts (15 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 18 row cuts average 16.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 30 row cuts average 5.6 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 7 row cuts average 9.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 50 row cuts average 14.8 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 9 row cuts average 67.3 elements, 0 column cuts (0 active)  in 0.131 seconds - new frequency is 1
Cbc0001I Search completed - best objective -11927.781, took 171 iterations and 2 nodes (0.32 seconds)
Cbc0032I Strong branching done 18 times (101 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 0, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.20   (Wallclock seconds):       0.32

