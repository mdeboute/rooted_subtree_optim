Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 29 (-20) rows, 17 (-8) columns and 85 (-50) elements
Clp1000I sum of infeasibilities 1.92265e-06 - average 6.62984e-08, 12 fixed columns
Coin0506I Presolve 3 (-26) rows, 3 (-14) columns and 7 (-78) elements
Clp0029I End of values pass after 3 iterations
Clp0000I Optimal - objective value 11219.009
Clp0000I Optimal - objective value 11219.009
Coin0511I After Postsolve, objective 11219.009, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.1801161 - largest nonzero change 2.3757001e-05 ( 0.0015070958%) - largest zero change 2.2273756e-05
Clp0000I Optimal - objective value 11219.009
Clp0000I Optimal - objective value 11219.009
Clp0000I Optimal - objective value 11219.009
Coin0511I After Postsolve, objective 11219.009, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 11219.00908 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 29 rows, 17 columns (16 integer (16 of which binary)) and 85 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.042%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 6 integers unsatisfied sum - 2.66798
Cbc0038I Pass   1: suminf.    0.94326 (3) obj. -10065.6 iterations 3
Cbc0038I Solution found of -4280.62
Cbc0038I Relaxing continuous gives -4280.62
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 17 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -4868.26
Cbc0038I Pass   2: suminf.    0.94326 (3) obj. -10065.6 iterations 0
Cbc0038I Pass   3: suminf.    0.09023 (1) obj. -4868.26 iterations 3
Cbc0038I Pass   4: suminf.    0.24240 (1) obj. -9214.75 iterations 1
Cbc0038I Pass   5: suminf.    0.87183 (2) obj. -8569.95 iterations 2
Cbc0038I Pass   6: suminf.    0.09023 (1) obj. -4868.26 iterations 2
Cbc0038I Pass   7: suminf.    0.40401 (1) obj. -8162.25 iterations 1
Cbc0038I Pass   8: suminf.    1.16262 (3) obj. -8695.52 iterations 3
Cbc0038I Pass   9: suminf.    0.20586 (1) obj. -4868.26 iterations 3
Cbc0038I Pass  10: suminf.    0.32321 (1) obj. -7935.38 iterations 1
Cbc0038I Pass  11: suminf.    0.12928 (1) obj. -6464 iterations 5
Cbc0038I Pass  12: suminf.    0.12928 (1) obj. -6464 iterations 1
Cbc0038I Pass  13: suminf.    0.37430 (1) obj. -4868.26 iterations 1
Cbc0038I Pass  14: suminf.    0.37430 (1) obj. -4868.26 iterations 2
Cbc0038I Pass  15: suminf.    0.04589 (2) obj. -8229.09 iterations 7
Cbc0038I Pass  16: suminf.    0.04589 (2) obj. -8229.09 iterations 0
Cbc0038I Pass  17: suminf.    0.38585 (1) obj. -4868.26 iterations 4
Cbc0038I Pass  18: suminf.    0.00000 (0) obj. -7360 iterations 1
Cbc0038I Solution found of -7360
Cbc0038I Relaxing continuous gives -7360
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 17 columns, reduced to 15 rows 10 columns
Cbc0038I Mini branch and bound improved solution from -7360 to -7360.01 (0.01 seconds)
Cbc0038I Round again with cutoff of -7919.41
Cbc0038I Pass  19: suminf.    0.94326 (3) obj. -10065.6 iterations 0
Cbc0038I Pass  20: suminf.    0.44129 (1) obj. -7919.41 iterations 3
Cbc0038I Pass  21: suminf.    0.24240 (1) obj. -9214.75 iterations 1
Cbc0038I Pass  22: suminf.    0.41209 (1) obj. -8109.63 iterations 4
Cbc0038I Pass  23: suminf.    0.41209 (1) obj. -8109.63 iterations 1
Cbc0038I Pass  24: suminf.    0.44129 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  25: suminf.    0.44129 (1) obj. -7919.41 iterations 5
Cbc0038I Pass  26: suminf.    0.36167 (1) obj. -8438.01 iterations 1
Cbc0038I Pass  27: suminf.    0.44129 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  28: suminf.    0.12581 (1) obj. -7919.41 iterations 2
Cbc0038I Pass  29: suminf.    0.12581 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  30: suminf.    0.21816 (1) obj. -8520.87 iterations 1
Cbc0038I Pass  31: suminf.    1.30575 (3) obj. -7919.41 iterations 4
Cbc0038I Pass  32: suminf.    0.28087 (1) obj. -8211.13 iterations 1
Cbc0038I Pass  33: suminf.    0.32566 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  34: suminf.    0.20814 (1) obj. -8684.76 iterations 2
Cbc0038I Pass  35: suminf.    0.32566 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  36: suminf.    0.20814 (1) obj. -8684.76 iterations 1
Cbc0038I Pass  37: suminf.    0.29395 (3) obj. -9386.6 iterations 8
Cbc0038I Pass  38: suminf.    0.29395 (3) obj. -9386.6 iterations 1
Cbc0038I Pass  39: suminf.    0.05661 (1) obj. -7919.41 iterations 3
Cbc0038I Pass  40: suminf.    0.00323 (1) obj. -8267.08 iterations 1
Cbc0038I Pass  41: suminf.    0.10019 (1) obj. -8537.7 iterations 1
Cbc0038I Pass  42: suminf.    0.19513 (1) obj. -7919.41 iterations 1
Cbc0038I Pass  43: suminf.    0.10019 (1) obj. -8537.7 iterations 1
Cbc0038I Pass  44: suminf.    0.19884 (2) obj. -8408.72 iterations 8
Cbc0038I Pass  45: suminf.    0.19884 (2) obj. -8408.72 iterations 1
Cbc0038I Pass  46: suminf.    0.16741 (2) obj. -7919.41 iterations 3
Cbc0038I Pass  47: suminf.    0.16741 (2) obj. -7919.41 iterations 0
Cbc0038I Pass  48: suminf.    0.31076 (1) obj. -7919.41 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 17 columns, reduced to 23 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -7360.01 - took 0.01 seconds
Cbc0012I Integer solution of -7360.005 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0012I Integer solution of -8288.13 found by DiveCoefficient after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 29 rows 17 columns, reduced to 9 rows 10 columns
Cbc0012I Integer solution of -8330.135 found by DiveCoefficient after 12 iterations and 0 nodes (0.02 seconds)
Cbc0031I 4 added rows had average density of 3
Cbc0013I At root node, 4 cuts changed objective from -10157.009 to -8330.135 in 3 passes
Cbc0014I Cut generator 0 (Probing) - 12 row cuts average 2.0 elements, 9 column cuts (9 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective -8330.135, took 12 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.03

