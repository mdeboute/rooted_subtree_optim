Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 499 (-28) rows, 259 (-5) columns and 1489 (-56) elements
Clp1000I sum of infeasibilities 2.86458e-05 - average 5.74064e-08, 116 fixed columns
Coin0506I Presolve 260 (-239) rows, 140 (-119) columns and 779 (-710) elements
Clp0029I End of values pass after 140 iterations
Clp0014I Perturbing problem by 0.001% of 2.3191108 - largest nonzero change 0 ( 0%) - largest zero change 2.9278563e-05
Clp0000I Optimal - objective value 213.46101
Clp0000I Optimal - objective value 213.46101
Coin0511I After Postsolve, objective 213.46101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13226962 - largest nonzero change 0 ( 0%) - largest zero change 2.9941894e-05
Clp0000I Optimal - objective value 213.46101
Clp0000I Optimal - objective value 213.46101
Clp0000I Optimal - objective value 213.46101
Coin0511I After Postsolve, objective 213.46101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 213.4610091 - 0 iterations time 0.112, Presolve 0.00, Idiot 0.11

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 499 rows, 259 columns (258 integer (258 of which binary)) and 1489 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 81 integers unsatisfied sum - 8.9068
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -38.2523 iterations 143
Cbc0038I Solution found of -38.2523
Cbc0038I Relaxing continuous gives -38.2523
Cbc0038I Rounding solution of -85.4445 is better than previous of -38.2523

Cbc0038I Before mini branch and bound, 177 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 259 columns, reduced to 150 rows 82 columns
Cbc0038I Mini branch and bound improved solution from -85.4445 to -145.961 (0.15 seconds)
Cbc0038I Round again with cutoff of -152.711
Cbc0038I Pass   2: suminf.    2.82679 (10) obj. -152.711 iterations 32
Cbc0038I Pass   3: suminf.    0.49178 (3) obj. -152.711 iterations 32
Cbc0038I Pass   4: suminf.    0.47088 (3) obj. -152.711 iterations 5
Cbc0038I Pass   5: suminf.    0.89013 (3) obj. -152.711 iterations 18
Cbc0038I Pass   6: suminf.    6.82553 (22) obj. -152.711 iterations 57
Cbc0038I Pass   7: suminf.    2.01571 (6) obj. -152.711 iterations 61
Cbc0038I Pass   8: suminf.    1.32199 (10) obj. -152.711 iterations 29
Cbc0038I Pass   9: suminf.    3.73946 (9) obj. -152.711 iterations 52
Cbc0038I Pass  10: suminf.    1.57239 (9) obj. -152.711 iterations 8
Cbc0038I Pass  11: suminf.    1.57239 (9) obj. -152.711 iterations 3
Cbc0038I Pass  12: suminf.    4.77660 (17) obj. -152.711 iterations 58
Cbc0038I Pass  13: suminf.    3.93380 (16) obj. -152.711 iterations 3
Cbc0038I Pass  14: suminf.    2.27987 (9) obj. -152.711 iterations 37
Cbc0038I Pass  15: suminf.    2.25134 (11) obj. -152.711 iterations 22
Cbc0038I Pass  16: suminf.    4.02533 (11) obj. -152.711 iterations 62
Cbc0038I Pass  17: suminf.    2.77833 (10) obj. -152.711 iterations 32
Cbc0038I Pass  18: suminf.    2.70390 (8) obj. -152.711 iterations 3
Cbc0038I Pass  19: suminf.    2.16941 (9) obj. -152.711 iterations 37
Cbc0038I Pass  20: suminf.    1.46641 (5) obj. -152.711 iterations 45
Cbc0038I Pass  21: suminf.    1.32199 (10) obj. -152.711 iterations 28
Cbc0038I Pass  22: suminf.    3.73946 (9) obj. -152.711 iterations 47
Cbc0038I Pass  23: suminf.    1.57239 (9) obj. -152.711 iterations 8
Cbc0038I Pass  24: suminf.    1.57239 (9) obj. -152.711 iterations 1
Cbc0038I Pass  25: suminf.    4.77660 (17) obj. -152.711 iterations 51
Cbc0038I Pass  26: suminf.    3.93380 (16) obj. -152.711 iterations 3
Cbc0038I Pass  27: suminf.    2.27987 (9) obj. -152.711 iterations 36
Cbc0038I Pass  28: suminf.    2.25134 (11) obj. -152.711 iterations 22
Cbc0038I Pass  29: suminf.    4.02533 (11) obj. -152.711 iterations 58
Cbc0038I Pass  30: suminf.    2.77833 (10) obj. -152.711 iterations 32
Cbc0038I Pass  31: suminf.    2.70390 (8) obj. -152.711 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 163 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 259 columns, reduced to 178 rows 96 columns
Cbc0038I Mini branch and bound improved solution from -145.961 to -151.581 (0.33 seconds)
Cbc0038I Round again with cutoff of -164.861
Cbc0038I Pass  31: suminf.    2.86150 (11) obj. -164.861 iterations 4
Cbc0038I Pass  32: suminf.    1.31215 (7) obj. -164.861 iterations 52
Cbc0038I Pass  33: suminf.    2.93286 (12) obj. -164.861 iterations 53
Cbc0038I Pass  34: suminf.    1.85082 (11) obj. -164.861 iterations 26
Cbc0038I Pass  35: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I Pass  36: suminf.    3.35508 (10) obj. -164.861 iterations 49
Cbc0038I Pass  37: suminf.    2.02726 (10) obj. -164.861 iterations 11
Cbc0038I Pass  38: suminf.    3.21834 (11) obj. -164.861 iterations 28
Cbc0038I Pass  39: suminf.    1.85082 (11) obj. -164.861 iterations 41
Cbc0038I Pass  40: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I Pass  41: suminf.    3.35508 (10) obj. -164.861 iterations 48
Cbc0038I Pass  42: suminf.    2.02726 (10) obj. -164.861 iterations 11
Cbc0038I Pass  43: suminf.    3.21834 (11) obj. -164.861 iterations 28
Cbc0038I Pass  44: suminf.    1.85082 (11) obj. -164.861 iterations 42
Cbc0038I Pass  45: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I Pass  46: suminf.    3.35508 (10) obj. -164.861 iterations 49
Cbc0038I Pass  47: suminf.    2.02726 (10) obj. -164.861 iterations 11
Cbc0038I Pass  48: suminf.    3.21834 (11) obj. -164.861 iterations 28
Cbc0038I Pass  49: suminf.    1.85082 (11) obj. -164.861 iterations 41
Cbc0038I Pass  50: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I Pass  51: suminf.    3.35508 (10) obj. -164.861 iterations 46
Cbc0038I Pass  52: suminf.    2.02726 (10) obj. -164.861 iterations 11
Cbc0038I Pass  53: suminf.    3.21834 (11) obj. -164.861 iterations 28
Cbc0038I Pass  54: suminf.    1.85082 (11) obj. -164.861 iterations 41
Cbc0038I Pass  55: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I Pass  56: suminf.    3.35508 (10) obj. -164.861 iterations 49
Cbc0038I Pass  57: suminf.    2.02726 (10) obj. -164.861 iterations 11
Cbc0038I Pass  58: suminf.    3.21834 (11) obj. -164.861 iterations 29
Cbc0038I Pass  59: suminf.    1.85082 (11) obj. -164.861 iterations 41
Cbc0038I Pass  60: suminf.    1.72485 (10) obj. -164.861 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 170 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 259 columns, reduced to 161 rows 89 columns
Cbc0038I Mini branch and bound did not improve solution (0.52 seconds)
Cbc0038I After 0.52 seconds - Feasibility pump exiting with objective of -151.581 - took 0.48 seconds
Cbc0012I Integer solution of -151.5808 found by feasibility pump after 0 iterations and 0 nodes (0.52 seconds)
Cbc0038I Full problem 499 rows 259 columns, reduced to 151 rows 83 columns
Cbc0031I 38 added rows had average density of 117.10526
Cbc0013I At root node, 38 cuts changed objective from -213.46101 to -199.36635 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 39654 row cuts average 3.3 elements, 1 column cuts (1 active)  in 1.019 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2534 row cuts average 253.0 elements, 0 column cuts (0 active)  in 0.863 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.213 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 115 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.723 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 161 row cuts average 250.0 elements, 0 column cuts (0 active)  in 0.472 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -151.5808 best solution, best possible -199.36635 (8.83 seconds)
Cbc0010I After 4 nodes, 5 on tree, -151.5808 best solution, best possible -199.36635 (9.64 seconds)
Cbc0010I After 29 nodes, 8 on tree, -151.5808 best solution, best possible -199.36635 (10.35 seconds)
Cbc0038I Full problem 499 rows 259 columns, reduced to 164 rows 89 columns
Cbc0010I After 60 nodes, 12 on tree, -151.5808 best solution, best possible -199.36635 (11.08 seconds)
Cbc0038I Full problem 499 rows 259 columns, reduced to 106 rows 61 columns
Cbc0010I After 101 nodes, 15 on tree, -151.5808 best solution, best possible -199.36635 (11.79 seconds)
Cbc0001I Search completed - best objective -151.5808, took 21327 iterations and 192 nodes (12.44 seconds)
Cbc0032I Strong branching done 1960 times (56062 iterations), fathomed 13 nodes and fixed 26 variables
Cbc0035I Maximum depth 55, 461 variables fixed on reduced cost
Total time (CPU seconds):       12.08   (Wallclock seconds):       12.52

