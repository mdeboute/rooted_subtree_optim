Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 87 (-12) rows, 47 (-3) columns and 260 (-25) elements
Clp1000I sum of infeasibilities 3.80381e-06 - average 4.37219e-08, 14 fixed columns
Coin0506I Presolve 61 (-26) rows, 33 (-14) columns and 180 (-80) elements
Clp0029I End of values pass after 33 iterations
Clp0000I Optimal - objective value 4017.1549
Clp0000I Optimal - objective value 4017.1549
Coin0511I After Postsolve, objective 4017.1549, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 4017.1549
Clp0000I Optimal - objective value 4017.1549
Clp0000I Optimal - objective value 4017.1549
Coin0511I After Postsolve, objective 4017.1549, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4017.154893 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 87 rows, 47 columns (46 integer (46 of which binary)) and 260 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.904%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 30 integers unsatisfied sum - 10.4743
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -1357.19 iterations 25
Cbc0038I Solution found of -1357.19
Cbc0038I Relaxing continuous gives -1357.19
Cbc0038I Rounding solution of -1924.85 is better than previous of -1357.19

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 87 rows 47 columns, reduced to 57 rows 31 columns
Cbc0038I Mini branch and bound improved solution from -1924.85 to -2414.5 (0.02 seconds)
Cbc0038I Round again with cutoff of -2574.77
Cbc0038I Pass   2: suminf.    1.43763 (5) obj. -2574.77 iterations 6
Cbc0038I Pass   3: suminf.    1.43763 (5) obj. -2574.77 iterations 0
Cbc0038I Pass   4: suminf.    1.74240 (5) obj. -2574.77 iterations 7
Cbc0038I Pass   5: suminf.    0.56717 (3) obj. -2574.77 iterations 5
Cbc0038I Pass   6: suminf.    1.21350 (4) obj. -2574.77 iterations 4
Cbc0038I Pass   7: suminf.    0.84652 (3) obj. -2574.77 iterations 3
Cbc0038I Pass   8: suminf.    1.20849 (4) obj. -2574.77 iterations 4
Cbc0038I Pass   9: suminf.    1.20849 (4) obj. -2574.77 iterations 0
Cbc0038I Pass  10: suminf.    1.43763 (5) obj. -2574.77 iterations 3
Cbc0038I Pass  11: suminf.    1.43763 (5) obj. -2574.77 iterations 0
Cbc0038I Pass  12: suminf.    1.74240 (5) obj. -2574.77 iterations 7
Cbc0038I Pass  13: suminf.    0.56717 (3) obj. -2574.77 iterations 6
Cbc0038I Pass  14: suminf.    1.21350 (4) obj. -2574.77 iterations 5
Cbc0038I Pass  15: suminf.    0.84652 (3) obj. -2574.77 iterations 4
Cbc0038I Pass  16: suminf.    1.20849 (4) obj. -2574.77 iterations 5
Cbc0038I Pass  17: suminf.    1.20849 (4) obj. -2574.77 iterations 0
Cbc0038I Pass  18: suminf.    1.43763 (5) obj. -2574.77 iterations 3
Cbc0038I Pass  19: suminf.    1.43763 (5) obj. -2574.77 iterations 0
Cbc0038I Pass  20: suminf.    1.74240 (5) obj. -2574.77 iterations 9
Cbc0038I Pass  21: suminf.    0.56717 (3) obj. -2574.77 iterations 5
Cbc0038I Pass  22: suminf.    1.21350 (4) obj. -2574.77 iterations 4
Cbc0038I Pass  23: suminf.    0.84652 (3) obj. -2574.77 iterations 3
Cbc0038I Pass  24: suminf.    1.20849 (4) obj. -2574.77 iterations 4
Cbc0038I Pass  25: suminf.    1.20849 (4) obj. -2574.77 iterations 0
Cbc0038I Pass  26: suminf.    1.43763 (5) obj. -2574.77 iterations 3
Cbc0038I Pass  27: suminf.    1.43763 (5) obj. -2574.77 iterations 0
Cbc0038I Pass  28: suminf.    1.74240 (5) obj. -2574.77 iterations 7
Cbc0038I Pass  29: suminf.    0.56717 (3) obj. -2574.77 iterations 6
Cbc0038I Pass  30: suminf.    1.21350 (4) obj. -2574.77 iterations 5
Cbc0038I Pass  31: suminf.    0.84652 (3) obj. -2574.77 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 87 rows 47 columns, reduced to 57 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -2414.5 - took 0.04 seconds
Cbc0012I Integer solution of -2414.5047 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 87 rows 47 columns, reduced to 57 rows 31 columns
Cbc0031I 11 added rows had average density of 39.363636
Cbc0013I At root node, 11 cuts changed objective from -4017.1549 to -2873.8832 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2126 row cuts average 3.5 elements, 1 column cuts (1 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 803 row cuts average 45.9 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 88 row cuts average 41.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0001I Search completed - best objective -2414.5047, took 2569 iterations and 6 nodes (0.34 seconds)
Cbc0032I Strong branching done 108 times (1262 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 2, 18 variables fixed on reduced cost
Total time (CPU seconds):       0.32   (Wallclock seconds):       0.35

