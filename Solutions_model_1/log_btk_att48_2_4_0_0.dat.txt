Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 81 (-18) rows, 44 (-6) columns and 243 (-42) elements
Clp1000I sum of infeasibilities 1.1536e-06 - average 1.4242e-08, 2 fixed columns
Coin0506I Presolve 77 (-4) rows, 42 (-2) columns and 231 (-12) elements
Clp0029I End of values pass after 42 iterations
Clp0000I Optimal - objective value 2188.2613
Clp0000I Optimal - objective value 2188.2613
Coin0511I After Postsolve, objective 2188.2613, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2188.2613
Clp0000I Optimal - objective value 2188.2613
Clp0000I Optimal - objective value 2188.2613
Coin0511I After Postsolve, objective 2188.2613, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2188.26126 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 81 rows, 44 columns (43 integer (43 of which binary)) and 243 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.017%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 41 integers unsatisfied sum - 12.575
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 556.217 iterations 41
Cbc0038I Solution found of 556.217
Cbc0038I Relaxing continuous gives 556.217
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 44 columns, reduced to 77 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 556.217 to -714.075 (0.05 seconds)
Cbc0038I Round again with cutoff of -861.494
Cbc0038I Pass   2: suminf.    3.52068 (13) obj. -861.494 iterations 11
Cbc0038I Pass   3: suminf.    0.61468 (3) obj. -861.494 iterations 19
Cbc0038I Pass   4: suminf.    0.61468 (3) obj. -861.494 iterations 1
Cbc0038I Pass   5: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass   6: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I Pass   7: suminf.    1.36943 (5) obj. -861.494 iterations 6
Cbc0038I Pass   8: suminf.    0.74608 (3) obj. -861.494 iterations 3
Cbc0038I Pass   9: suminf.    0.72062 (3) obj. -861.494 iterations 2
Cbc0038I Pass  10: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass  11: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I Pass  12: suminf.    1.36943 (5) obj. -861.494 iterations 6
Cbc0038I Pass  13: suminf.    0.74608 (3) obj. -861.494 iterations 3
Cbc0038I Pass  14: suminf.    0.72062 (3) obj. -861.494 iterations 2
Cbc0038I Pass  15: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass  16: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I Pass  17: suminf.    1.36943 (5) obj. -861.494 iterations 6
Cbc0038I Pass  18: suminf.    0.74608 (3) obj. -861.494 iterations 3
Cbc0038I Pass  19: suminf.    0.72062 (3) obj. -861.494 iterations 2
Cbc0038I Pass  20: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass  21: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I Pass  22: suminf.    1.36943 (5) obj. -861.494 iterations 6
Cbc0038I Pass  23: suminf.    0.74608 (3) obj. -861.494 iterations 3
Cbc0038I Pass  24: suminf.    0.72062 (3) obj. -861.494 iterations 2
Cbc0038I Pass  25: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass  26: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I Pass  27: suminf.    1.36943 (5) obj. -861.494 iterations 6
Cbc0038I Pass  28: suminf.    0.74608 (3) obj. -861.494 iterations 3
Cbc0038I Pass  29: suminf.    0.72062 (3) obj. -861.494 iterations 2
Cbc0038I Pass  30: suminf.    1.15362 (5) obj. -861.494 iterations 3
Cbc0038I Pass  31: suminf.    1.14889 (4) obj. -861.494 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 44 columns, reduced to 77 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -714.075 - took 0.09 seconds
Cbc0012I Integer solution of -714.075 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0031I 21 added rows had average density of 35.857143
Cbc0013I At root node, 21 cuts changed objective from -2188.2613 to -1487.2498 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6428 row cuts average 3.7 elements, 1 column cuts (1 active)  in 0.052 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1069 row cuts average 42.6 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 110 row cuts average 6.4 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 146 row cuts average 40.7 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0010I After 5 nodes, 6 on tree, -714.075 best solution, best possible -1487.2498 (0.71 seconds)
Cbc0001I Search completed - best objective -714.0750000000003, took 5674 iterations and 18 nodes (0.75 seconds)
Cbc0032I Strong branching done 354 times (7290 iterations), fathomed 1 nodes and fixed 7 variables
Cbc0035I Maximum depth 8, 20 variables fixed on reduced cost
Total time (CPU seconds):       0.71   (Wallclock seconds):       0.75

