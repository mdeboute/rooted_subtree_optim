Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 503 (-24) rows, 260 (-4) columns and 1494 (-51) elements
Clp1000I sum of infeasibilities 0.000831041 - average 1.65217e-06, 129 fixed columns
Coin0506I Presolve 247 (-256) rows, 131 (-129) columns and 735 (-759) elements
Clp0029I End of values pass after 131 iterations
Clp0014I Perturbing problem by 0.001% of 0.16566957 - largest nonzero change 0 ( 0%) - largest zero change 2.7577903e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.1330272 - largest nonzero change 0 ( 0%) - largest zero change 2.9223017e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 175.936999 - 0 iterations time 0.122, Presolve 0.00, Idiot 0.12

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 503 rows, 260 columns (259 integer (259 of which binary)) and 1494 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 98 integers unsatisfied sum - 11.3294
Cbc0038I Solution found of -0.908628
Cbc0038I Relaxing continuous gives -16.8548
Cbc0038I Before mini branch and bound, 161 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 187 rows 99 columns
Cbc0038I Mini branch and bound improved solution from -16.8548 to -114.698 (0.23 seconds)
Cbc0038I Round again with cutoff of -120.822
Cbc0038I Pass   1: suminf.    5.38323 (67) obj. -120.822 iterations 199
Cbc0038I Pass   2: suminf.    3.15699 (10) obj. -120.822 iterations 90
Cbc0038I Pass   3: suminf.    2.24480 (14) obj. -120.822 iterations 33
Cbc0038I Pass   4: suminf.    2.18013 (10) obj. -120.822 iterations 19
Cbc0038I Pass   5: suminf.    2.75842 (12) obj. -120.822 iterations 46
Cbc0038I Pass   6: suminf.    2.16677 (15) obj. -120.822 iterations 36
Cbc0038I Pass   7: suminf.    2.16677 (15) obj. -120.822 iterations 0
Cbc0038I Pass   8: suminf.    2.30206 (10) obj. -120.822 iterations 25
Cbc0038I Pass   9: suminf.    1.79023 (9) obj. -120.822 iterations 52
Cbc0038I Pass  10: suminf.    2.78571 (9) obj. -120.822 iterations 15
Cbc0038I Pass  11: suminf.    4.75714 (13) obj. -120.822 iterations 36
Cbc0038I Pass  12: suminf.    2.23798 (10) obj. -120.822 iterations 37
Cbc0038I Pass  13: suminf.    1.97610 (7) obj. -120.822 iterations 45
Cbc0038I Pass  14: suminf.    1.37097 (7) obj. -120.822 iterations 31
Cbc0038I Pass  15: suminf.    2.12512 (7) obj. -120.822 iterations 14
Cbc0038I Pass  16: suminf.    1.37097 (7) obj. -120.822 iterations 24
Cbc0038I Pass  17: suminf.    5.10030 (25) obj. -120.822 iterations 54
Cbc0038I Pass  18: suminf.    2.80486 (16) obj. -120.822 iterations 84
Cbc0038I Pass  19: suminf.    2.60622 (10) obj. -120.822 iterations 13
Cbc0038I Pass  20: suminf.    2.60571 (13) obj. -120.822 iterations 6
Cbc0038I Pass  21: suminf.    3.17888 (11) obj. -120.822 iterations 32
Cbc0038I Pass  22: suminf.    2.51529 (11) obj. -120.822 iterations 33
Cbc0038I Pass  23: suminf.    3.13389 (10) obj. -120.822 iterations 22
Cbc0038I Pass  24: suminf.    2.26656 (10) obj. -120.822 iterations 22
Cbc0038I Pass  25: suminf.    2.26656 (10) obj. -120.822 iterations 0
Cbc0038I Pass  26: suminf.    3.13389 (10) obj. -120.822 iterations 15
Cbc0038I Pass  27: suminf.    3.65497 (16) obj. -120.822 iterations 41
Cbc0038I Pass  28: suminf.    1.60106 (8) obj. -120.822 iterations 65
Cbc0038I Pass  29: suminf.    2.39490 (8) obj. -120.822 iterations 11
Cbc0038I Pass  30: suminf.    1.85609 (13) obj. -120.822 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 122 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 262 rows 138 columns - 5 fixed gives 228, 132 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 226 rows 131 columns
Cbc0038I Mini branch and bound improved solution from -114.698 to -116.709 (0.38 seconds)
Cbc0038I Round again with cutoff of -131.845
Cbc0038I Pass  30: suminf.    5.95398 (67) obj. -131.845 iterations 0
Cbc0038I Pass  31: suminf.    3.33682 (14) obj. -131.845 iterations 103
Cbc0038I Pass  32: suminf.    2.73284 (11) obj. -131.845 iterations 7
Cbc0038I Pass  33: suminf.    3.97084 (23) obj. -131.845 iterations 80
Cbc0038I Pass  34: suminf.    3.54972 (22) obj. -131.845 iterations 29
Cbc0038I Pass  35: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  36: suminf.    3.53510 (19) obj. -131.845 iterations 35
Cbc0038I Pass  37: suminf.    3.49475 (16) obj. -131.845 iterations 38
Cbc0038I Pass  38: suminf.    3.84951 (15) obj. -131.845 iterations 28
Cbc0038I Pass  39: suminf.    3.54972 (22) obj. -131.845 iterations 54
Cbc0038I Pass  40: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  41: suminf.    3.58836 (14) obj. -131.845 iterations 49
Cbc0038I Pass  42: suminf.    3.37748 (18) obj. -131.845 iterations 30
Cbc0038I Pass  43: suminf.    3.34848 (14) obj. -131.845 iterations 22
Cbc0038I Pass  44: suminf.    3.73089 (15) obj. -131.845 iterations 40
Cbc0038I Pass  45: suminf.    3.16256 (13) obj. -131.845 iterations 47
Cbc0038I Pass  46: suminf.    3.66879 (14) obj. -131.845 iterations 27
Cbc0038I Pass  47: suminf.    2.57238 (12) obj. -131.845 iterations 36
Cbc0038I Pass  48: suminf.    3.25289 (15) obj. -131.845 iterations 72
Cbc0038I Pass  49: suminf.    3.22243 (18) obj. -131.845 iterations 41
Cbc0038I Pass  50: suminf.    3.65525 (16) obj. -131.845 iterations 29
Cbc0038I Pass  51: suminf.    3.16256 (13) obj. -131.845 iterations 32
Cbc0038I Pass  52: suminf.    3.75704 (13) obj. -131.845 iterations 48
Cbc0038I Pass  53: suminf.    3.31042 (13) obj. -131.845 iterations 33
Cbc0038I Pass  54: suminf.    6.17734 (32) obj. -131.845 iterations 67
Cbc0038I Pass  55: suminf.    3.81053 (18) obj. -131.845 iterations 79
Cbc0038I Pass  56: suminf.    5.57745 (18) obj. -131.845 iterations 46
Cbc0038I Pass  57: suminf.    4.12039 (24) obj. -131.845 iterations 77
Cbc0038I Pass  58: suminf.    4.12039 (24) obj. -131.845 iterations 0
Cbc0038I Pass  59: suminf.    3.14217 (16) obj. -131.845 iterations 46
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 124 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 258 rows 136 columns - 8 fixed gives 210, 128 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 98 rows 60 columns
Cbc0038I Mini branch and bound did not improve solution (0.51 seconds)
Cbc0038I After 0.51 seconds - Feasibility pump exiting with objective of -116.709 - took 0.45 seconds
Cbc0012I Integer solution of -116.70857 found by feasibility pump after 0 iterations and 0 nodes (0.51 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 188 rows 100 columns
Cbc0031I 29 added rows had average density of 186.55172
Cbc0013I At root node, 29 cuts changed objective from -175.937 to -161.0112 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 42184 row cuts average 3.2 elements, 1 column cuts (1 active)  in 1.103 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3114 row cuts average 255.7 elements, 0 column cuts (0 active)  in 0.977 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.210 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 13 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.998 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.071 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 179 row cuts average 252.8 elements, 0 column cuts (0 active)  in 0.484 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -116.70857 best solution, best possible -161.0112 (11.23 seconds)
Cbc0010I After 4 nodes, 5 on tree, -116.70857 best solution, best possible -161.0112 (12.05 seconds)
Cbc0010I After 20 nodes, 11 on tree, -116.70857 best solution, best possible -161.0112 (12.76 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 145 rows 78 columns
Cbc0010I After 54 nodes, 9 on tree, -116.70857 best solution, best possible -161.0112 (13.46 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 146 rows 79 columns
Cbc0010I After 102 nodes, 11 on tree, -116.70857 best solution, best possible -161.0112 (14.20 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 3 rows 6 columns
Cbc0012I Integer solution of -117.31592 found by RINS after 23927 iterations and 200 nodes (14.80 seconds)
Cbc0010I After 215 nodes, 9 on tree, -117.31592 best solution, best possible -161.0112 (14.90 seconds)
Cbc0001I Search completed - best objective -117.31592, took 25823 iterations and 230 nodes (15.03 seconds)
Cbc0032I Strong branching done 1838 times (48718 iterations), fathomed 42 nodes and fixed 99 variables
Cbc0035I Maximum depth 50, 852 variables fixed on reduced cost
Total time (CPU seconds):       14.38   (Wallclock seconds):       15.13

