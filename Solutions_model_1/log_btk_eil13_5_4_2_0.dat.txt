Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 17 (-12) rows, 13 (-2) columns and 52 (-23) elements
Clp1000I sum of infeasibilities 0 - average 0, 1 fixed columns
Coin0506I Presolve 16 (-1) rows, 12 (-1) columns and 48 (-4) elements
Clp0029I End of values pass after 12 iterations
Clp0000I Optimal - objective value 80.222276
Clp0000I Optimal - objective value 80.222276
Coin0511I After Postsolve, objective 80.222276, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 80.222276
Clp0000I Optimal - objective value 80.222276
Clp0000I Optimal - objective value 80.222276
Coin0511I After Postsolve, objective 80.222276, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 80.22227582 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 16 rows, 13 columns (12 integer (12 of which binary)) and 51 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.558%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 9 integers unsatisfied sum - 2.60612
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -32.6072 iterations 8
Cbc0038I Solution found of -32.6072
Cbc0038I Relaxing continuous gives -32.6072
Cbc0038I Rounding solution of -37.8929 is better than previous of -32.6072

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 13 columns, reduced to 13 rows 10 columns
Cbc0038I Mini branch and bound improved solution from -37.8929 to -53.7262 (0.01 seconds)
Cbc0038I Round again with cutoff of -56.3507
Cbc0038I Pass   2: suminf.    0.88698 (3) obj. -56.3507 iterations 3
Cbc0038I Pass   3: suminf.    0.47050 (1) obj. -56.3507 iterations 2
Cbc0038I Pass   4: suminf.    0.38889 (1) obj. -56.3507 iterations 1
Cbc0038I Pass   5: suminf.    0.64493 (2) obj. -56.3507 iterations 2
Cbc0038I Pass   6: suminf.    0.48859 (2) obj. -56.3507 iterations 2
Cbc0038I Pass   7: suminf.    0.34286 (2) obj. -56.3507 iterations 3
Cbc0038I Pass   8: suminf.    0.88698 (3) obj. -56.3507 iterations 6
Cbc0038I Pass   9: suminf.    0.47050 (1) obj. -56.3507 iterations 2
Cbc0038I Pass  10: suminf.    0.38889 (1) obj. -56.3507 iterations 1
Cbc0038I Pass  11: suminf.    0.08633 (3) obj. -56.3507 iterations 5
Cbc0038I Pass  12: suminf.    0.07210 (3) obj. -56.3507 iterations 2
Cbc0038I Pass  13: suminf.    1.70303 (9) obj. -56.3507 iterations 10
Cbc0038I Pass  14: suminf.    0.47059 (1) obj. -58.6751 iterations 8
Cbc0038I Pass  15: suminf.    0.32354 (2) obj. -56.3507 iterations 4
Cbc0038I Pass  16: suminf.    0.41837 (3) obj. -56.3507 iterations 3
Cbc0038I Pass  17: suminf.    0.82353 (2) obj. -56.3507 iterations 1
Cbc0038I Pass  18: suminf.    0.42815 (2) obj. -56.3507 iterations 3
Cbc0038I Pass  19: suminf.    1.13724 (4) obj. -56.3507 iterations 6
Cbc0038I Pass  20: suminf.    0.91312 (4) obj. -56.3507 iterations 2
Cbc0038I Pass  21: suminf.    0.79450 (3) obj. -56.3507 iterations 2
Cbc0038I Pass  22: suminf.    0.79450 (3) obj. -56.3507 iterations 0
Cbc0038I Pass  23: suminf.    1.23983 (3) obj. -56.3507 iterations 2
Cbc0038I Pass  24: suminf.    0.94259 (3) obj. -56.3507 iterations 4
Cbc0038I Pass  25: suminf.    1.29819 (4) obj. -56.3507 iterations 3
Cbc0038I Pass  26: suminf.    0.48782 (3) obj. -56.3507 iterations 5
Cbc0038I Pass  27: suminf.    0.41837 (3) obj. -56.3507 iterations 3
Cbc0038I Pass  28: suminf.    0.82353 (2) obj. -56.3507 iterations 1
Cbc0038I Pass  29: suminf.    0.42815 (2) obj. -56.3507 iterations 3
Cbc0038I Pass  30: suminf.    1.26230 (3) obj. -56.3507 iterations 3
Cbc0038I Pass  31: suminf.    0.60492 (2) obj. -56.3507 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 13 columns, reduced to 16 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -53.7262 - took 0.01 seconds
Cbc0012I Integer solution of -53.7262 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 16 rows 13 columns, reduced to 13 rows 10 columns
Cbc0031I 9 added rows had average density of 12.111111
Cbc0013I At root node, 9 cuts changed objective from -79.970194 to -63.445812 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 581 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 431 row cuts average 12.9 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 17 row cuts average 7.1 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 112 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 243 row cuts average 10.4 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -53.72620000000001, took 1376 iterations and 2 nodes (0.09 seconds)
Cbc0032I Strong branching done 18 times (141 iterations), fathomed 1 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 4 variables fixed on reduced cost
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.09

