Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 132 (-23) rows, 75 (-3) columns and 406 (-47) elements
Clp1000I sum of infeasibilities 4.10017e-05 - average 3.10619e-07, 32 fixed columns
Coin0506I Presolve 71 (-61) rows, 43 (-32) columns and 220 (-186) elements
Clp0029I End of values pass after 43 iterations
Clp0014I Perturbing problem by 0.001% of 0.42659776 - largest nonzero change 0 ( 0%) - largest zero change 2.7683927e-05
Clp0000I Optimal - objective value 353.28081
Clp0000I Optimal - objective value 353.28081
Coin0511I After Postsolve, objective 353.28081, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.24968995 - largest nonzero change 0 ( 0%) - largest zero change 2.9497458e-05
Clp0000I Optimal - objective value 353.28081
Clp0000I Optimal - objective value 353.28081
Clp0000I Optimal - objective value 353.28081
Coin0511I After Postsolve, objective 353.28081, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 353.2808051 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 132 rows, 75 columns (74 integer (74 of which binary)) and 407 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.166%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 25 integers unsatisfied sum - 6.93129
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -86.3524 iterations 35
Cbc0038I Solution found of -86.3524
Cbc0038I Relaxing continuous gives -86.3524
Cbc0038I Rounding solution of -277.364 is better than previous of -86.3524

Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 75 columns, reduced to 44 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -277.364 to -311.306 (0.05 seconds)
Cbc0038I Round again with cutoff of -315.503
Cbc0038I Pass   2: suminf.    1.67750 (9) obj. -315.503 iterations 16
Cbc0038I Pass   3: suminf.    1.53584 (8) obj. -315.503 iterations 1
Cbc0038I Pass   4: suminf.    0.64640 (4) obj. -315.503 iterations 16
Cbc0038I Pass   5: suminf.    0.53035 (3) obj. -315.503 iterations 2
Cbc0038I Pass   6: suminf.    1.57677 (5) obj. -315.503 iterations 6
Cbc0038I Pass   7: suminf.    0.97983 (3) obj. -315.503 iterations 3
Cbc0038I Pass   8: suminf.    1.47509 (7) obj. -315.503 iterations 20
Cbc0038I Pass   9: suminf.    0.52464 (5) obj. -315.503 iterations 10
Cbc0038I Pass  10: suminf.    1.99111 (6) obj. -315.503 iterations 13
Cbc0038I Pass  11: suminf.    0.77527 (3) obj. -315.503 iterations 7
Cbc0038I Pass  12: suminf.    0.73207 (2) obj. -315.503 iterations 2
Cbc0038I Pass  13: suminf.    0.74359 (2) obj. -315.503 iterations 2
Cbc0038I Pass  14: suminf.    1.23215 (5) obj. -315.503 iterations 21
Cbc0038I Pass  15: suminf.    1.04512 (7) obj. -315.503 iterations 6
Cbc0038I Pass  16: suminf.    2.46138 (8) obj. -315.503 iterations 13
Cbc0038I Pass  17: suminf.    2.04256 (6) obj. -315.503 iterations 2
Cbc0038I Pass  18: suminf.    0.83684 (5) obj. -315.503 iterations 6
Cbc0038I Pass  19: suminf.    0.83684 (5) obj. -315.503 iterations 0
Cbc0038I Pass  20: suminf.    0.89606 (4) obj. -315.503 iterations 7
Cbc0038I Pass  21: suminf.    0.89606 (4) obj. -315.503 iterations 0
Cbc0038I Pass  22: suminf.    1.33964 (6) obj. -315.503 iterations 16
Cbc0038I Pass  23: suminf.    1.33964 (6) obj. -315.503 iterations 5
Cbc0038I Pass  24: suminf.    1.52541 (5) obj. -315.503 iterations 24
Cbc0038I Pass  25: suminf.    1.27620 (5) obj. -315.503 iterations 7
Cbc0038I Pass  26: suminf.    0.77527 (5) obj. -315.503 iterations 10
Cbc0038I Pass  27: suminf.    0.63937 (3) obj. -315.503 iterations 2
Cbc0038I Pass  28: suminf.    0.88966 (2) obj. -315.782 iterations 5
Cbc0038I Pass  29: suminf.    0.86765 (3) obj. -315.503 iterations 2
Cbc0038I Pass  30: suminf.    0.94814 (3) obj. -315.503 iterations 5
Cbc0038I Pass  31: suminf.    0.92670 (3) obj. -315.503 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 37 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 75 columns, reduced to 63 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -311.306 to -319.206 (0.09 seconds)
Cbc0038I Round again with cutoff of -326.021
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    1.85558 (9) obj. -326.021 iterations 0
Cbc0038I Pass  32: suminf.    1.71393 (8) obj. -326.021 iterations 1
Cbc0038I Pass  33: suminf.    1.66038 (5) obj. -326.021 iterations 16
Cbc0038I Pass  34: suminf.    1.20727 (5) obj. -326.021 iterations 2
Cbc0038I Pass  35: suminf.    1.20727 (5) obj. -326.021 iterations 0
Cbc0038I Pass  36: suminf.    2.08479 (5) obj. -326.021 iterations 4
Cbc0038I Pass  37: suminf.    1.58881 (6) obj. -326.021 iterations 3
Cbc0038I Pass  38: suminf.    1.27069 (4) obj. -326.021 iterations 3
Cbc0038I Pass  39: suminf.    1.88401 (6) obj. -326.021 iterations 3
Cbc0038I Pass  40: suminf.    1.20727 (5) obj. -326.021 iterations 3
Cbc0038I Pass  41: suminf.    2.08479 (5) obj. -326.021 iterations 4
Cbc0038I Pass  42: suminf.    1.58881 (6) obj. -326.021 iterations 3
Cbc0038I Pass  43: suminf.    1.27069 (4) obj. -326.021 iterations 3
Cbc0038I Pass  44: suminf.    1.88401 (6) obj. -326.021 iterations 3
Cbc0038I Pass  45: suminf.    1.20727 (5) obj. -326.021 iterations 3
Cbc0038I Pass  46: suminf.    2.08479 (5) obj. -326.021 iterations 4
Cbc0038I Pass  47: suminf.    1.58881 (6) obj. -326.021 iterations 3
Cbc0038I Pass  48: suminf.    1.27069 (4) obj. -326.021 iterations 3
Cbc0038I Pass  49: suminf.    1.88401 (6) obj. -326.021 iterations 3
Cbc0038I Pass  50: suminf.    1.20727 (5) obj. -326.021 iterations 3
Cbc0038I Pass  51: suminf.    2.08479 (5) obj. -326.021 iterations 4
Cbc0038I Pass  52: suminf.    1.58881 (6) obj. -326.021 iterations 3
Cbc0038I Pass  53: suminf.    1.27069 (4) obj. -326.021 iterations 3
Cbc0038I Pass  54: suminf.    1.88401 (6) obj. -326.021 iterations 3
Cbc0038I Pass  55: suminf.    1.20727 (5) obj. -326.021 iterations 3
Cbc0038I Pass  56: suminf.    2.08479 (5) obj. -326.021 iterations 4
Cbc0038I Pass  57: suminf.    1.58881 (6) obj. -326.021 iterations 3
Cbc0038I Pass  58: suminf.    1.27069 (4) obj. -326.021 iterations 3
Cbc0038I Pass  59: suminf.    1.88401 (6) obj. -326.021 iterations 3
Cbc0038I Pass  60: suminf.    1.20727 (5) obj. -326.021 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 45 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 75 columns, reduced to 50 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.12 seconds)
Cbc0038I After 0.12 seconds - Feasibility pump exiting with objective of -319.206 - took 0.10 seconds
Cbc0012I Integer solution of -319.2059 found by feasibility pump after 0 iterations and 0 nodes (0.12 seconds)
Cbc0038I Full problem 132 rows 75 columns, reduced to 46 rows 28 columns
Cbc0031I 16 added rows had average density of 58.1875
Cbc0013I At root node, 16 cuts changed objective from -353.28081 to -337.94914 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4325 row cuts average 3.3 elements, 3 column cuts (3 active)  in 0.055 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 774 row cuts average 70.6 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 137 row cuts average 70.4 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0038I Full problem 132 rows 75 columns, reduced to 17 rows 14 columns
Cbc0016I Integer solution of -319.843 found by strong branching after 4251 iterations and 70 nodes (0.63 seconds)
Cbc0038I Full problem 132 rows 75 columns, reduced to 6 rows 8 columns
Cbc0010I After 110 nodes, 11 on tree, -319.843 best solution, best possible -337.9491 (0.68 seconds)
Cbc0004I Integer solution of -320.3561 found after 5190 iterations and 145 nodes (0.71 seconds)
Cbc0001I Search completed - best objective -320.3561, took 5820 iterations and 198 nodes (0.76 seconds)
Cbc0032I Strong branching done 990 times (7064 iterations), fathomed 67 nodes and fixed 89 variables
Cbc0035I Maximum depth 14, 627 variables fixed on reduced cost
Total time (CPU seconds):       0.72   (Wallclock seconds):       0.77

