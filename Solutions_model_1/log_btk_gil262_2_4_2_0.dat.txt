Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 501 (-26) rows, 262 (-2) columns and 1494 (-51) elements
Clp1000I sum of infeasibilities 4.81381e-05 - average 9.60841e-08, 107 fixed columns
Coin0506I Presolve 285 (-216) rows, 152 (-110) columns and 847 (-647) elements
Clp0029I End of values pass after 152 iterations
Clp0014I Perturbing problem by 0.001% of 0.16163596 - largest nonzero change 0 ( 0%) - largest zero change 2.9339956e-05
Clp0000I Optimal - objective value 165.37356
Clp0000I Optimal - objective value 165.37356
Coin0511I After Postsolve, objective 165.37356, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13566578 - largest nonzero change 0 ( 0%) - largest zero change 2.9683099e-05
Clp0000I Optimal - objective value 165.37356
Clp0000I Optimal - objective value 165.37356
Clp0000I Optimal - objective value 165.37356
Coin0511I After Postsolve, objective 165.37356, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 165.3735597 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.06

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 501 rows, 262 columns (261 integer (261 of which binary)) and 1494 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.363%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 95 integers unsatisfied sum - 12.1466
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 2.83243 iterations 241
Cbc0038I Solution found of 2.83243
Cbc0038I Relaxing continuous gives 2.83243
Cbc0038I Rounding solution of -16.5668 is better than previous of 2.83243

Cbc0038I Before mini branch and bound, 166 integers at bound fixed and 0 continuous
Cbc0038I Full problem 501 rows 262 columns, reduced to 178 rows 96 columns
Cbc0038I Mini branch and bound improved solution from -16.5668 to -71.0505 (0.08 seconds)
Cbc0038I Round again with cutoff of -80.4829
Cbc0038I Pass   2: suminf.    2.27644 (15) obj. -80.4829 iterations 54
Cbc0038I Pass   3: suminf.    1.61936 (9) obj. -80.4829 iterations 48
Cbc0038I Pass   4: suminf.    1.38487 (4) obj. -80.4829 iterations 34
Cbc0038I Pass   5: suminf.    1.06182 (3) obj. -80.4829 iterations 8
Cbc0038I Pass   6: suminf.    1.06182 (3) obj. -80.4829 iterations 0
Cbc0038I Pass   7: suminf.    1.28118 (3) obj. -80.4829 iterations 9
Cbc0038I Pass   8: suminf.    0.81981 (3) obj. -80.4829 iterations 12
Cbc0038I Pass   9: suminf.    0.47118 (2) obj. -80.4829 iterations 18
Cbc0038I Pass  10: suminf.    0.45205 (3) obj. -80.4829 iterations 1
Cbc0038I Pass  11: suminf.    1.00500 (3) obj. -80.4829 iterations 17
Cbc0038I Pass  12: suminf.    0.80437 (2) obj. -80.4829 iterations 10
Cbc0038I Pass  13: suminf.    0.21570 (2) obj. -80.4829 iterations 7
Cbc0038I Pass  14: suminf.    3.19007 (10) obj. -80.4829 iterations 66
Cbc0038I Pass  15: suminf.    1.98693 (6) obj. -80.4829 iterations 48
Cbc0038I Pass  16: suminf.    0.97408 (4) obj. -80.4829 iterations 14
Cbc0038I Pass  17: suminf.    0.66734 (2) obj. -80.4829 iterations 18
Cbc0038I Pass  18: suminf.    0.66734 (2) obj. -80.4829 iterations 0
Cbc0038I Pass  19: suminf.    1.14003 (3) obj. -80.4829 iterations 12
Cbc0038I Pass  20: suminf.    0.37674 (2) obj. -80.4829 iterations 7
Cbc0038I Pass  21: suminf.    0.66734 (2) obj. -80.4829 iterations 6
Cbc0038I Pass  22: suminf.    3.87028 (17) obj. -80.4829 iterations 46
Cbc0038I Pass  23: suminf.    2.36979 (10) obj. -80.4829 iterations 47
Cbc0038I Pass  24: suminf.    1.20879 (3) obj. -80.4829 iterations 21
Cbc0038I Pass  25: suminf.    0.88443 (3) obj. -80.4829 iterations 15
Cbc0038I Pass  26: suminf.    0.21330 (2) obj. -80.4829 iterations 12
Cbc0038I Pass  27: suminf.    0.33936 (1) obj. -80.4829 iterations 12
Cbc0038I Pass  28: suminf.    0.33936 (1) obj. -80.4829 iterations 0
Cbc0038I Pass  29: suminf.    0.59333 (2) obj. -80.4829 iterations 11
Cbc0038I Pass  30: suminf.    3.34989 (16) obj. -80.4829 iterations 31
Cbc0038I Pass  31: suminf.    2.30570 (8) obj. -80.4829 iterations 28
Cbc0038I Rounding solution of -87.594 is better than previous of -71.0505

Cbc0038I Before mini branch and bound, 141 integers at bound fixed and 0 continuous
Cbc0038I Full problem 501 rows 262 columns, reduced to 222 rows 121 columns
Cbc0038I Mini branch and bound improved solution from -87.594 to -91.763 (0.17 seconds)
Cbc0038I Round again with cutoff of -106.485
Cbc0038I Pass  31: suminf.    3.57195 (24) obj. -106.485 iterations 8
Cbc0038I Pass  32: suminf.    2.82356 (14) obj. -106.485 iterations 54
Cbc0038I Pass  33: suminf.    2.81625 (9) obj. -106.485 iterations 45
Cbc0038I Pass  34: suminf.    1.66980 (8) obj. -106.485 iterations 20
Cbc0038I Pass  35: suminf.    1.32034 (7) obj. -106.485 iterations 29
Cbc0038I Pass  36: suminf.    1.70437 (5) obj. -106.485 iterations 73
Cbc0038I Pass  37: suminf.    0.74911 (4) obj. -106.485 iterations 20
Cbc0038I Pass  38: suminf.    0.74740 (6) obj. -106.485 iterations 8
Cbc0038I Pass  39: suminf.    1.03592 (4) obj. -106.485 iterations 29
Cbc0038I Pass  40: suminf.    0.66196 (4) obj. -106.485 iterations 11
Cbc0038I Pass  41: suminf.    0.51174 (3) obj. -106.485 iterations 13
Cbc0038I Pass  42: suminf.    0.43633 (3) obj. -106.485 iterations 9
Cbc0038I Pass  43: suminf.    0.90617 (5) obj. -106.485 iterations 49
Cbc0038I Pass  44: suminf.    0.86861 (4) obj. -106.485 iterations 11
Cbc0038I Pass  45: suminf.    2.18474 (6) obj. -106.485 iterations 24
Cbc0038I Pass  46: suminf.    0.85702 (6) obj. -106.485 iterations 18
Cbc0038I Pass  47: suminf.    0.85702 (6) obj. -106.485 iterations 0
Cbc0038I Pass  48: suminf.    1.88164 (6) obj. -106.485 iterations 19
Cbc0038I Pass  49: suminf.    1.18428 (5) obj. -106.485 iterations 13
Cbc0038I Pass  50: suminf.    1.56373 (5) obj. -106.485 iterations 26
Cbc0038I Pass  51: suminf.    0.94133 (6) obj. -106.485 iterations 13
Cbc0038I Pass  52: suminf.    5.30411 (16) obj. -106.485 iterations 56
Cbc0038I Pass  53: suminf.    2.82179 (12) obj. -106.485 iterations 34
Cbc0038I Pass  54: suminf.    2.32294 (7) obj. -106.485 iterations 29
Cbc0038I Pass  55: suminf.    2.07304 (6) obj. -106.485 iterations 11
Cbc0038I Pass  56: suminf.    1.63532 (5) obj. -106.485 iterations 3
Cbc0038I Pass  57: suminf.    1.38686 (4) obj. -106.485 iterations 20
Cbc0038I Pass  58: suminf.    0.67510 (3) obj. -106.485 iterations 29
Cbc0038I Pass  59: suminf.    0.67542 (4) obj. -106.485 iterations 9
Cbc0038I Pass  60: suminf.    0.61330 (5) obj. -106.485 iterations 10
Cbc0038I Rounding solution of -101.071 is better than previous of -91.763

Cbc0038I Before mini branch and bound, 146 integers at bound fixed and 0 continuous
Cbc0038I Full problem 501 rows 262 columns, reduced to 212 rows 116 columns
Cbc0038I Mini branch and bound improved solution from -101.071 to -103.782 (0.28 seconds)
Cbc0038I Round again with cutoff of -124.152
Cbc0038I Pass  60: suminf.    4.04730 (24) obj. -124.152 iterations 7
Cbc0038I Pass  61: suminf.    3.69979 (20) obj. -124.152 iterations 26
Cbc0038I Pass  62: suminf.    3.36442 (11) obj. -124.152 iterations 39
Cbc0038I Pass  63: suminf.    2.78418 (10) obj. -124.152 iterations 23
Cbc0038I Pass  64: suminf.    2.68204 (13) obj. -124.152 iterations 11
Cbc0038I Pass  65: suminf.    3.05875 (10) obj. -124.152 iterations 27
Cbc0038I Pass  66: suminf.    2.56921 (11) obj. -124.152 iterations 14
Cbc0038I Pass  67: suminf.    2.70070 (10) obj. -124.152 iterations 20
Cbc0038I Pass  68: suminf.    2.14203 (7) obj. -124.152 iterations 19
Cbc0038I Pass  69: suminf.    2.06188 (8) obj. -124.152 iterations 7
Cbc0038I Pass  70: suminf.    2.63780 (10) obj. -124.152 iterations 32
Cbc0038I Pass  71: suminf.    2.56921 (11) obj. -124.152 iterations 8
Cbc0038I Pass  72: suminf.    2.70070 (10) obj. -124.152 iterations 20
Cbc0038I Pass  73: suminf.    2.14203 (7) obj. -124.152 iterations 19
Cbc0038I Pass  74: suminf.    2.06188 (8) obj. -124.152 iterations 7
Cbc0038I Pass  75: suminf.    2.63780 (10) obj. -124.152 iterations 32
Cbc0038I Pass  76: suminf.    2.56921 (11) obj. -124.152 iterations 8
Cbc0038I Pass  77: suminf.    2.70070 (10) obj. -124.152 iterations 20
Cbc0038I Pass  78: suminf.    2.14203 (7) obj. -124.152 iterations 19
Cbc0038I Pass  79: suminf.    2.06188 (8) obj. -124.152 iterations 7
Cbc0038I Pass  80: suminf.    2.63780 (10) obj. -124.152 iterations 32
Cbc0038I Pass  81: suminf.    2.56921 (11) obj. -124.152 iterations 8
Cbc0038I Pass  82: suminf.    2.70070 (10) obj. -124.152 iterations 20
Cbc0038I Pass  83: suminf.    2.14203 (7) obj. -124.152 iterations 19
Cbc0038I Pass  84: suminf.    2.06188 (8) obj. -124.152 iterations 7
Cbc0038I Pass  85: suminf.    2.63780 (10) obj. -124.152 iterations 32
Cbc0038I Pass  86: suminf.    2.56921 (11) obj. -124.152 iterations 8
Cbc0038I Pass  87: suminf.    2.70070 (10) obj. -124.152 iterations 20
Cbc0038I Pass  88: suminf.    2.14203 (7) obj. -124.152 iterations 19
Cbc0038I Pass  89: suminf.    2.06188 (8) obj. -124.152 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 149 integers at bound fixed and 0 continuous
Cbc0038I Full problem 501 rows 262 columns, reduced to 207 rows 113 columns
Cbc0038I Mini branch and bound did not improve solution (0.38 seconds)
Cbc0038I After 0.38 seconds - Feasibility pump exiting with objective of -103.782 - took 0.35 seconds
Cbc0012I Integer solution of -103.78245 found by feasibility pump after 0 iterations and 0 nodes (0.38 seconds)
Cbc0038I Full problem 501 rows 262 columns, reduced to 181 rows 98 columns
Cbc0031I 46 added rows had average density of 163.63043
Cbc0013I At root node, 46 cuts changed objective from -165.37356 to -153.8546 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 50488 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.559 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3566 row cuts average 257.0 elements, 0 column cuts (0 active)  in 0.603 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.110 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 46 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.788 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 246 row cuts average 252.8 elements, 0 column cuts (0 active)  in 0.260 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -103.78245 best solution, best possible -153.8546 (7.08 seconds)
Cbc0010I After 10 nodes, 9 on tree, -103.78245 best solution, best possible -153.8546 (7.79 seconds)
Cbc0038I Full problem 501 rows 262 columns, reduced to 216 rows 116 columns
Cbc0010I After 46 nodes, 11 on tree, -103.78245 best solution, best possible -153.8546 (8.50 seconds)
Cbc0038I Full problem 501 rows 262 columns, reduced to 73 rows 46 columns
Cbc0010I After 142 nodes, 16 on tree, -103.78245 best solution, best possible -153.8546 (9.20 seconds)
Cbc0038I Full problem 501 rows 262 columns, reduced to 71 rows 45 columns
Cbc0012I Integer solution of -104.42544 found by RINS after 32719 iterations and 200 nodes (9.65 seconds)
Cbc0016I Integer solution of -104.79353 found by strong branching after 34688 iterations and 278 nodes (9.83 seconds)
Cbc0038I Full problem 501 rows 262 columns, reduced to 7 rows 7 columns
Cbc0010I After 300 nodes, 18 on tree, -104.79353 best solution, best possible -153.8546 (9.91 seconds)
Cbc0012I Integer solution of -104.92149 found by rounding after 37807 iterations and 403 nodes (10.17 seconds)
Cbc0001I Search completed - best objective -104.92149, took 39774 iterations and 468 nodes (10.31 seconds)
Cbc0032I Strong branching done 3848 times (92641 iterations), fathomed 86 nodes and fixed 268 variables
Cbc0035I Maximum depth 81, 1542 variables fixed on reduced cost
Total time (CPU seconds):       10.07   (Wallclock seconds):       10.38

