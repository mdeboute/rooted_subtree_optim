Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 27 (-20) rows, 16 (-8) columns and 79 (-50) elements
Clp0000I Optimal - objective value 125.49741
Coin0511I After Postsolve, objective 125.49741, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 125.4974081 - 13 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 27 rows, 16 columns (15 integer (15 of which binary)) and 80 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.114%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 10 integers unsatisfied sum - 2.50255
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -76 iterations 5
Cbc0038I Solution found of -76
Cbc0038I Relaxing continuous gives -76
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 27 rows 16 columns, reduced to 18 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -76 to -78 (0.00 seconds)
Cbc0038I Round again with cutoff of -83.6497
Cbc0038I Pass   2: suminf.    0.28332 (3) obj. -83.6497 iterations 3
Cbc0038I Pass   3: suminf.    0.14286 (1) obj. -83.6497 iterations 5
Cbc0038I Pass   4: suminf.    0.12282 (1) obj. -83.6497 iterations 1
Cbc0038I Pass   5: suminf.    0.12645 (2) obj. -83.6497 iterations 2
Cbc0038I Pass   6: suminf.    0.19048 (1) obj. -83.6497 iterations 2
Cbc0038I Pass   7: suminf.    0.27499 (1) obj. -83.6497 iterations 1
Cbc0038I Pass   8: suminf.    1.01470 (3) obj. -83.6497 iterations 5
Cbc0038I Pass   9: suminf.    0.44150 (2) obj. -83.6497 iterations 6
Cbc0038I Pass  10: suminf.    0.55713 (2) obj. -83.6497 iterations 1
Cbc0038I Pass  11: suminf.    0.31438 (4) obj. -83.6497 iterations 3
Cbc0038I Pass  12: suminf.    0.24247 (3) obj. -83.6497 iterations 6
Cbc0038I Pass  13: suminf.    0.12645 (2) obj. -83.6497 iterations 1
Cbc0038I Pass  14: suminf.    0.19048 (1) obj. -83.6497 iterations 2
Cbc0038I Pass  15: suminf.    0.27499 (1) obj. -83.6497 iterations 1
Cbc0038I Pass  16: suminf.    0.55272 (3) obj. -83.6497 iterations 4
Cbc0038I Pass  17: suminf.    0.55272 (3) obj. -83.6497 iterations 0
Cbc0038I Pass  18: suminf.    0.18020 (1) obj. -83.6497 iterations 5
Cbc0038I Pass  19: suminf.    0.18020 (1) obj. -83.6497 iterations 0
Cbc0038I Pass  20: suminf.    0.39727 (2) obj. -83.6497 iterations 2
Cbc0038I Pass  21: suminf.    0.39727 (2) obj. -83.6497 iterations 0
Cbc0038I Pass  22: suminf.    0.39727 (2) obj. -83.6497 iterations 1
Cbc0038I Pass  23: suminf.    0.39727 (2) obj. -83.6497 iterations 1
Cbc0038I Pass  24: suminf.    1.25806 (3) obj. -83.6497 iterations 6
Cbc0038I Pass  25: suminf.    0.64910 (3) obj. -83.6497 iterations 5
Cbc0038I Pass  26: suminf.    0.18020 (1) obj. -83.6497 iterations 3
Cbc0038I Pass  27: suminf.    0.18020 (1) obj. -83.6497 iterations 0
Cbc0038I Pass  28: suminf.    2.02825 (7) obj. -83.6497 iterations 13
Cbc0038I Pass  29: suminf.    1.69789 (6) obj. -83.6497 iterations 4
Cbc0038I Pass  30: suminf.    0.79102 (4) obj. -83.6497 iterations 3
Cbc0038I Pass  31: suminf.    0.62440 (3) obj. -83.6497 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 27 rows 16 columns, reduced to 22 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -78 to -79 (0.01 seconds)
Cbc0038I Round again with cutoff of -92.0192
Cbc0038I Pass  31: suminf.    0.59330 (3) obj. -92.0192 iterations 0
Cbc0038I Pass  32: suminf.    0.32103 (2) obj. -92.0192 iterations 4
Cbc0038I Pass  33: suminf.    0.32103 (2) obj. -92.0192 iterations 0
Cbc0038I Pass  34: suminf.    0.19048 (1) obj. -92.0192 iterations 1
Cbc0038I Pass  35: suminf.    0.34824 (1) obj. -92.0192 iterations 1
Cbc0038I Pass  36: suminf.    0.50685 (4) obj. -92.0192 iterations 4
Cbc0038I Pass  37: suminf.    0.35457 (1) obj. -92.0192 iterations 2
Cbc0038I Pass  38: suminf.    0.42457 (2) obj. -92.0192 iterations 2
Cbc0038I Pass  39: suminf.    0.35457 (1) obj. -92.0192 iterations 2
Cbc0038I Pass  40: suminf.    0.83411 (2) obj. -92.0192 iterations 5
Cbc0038I Pass  41: suminf.    0.83411 (2) obj. -92.0192 iterations 0
Cbc0038I Pass  42: suminf.    0.34824 (1) obj. -92.0192 iterations 3
Cbc0038I Pass  43: suminf.    0.19048 (1) obj. -92.0192 iterations 1
Cbc0038I Pass  44: suminf.    0.69649 (2) obj. -92.0192 iterations 2
Cbc0038I Pass  45: suminf.    0.59330 (3) obj. -92.0192 iterations 1
Cbc0038I Pass  46: suminf.    0.32103 (2) obj. -92.0192 iterations 4
Cbc0038I Pass  47: suminf.    0.32103 (2) obj. -92.0192 iterations 0
Cbc0038I Pass  48: suminf.    2.75080 (7) obj. -92.0192 iterations 5
Cbc0038I Pass  49: suminf.    0.42509 (3) obj. -92.0192 iterations 2
Cbc0038I Pass  50: suminf.    0.42509 (3) obj. -92.0192 iterations 0
Cbc0038I Pass  51: suminf.    0.19048 (1) obj. -92.0192 iterations 4
Cbc0038I Pass  52: suminf.    0.34824 (1) obj. -92.0192 iterations 1
Cbc0038I Pass  53: suminf.    0.72928 (2) obj. -92.0192 iterations 1
Cbc0038I Pass  54: suminf.    1.35724 (6) obj. -92.0192 iterations 3
Cbc0038I Pass  55: suminf.    0.86285 (5) obj. -92.0192 iterations 5
Cbc0038I Pass  56: suminf.    0.35867 (3) obj. -92.0192 iterations 5
Cbc0038I Pass  57: suminf.    0.32278 (2) obj. -92.0192 iterations 1
Cbc0038I Pass  58: suminf.    0.19048 (1) obj. -92.0192 iterations 2
Cbc0038I Pass  59: suminf.    0.45694 (1) obj. -92.0192 iterations 1
Cbc0038I Pass  60: suminf.    2.03231 (5) obj. -92.0192 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 27 rows 16 columns, reduced to 27 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -79 - took 0.01 seconds
Cbc0012I Integer solution of -79 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 27 rows 16 columns, reduced to 20 rows 12 columns
Cbc0031I 7 added rows had average density of 12.142857
Cbc0013I At root node, 7 cuts changed objective from -125.49741 to -91.808348 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 324 row cuts average 3.3 elements, 2 column cuts (2 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 289 row cuts average 14.4 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 11 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 51 row cuts average 10.1 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 113 row cuts average 12.7 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 15.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -79, took 1083 iterations and 2 nodes (0.11 seconds)
Cbc0032I Strong branching done 12 times (96 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.11

