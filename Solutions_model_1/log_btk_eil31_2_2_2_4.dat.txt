Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 48 (-17) rows, 27 (-6) columns and 143 (-40) elements
Clp1000I sum of infeasibilities 2.03045e-05 - average 4.23011e-07, 4 fixed columns
Coin0506I Presolve 40 (-8) rows, 23 (-4) columns and 119 (-24) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 92.13384
Clp0000I Optimal - objective value 92.13384
Coin0511I After Postsolve, objective 92.13384, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 92.13384
Clp0000I Optimal - objective value 92.13384
Clp0000I Optimal - objective value 92.13384
Coin0511I After Postsolve, objective 92.13384, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 92.13383996 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0004I processed model has 44 rows, 27 columns (26 integer (26 of which binary)) and 141 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.599%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 5.41915
Cbc0038I Solution found of -2.50058
Cbc0038I Relaxing continuous gives -11.9458
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 44 rows 27 columns, reduced to 33 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -11.9458 to -58.7542 (0.02 seconds)
Cbc0038I Round again with cutoff of -61.3037
Cbc0038I Pass   1: suminf.    2.01619 (8) obj. -61.3037 iterations 30
Cbc0038I Pass   2: suminf.    0.77055 (4) obj. -61.3037 iterations 11
Cbc0038I Pass   3: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass   4: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass   5: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I Pass   6: suminf.    1.03569 (3) obj. -61.3037 iterations 5
Cbc0038I Pass   7: suminf.    0.73235 (3) obj. -61.3037 iterations 2
Cbc0038I Pass   8: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass   9: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass  10: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I Pass  11: suminf.    1.03569 (3) obj. -61.3037 iterations 5
Cbc0038I Pass  12: suminf.    0.73235 (3) obj. -61.3037 iterations 2
Cbc0038I Pass  13: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass  14: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass  15: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I Pass  16: suminf.    1.03569 (3) obj. -61.3037 iterations 5
Cbc0038I Pass  17: suminf.    0.73235 (3) obj. -61.3037 iterations 2
Cbc0038I Pass  18: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass  19: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass  20: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I Pass  21: suminf.    1.03569 (3) obj. -61.3037 iterations 5
Cbc0038I Pass  22: suminf.    0.73235 (3) obj. -61.3037 iterations 2
Cbc0038I Pass  23: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass  24: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass  25: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I Pass  26: suminf.    1.03569 (3) obj. -61.3037 iterations 5
Cbc0038I Pass  27: suminf.    0.73235 (3) obj. -61.3037 iterations 2
Cbc0038I Pass  28: suminf.    0.71549 (3) obj. -61.3037 iterations 1
Cbc0038I Pass  29: suminf.    0.76624 (3) obj. -61.3037 iterations 4
Cbc0038I Pass  30: suminf.    0.76624 (3) obj. -61.3037 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 44 rows 27 columns, reduced to 36 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -58.7542 - took 0.03 seconds
Cbc0012I Integer solution of -58.75416 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 44 rows 27 columns, reduced to 33 rows 19 columns
Cbc0031I 12 added rows had average density of 18.25
Cbc0013I At root node, 12 cuts changed objective from -84.248703 to -70.388748 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1777 row cuts average 3.4 elements, 3 column cuts (3 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 908 row cuts average 25.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 4 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 86 row cuts average 24.5 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -58.75416, took 3015 iterations and 10 nodes (0.25 seconds)
Cbc0032I Strong branching done 120 times (1155 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 4, 22 variables fixed on reduced cost
Total time (CPU seconds):       0.24   (Wallclock seconds):       0.25

