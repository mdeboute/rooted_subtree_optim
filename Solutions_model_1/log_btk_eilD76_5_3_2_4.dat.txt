Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 127 (-28) rows, 73 (-5) columns and 392 (-61) elements
Clp1000I sum of infeasibilities 1.2065e-05 - average 9.50001e-08, 7 fixed columns
Coin0506I Presolve 113 (-14) rows, 66 (-7) columns and 350 (-42) elements
Clp0029I End of values pass after 66 iterations
Clp0014I Perturbing problem by 0.001% of 2.7902615 - largest nonzero change 0 ( 0%) - largest zero change 2.4903109e-05
Clp0000I Optimal - objective value 57.134949
Clp0000I Optimal - objective value 57.134949
Coin0511I After Postsolve, objective 57.134949, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 57.134949
Clp0000I Optimal - objective value 57.134949
Clp0000I Optimal - objective value 57.134949
Coin0511I After Postsolve, objective 57.134949, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 57.13494908 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 127 rows, 73 columns (72 integer (72 of which binary)) and 392 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.165%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 40 integers unsatisfied sum - 11.5304
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.01673 iterations 58
Cbc0038I Solution found of 6.01673
Cbc0038I Relaxing continuous gives 6.01673
Cbc0038I Rounding solution of -19.2302 is better than previous of 6.01673

Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 73 columns, reduced to 70 rows 41 columns
Cbc0038I Mini branch and bound improved solution from -19.2302 to -22.6688 (0.05 seconds)
Cbc0038I Round again with cutoff of -26.1155
Cbc0038I Pass   2: suminf.    3.69369 (14) obj. -26.1155 iterations 18
Cbc0038I Pass   3: suminf.    2.70091 (8) obj. -26.1155 iterations 11
Cbc0038I Pass   4: suminf.    0.55857 (5) obj. -26.1155 iterations 15
Cbc0038I Pass   5: suminf.    1.48631 (4) obj. -26.1155 iterations 13
Cbc0038I Pass   6: suminf.    0.53986 (5) obj. -26.1155 iterations 7
Cbc0038I Pass   7: suminf.    0.53645 (11) obj. -26.1155 iterations 5
Cbc0038I Pass   8: suminf.    1.62076 (6) obj. -26.1155 iterations 18
Cbc0038I Pass   9: suminf.    1.28425 (6) obj. -26.1155 iterations 1
Cbc0038I Pass  10: suminf.    1.33715 (5) obj. -26.1155 iterations 11
Cbc0038I Pass  11: suminf.    0.66182 (3) obj. -26.1155 iterations 2
Cbc0038I Pass  12: suminf.    0.44504 (3) obj. -26.1155 iterations 3
Cbc0038I Pass  13: suminf.    1.33715 (5) obj. -26.1155 iterations 5
Cbc0038I Pass  14: suminf.    2.49284 (9) obj. -26.1155 iterations 21
Cbc0038I Pass  15: suminf.    0.79734 (4) obj. -26.1155 iterations 10
Cbc0038I Pass  16: suminf.    0.79734 (4) obj. -26.1155 iterations 0
Cbc0038I Pass  17: suminf.    0.75172 (3) obj. -26.1155 iterations 5
Cbc0038I Pass  18: suminf.    0.71792 (3) obj. -26.1155 iterations 2
Cbc0038I Pass  19: suminf.    0.82131 (3) obj. -26.1155 iterations 3
Cbc0038I Pass  20: suminf.    0.78501 (3) obj. -26.1155 iterations 2
Cbc0038I Pass  21: suminf.    1.41996 (7) obj. -26.1155 iterations 15
Cbc0038I Pass  22: suminf.    1.09334 (6) obj. -26.1155 iterations 2
Cbc0038I Pass  23: suminf.    0.74670 (5) obj. -26.1155 iterations 3
Cbc0038I Pass  24: suminf.    1.85407 (5) obj. -26.1155 iterations 10
Cbc0038I Pass  25: suminf.    0.81775 (5) obj. -26.1155 iterations 2
Cbc0038I Pass  26: suminf.    0.79471 (5) obj. -26.1155 iterations 2
Cbc0038I Pass  27: suminf.    1.56027 (4) obj. -26.1155 iterations 6
Cbc0038I Pass  28: suminf.    1.56027 (4) obj. -26.1155 iterations 1
Cbc0038I Pass  29: suminf.    1.58094 (4) obj. -26.1155 iterations 4
Cbc0038I Pass  30: suminf.    1.56027 (4) obj. -26.1155 iterations 2
Cbc0038I Pass  31: suminf.    1.02192 (5) obj. -26.1155 iterations 37
Cbc0038I Rounding solution of -24.6459 is better than previous of -22.6688

Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 73 columns, reduced to 89 rows 52 columns
Cbc0038I Mini branch and bound improved solution from -24.6459 to -26.9848 (0.11 seconds)
Cbc0038I Round again with cutoff of -33.0149
Cbc0038I Pass  31: suminf.    3.97726 (14) obj. -33.0149 iterations 1
Cbc0038I Pass  32: suminf.    3.79779 (12) obj. -33.0149 iterations 5
Cbc0038I Pass  33: suminf.    1.61424 (7) obj. -33.0149 iterations 15
Cbc0038I Pass  34: suminf.    1.61424 (7) obj. -33.0149 iterations 0
Cbc0038I Pass  35: suminf.    2.69033 (8) obj. -33.0149 iterations 12
Cbc0038I Pass  36: suminf.    2.49983 (7) obj. -33.0149 iterations 5
Cbc0038I Pass  37: suminf.    2.29635 (7) obj. -33.0149 iterations 4
Cbc0038I Pass  38: suminf.    2.29635 (7) obj. -33.0149 iterations 0
Cbc0038I Pass  39: suminf.    2.49983 (7) obj. -33.0149 iterations 5
Cbc0038I Pass  40: suminf.    3.50759 (10) obj. -33.0149 iterations 17
Cbc0038I Pass  41: suminf.    2.37873 (10) obj. -33.0149 iterations 8
Cbc0038I Pass  42: suminf.    2.38607 (10) obj. -33.0149 iterations 2
Cbc0038I Pass  43: suminf.    2.68725 (8) obj. -33.0149 iterations 12
Cbc0038I Pass  44: suminf.    1.37181 (7) obj. -33.0149 iterations 4
Cbc0038I Pass  45: suminf.    1.14951 (6) obj. -33.0149 iterations 4
Cbc0038I Pass  46: suminf.    2.50278 (7) obj. -33.0149 iterations 9
Cbc0038I Pass  47: suminf.    1.44588 (8) obj. -33.0149 iterations 3
Cbc0038I Pass  48: suminf.    4.40145 (11) obj. -33.0149 iterations 12
Cbc0038I Pass  49: suminf.    2.12740 (9) obj. -33.0149 iterations 4
Cbc0038I Pass  50: suminf.    1.40133 (6) obj. -33.0149 iterations 7
Cbc0038I Pass  51: suminf.    3.30895 (9) obj. -33.0149 iterations 7
Cbc0038I Pass  52: suminf.    1.46481 (6) obj. -33.0149 iterations 5
Cbc0038I Pass  53: suminf.    2.96520 (9) obj. -33.0149 iterations 15
Cbc0038I Pass  54: suminf.    1.61611 (6) obj. -33.0149 iterations 10
Cbc0038I Pass  55: suminf.    2.13934 (5) obj. -33.0149 iterations 15
Cbc0038I Pass  56: suminf.    2.13934 (5) obj. -33.0149 iterations 0
Cbc0038I Pass  57: suminf.    1.43765 (5) obj. -33.0149 iterations 6
Cbc0038I Pass  58: suminf.    1.35688 (6) obj. -33.0149 iterations 3
Cbc0038I Pass  59: suminf.    2.83560 (7) obj. -33.0149 iterations 7
Cbc0038I Pass  60: suminf.    1.40316 (7) obj. -33.0149 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 73 columns, reduced to 86 rows 50 columns
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of -26.9848 - took 0.16 seconds
Cbc0012I Integer solution of -26.9848 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0038I Full problem 127 rows 73 columns, reduced to 72 rows 43 columns
Cbc0031I 28 added rows had average density of 35.5
Cbc0013I At root node, 28 cuts changed objective from -57.134949 to -48.636364 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 17879 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.093 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2336 row cuts average 72.9 elements, 0 column cuts (0 active)  in 0.089 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.074 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 175 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -26.9848 best solution, best possible -48.636364 (1.10 seconds)
Cbc0012I Integer solution of -27.27005 found by rounding after 9890 iterations and 29 nodes (1.20 seconds)
Cbc0004I Integer solution of -27.53904 found after 9953 iterations and 42 nodes (1.20 seconds)
Cbc0038I Full problem 127 rows 73 columns, reduced to 8 rows 11 columns
Cbc0012I Integer solution of -28.87065 found by RINS after 9985 iterations and 47 nodes (1.21 seconds)
Cbc0012I Integer solution of -29.0227 found by rounding after 9999 iterations and 51 nodes (1.22 seconds)
Cbc0004I Integer solution of -29.04315 found after 10042 iterations and 56 nodes (1.22 seconds)
Cbc0004I Integer solution of -29.3988 found after 10050 iterations and 58 nodes (1.22 seconds)
Cbc0038I Full problem 127 rows 73 columns, reduced to 30 rows 23 columns
Cbc0001I Search completed - best objective -29.39879999999999, took 12109 iterations and 116 nodes (1.44 seconds)
Cbc0032I Strong branching done 1270 times (16736 iterations), fathomed 16 nodes and fixed 77 variables
Cbc0035I Maximum depth 19, 180 variables fixed on reduced cost
Total time (CPU seconds):       1.40   (Wallclock seconds):       1.46

