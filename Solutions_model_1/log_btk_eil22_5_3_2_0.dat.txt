Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 35 (-12) rows, 22 (-2) columns and 106 (-23) elements
Clp1000I sum of infeasibilities 3.43253e-06 - average 9.80722e-08, 0 fixed columns
Coin0506I Presolve 35 (0) rows, 22 (0) columns and 106 (0) elements
Clp0029I End of values pass after 22 iterations
Clp0000I Optimal - objective value 76.84625
Clp0000I Optimal - objective value 76.84625
Coin0511I After Postsolve, objective 76.84625, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 76.84625
Clp0000I Optimal - objective value 76.84625
Clp0000I Optimal - objective value 76.84625
Coin0511I After Postsolve, objective 76.84625, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 76.84624995 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 35 rows, 22 columns (21 integer (21 of which binary)) and 109 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.939%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 5.32579
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -10.6487 iterations 16
Cbc0038I Solution found of -10.6487
Cbc0038I Relaxing continuous gives -10.6487
Cbc0038I Rounding solution of -21.2873 is better than previous of -10.6487

Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 22 columns, reduced to 26 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -21.2873 to -35.3606 (0.01 seconds)
Cbc0038I Round again with cutoff of -39.3903
Cbc0038I Pass   2: suminf.    0.75321 (3) obj. -39.3903 iterations 6
Cbc0038I Pass   3: suminf.    0.75117 (4) obj. -39.3903 iterations 2
Cbc0038I Pass   4: suminf.    0.55974 (2) obj. -39.3903 iterations 8
Cbc0038I Pass   5: suminf.    0.54708 (2) obj. -39.3903 iterations 3
Cbc0038I Pass   6: suminf.    0.54708 (2) obj. -39.3903 iterations 0
Cbc0038I Pass   7: suminf.    0.84462 (4) obj. -39.3903 iterations 3
Cbc0038I Pass   8: suminf.    1.64942 (4) obj. -39.3903 iterations 6
Cbc0038I Pass   9: suminf.    0.86642 (4) obj. -39.3903 iterations 2
Cbc0038I Pass  10: suminf.    0.60580 (3) obj. -39.3903 iterations 5
Cbc0038I Pass  11: suminf.    1.64942 (4) obj. -39.3903 iterations 2
Cbc0038I Pass  12: suminf.    2.09491 (8) obj. -39.3903 iterations 11
Cbc0038I Pass  13: suminf.    1.44149 (5) obj. -39.3903 iterations 3
Cbc0038I Pass  14: suminf.    0.92079 (3) obj. -39.3903 iterations 2
Cbc0038I Pass  15: suminf.    0.69961 (2) obj. -39.3903 iterations 4
Cbc0038I Pass  16: suminf.    0.69961 (2) obj. -39.3903 iterations 0
Cbc0038I Pass  17: suminf.    0.86110 (5) obj. -39.3903 iterations 4
Cbc0038I Pass  18: suminf.    1.64942 (4) obj. -39.3903 iterations 6
Cbc0038I Pass  19: suminf.    0.86642 (4) obj. -39.3903 iterations 2
Cbc0038I Pass  20: suminf.    0.60580 (3) obj. -39.3903 iterations 5
Cbc0038I Pass  21: suminf.    1.64942 (4) obj. -39.3903 iterations 2
Cbc0038I Pass  22: suminf.    1.59001 (4) obj. -39.3903 iterations 10
Cbc0038I Pass  23: suminf.    0.53265 (2) obj. -39.3903 iterations 4
Cbc0038I Pass  24: suminf.    0.49774 (2) obj. -39.3903 iterations 2
Cbc0038I Pass  25: suminf.    0.97357 (3) obj. -39.3903 iterations 2
Cbc0038I Pass  26: suminf.    1.30502 (6) obj. -39.3903 iterations 9
Cbc0038I Pass  27: suminf.    1.06536 (3) obj. -39.3903 iterations 4
Cbc0038I Pass  28: suminf.    0.60371 (2) obj. -39.3903 iterations 4
Cbc0038I Pass  29: suminf.    0.84032 (3) obj. -39.3903 iterations 7
Cbc0038I Pass  30: suminf.    1.23301 (3) obj. -39.3903 iterations 7
Cbc0038I Pass  31: suminf.    0.76744 (2) obj. -39.3903 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 22 columns, reduced to 27 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -35.3606 - took 0.04 seconds
Cbc0012I Integer solution of -35.36056 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 35 rows 22 columns, reduced to 26 rows 17 columns
Cbc0031I 10 added rows had average density of 20.1
Cbc0013I At root node, 10 cuts changed objective from -75.656573 to -56.543011 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1307 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 866 row cuts average 21.9 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 6 row cuts average 6.2 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -35.36055999999999, took 2119 iterations and 6 nodes (0.17 seconds)
Cbc0032I Strong branching done 60 times (606 iterations), fathomed 1 nodes and fixed 6 variables
Cbc0035I Maximum depth 2, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.19   (Wallclock seconds):       0.17

