Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 182 (-23) rows, 101 (-2) columns and 558 (-45) elements
Clp1000I sum of infeasibilities 0.000137651 - average 7.56322e-07, 12 fixed columns
Coin0506I Presolve 156 (-26) rows, 88 (-13) columns and 480 (-78) elements
Clp0029I End of values pass after 88 iterations
Clp0014I Perturbing problem by 0.001% of 0.2777789 - largest nonzero change 0 ( 0%) - largest zero change 2.7533362e-05
Clp0000I Optimal - objective value 51.362521
Clp0000I Optimal - objective value 51.362521
Coin0511I After Postsolve, objective 51.362521, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 51.362521
Clp0000I Optimal - objective value 51.362521
Clp0000I Optimal - objective value 51.362521
Coin0511I After Postsolve, objective 51.362521, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 51.36252144 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 182 rows, 101 columns (100 integer (100 of which binary)) and 558 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.878%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 64 integers unsatisfied sum - 13.3813
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 5.19658 iterations 101
Cbc0038I Solution found of 5.19658
Cbc0038I Relaxing continuous gives 5.19658
Cbc0038I Rounding solution of 2.97167 is better than previous of 5.19658

Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 101 columns, reduced to 104 rows 65 columns
Cbc0038I Mini branch and bound improved solution from 2.97167 to -18.4588 (0.06 seconds)
Cbc0038I Round again with cutoff of -21.7493
Cbc0038I Pass   2: suminf.    4.53604 (25) obj. -21.7493 iterations 42
Cbc0038I Pass   3: suminf.    0.96879 (6) obj. -21.7493 iterations 41
Cbc0038I Pass   4: suminf.    0.92564 (5) obj. -21.7493 iterations 2
Cbc0038I Pass   5: suminf.    1.54252 (5) obj. -21.7493 iterations 10
Cbc0038I Pass   6: suminf.    1.42799 (5) obj. -21.7493 iterations 4
Cbc0038I Pass   7: suminf.    1.87636 (5) obj. -21.7493 iterations 6
Cbc0038I Pass   8: suminf.    1.57279 (4) obj. -21.7493 iterations 3
Cbc0038I Pass   9: suminf.    1.87636 (5) obj. -21.7493 iterations 4
Cbc0038I Pass  10: suminf.    2.39633 (8) obj. -21.7493 iterations 24
Cbc0038I Pass  11: suminf.    2.03847 (7) obj. -21.7493 iterations 4
Cbc0038I Pass  12: suminf.    1.73005 (6) obj. -21.7493 iterations 12
Cbc0038I Pass  13: suminf.    1.09879 (5) obj. -21.7493 iterations 4
Cbc0038I Pass  14: suminf.    1.06771 (4) obj. -21.7493 iterations 1
Cbc0038I Pass  15: suminf.    0.99592 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  16: suminf.    0.87047 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  17: suminf.    1.35319 (5) obj. -21.7493 iterations 5
Cbc0038I Pass  18: suminf.    1.09879 (5) obj. -21.7493 iterations 4
Cbc0038I Pass  19: suminf.    1.06771 (4) obj. -21.7493 iterations 1
Cbc0038I Pass  20: suminf.    0.99592 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  21: suminf.    0.87047 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  22: suminf.    1.35319 (5) obj. -21.7493 iterations 5
Cbc0038I Pass  23: suminf.    1.09879 (5) obj. -21.7493 iterations 4
Cbc0038I Pass  24: suminf.    1.06771 (4) obj. -21.7493 iterations 1
Cbc0038I Pass  25: suminf.    0.99592 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  26: suminf.    0.87047 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  27: suminf.    1.35319 (5) obj. -21.7493 iterations 5
Cbc0038I Pass  28: suminf.    1.09879 (5) obj. -21.7493 iterations 4
Cbc0038I Pass  29: suminf.    1.06771 (4) obj. -21.7493 iterations 1
Cbc0038I Pass  30: suminf.    0.99592 (4) obj. -21.7493 iterations 4
Cbc0038I Pass  31: suminf.    0.87047 (4) obj. -21.7493 iterations 4
Cbc0038I Rounding solution of -19.7139 is better than previous of -18.4588

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 101 columns, reduced to 111 rows 70 columns
Cbc0038I Mini branch and bound improved solution from -19.7139 to -21.0986 (0.13 seconds)
Cbc0038I Round again with cutoff of -27.6719
Cbc0038I Pass  31: suminf.    5.83429 (25) obj. -27.6719 iterations 0
Cbc0038I Pass  32: suminf.    2.18402 (10) obj. -27.6719 iterations 41
Cbc0038I Pass  33: suminf.    1.69194 (8) obj. -27.6719 iterations 5
Cbc0038I Pass  34: suminf.    2.35862 (7) obj. -27.6719 iterations 15
Cbc0038I Pass  35: suminf.    1.71525 (5) obj. -27.6719 iterations 5
Cbc0038I Pass  36: suminf.    1.47088 (6) obj. -27.6719 iterations 4
Cbc0038I Pass  37: suminf.    2.41257 (7) obj. -27.6719 iterations 12
Cbc0038I Pass  38: suminf.    1.77110 (6) obj. -27.6719 iterations 5
Cbc0038I Pass  39: suminf.    2.59791 (8) obj. -27.6719 iterations 8
Cbc0038I Pass  40: suminf.    2.10274 (6) obj. -27.6719 iterations 2
Cbc0038I Pass  41: suminf.    2.04531 (7) obj. -27.6719 iterations 3
Cbc0038I Pass  42: suminf.    2.04531 (7) obj. -27.6719 iterations 1
Cbc0038I Pass  43: suminf.    1.89890 (6) obj. -27.6719 iterations 12
Cbc0038I Pass  44: suminf.    1.77980 (5) obj. -27.6719 iterations 1
Cbc0038I Pass  45: suminf.    1.77525 (5) obj. -27.6719 iterations 1
Cbc0038I Pass  46: suminf.    1.91912 (7) obj. -27.6719 iterations 4
Cbc0038I Pass  47: suminf.    1.84420 (6) obj. -27.6719 iterations 2
Cbc0038I Pass  48: suminf.    2.69648 (7) obj. -27.6719 iterations 9
Cbc0038I Pass  49: suminf.    1.77980 (5) obj. -27.6719 iterations 3
Cbc0038I Pass  50: suminf.    1.77525 (5) obj. -27.6719 iterations 1
Cbc0038I Pass  51: suminf.    1.91912 (7) obj. -27.6719 iterations 4
Cbc0038I Pass  52: suminf.    1.84420 (6) obj. -27.6719 iterations 2
Cbc0038I Pass  53: suminf.    2.69648 (7) obj. -27.6719 iterations 9
Cbc0038I Pass  54: suminf.    1.77980 (5) obj. -27.6719 iterations 3
Cbc0038I Pass  55: suminf.    1.77525 (5) obj. -27.6719 iterations 1
Cbc0038I Pass  56: suminf.    1.91912 (7) obj. -27.6719 iterations 4
Cbc0038I Pass  57: suminf.    1.84420 (6) obj. -27.6719 iterations 2
Cbc0038I Pass  58: suminf.    2.69648 (7) obj. -27.6719 iterations 9
Cbc0038I Pass  59: suminf.    1.77980 (5) obj. -27.6719 iterations 3
Cbc0038I Pass  60: suminf.    1.77525 (5) obj. -27.6719 iterations 1
Cbc0038I Rounding solution of -22.9235 is better than previous of -21.0986

Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 101 columns, reduced to 110 rows 69 columns
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I Round again with cutoff of -34.7791
Cbc0038I Pass  60: suminf.    7.26751 (25) obj. -34.7791 iterations 0
Cbc0038I Pass  61: suminf.    6.19701 (18) obj. -34.7791 iterations 15
Cbc0038I Pass  62: suminf.    5.57550 (22) obj. -34.7791 iterations 15
Cbc0038I Pass  63: suminf.    5.57550 (22) obj. -34.7791 iterations 0
Cbc0038I Pass  64: suminf.    3.31556 (9) obj. -34.7791 iterations 25
Cbc0038I Pass  65: suminf.    2.55397 (8) obj. -34.7791 iterations 7
Cbc0038I Pass  66: suminf.    3.20907 (10) obj. -34.7791 iterations 19
Cbc0038I Pass  67: suminf.    3.05785 (10) obj. -34.7791 iterations 8
Cbc0038I Pass  68: suminf.    3.04428 (9) obj. -34.7791 iterations 1
Cbc0038I Pass  69: suminf.    3.52101 (9) obj. -34.7791 iterations 12
Cbc0038I Pass  70: suminf.    3.05785 (10) obj. -34.7791 iterations 9
Cbc0038I Pass  71: suminf.    5.15804 (18) obj. -34.7791 iterations 33
Cbc0038I Pass  72: suminf.    3.36973 (14) obj. -34.7791 iterations 22
Cbc0038I Pass  73: suminf.    3.14509 (12) obj. -34.7791 iterations 4
Cbc0038I Pass  74: suminf.    4.08318 (13) obj. -34.7791 iterations 27
Cbc0038I Pass  75: suminf.    3.93850 (16) obj. -34.7791 iterations 6
Cbc0038I Pass  76: suminf.    3.93850 (16) obj. -34.7791 iterations 0
Cbc0038I Pass  77: suminf.    3.82359 (16) obj. -34.7791 iterations 16
Cbc0038I Pass  78: suminf.    2.54789 (10) obj. -34.7791 iterations 9
Cbc0038I Pass  79: suminf.    2.47828 (11) obj. -34.7791 iterations 6
Cbc0038I Pass  80: suminf.    4.73777 (14) obj. -34.7791 iterations 29
Cbc0038I Pass  81: suminf.    4.70674 (17) obj. -34.7791 iterations 10
Cbc0038I Pass  82: suminf.    4.69168 (16) obj. -34.7791 iterations 3
Cbc0038I Pass  83: suminf.    3.75158 (13) obj. -34.7791 iterations 18
Cbc0038I Pass  84: suminf.    3.33817 (10) obj. -34.7791 iterations 5
Cbc0038I Pass  85: suminf.    5.01948 (11) obj. -34.7791 iterations 10
Cbc0038I Pass  86: suminf.    3.86275 (17) obj. -34.7791 iterations 13
Cbc0038I Pass  87: suminf.    3.85860 (12) obj. -34.7791 iterations 4
Cbc0038I Pass  88: suminf.    4.11946 (13) obj. -34.7791 iterations 24
Cbc0038I Pass  89: suminf.    4.05842 (16) obj. -34.7791 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 182 rows 101 columns, reduced to 110 rows 69 columns
Cbc0038I Mini branch and bound did not improve solution (0.28 seconds)
Cbc0038I After 0.28 seconds - Feasibility pump exiting with objective of -22.9235 - took 0.26 seconds
Cbc0012I Integer solution of -22.92351 found by feasibility pump after 0 iterations and 0 nodes (0.28 seconds)
Cbc0038I Full problem 182 rows 101 columns, reduced to 104 rows 65 columns
Cbc0012I Integer solution of -23.38154 found by RINS after 0 iterations and 0 nodes (0.34 seconds)
Cbc0031I 36 added rows had average density of 66.305556
Cbc0013I At root node, 36 cuts changed objective from -51.362521 to -43.962708 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 25640 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.163 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3821 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.175 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 29 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.181 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -23.38154 best solution, best possible -43.962708 (2.09 seconds)
Cbc0038I Full problem 182 rows 101 columns, reduced to 27 rows 25 columns
Cbc0004I Integer solution of -23.53909 found after 14844 iterations and 78 nodes (2.64 seconds)
Cbc0038I Full problem 182 rows 101 columns, reduced to 2 rows 4 columns
Cbc0016I Integer solution of -23.70805 found by strong branching after 15002 iterations and 95 nodes (2.66 seconds)
Cbc0016I Integer solution of -23.73585 found by strong branching after 15273 iterations and 116 nodes (2.69 seconds)
Cbc0012I Integer solution of -23.89877 found by rounding after 15324 iterations and 120 nodes (2.69 seconds)
Cbc0004I Integer solution of -24.06628 found after 15356 iterations and 129 nodes (2.70 seconds)
Cbc0001I Search completed - best objective -24.06628000000001, took 16211 iterations and 146 nodes (2.74 seconds)
Cbc0032I Strong branching done 1256 times (27449 iterations), fathomed 12 nodes and fixed 45 variables
Cbc0035I Maximum depth 38, 612 variables fixed on reduced cost
Total time (CPU seconds):       2.65   (Wallclock seconds):       2.77

