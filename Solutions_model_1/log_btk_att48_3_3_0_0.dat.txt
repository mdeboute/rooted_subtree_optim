Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 84 (-15) rows, 46 (-4) columns and 252 (-33) elements
Clp1000I sum of infeasibilities 1.30664e-05 - average 1.55552e-07, 5 fixed columns
Coin0506I Presolve 71 (-13) rows, 40 (-6) columns and 214 (-38) elements
Clp0029I End of values pass after 40 iterations
Clp0014I Perturbing problem by 0.001% of 21.673615 - largest nonzero change 0 ( 0%) - largest zero change 1.702643e-05
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1819.302008 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 84 rows, 46 columns (45 integer (45 of which binary)) and 252 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.917%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 5.09106
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 268.274 iterations 17
Cbc0038I Solution found of 268.274
Cbc0038I Relaxing continuous gives 268.274
Cbc0038I Rounding solution of 151.03 is better than previous of 268.274

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound improved solution from 151.03 to -510.709 (0.01 seconds)
Cbc0038I Round again with cutoff of -641.568
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.54012 (2) obj. -641.568 iterations 2
Cbc0038I Pass   3: suminf.    0.64563 (3) obj. -641.568 iterations 4
Cbc0038I Pass   4: suminf.    0.50176 (4) obj. -641.568 iterations 3
Cbc0038I Pass   5: suminf.    1.24474 (3) obj. -641.568 iterations 4
Cbc0038I Pass   6: suminf.    1.10995 (4) obj. -641.568 iterations 1
Cbc0038I Pass   7: suminf.    0.72017 (4) obj. -641.568 iterations 2
Cbc0038I Pass   8: suminf.    0.72017 (4) obj. -641.568 iterations 0
Cbc0038I Pass   9: suminf.    1.10995 (4) obj. -641.568 iterations 4
Cbc0038I Pass  10: suminf.    2.42807 (8) obj. -641.568 iterations 11
Cbc0038I Pass  11: suminf.    1.16743 (4) obj. -641.568 iterations 8
Cbc0038I Pass  12: suminf.    0.41096 (5) obj. -641.568 iterations 5
Cbc0038I Pass  13: suminf.    0.24149 (3) obj. -641.568 iterations 5
Cbc0038I Pass  14: suminf.    0.73391 (2) obj. -641.568 iterations 2
Cbc0038I Pass  15: suminf.    0.25970 (1) obj. -641.568 iterations 1
Cbc0038I Pass  16: suminf.    0.37869 (2) obj. -641.568 iterations 2
Cbc0038I Pass  17: suminf.    2.71290 (9) obj. -641.568 iterations 15
Cbc0038I Pass  18: suminf.    1.00000 (3) obj. -641.568 iterations 15
Cbc0038I Pass  19: suminf.    1.00000 (3) obj. -641.568 iterations 0
Cbc0038I Pass  20: suminf.    0.64451 (3) obj. -641.568 iterations 6
Cbc0038I Pass  21: suminf.    0.63948 (2) obj. -641.568 iterations 1
Cbc0038I Pass  22: suminf.    0.68314 (3) obj. -641.568 iterations 2
Cbc0038I Pass  23: suminf.    0.96256 (6) obj. -641.568 iterations 9
Cbc0038I Pass  24: suminf.    0.96256 (6) obj. -641.568 iterations 0
Cbc0038I Pass  25: suminf.    1.16779 (3) obj. -641.568 iterations 7
Cbc0038I Pass  26: suminf.    0.96961 (3) obj. -641.568 iterations 2
Cbc0038I Pass  27: suminf.    1.53369 (7) obj. -641.568 iterations 15
Cbc0038I Pass  28: suminf.    1.00000 (6) obj. -641.568 iterations 6
Cbc0038I Pass  29: suminf.    0.98890 (4) obj. -641.568 iterations 10
Cbc0038I Pass  30: suminf.    0.98386 (3) obj. -641.568 iterations 1
Cbc0038I Pass  31: suminf.    1.15834 (3) obj. -641.568 iterations 1
Cbc0038I Rounding solution of -515.574 is better than previous of -510.709

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 51 rows 35 columns
Cbc0038I Mini branch and bound improved solution from -515.574 to -530.996 (0.03 seconds)
Cbc0038I Round again with cutoff of -877.115
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.85809 (5) obj. -877.115 iterations 2
Cbc0038I Pass  32: suminf.    1.30334 (4) obj. -877.115 iterations 7
Cbc0038I Pass  33: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  34: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  35: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  36: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  37: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  38: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  39: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  40: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  41: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  42: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  43: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  44: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  45: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  46: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  47: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  48: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  49: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  50: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  51: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  52: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  53: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  54: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  55: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  56: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  57: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  58: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  59: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  60: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -530.996 - took 0.04 seconds
Cbc0012I Integer solution of -530.99578 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 84 rows 46 columns, reduced to 21 rows 19 columns
Cbc0031I 20 added rows had average density of 34.25
Cbc0013I At root node, 20 cuts changed objective from -1819.302 to -1103.0726 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6104 row cuts average 3.7 elements, 1 column cuts (1 active)  in 0.049 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1565 row cuts average 43.8 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 157 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 104 row cuts average 38.8 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0001I Search completed - best objective -530.9957840000006, took 5807 iterations and 10 nodes (0.57 seconds)
Cbc0032I Strong branching done 232 times (5190 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 4, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.56   (Wallclock seconds):       0.57

