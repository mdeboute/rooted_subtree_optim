Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 43 (-22) rows, 24 (-9) columns and 126 (-57) elements
Clp1000I sum of infeasibilities 3.1958e-05 - average 7.43209e-07, 1 fixed columns
Coin0506I Presolve 41 (-2) rows, 23 (-1) columns and 120 (-6) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 93.280868
Clp0000I Optimal - objective value 93.280868
Coin0511I After Postsolve, objective 93.280868, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 93.280868
Clp0000I Optimal - objective value 93.280868
Clp0000I Optimal - objective value 93.280868
Coin0511I After Postsolve, objective 93.280868, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 93.28086769 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 24 columns (23 integer (23 of which binary)) and 141 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.952%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 4.8638
Cbc0038I Pass   1: suminf.    0.98551 (2) obj. -43.5241 iterations 15
Cbc0038I Solution found of -23.9875
Cbc0038I Relaxing continuous gives -23.9875
Cbc0038I Rounding solution of -43.6225 is better than previous of -23.9875

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 24 columns, reduced to 25 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -43.6225 to -58.0675 (0.01 seconds)
Cbc0038I Round again with cutoff of -61.283
Cbc0038I Pass   2: suminf.    1.63115 (6) obj. -61.283 iterations 3
Cbc0038I Pass   3: suminf.    1.44285 (6) obj. -61.283 iterations 11
Cbc0038I Pass   4: suminf.    0.86792 (2) obj. -61.283 iterations 4
Cbc0038I Pass   5: suminf.    0.91783 (2) obj. -61.283 iterations 1
Cbc0038I Pass   6: suminf.    0.91203 (2) obj. -61.283 iterations 1
Cbc0038I Pass   7: suminf.    0.86792 (2) obj. -61.283 iterations 3
Cbc0038I Pass   8: suminf.    1.23296 (3) obj. -61.283 iterations 5
Cbc0038I Pass   9: suminf.    1.21571 (4) obj. -61.283 iterations 1
Cbc0038I Pass  10: suminf.    0.73602 (2) obj. -61.283 iterations 2
Cbc0038I Pass  11: suminf.    0.60814 (2) obj. -61.283 iterations 1
Cbc0038I Pass  12: suminf.    0.50093 (2) obj. -61.283 iterations 4
Cbc0038I Pass  13: suminf.    1.48061 (5) obj. -61.283 iterations 7
Cbc0038I Pass  14: suminf.    0.57683 (2) obj. -61.283 iterations 5
Cbc0038I Pass  15: suminf.    0.54958 (2) obj. -61.283 iterations 2
Cbc0038I Pass  16: suminf.    0.53375 (2) obj. -61.283 iterations 1
Cbc0038I Pass  17: suminf.    0.11446 (2) obj. -61.283 iterations 1
Cbc0038I Pass  18: suminf.    0.44211 (1) obj. -61.283 iterations 1
Cbc0038I Pass  19: suminf.    0.35070 (1) obj. -61.283 iterations 1
Cbc0038I Pass  20: suminf.    1.33206 (5) obj. -61.283 iterations 4
Cbc0038I Pass  21: suminf.    0.81738 (3) obj. -61.283 iterations 4
Cbc0038I Pass  22: suminf.    0.88130 (5) obj. -61.283 iterations 4
Cbc0038I Pass  23: suminf.    0.64287 (4) obj. -61.283 iterations 3
Cbc0038I Pass  24: suminf.    1.10442 (5) obj. -61.283 iterations 3
Cbc0038I Pass  25: suminf.    0.64287 (4) obj. -61.283 iterations 5
Cbc0038I Pass  26: suminf.    0.44211 (1) obj. -61.283 iterations 4
Cbc0038I Pass  27: suminf.    0.35070 (1) obj. -61.283 iterations 1
Cbc0038I Pass  28: suminf.    0.11446 (2) obj. -61.283 iterations 2
Cbc0038I Pass  29: suminf.    1.09775 (3) obj. -61.283 iterations 9
Cbc0038I Pass  30: suminf.    1.09775 (3) obj. -61.283 iterations 0
Cbc0038I Pass  31: suminf.    0.83809 (3) obj. -61.283 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 24 columns, reduced to 40 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -58.0675 - took 0.02 seconds
Cbc0012I Integer solution of -58.0675 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 43 rows 24 columns, reduced to 25 rows 14 columns
Cbc0031I 11 added rows had average density of 15.818182
Cbc0013I At root node, 11 cuts changed objective from -90.200047 to -70.616237 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 604 row cuts average 3.3 elements, 3 column cuts (3 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 639 row cuts average 22.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 25 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 18 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -58.06750000000001, took 2153 iterations and 12 nodes (0.19 seconds)
Cbc0032I Strong branching done 134 times (1255 iterations), fathomed 0 nodes and fixed 5 variables
Cbc0035I Maximum depth 5, 21 variables fixed on reduced cost
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.19

