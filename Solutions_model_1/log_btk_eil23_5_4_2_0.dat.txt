Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 36 (-13) rows, 22 (-3) columns and 108 (-27) elements
Clp1000I sum of infeasibilities 2.32016e-06 - average 6.44488e-08, 1 fixed columns
Coin0506I Presolve 32 (-4) rows, 21 (-1) columns and 98 (-10) elements
Clp0029I End of values pass after 21 iterations
Clp0000I Optimal - objective value 103.66932
Clp0000I Optimal - objective value 103.66932
Coin0511I After Postsolve, objective 103.66932, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 103.66932
Clp0000I Optimal - objective value 103.66932
Clp0000I Optimal - objective value 103.66932
Coin0511I After Postsolve, objective 103.66932, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 103.669319 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 36 rows, 22 columns (21 integer (21 of which binary)) and 108 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.242%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 15 integers unsatisfied sum - 4.72536
Cbc0038I Pass   1: suminf.    0.39448 (2) obj. -43.9675 iterations 15
Cbc0038I Solution found of -35.003
Cbc0038I Relaxing continuous gives -35.003
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 22 columns, reduced to 22 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -35.003 to -35.968 (0.02 seconds)
Cbc0038I Round again with cutoff of -42.6003
Cbc0038I Pass   2: suminf.    0.39448 (2) obj. -43.9675 iterations 0
Cbc0038I Pass   3: suminf.    0.16240 (3) obj. -42.6003 iterations 5
Cbc0038I Pass   4: suminf.    0.85766 (5) obj. -42.6003 iterations 6
Cbc0038I Pass   5: suminf.    0.68492 (5) obj. -42.6003 iterations 3
Cbc0038I Pass   6: suminf.    0.68492 (5) obj. -42.6003 iterations 0
Cbc0038I Pass   7: suminf.    0.20933 (2) obj. -42.6003 iterations 5
Cbc0038I Pass   8: suminf.    0.13286 (2) obj. -42.6003 iterations 2
Cbc0038I Pass   9: suminf.    1.02135 (5) obj. -42.6003 iterations 7
Cbc0038I Pass  10: suminf.    1.82135 (6) obj. -42.6003 iterations 3
Cbc0038I Pass  11: suminf.    0.98953 (5) obj. -42.6003 iterations 2
Cbc0038I Pass  12: suminf.    0.98953 (5) obj. -42.6003 iterations 0
Cbc0038I Pass  13: suminf.    1.45139 (5) obj. -42.6003 iterations 5
Cbc0038I Pass  14: suminf.    1.36917 (4) obj. -42.6003 iterations 1
Cbc0038I Pass  15: suminf.    1.39696 (5) obj. -42.6003 iterations 3
Cbc0038I Pass  16: suminf.    1.29032 (4) obj. -42.6003 iterations 1
Cbc0038I Pass  17: suminf.    1.77907 (6) obj. -42.6003 iterations 5
Cbc0038I Pass  18: suminf.    2.34648 (7) obj. -42.6003 iterations 3
Cbc0038I Pass  19: suminf.    1.98596 (7) obj. -42.6003 iterations 2
Cbc0038I Pass  20: suminf.    1.65396 (6) obj. -42.6003 iterations 1
Cbc0038I Pass  21: suminf.    1.65396 (6) obj. -42.6003 iterations 0
Cbc0038I Pass  22: suminf.    2.26277 (6) obj. -42.6003 iterations 4
Cbc0038I Pass  23: suminf.    1.77907 (6) obj. -42.6003 iterations 3
Cbc0038I Pass  24: suminf.    1.77907 (6) obj. -42.6003 iterations 0
Cbc0038I Pass  25: suminf.    2.34648 (7) obj. -42.6003 iterations 3
Cbc0038I Pass  26: suminf.    1.98596 (7) obj. -42.6003 iterations 2
Cbc0038I Pass  27: suminf.    1.65396 (6) obj. -42.6003 iterations 1
Cbc0038I Pass  28: suminf.    1.65396 (6) obj. -42.6003 iterations 0
Cbc0038I Pass  29: suminf.    2.26277 (6) obj. -42.6003 iterations 4
Cbc0038I Pass  30: suminf.    1.77907 (6) obj. -42.6003 iterations 3
Cbc0038I Pass  31: suminf.    1.77907 (6) obj. -42.6003 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 22 columns, reduced to 23 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -35.968 - took 0.02 seconds
Cbc0012I Integer solution of -35.96796 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 36 rows 22 columns, reduced to 22 rows 15 columns
Cbc0031I 11 added rows had average density of 15.454545
Cbc0013I At root node, 11 cuts changed objective from -102.29094 to -48.669379 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1154 row cuts average 3.6 elements, 3 column cuts (3 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 580 row cuts average 19.4 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 25 row cuts average 11.6 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 194 row cuts average 8.9 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 129 row cuts average 17.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0001I Search completed - best objective -35.96796000000001, took 1882 iterations and 6 nodes (0.16 seconds)
Cbc0032I Strong branching done 48 times (420 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 2, 9 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16

