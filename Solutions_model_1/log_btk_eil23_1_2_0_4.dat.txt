Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 21 (-28) rows, 13 (-12) columns and 62 (-73) elements
Clp0000I Optimal - objective value 184.76276
Coin0511I After Postsolve, objective 184.76276, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 184.7627586 - 13 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 20 rows, 13 columns (12 integer (12 of which binary)) and 63 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 9.117%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 9 integers unsatisfied sum - 3.46467
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -15.4286 iterations 10
Cbc0038I Solution found of -15.4286
Cbc0038I Relaxing continuous gives -15.4286
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 20 rows 13 columns, reduced to 9 rows 8 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -27.6179
Cbc0038I Pass   2: suminf.    0.11562 (1) obj. -27.6179 iterations 1
Cbc0038I Pass   3: suminf.    0.36585 (1) obj. -27.6179 iterations 1
Cbc0038I Pass   4: suminf.    0.75891 (3) obj. -27.6179 iterations 3
Cbc0038I Pass   5: suminf.    0.13188 (1) obj. -27.6179 iterations 1
Cbc0038I Pass   6: suminf.    0.40854 (1) obj. -27.6179 iterations 1
Cbc0038I Pass   7: suminf.    0.84239 (2) obj. -27.6179 iterations 5
Cbc0038I Pass   8: suminf.    0.84239 (2) obj. -27.6179 iterations 0
Cbc0038I Pass   9: suminf.    0.58079 (2) obj. -27.6179 iterations 2
Cbc0038I Pass  10: suminf.    0.60893 (3) obj. -27.6179 iterations 5
Cbc0038I Pass  11: suminf.    0.16779 (1) obj. -27.6179 iterations 6
Cbc0038I Pass  12: suminf.    0.16779 (1) obj. -27.6179 iterations 0
Cbc0038I Pass  13: suminf.    0.27822 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  14: suminf.    0.44433 (2) obj. -27.6179 iterations 2
Cbc0038I Pass  15: suminf.    0.27822 (1) obj. -27.6179 iterations 2
Cbc0038I Pass  16: suminf.    0.47876 (1) obj. -27.6179 iterations 3
Cbc0038I Pass  17: suminf.    0.47876 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  18: suminf.    0.32886 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  19: suminf.    0.32886 (1) obj. -27.6179 iterations 0
Cbc0038I Pass  20: suminf.    0.32886 (1) obj. -27.6179 iterations 0
Cbc0038I Pass  21: suminf.    0.38926 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  22: suminf.    0.47876 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  23: suminf.    0.38926 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  24: suminf.    0.37586 (2) obj. -27.6179 iterations 3
Cbc0038I Pass  25: suminf.    0.37586 (2) obj. -27.6179 iterations 0
Cbc0038I Pass  26: suminf.    0.35681 (1) obj. -27.6179 iterations 2
Cbc0038I Pass  27: suminf.    0.27517 (1) obj. -27.6179 iterations 1
Cbc0038I Pass  28: suminf.    0.94728 (3) obj. -27.6179 iterations 4
Cbc0038I Pass  29: suminf.    0.75993 (3) obj. -27.6179 iterations 4
Cbc0038I Pass  30: suminf.    0.35366 (1) obj. -27.6179 iterations 5
Cbc0038I Pass  31: suminf.    0.13188 (1) obj. -27.6179 iterations 1
Cbc0038I Rounding solution of -28.2857 is better than previous of -15.4286

Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 20 rows 13 columns, reduced to 19 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -50.0927
Cbc0038I Pass  31: suminf.    0.32879 (1) obj. -50.0927 iterations 0
Cbc0038I Pass  32: suminf.    0.36585 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  33: suminf.    0.32879 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  34: suminf.    0.36585 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  35: suminf.    0.43002 (1) obj. -50.0927 iterations 3
Cbc0038I Pass  36: suminf.    0.21477 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  37: suminf.    0.43002 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  38: suminf.    0.44803 (1) obj. -50.0927 iterations 2
Cbc0038I Pass  39: suminf.    0.37584 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  40: suminf.    0.44803 (1) obj. -50.0927 iterations 1
Cbc0038I Pass  41: suminf.    0.00000 (0) obj. -50.0927 iterations 4
Cbc0038I Solution found of -50.0927
Cbc0038I Relaxing continuous gives -66.8571
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 20 rows 13 columns, reduced to 9 rows 8 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -87.9961
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 4
Cbc0038I Pass  42: suminf.    1.03916 (4) obj. -87.9961 iterations 4
Cbc0038I Pass  43: suminf.    0.86151 (3) obj. -87.9961 iterations 9
Cbc0038I Pass  44: suminf.    0.86151 (3) obj. -87.9961 iterations 0
Cbc0038I Pass  45: suminf.    1.00123 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  46: suminf.    0.77548 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  47: suminf.    0.86151 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  48: suminf.    0.92807 (3) obj. -87.9961 iterations 3
Cbc0038I Pass  49: suminf.    0.96664 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  50: suminf.    0.96664 (3) obj. -87.9961 iterations 0
Cbc0038I Pass  51: suminf.    1.08283 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  52: suminf.    0.92807 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  53: suminf.    1.65447 (7) obj. -87.9961 iterations 8
Cbc0038I Pass  54: suminf.    0.59170 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  55: suminf.    0.82776 (5) obj. -87.9961 iterations 4
Cbc0038I Pass  56: suminf.    0.69910 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  57: suminf.    0.46303 (2) obj. -87.9961 iterations 2
Cbc0038I Pass  58: suminf.    0.46303 (2) obj. -87.9961 iterations 0
Cbc0038I Pass  59: suminf.    0.46303 (2) obj. -87.9961 iterations 0
Cbc0038I Pass  60: suminf.    3.07305 (8) obj. -87.9961 iterations 7
Cbc0038I Pass  61: suminf.    0.59170 (3) obj. -87.9961 iterations 3
Cbc0038I Pass  62: suminf.    0.82776 (5) obj. -87.9961 iterations 4
Cbc0038I Pass  63: suminf.    0.69910 (3) obj. -87.9961 iterations 2
Cbc0038I Pass  64: suminf.    1.63580 (4) obj. -87.9961 iterations 5
Cbc0038I Pass  65: suminf.    1.63580 (4) obj. -87.9961 iterations 0
Cbc0038I Pass  66: suminf.    1.18669 (3) obj. -87.9961 iterations 8
Cbc0038I Pass  67: suminf.    0.86151 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  68: suminf.    1.00123 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  69: suminf.    0.77548 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  70: suminf.    0.86151 (3) obj. -87.9961 iterations 1
Cbc0038I Pass  71: suminf.    2.55219 (7) obj. -87.9961 iterations 5
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 20 rows 13 columns, reduced to 15 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -102.793
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 5
Cbc0038I Pass  71: suminf.    1.50700 (5) obj. -102.793 iterations 1
Cbc0038I Pass  72: suminf.    1.19884 (4) obj. -102.793 iterations 8
Cbc0038I Pass  73: suminf.    1.19884 (4) obj. -102.793 iterations 0
Cbc0038I Pass  74: suminf.    0.87862 (4) obj. -102.793 iterations 1
Cbc0038I Pass  75: suminf.    0.87862 (4) obj. -102.793 iterations 0
Cbc0038I Pass  76: suminf.    1.19884 (4) obj. -102.793 iterations 3
Cbc0038I Pass  77: suminf.    1.44548 (5) obj. -102.793 iterations 6
Cbc0038I Pass  78: suminf.    1.31830 (5) obj. -102.793 iterations 2
Cbc0038I Pass  79: suminf.    1.18049 (5) obj. -102.793 iterations 4
Cbc0038I Pass  80: suminf.    0.99395 (3) obj. -102.793 iterations 2
Cbc0038I Pass  81: suminf.    0.55520 (5) obj. -102.793 iterations 3
Cbc0038I Pass  82: suminf.    0.49117 (3) obj. -102.793 iterations 2
Cbc0038I Pass  83: suminf.    1.17748 (5) obj. -102.793 iterations 2
Cbc0038I Pass  84: suminf.    1.12506 (4) obj. -102.793 iterations 1
Cbc0038I Pass  85: suminf.    0.72522 (5) obj. -102.793 iterations 4
Cbc0038I Pass  86: suminf.    2.16653 (7) obj. -102.793 iterations 5
Cbc0038I Pass  87: suminf.    1.31830 (5) obj. -102.793 iterations 1
Cbc0038I Pass  88: suminf.    1.18049 (5) obj. -102.793 iterations 4
Cbc0038I Pass  89: suminf.    0.99395 (3) obj. -102.793 iterations 2
Cbc0038I Pass  90: suminf.    0.55520 (5) obj. -102.793 iterations 3
Cbc0038I Pass  91: suminf.    0.49117 (3) obj. -102.793 iterations 2
Cbc0038I Pass  92: suminf.    1.17748 (5) obj. -102.793 iterations 2
Cbc0038I Pass  93: suminf.    1.12506 (4) obj. -102.793 iterations 1
Cbc0038I Pass  94: suminf.    0.72522 (5) obj. -102.793 iterations 4
Cbc0038I Pass  95: suminf.    0.50845 (4) obj. -102.793 iterations 4
Cbc0038I Pass  96: suminf.    0.38872 (2) obj. -102.793 iterations 4
Cbc0038I Pass  97: suminf.    0.35948 (2) obj. -102.793 iterations 2
Cbc0038I Pass  98: suminf.    0.55520 (5) obj. -102.793 iterations 3
Cbc0038I Pass  99: suminf.    0.49117 (3) obj. -102.793 iterations 2
Cbc0038I Pass 100: suminf.    1.17748 (5) obj. -102.793 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 20 rows 13 columns, reduced to 9 rows 8 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -66.8571 - took 0.02 seconds
Cbc0012I Integer solution of -66.85709 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 20 rows 13 columns, reduced to 9 rows 8 columns
Cbc0012I Integer solution of -75.99999 found by DiveCoefficient after 12 iterations and 0 nodes (0.03 seconds)
Cbc0031I 6 added rows had average density of 3.3333333
Cbc0013I At root node, 6 cuts changed objective from -137.32031 to -75.99999 in 3 passes
Cbc0014I Cut generator 0 (Probing) - 50 row cuts average 3.0 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 8 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective -75.99999, took 12 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

