Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 262 (-2) columns and 1501 (-44) elements
Clp1000I sum of infeasibilities 1.85653e-05 - average 3.68359e-08, 107 fixed columns
Coin0506I Presolve 290 (-214) rows, 154 (-108) columns and 863 (-638) elements
Clp0029I End of values pass after 154 iterations
Clp0014I Perturbing problem by 0.001% of 0.16322971 - largest nonzero change 0 ( 0%) - largest zero change 2.9941894e-05
Clp0000I Optimal - objective value 121.20685
Clp0000I Optimal - objective value 121.20685
Coin0511I After Postsolve, objective 121.20685, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13707262 - largest nonzero change 0 ( 0%) - largest zero change 2.9786142e-05
Clp0000I Optimal - objective value 121.20685
Clp0000I Optimal - objective value 121.20685
Clp0000I Optimal - objective value 121.20685
Coin0511I After Postsolve, objective 121.20685, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 121.206851 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 262 columns (261 integer (261 of which binary)) and 1501 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.365%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 82 integers unsatisfied sum - 12.9536
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 7.49209 iterations 257
Cbc0038I Solution found of 7.49209
Cbc0038I Relaxing continuous gives 7.49209
Cbc0038I Rounding solution of -4.14971 is better than previous of 7.49209

Cbc0038I Before mini branch and bound, 179 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 153 rows 83 columns
Cbc0038I Mini branch and bound improved solution from -4.14971 to -48.4433 (0.07 seconds)
Cbc0038I Round again with cutoff of -55.7198
Cbc0038I Pass   2: suminf.    3.43032 (16) obj. -55.7198 iterations 44
Cbc0038I Pass   3: suminf.    3.43032 (16) obj. -55.7198 iterations 0
Cbc0038I Pass   4: suminf.    2.43639 (9) obj. -55.7198 iterations 45
Cbc0038I Pass   5: suminf.    2.05578 (8) obj. -55.7198 iterations 17
Cbc0038I Pass   6: suminf.    2.04216 (9) obj. -55.7198 iterations 6
Cbc0038I Pass   7: suminf.    2.75154 (9) obj. -55.7198 iterations 24
Cbc0038I Pass   8: suminf.    2.07851 (8) obj. -55.7198 iterations 9
Cbc0038I Pass   9: suminf.    2.75057 (7) obj. -55.7198 iterations 12
Cbc0038I Pass  10: suminf.    1.74454 (4) obj. -55.7198 iterations 26
Cbc0038I Pass  11: suminf.    1.24174 (5) obj. -55.7198 iterations 23
Cbc0038I Pass  12: suminf.    1.74917 (5) obj. -55.7198 iterations 21
Cbc0038I Pass  13: suminf.    1.74017 (5) obj. -55.7198 iterations 2
Cbc0038I Pass  14: suminf.    1.67598 (6) obj. -55.7198 iterations 22
Cbc0038I Pass  15: suminf.    1.66504 (6) obj. -55.7198 iterations 1
Cbc0038I Pass  16: suminf.    1.86656 (5) obj. -55.7198 iterations 18
Cbc0038I Pass  17: suminf.    1.66359 (4) obj. -55.7198 iterations 5
Cbc0038I Pass  18: suminf.    1.74017 (5) obj. -55.7198 iterations 11
Cbc0038I Pass  19: suminf.    1.74017 (5) obj. -55.7198 iterations 0
Cbc0038I Pass  20: suminf.    1.67598 (6) obj. -55.7198 iterations 22
Cbc0038I Pass  21: suminf.    1.66504 (6) obj. -55.7198 iterations 1
Cbc0038I Pass  22: suminf.    1.86656 (5) obj. -55.7198 iterations 18
Cbc0038I Pass  23: suminf.    1.66359 (4) obj. -55.7198 iterations 5
Cbc0038I Pass  24: suminf.    1.74017 (5) obj. -55.7198 iterations 11
Cbc0038I Pass  25: suminf.    1.74017 (5) obj. -55.7198 iterations 0
Cbc0038I Pass  26: suminf.    1.67598 (6) obj. -55.7198 iterations 22
Cbc0038I Pass  27: suminf.    1.66504 (6) obj. -55.7198 iterations 1
Cbc0038I Pass  28: suminf.    1.86656 (5) obj. -55.7198 iterations 18
Cbc0038I Pass  29: suminf.    1.66359 (4) obj. -55.7198 iterations 5
Cbc0038I Pass  30: suminf.    1.74017 (5) obj. -55.7198 iterations 11
Cbc0038I Pass  31: suminf.    1.74017 (5) obj. -55.7198 iterations 0
Cbc0038I Rounding solution of -56.2185 is better than previous of -48.4433

Cbc0038I Before mini branch and bound, 173 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 164 rows 89 columns
Cbc0038I Mini branch and bound improved solution from -56.2185 to -56.5594 (0.16 seconds)
Cbc0038I Round again with cutoff of -69.489
Cbc0038I Pass  31: suminf.    4.34836 (16) obj. -69.489 iterations 1
Cbc0038I Pass  32: suminf.    4.34836 (16) obj. -69.489 iterations 0
Cbc0038I Pass  33: suminf.    3.93631 (10) obj. -69.489 iterations 47
Cbc0038I Pass  34: suminf.    3.58337 (11) obj. -69.489 iterations 13
Cbc0038I Pass  35: suminf.    3.58522 (11) obj. -69.489 iterations 5
Cbc0038I Pass  36: suminf.    3.37703 (10) obj. -69.489 iterations 25
Cbc0038I Pass  37: suminf.    2.53496 (7) obj. -69.489 iterations 26
Cbc0038I Pass  38: suminf.    2.53496 (7) obj. -69.489 iterations 0
Cbc0038I Pass  39: suminf.    2.55467 (7) obj. -69.489 iterations 19
Cbc0038I Pass  40: suminf.    2.46513 (7) obj. -69.489 iterations 8
Cbc0038I Pass  41: suminf.    2.46221 (7) obj. -69.489 iterations 23
Cbc0038I Pass  42: suminf.    2.46053 (7) obj. -69.489 iterations 1
Cbc0038I Pass  43: suminf.    2.80079 (8) obj. -69.489 iterations 18
Cbc0038I Pass  44: suminf.    2.80082 (8) obj. -69.489 iterations 4
Cbc0038I Pass  45: suminf.    2.48292 (7) obj. -69.489 iterations 29
Cbc0038I Pass  46: suminf.    6.19138 (19) obj. -69.489 iterations 67
Cbc0038I Pass  47: suminf.    3.02236 (12) obj. -69.489 iterations 54
Cbc0038I Pass  48: suminf.    3.01487 (12) obj. -69.489 iterations 2
Cbc0038I Pass  49: suminf.    2.73415 (8) obj. -69.489 iterations 66
Cbc0038I Pass  50: suminf.    2.61673 (9) obj. -69.489 iterations 9
Cbc0038I Pass  51: suminf.    2.95187 (8) obj. -69.489 iterations 21
Cbc0038I Pass  52: suminf.    2.01046 (6) obj. -69.489 iterations 11
Cbc0038I Pass  53: suminf.    1.89990 (6) obj. -69.489 iterations 12
Cbc0038I Pass  54: suminf.    1.89990 (6) obj. -69.489 iterations 0
Cbc0038I Pass  55: suminf.    1.93258 (5) obj. -69.489 iterations 34
Cbc0038I Pass  56: suminf.    1.85384 (5) obj. -69.489 iterations 16
Cbc0038I Pass  57: suminf.    1.89990 (6) obj. -69.489 iterations 19
Cbc0038I Pass  58: suminf.    6.15585 (15) obj. -69.489 iterations 49
Cbc0038I Pass  59: suminf.    4.48877 (16) obj. -69.489 iterations 54
Cbc0038I Pass  60: suminf.    4.76880 (12) obj. -69.489 iterations 30
Cbc0038I Rounding solution of -60.6936 is better than previous of -56.5594

Cbc0038I Before mini branch and bound, 158 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 192 rows 104 columns
Cbc0038I Mini branch and bound did not improve solution (0.24 seconds)
Cbc0038I Round again with cutoff of -85.0043
Cbc0038I Pass  60: suminf.    5.37877 (18) obj. -85.0043 iterations 10
Cbc0038I Pass  61: suminf.    5.07431 (18) obj. -85.0043 iterations 26
Cbc0038I Pass  62: suminf.    4.99485 (18) obj. -85.0043 iterations 13
Cbc0038I Pass  63: suminf.    5.56817 (15) obj. -85.0043 iterations 44
Cbc0038I Pass  64: suminf.    4.22860 (13) obj. -85.0043 iterations 34
Cbc0038I Pass  65: suminf.    3.47091 (11) obj. -85.0043 iterations 23
Cbc0038I Pass  66: suminf.    4.44754 (12) obj. -85.0043 iterations 23
Cbc0038I Pass  67: suminf.    3.88901 (14) obj. -85.0043 iterations 25
Cbc0038I Pass  68: suminf.    3.88901 (14) obj. -85.0043 iterations 0
Cbc0038I Pass  69: suminf.    5.67541 (16) obj. -85.0043 iterations 35
Cbc0038I Pass  70: suminf.    4.58794 (13) obj. -85.0043 iterations 38
Cbc0038I Pass  71: suminf.    4.49781 (12) obj. -85.0043 iterations 33
Cbc0038I Pass  72: suminf.    3.90169 (13) obj. -85.0043 iterations 19
Cbc0038I Pass  73: suminf.    3.88901 (14) obj. -85.0043 iterations 1
Cbc0038I Pass  74: suminf.    3.88901 (14) obj. -85.0043 iterations 0
Cbc0038I Pass  75: suminf.    5.03455 (15) obj. -85.0043 iterations 25
Cbc0038I Pass  76: suminf.    3.77434 (12) obj. -85.0043 iterations 21
Cbc0038I Pass  77: suminf.    3.77434 (12) obj. -85.0043 iterations 4
Cbc0038I Pass  78: suminf.    5.06049 (14) obj. -85.0043 iterations 33
Cbc0038I Pass  79: suminf.    4.49130 (15) obj. -85.0043 iterations 42
Cbc0038I Pass  80: suminf.    4.34076 (15) obj. -85.0043 iterations 9
Cbc0038I Pass  81: suminf.    4.31462 (14) obj. -85.0043 iterations 16
Cbc0038I Pass  82: suminf.    4.55926 (12) obj. -85.0043 iterations 47
Cbc0038I Pass  83: suminf.    3.95202 (12) obj. -85.0043 iterations 22
Cbc0038I Pass  84: suminf.    3.86174 (12) obj. -85.0043 iterations 6
Cbc0038I Pass  85: suminf.    5.12750 (18) obj. -85.0043 iterations 46
Cbc0038I Pass  86: suminf.    3.90169 (13) obj. -85.0043 iterations 24
Cbc0038I Pass  87: suminf.    3.88901 (14) obj. -85.0043 iterations 1
Cbc0038I Pass  88: suminf.    3.88901 (14) obj. -85.0043 iterations 0
Cbc0038I Pass  89: suminf.    5.67541 (16) obj. -85.0043 iterations 34
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 169 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 171 rows 93 columns
Cbc0038I Mini branch and bound did not improve solution (0.37 seconds)
Cbc0038I After 0.37 seconds - Feasibility pump exiting with objective of -60.6936 - took 0.35 seconds
Cbc0012I Integer solution of -61.22754 found by feasibility pump after 0 iterations and 0 nodes (0.37 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 158 rows 86 columns
Cbc0031I 52 added rows had average density of 121.55769
Cbc0013I At root node, 52 cuts changed objective from -121.20685 to -109.21002 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 41169 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.510 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3469 row cuts average 257.7 elements, 0 column cuts (0 active)  in 0.519 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.086 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 20 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.580 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 196 row cuts average 256.3 elements, 0 column cuts (0 active)  in 0.217 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -61.22754 best solution, best possible -109.21002 (5.44 seconds)
Cbc0010I After 29 nodes, 8 on tree, -61.22754 best solution, best possible -109.21002 (6.15 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 6 rows 12 columns
Cbc0012I Integer solution of -63.63837 found by RINS after 19466 iterations and 41 nodes (6.28 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 109 rows 61 columns
Cbc0010I After 123 nodes, 11 on tree, -63.63837 best solution, best possible -109.21002 (6.85 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 27 rows 17 columns
Cbc0001I Search completed - best objective -63.63837000000001, took 27987 iterations and 220 nodes (7.35 seconds)
Cbc0032I Strong branching done 2112 times (56956 iterations), fathomed 30 nodes and fixed 107 variables
Cbc0035I Maximum depth 52, 1277 variables fixed on reduced cost
Total time (CPU seconds):       7.18   (Wallclock seconds):       7.42

