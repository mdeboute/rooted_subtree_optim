Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 48 (-15) rows, 29 (-3) columns and 146 (-31) elements
Clp1000I sum of infeasibilities 1.57436e-06 - average 3.27991e-08, 3 fixed columns
Coin0506I Presolve 39 (-9) rows, 26 (-3) columns and 123 (-23) elements
Clp0029I End of values pass after 26 iterations
Clp0000I Optimal - objective value 74.405742
Clp0000I Optimal - objective value 74.405742
Coin0511I After Postsolve, objective 74.405742, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 74.405742
Clp0000I Optimal - objective value 74.405742
Clp0000I Optimal - objective value 74.405742
Coin0511I After Postsolve, objective 74.405742, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 74.40574245 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 48 rows, 29 columns (28 integer (28 of which binary)) and 146 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.805%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 22 integers unsatisfied sum - 7.78049
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -14.5835 iterations 22
Cbc0038I Solution found of -14.5835
Cbc0038I Relaxing continuous gives -14.5835
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 48 rows 29 columns, reduced to 36 rows 23 columns
Cbc0038I Mini branch and bound improved solution from -14.5835 to -19.9138 (0.03 seconds)
Cbc0038I Round again with cutoff of -25.3631
Cbc0038I Pass   2: suminf.    0.22241 (2) obj. -25.3631 iterations 2
Cbc0038I Pass   3: suminf.    0.29915 (2) obj. -25.3631 iterations 6
Cbc0038I Pass   4: suminf.    0.67603 (3) obj. -25.3631 iterations 2
Cbc0038I Pass   5: suminf.    0.53222 (2) obj. -25.3631 iterations 4
Cbc0038I Pass   6: suminf.    0.36709 (2) obj. -25.3631 iterations 1
Cbc0038I Pass   7: suminf.    1.12979 (3) obj. -25.3631 iterations 3
Cbc0038I Pass   8: suminf.    0.33175 (3) obj. -25.3631 iterations 3
Cbc0038I Pass   9: suminf.    0.92070 (3) obj. -25.3631 iterations 2
Cbc0038I Pass  10: suminf.    0.89868 (2) obj. -25.3631 iterations 1
Cbc0038I Pass  11: suminf.    3.00970 (8) obj. -25.3631 iterations 7
Cbc0038I Pass  12: suminf.    1.39814 (4) obj. -25.3631 iterations 5
Cbc0038I Pass  13: suminf.    0.91004 (3) obj. -25.3631 iterations 2
Cbc0038I Pass  14: suminf.    0.90490 (3) obj. -25.3631 iterations 1
Cbc0038I Pass  15: suminf.    1.10565 (3) obj. -25.3631 iterations 4
Cbc0038I Pass  16: suminf.    0.85052 (3) obj. -25.3631 iterations 2
Cbc0038I Pass  17: suminf.    0.81194 (3) obj. -25.3631 iterations 1
Cbc0038I Pass  18: suminf.    1.30018 (3) obj. -25.3631 iterations 2
Cbc0038I Pass  19: suminf.    1.66105 (4) obj. -25.3631 iterations 6
Cbc0038I Pass  20: suminf.    1.65908 (4) obj. -25.3631 iterations 1
Cbc0038I Pass  21: suminf.    0.84868 (4) obj. -25.3631 iterations 5
Cbc0038I Pass  22: suminf.    2.54814 (9) obj. -25.3631 iterations 11
Cbc0038I Pass  23: suminf.    1.42097 (6) obj. -25.3631 iterations 7
Cbc0038I Pass  24: suminf.    0.63371 (5) obj. -25.3631 iterations 2
Cbc0038I Pass  25: suminf.    0.38484 (4) obj. -25.3631 iterations 4
Cbc0038I Pass  26: suminf.    1.43030 (5) obj. -25.3631 iterations 7
Cbc0038I Pass  27: suminf.    1.43030 (5) obj. -25.3631 iterations 0
Cbc0038I Pass  28: suminf.    0.53858 (2) obj. -25.3631 iterations 5
Cbc0038I Pass  29: suminf.    0.53858 (2) obj. -25.3631 iterations 0
Cbc0038I Pass  30: suminf.    0.44419 (3) obj. -25.3631 iterations 5
Cbc0038I Pass  31: suminf.    0.43038 (3) obj. -25.3631 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 48 rows 29 columns, reduced to 40 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -19.9138 - took 0.07 seconds
Cbc0012I Integer solution of -19.91381 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 48 rows 29 columns, reduced to 36 rows 23 columns
Cbc0031I 12 added rows had average density of 22.5
Cbc0013I At root node, 12 cuts changed objective from -74.405742 to -43.340918 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2796 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1164 row cuts average 28.9 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 185 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 27.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -19.91381, took 3057 iterations and 16 nodes (0.28 seconds)
Cbc0032I Strong branching done 124 times (991 iterations), fathomed 0 nodes and fixed 14 variables
Cbc0035I Maximum depth 4, 20 variables fixed on reduced cost
Total time (CPU seconds):       0.30   (Wallclock seconds):       0.28

