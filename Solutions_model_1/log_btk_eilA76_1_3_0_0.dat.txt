Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 123 (-32) rows, 66 (-12) columns and 370 (-83) elements
Clp1000I sum of infeasibilities 2.88179e-05 - average 2.34292e-07, 22 fixed columns
Coin0506I Presolve 74 (-49) rows, 41 (-25) columns and 222 (-148) elements
Clp0029I End of values pass after 41 iterations
Clp0000I Optimal - objective value 107.33072
Clp0000I Optimal - objective value 107.33072
Coin0511I After Postsolve, objective 107.33072, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.25913 - largest nonzero change 0 ( 0%) - largest zero change 2.7184261e-05
Clp0000I Optimal - objective value 107.33072
Clp0000I Optimal - objective value 107.33072
Clp0000I Optimal - objective value 107.33072
Coin0511I After Postsolve, objective 107.33072, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 107.3307168 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 123 rows, 66 columns (65 integer (65 of which binary)) and 380 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.538%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 26 integers unsatisfied sum - 4.30137
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -58.1431 iterations 30
Cbc0038I Solution found of -58.1431
Cbc0038I Relaxing continuous gives -58.1431
Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 66 columns, reduced to 48 rows 27 columns
Cbc0038I Mini branch and bound improved solution from -58.1431 to -75.0185 (0.03 seconds)
Cbc0038I Round again with cutoff of -78.2498
Cbc0038I Pass   2: suminf.    0.98251 (3) obj. -78.2498 iterations 7
Cbc0038I Pass   3: suminf.    0.91683 (3) obj. -78.2498 iterations 6
Cbc0038I Pass   4: suminf.    0.37050 (2) obj. -78.2498 iterations 3
Cbc0038I Pass   5: suminf.    0.56957 (2) obj. -78.2498 iterations 6
Cbc0038I Pass   6: suminf.    0.56957 (2) obj. -78.2498 iterations 0
Cbc0038I Pass   7: suminf.    2.10612 (8) obj. -78.2498 iterations 18
Cbc0038I Pass   8: suminf.    1.10774 (4) obj. -78.2498 iterations 14
Cbc0038I Pass   9: suminf.    1.43792 (5) obj. -78.2498 iterations 12
Cbc0038I Pass  10: suminf.    0.97649 (4) obj. -78.2498 iterations 9
Cbc0038I Pass  11: suminf.    1.30070 (7) obj. -78.2498 iterations 20
Cbc0038I Pass  12: suminf.    1.20764 (5) obj. -78.2498 iterations 12
Cbc0038I Pass  13: suminf.    0.79586 (4) obj. -78.2498 iterations 15
Cbc0038I Pass  14: suminf.    0.59304 (3) obj. -78.2498 iterations 1
Cbc0038I Pass  15: suminf.    0.38462 (1) obj. -78.2498 iterations 6
Cbc0038I Pass  16: suminf.    0.32603 (2) obj. -78.2498 iterations 4
Cbc0038I Pass  17: suminf.    0.53843 (2) obj. -78.2498 iterations 3
Cbc0038I Pass  18: suminf.    0.53843 (2) obj. -78.2498 iterations 0
Cbc0038I Pass  19: suminf.    0.77781 (2) obj. -78.2498 iterations 3
Cbc0038I Pass  20: suminf.    4.20351 (9) obj. -78.2498 iterations 21
Cbc0038I Pass  21: suminf.    1.03963 (6) obj. -78.2498 iterations 14
Cbc0038I Pass  22: suminf.    0.95270 (6) obj. -78.2498 iterations 8
Cbc0038I Pass  23: suminf.    0.70908 (4) obj. -78.2498 iterations 14
Cbc0038I Pass  24: suminf.    0.90316 (3) obj. -78.2498 iterations 7
Cbc0038I Pass  25: suminf.    0.85277 (3) obj. -78.2498 iterations 3
Cbc0038I Pass  26: suminf.    2.16853 (9) obj. -78.2498 iterations 16
Cbc0038I Pass  27: suminf.    0.84539 (4) obj. -78.2498 iterations 17
Cbc0038I Pass  28: suminf.    0.66919 (3) obj. -78.2498 iterations 3
Cbc0038I Pass  29: suminf.    1.13966 (5) obj. -78.2498 iterations 9
Cbc0038I Pass  30: suminf.    1.06539 (4) obj. -78.2498 iterations 2
Cbc0038I Pass  31: suminf.    0.83200 (2) obj. -78.2498 iterations 6
Cbc0038I Rounding solution of -78.6942 is better than previous of -75.0185

Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 66 columns, reduced to 66 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -84.4216
Cbc0038I Pass  31: suminf.    1.27034 (5) obj. -84.4216 iterations 1
Cbc0038I Pass  32: suminf.    0.78586 (2) obj. -84.4216 iterations 5
Cbc0038I Pass  33: suminf.    0.65590 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  34: suminf.    0.78586 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  35: suminf.    3.82983 (12) obj. -84.4216 iterations 19
Cbc0038I Pass  36: suminf.    2.32879 (7) obj. -84.4216 iterations 22
Cbc0038I Pass  37: suminf.    1.68452 (5) obj. -84.4216 iterations 6
Cbc0038I Pass  38: suminf.    0.83822 (3) obj. -84.4216 iterations 4
Cbc0038I Pass  39: suminf.    0.65590 (2) obj. -84.4216 iterations 7
Cbc0038I Pass  40: suminf.    0.78586 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  41: suminf.    1.41341 (6) obj. -84.4216 iterations 9
Cbc0038I Pass  42: suminf.    0.92085 (3) obj. -84.4216 iterations 11
Cbc0038I Pass  43: suminf.    0.75197 (3) obj. -84.4216 iterations 5
Cbc0038I Pass  44: suminf.    1.09154 (6) obj. -84.4216 iterations 12
Cbc0038I Pass  45: suminf.    0.69547 (4) obj. -84.4216 iterations 6
Cbc0038I Pass  46: suminf.    1.71552 (5) obj. -84.4216 iterations 7
Cbc0038I Pass  47: suminf.    0.79086 (3) obj. -84.4216 iterations 1
Cbc0038I Pass  48: suminf.    0.65590 (2) obj. -84.4216 iterations 7
Cbc0038I Pass  49: suminf.    0.78586 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  50: suminf.    2.41948 (10) obj. -84.4216 iterations 12
Cbc0038I Pass  51: suminf.    1.94179 (8) obj. -84.4216 iterations 4
Cbc0038I Pass  52: suminf.    2.27358 (6) obj. -84.4216 iterations 9
Cbc0038I Pass  53: suminf.    1.09238 (3) obj. -84.4216 iterations 5
Cbc0038I Pass  54: suminf.    0.78586 (2) obj. -84.4216 iterations 1
Cbc0038I Pass  55: suminf.    0.65590 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  56: suminf.    0.78586 (2) obj. -84.4216 iterations 6
Cbc0038I Pass  57: suminf.    1.92017 (8) obj. -84.4216 iterations 12
Cbc0038I Pass  58: suminf.    1.82954 (8) obj. -84.4216 iterations 10
Cbc0038I Pass  59: suminf.    1.86411 (5) obj. -84.4216 iterations 17
Cbc0038I Pass  60: suminf.    1.21286 (4) obj. -84.4216 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 66 columns, reduced to 64 rows 35 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -78.6942 - took 0.05 seconds
Cbc0012I Integer solution of -78.6942 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 123 rows 66 columns, reduced to 50 rows 28 columns
Cbc0031I 20 added rows had average density of 34.7
Cbc0013I At root node, 20 cuts changed objective from -107.33072 to -94.688686 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3838 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.053 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 862 row cuts average 58.1 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 163 row cuts average 38.4 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0001I Search completed - best objective -78.6942, took 5641 iterations and 24 nodes (0.55 seconds)
Cbc0032I Strong branching done 352 times (6070 iterations), fathomed 0 nodes and fixed 14 variables
Cbc0035I Maximum depth 10, 60 variables fixed on reduced cost
Total time (CPU seconds):       0.53   (Wallclock seconds):       0.55

