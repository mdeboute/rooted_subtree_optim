Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 101 (-54) rows, 54 (-24) columns and 303 (-150) elements
Clp1000I sum of infeasibilities 9.63392e-06 - average 9.53854e-08, 13 fixed columns
Coin0506I Presolve 76 (-25) rows, 41 (-13) columns and 227 (-76) elements
Clp0014I Perturbing problem by 0.001% of 0.42105161 - largest nonzero change 1.3962885e-05 ( 0.0011991495%) - largest zero change 2.8820022e-05
Clp0000I Optimal - objective value 154.73631
Clp0000I Optimal - objective value 154.73631
Coin0511I After Postsolve, objective 154.73631, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.36038826 - largest nonzero change 1.3962885e-05 ( 0.0011991495%) - largest zero change 2.8820022e-05
Clp0000I Optimal - objective value 154.73631
Clp0000I Optimal - objective value 154.73631
Clp0000I Optimal - objective value 154.73631
Coin0511I After Postsolve, objective 154.73631, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 154.7363124 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 101 rows, 54 columns (53 integer (53 of which binary)) and 303 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.682%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 30 integers unsatisfied sum - 8.33571
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.0556 iterations 37
Cbc0038I Solution found of -25.0556
Cbc0038I Relaxing continuous gives -25.0556
Cbc0038I Rounding solution of -55.8254 is better than previous of -25.0556

Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 101 rows 54 columns, reduced to 49 rows 31 columns
Cbc0038I Mini branch and bound improved solution from -55.8254 to -123.162 (0.03 seconds)
Cbc0038I Round again with cutoff of -126.319
Cbc0038I Pass   2: suminf.    4.35937 (10) obj. -126.319 iterations 19
Cbc0038I Pass   3: suminf.    1.29178 (9) obj. -126.319 iterations 15
Cbc0038I Pass   4: suminf.    1.25837 (11) obj. -126.319 iterations 2
Cbc0038I Pass   5: suminf.    2.43036 (5) obj. -126.319 iterations 10
Cbc0038I Pass   6: suminf.    0.16129 (1) obj. -127.729 iterations 9
Cbc0038I Pass   7: suminf.    0.11150 (1) obj. -126.319 iterations 2
Cbc0038I Pass   8: suminf.    0.16129 (1) obj. -127.729 iterations 2
Cbc0038I Pass   9: suminf.    0.85018 (7) obj. -126.319 iterations 10
Cbc0038I Pass  10: suminf.    0.85018 (7) obj. -126.319 iterations 1
Cbc0038I Pass  11: suminf.    2.35427 (8) obj. -126.319 iterations 10
Cbc0038I Pass  12: suminf.    0.52304 (4) obj. -126.319 iterations 11
Cbc0038I Pass  13: suminf.    0.52304 (4) obj. -126.319 iterations 0
Cbc0038I Pass  14: suminf.    1.76487 (5) obj. -126.319 iterations 9
Cbc0038I Pass  15: suminf.    1.65772 (8) obj. -126.319 iterations 4
Cbc0038I Pass  16: suminf.    1.49835 (6) obj. -126.319 iterations 9
Cbc0038I Pass  17: suminf.    0.13157 (3) obj. -126.319 iterations 9
Cbc0038I Pass  18: suminf.    0.13157 (3) obj. -126.319 iterations 0
Cbc0038I Pass  19: suminf.    1.37978 (3) obj. -126.319 iterations 7
Cbc0038I Pass  20: suminf.    2.36628 (8) obj. -126.319 iterations 12
Cbc0038I Pass  21: suminf.    1.24607 (7) obj. -126.319 iterations 7
Cbc0038I Pass  22: suminf.    2.13019 (7) obj. -126.319 iterations 11
Cbc0038I Pass  23: suminf.    1.39521 (7) obj. -126.319 iterations 3
Cbc0038I Pass  24: suminf.    2.17087 (6) obj. -126.319 iterations 8
Cbc0038I Pass  25: suminf.    0.86125 (4) obj. -126.319 iterations 11
Cbc0038I Pass  26: suminf.    0.86125 (4) obj. -126.319 iterations 0
Cbc0038I Pass  27: suminf.    1.50757 (5) obj. -126.319 iterations 7
Cbc0038I Pass  28: suminf.    1.39521 (7) obj. -126.319 iterations 2
Cbc0038I Pass  29: suminf.    2.17087 (6) obj. -126.319 iterations 8
Cbc0038I Pass  30: suminf.    0.86125 (4) obj. -126.319 iterations 12
Cbc0038I Pass  31: suminf.    0.86125 (4) obj. -126.319 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 19 integers at bound fixed and 0 continuous
Cbc0038I Full problem 101 rows 54 columns, reduced to 55 rows 35 columns
Cbc0038I Mini branch and bound improved solution from -123.162 to -123.47 (0.05 seconds)
Cbc0038I Round again with cutoff of -132.003
Cbc0038I Pass  31: suminf.    4.69421 (12) obj. -132.003 iterations 1
Cbc0038I Pass  32: suminf.    2.44845 (9) obj. -132.003 iterations 12
Cbc0038I Pass  33: suminf.    2.41644 (11) obj. -132.003 iterations 2
Cbc0038I Pass  34: suminf.    1.65136 (6) obj. -132.003 iterations 12
Cbc0038I Pass  35: suminf.    0.59059 (8) obj. -132.003 iterations 7
Cbc0038I Pass  36: suminf.    0.59059 (8) obj. -132.003 iterations 4
Cbc0038I Pass  37: suminf.    1.03712 (9) obj. -132.003 iterations 13
Cbc0038I Pass  38: suminf.    1.02040 (9) obj. -132.003 iterations 2
Cbc0038I Pass  39: suminf.    2.32876 (9) obj. -132.003 iterations 12
Cbc0038I Pass  40: suminf.    0.59059 (8) obj. -132.003 iterations 7
Cbc0038I Pass  41: suminf.    0.59059 (8) obj. -132.003 iterations 4
Cbc0038I Pass  42: suminf.    1.03712 (9) obj. -132.003 iterations 15
Cbc0038I Pass  43: suminf.    1.02040 (9) obj. -132.003 iterations 2
Cbc0038I Pass  44: suminf.    2.32876 (9) obj. -132.003 iterations 12
Cbc0038I Pass  45: suminf.    0.59059 (8) obj. -132.003 iterations 7
Cbc0038I Pass  46: suminf.    0.59059 (8) obj. -132.003 iterations 4
Cbc0038I Pass  47: suminf.    1.03712 (9) obj. -132.003 iterations 13
Cbc0038I Pass  48: suminf.    1.02040 (9) obj. -132.003 iterations 2
Cbc0038I Pass  49: suminf.    2.32876 (9) obj. -132.003 iterations 12
Cbc0038I Pass  50: suminf.    0.59059 (8) obj. -132.003 iterations 7
Cbc0038I Pass  51: suminf.    0.59059 (8) obj. -132.003 iterations 4
Cbc0038I Pass  52: suminf.    1.03712 (9) obj. -132.003 iterations 15
Cbc0038I Pass  53: suminf.    1.02040 (9) obj. -132.003 iterations 2
Cbc0038I Pass  54: suminf.    2.32876 (9) obj. -132.003 iterations 14
Cbc0038I Pass  55: suminf.    0.59059 (8) obj. -132.003 iterations 8
Cbc0038I Pass  56: suminf.    0.59059 (8) obj. -132.003 iterations 5
Cbc0038I Pass  57: suminf.    1.03712 (9) obj. -132.003 iterations 15
Cbc0038I Pass  58: suminf.    1.02040 (9) obj. -132.003 iterations 2
Cbc0038I Pass  59: suminf.    2.32876 (9) obj. -132.003 iterations 12
Cbc0038I Pass  60: suminf.    0.59059 (8) obj. -132.003 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 101 rows 54 columns, reduced to 51 rows 32 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -123.47 - took 0.06 seconds
Cbc0012I Integer solution of -123.4701 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 101 rows 54 columns, reduced to 51 rows 33 columns
Cbc0031I 7 added rows had average density of 45.428571
Cbc0013I At root node, 7 cuts changed objective from -154.73631 to -138.98467 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1145 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 486 row cuts average 52.1 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 57 row cuts average 47.7 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0012I Integer solution of -124.0496 found by rounding after 1566 iterations and 1 nodes (0.27 seconds)
Cbc0016I Integer solution of -126.71744 found by strong branching after 1936 iterations and 17 nodes (0.33 seconds)
Cbc0001I Search completed - best objective -126.71744, took 1966 iterations and 18 nodes (0.33 seconds)
Cbc0032I Strong branching done 144 times (1243 iterations), fathomed 6 nodes and fixed 7 variables
Cbc0035I Maximum depth 5, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.31   (Wallclock seconds):       0.34

