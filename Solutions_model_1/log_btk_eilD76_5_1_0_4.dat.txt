Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 111 (-44) rows, 62 (-16) columns and 339 (-114) elements
Clp1000I sum of infeasibilities 6.24173e-06 - average 5.62318e-08, 51 fixed columns
Coin0506I Presolve 14 (-97) rows, 11 (-51) columns and 44 (-295) elements
Clp0029I End of values pass after 11 iterations
Clp0000I Optimal - objective value 18024.3
Clp0000I Optimal - objective value 18024.3
Coin0511I After Postsolve, objective 18024.3, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.45253298 - largest nonzero change 2.1915523e-05 ( 0.0017128079%) - largest zero change 2.8365385e-05
Clp0000I Optimal - objective value 18024.3
Clp0000I Optimal - objective value 18024.3
Clp0000I Optimal - objective value 18024.3
Coin0511I After Postsolve, objective 18024.3, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 18024.29976 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 111 rows, 62 columns (61 integer (61 of which binary)) and 339 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.406%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 7 integers unsatisfied sum - 2.77135
Cbc0038I Solution found of -14446.9
Cbc0038I Relaxing continuous gives -14446.9
Cbc0038I Before mini branch and bound, 54 integers at bound fixed and 0 continuous
Cbc0038I Full problem 111 rows 62 columns, reduced to 8 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -14446.9 to -16163.1 (0.01 seconds)
Cbc0038I Round again with cutoff of -16349.2
Cbc0038I Pass   1: suminf.    0.41143 (7) obj. -16349.2 iterations 12
Cbc0038I Pass   2: suminf.    0.41143 (7) obj. -16349.2 iterations 0
Cbc0038I Pass   3: suminf.    1.04159 (4) obj. -16349.2 iterations 17
Cbc0038I Pass   4: suminf.    0.34495 (1) obj. -16349.2 iterations 3
Cbc0038I Pass   5: suminf.    0.31034 (1) obj. -16459.4 iterations 1
Cbc0038I Pass   6: suminf.    2.19646 (6) obj. -16349.2 iterations 14
Cbc0038I Pass   7: suminf.    0.76093 (2) obj. -16349.2 iterations 11
Cbc0038I Pass   8: suminf.    0.37218 (3) obj. -17135.6 iterations 3
Cbc0038I Pass   9: suminf.    0.76093 (2) obj. -16349.2 iterations 3
Cbc0038I Pass  10: suminf.    1.13649 (4) obj. -16349.2 iterations 16
Cbc0038I Pass  11: suminf.    0.96117 (2) obj. -16349.2 iterations 7
Cbc0038I Pass  12: suminf.    0.29032 (1) obj. -17072.4 iterations 6
Cbc0038I Solution found of -16691.9
Cbc0038I Relaxing continuous gives -16691.9
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 111 rows 62 columns, reduced to 17 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -16691.9 to -17305.4 (0.01 seconds)
Cbc0038I Round again with cutoff of -17449.2
Cbc0038I Reduced cost fixing fixed 24 variables on major pass 3
Cbc0038I Pass  13: suminf.    2.03438 (7) obj. -17449.2 iterations 2
Cbc0038I Pass  14: suminf.    1.69635 (7) obj. -17449.2 iterations 3
Cbc0038I Pass  15: suminf.    0.66000 (3) obj. -17461.7 iterations 13
Cbc0038I Pass  16: suminf.    0.66000 (3) obj. -17461.7 iterations 0
Cbc0038I Pass  17: suminf.    0.88798 (4) obj. -17449.2 iterations 9
Cbc0038I Pass  18: suminf.    1.30726 (6) obj. -17449.2 iterations 6
Cbc0038I Pass  19: suminf.    1.30726 (6) obj. -17449.2 iterations 3
Cbc0038I Pass  20: suminf.    1.12685 (5) obj. -17449.2 iterations 8
Cbc0038I Pass  21: suminf.    1.12685 (5) obj. -17449.2 iterations 2
Cbc0038I Pass  22: suminf.    1.61692 (5) obj. -17449.2 iterations 5
Cbc0038I Pass  23: suminf.    1.48897 (6) obj. -17449.2 iterations 15
Cbc0038I Pass  24: suminf.    1.27840 (5) obj. -17449.2 iterations 7
Cbc0038I Pass  25: suminf.    1.10725 (5) obj. -17449.2 iterations 4
Cbc0038I Pass  26: suminf.    0.91333 (3) obj. -17556.9 iterations 6
Cbc0038I Pass  27: suminf.    0.97746 (3) obj. -17449.2 iterations 6
Cbc0038I Pass  28: suminf.    1.74047 (4) obj. -17449.2 iterations 9
Cbc0038I Pass  29: suminf.    1.31472 (4) obj. -17449.2 iterations 6
Cbc0038I Pass  30: suminf.    0.73564 (5) obj. -17449.2 iterations 6
Cbc0038I Pass  31: suminf.    3.79132 (8) obj. -17449.2 iterations 11
Cbc0038I Pass  32: suminf.    1.19760 (6) obj. -17449.2 iterations 10
Cbc0038I Pass  33: suminf.    1.55196 (10) obj. -17449.2 iterations 6
Cbc0038I Pass  34: suminf.    1.38817 (6) obj. -17449.2 iterations 2
Cbc0038I Pass  35: suminf.    0.56229 (8) obj. -17449.2 iterations 8
Cbc0038I Pass  36: suminf.    0.01941 (6) obj. -17449.2 iterations 10
Cbc0038I Pass  37: suminf.    2.66330 (7) obj. -17449.2 iterations 7
Cbc0038I Pass  38: suminf.    2.32860 (6) obj. -17449.2 iterations 6
Cbc0038I Pass  39: suminf.    0.80239 (4) obj. -17449.2 iterations 5
Cbc0038I Pass  40: suminf.    0.80239 (4) obj. -17449.2 iterations 0
Cbc0038I Pass  41: suminf.    0.31050 (3) obj. -17449.2 iterations 11
Cbc0038I Pass  42: suminf.    0.25448 (2) obj. -17449.2 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 111 rows 62 columns, reduced to 23 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -17305.4 to -17445.7 (0.02 seconds)
Cbc0038I Round again with cutoff of -17621.7
Cbc0038I Reduced cost fixing fixed 32 variables on major pass 4
Cbc0038I Pass  42: suminf.    2.45713 (7) obj. -17621.7 iterations 2
Cbc0038I Pass  43: suminf.    0.72474 (6) obj. -17621.7 iterations 13
Cbc0038I Pass  44: suminf.    0.72474 (6) obj. -17621.7 iterations 0
Cbc0038I Pass  45: suminf.    2.61598 (7) obj. -17621.7 iterations 10
Cbc0038I Pass  46: suminf.    0.96261 (2) obj. -17621.7 iterations 10
Cbc0038I Pass  47: suminf.    0.96261 (2) obj. -17621.7 iterations 0
Cbc0038I Pass  48: suminf.    0.96668 (2) obj. -17621.7 iterations 5
Cbc0038I Pass  49: suminf.    1.04867 (4) obj. -17621.7 iterations 4
Cbc0038I Pass  50: suminf.    0.96668 (2) obj. -17621.7 iterations 4
Cbc0038I Pass  51: suminf.    1.05650 (5) obj. -17621.7 iterations 9
Cbc0038I Pass  52: suminf.    0.77928 (7) obj. -17621.7 iterations 22
Cbc0038I Pass  53: suminf.    0.51224 (7) obj. -17621.7 iterations 4
Cbc0038I Pass  54: suminf.    1.81346 (8) obj. -17621.7 iterations 11
Cbc0038I Pass  55: suminf.    0.62219 (7) obj. -17621.7 iterations 5
Cbc0038I Pass  56: suminf.    2.61598 (7) obj. -17621.7 iterations 10
Cbc0038I Pass  57: suminf.    0.96261 (2) obj. -17621.7 iterations 10
Cbc0038I Pass  58: suminf.    0.96261 (2) obj. -17621.7 iterations 0
Cbc0038I Pass  59: suminf.    0.96668 (2) obj. -17621.7 iterations 5
Cbc0038I Pass  60: suminf.    1.70278 (6) obj. -17621.7 iterations 13
Cbc0038I Pass  61: suminf.    1.67858 (8) obj. -17621.7 iterations 4
Cbc0038I Pass  62: suminf.    1.70596 (6) obj. -17621.7 iterations 8
Cbc0038I Pass  63: suminf.    1.70596 (6) obj. -17621.7 iterations 1
Cbc0038I Pass  64: suminf.    1.92538 (5) obj. -17621.7 iterations 4
Cbc0038I Pass  65: suminf.    1.79902 (4) obj. -17621.7 iterations 1
Cbc0038I Pass  66: suminf.    0.51714 (6) obj. -17621.7 iterations 7
Cbc0038I Pass  67: suminf.    1.42218 (7) obj. -17621.7 iterations 6
Cbc0038I Pass  68: suminf.    0.90881 (3) obj. -17641.3 iterations 10
Cbc0038I Pass  69: suminf.    0.97776 (3) obj. -17621.7 iterations 7
Cbc0038I Pass  70: suminf.    1.09938 (4) obj. -17621.7 iterations 5
Cbc0038I Pass  71: suminf.    0.92308 (3) obj. -17676.8 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 111 rows 62 columns, reduced to 18 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -17445.7 - took 0.03 seconds
Cbc0012I Integer solution of -17445.655 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 111 rows 62 columns, reduced to 15 rows 12 columns
Cbc0031I 6 added rows had average density of 12.5
Cbc0013I At root node, 44 cuts changed objective from -18024.3 to -17445.655 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 19 row cuts average 2.5 elements, 5 column cuts (5 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 11 row cuts average 11.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 17 row cuts average 9.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 40 row cuts average 14.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 6 row cuts average 60.7 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is 1
Cbc0001I Search completed - best objective -17445.655, took 55 iterations and 0 nodes (0.13 seconds)
Cbc0035I Maximum depth 0, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.13

