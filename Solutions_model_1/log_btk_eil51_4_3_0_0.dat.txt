Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 76 (-29) rows, 45 (-8) columns and 235 (-68) elements
Clp1000I sum of infeasibilities 1.96405e-05 - average 2.58427e-07, 10 fixed columns
Coin0506I Presolve 57 (-19) rows, 35 (-10) columns and 177 (-58) elements
Clp0000I Optimal - objective value 53.496766
Clp0000I Optimal - objective value 53.496766
Coin0511I After Postsolve, objective 53.496766, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 53.496766
Clp0000I Optimal - objective value 53.496766
Clp0000I Optimal - objective value 53.496766
Coin0511I After Postsolve, objective 53.496766, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 53.4967657 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 76 rows, 45 columns (44 integer (44 of which binary)) and 235 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.807%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 22 integers unsatisfied sum - 8.39459
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -10.2716 iterations 25
Cbc0038I Solution found of -10.2716
Cbc0038I Relaxing continuous gives -10.2716
Cbc0038I Rounding solution of -20.0464 is better than previous of -10.2716

Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 45 columns, reduced to 34 rows 23 columns
Cbc0038I Mini branch and bound improved solution from -20.0464 to -31.7621 (0.04 seconds)
Cbc0038I Round again with cutoff of -33.9357
Cbc0038I Pass   2: suminf.    0.94962 (6) obj. -33.9357 iterations 9
Cbc0038I Pass   3: suminf.    0.88088 (7) obj. -33.9357 iterations 2
Cbc0038I Pass   4: suminf.    1.77905 (6) obj. -33.9357 iterations 12
Cbc0038I Pass   5: suminf.    0.68772 (3) obj. -33.9357 iterations 5
Cbc0038I Pass   6: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I Pass   7: suminf.    1.08610 (4) obj. -33.9357 iterations 6
Cbc0038I Pass   8: suminf.    0.97271 (3) obj. -33.9357 iterations 1
Cbc0038I Pass   9: suminf.    0.72168 (3) obj. -33.9357 iterations 2
Cbc0038I Pass  10: suminf.    0.68772 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  11: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  12: suminf.    1.08610 (4) obj. -33.9357 iterations 6
Cbc0038I Pass  13: suminf.    0.97271 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  14: suminf.    0.72168 (3) obj. -33.9357 iterations 2
Cbc0038I Pass  15: suminf.    0.68772 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  16: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  17: suminf.    1.08610 (4) obj. -33.9357 iterations 6
Cbc0038I Pass  18: suminf.    0.97271 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  19: suminf.    0.72168 (3) obj. -33.9357 iterations 2
Cbc0038I Pass  20: suminf.    0.68772 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  21: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  22: suminf.    1.08610 (4) obj. -33.9357 iterations 6
Cbc0038I Pass  23: suminf.    0.97271 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  24: suminf.    0.72168 (3) obj. -33.9357 iterations 2
Cbc0038I Pass  25: suminf.    0.68772 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  26: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  27: suminf.    1.08610 (4) obj. -33.9357 iterations 6
Cbc0038I Pass  28: suminf.    0.97271 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  29: suminf.    0.72168 (3) obj. -33.9357 iterations 2
Cbc0038I Pass  30: suminf.    0.68772 (3) obj. -33.9357 iterations 1
Cbc0038I Pass  31: suminf.    0.68268 (3) obj. -33.9357 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 45 columns, reduced to 34 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -31.7621 - took 0.04 seconds
Cbc0012I Integer solution of -31.762114 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 76 rows 45 columns, reduced to 34 rows 23 columns
Cbc0031I 15 added rows had average density of 34.466667
Cbc0013I At root node, 15 cuts changed objective from -53.496766 to -38.036876 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2441 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 729 row cuts average 44.9 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 118 row cuts average 44.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0001I Search completed - best objective -31.762114, took 3229 iterations and 16 nodes (0.33 seconds)
Cbc0032I Strong branching done 168 times (1798 iterations), fathomed 0 nodes and fixed 7 variables
Cbc0035I Maximum depth 5, 63 variables fixed on reduced cost
Total time (CPU seconds):       0.32   (Wallclock seconds):       0.34

