Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 317 (-11) rows, 161 (-4) columns and 792 (-22) elements
Clp1000I sum of infeasibilities 0.130787 - average 0.000412578, 12 fixed columns
Coin0506I Presolve 290 (-27) rows, 149 (-12) columns and 726 (-66) elements
Clp0029I End of values pass after 149 iterations
Clp0000I Optimal - objective value 8971.0838
Clp0000I Optimal - objective value 8971.0838
Coin0511I After Postsolve, objective 8971.0838, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.36899396 - largest nonzero change 0 ( 0%) - largest zero change 2.8411754e-05
Clp0000I Optimal - objective value 8971.0838
Clp0000I Optimal - objective value 8971.0838
Clp0000I Optimal - objective value 8971.0838
Coin0511I After Postsolve, objective 8971.0838, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 8971.083841 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 317 rows, 161 columns (160 integer (160 of which binary)) and 792 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.608%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 146 integers unsatisfied sum - 53.8335
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -2360.47 iterations 135
Cbc0038I Solution found of -2360.47
Cbc0038I Relaxing continuous gives -2360.47
Cbc0038I Rounding solution of -2557.08 is better than previous of -2360.47

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 317 rows 161 columns, reduced to 286 rows 147 columns - 8 fixed gives 225, 135 - still too large
Cbc0038I Full problem 317 rows 161 columns, reduced to 225 rows 135 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -3198.48
Cbc0038I Pass   2: suminf.    1.41925 (13) obj. -3198.48 iterations 23
Cbc0038I Pass   3: suminf.    2.23154 (13) obj. -3198.48 iterations 48
Cbc0038I Pass   4: suminf.    2.23154 (13) obj. -3198.48 iterations 1
Cbc0038I Pass   5: suminf.    3.00133 (11) obj. -3198.48 iterations 22
Cbc0038I Pass   6: suminf.    2.39900 (8) obj. -3198.48 iterations 4
Cbc0038I Pass   7: suminf.    0.20716 (2) obj. -3198.48 iterations 16
Cbc0038I Pass   8: suminf.    0.00000 (0) obj. -3198.48 iterations 2
Cbc0038I Solution found of -3198.48
Cbc0038I Relaxing continuous gives -3585.61
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 317 rows 161 columns, reduced to 296 rows 151 columns - 1 fixed gives 294, 150 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -4662.71
Cbc0038I Pass   9: suminf.    6.74878 (24) obj. -4662.71 iterations 4
Cbc0038I Pass  10: suminf.    6.59802 (24) obj. -4662.71 iterations 3
Cbc0038I Pass  11: suminf.    7.34031 (30) obj. -4662.71 iterations 43
Cbc0038I Pass  12: suminf.    7.08816 (26) obj. -4662.71 iterations 3
Cbc0038I Pass  13: suminf.    9.10430 (22) obj. -4662.71 iterations 32
Cbc0038I Pass  14: suminf.    8.92131 (22) obj. -4662.71 iterations 6
Cbc0038I Pass  15: suminf.    8.86878 (26) obj. -4662.71 iterations 25
Cbc0038I Pass  16: suminf.    7.58814 (29) obj. -4662.71 iterations 11
Cbc0038I Pass  17: suminf.    7.56320 (27) obj. -4662.71 iterations 1
Cbc0038I Pass  18: suminf.    7.56320 (27) obj. -4662.71 iterations 0
Cbc0038I Pass  19: suminf.    9.51872 (25) obj. -4662.71 iterations 33
Cbc0038I Pass  20: suminf.    9.26434 (27) obj. -4662.71 iterations 6
Cbc0038I Pass  21: suminf.    9.88257 (30) obj. -4662.71 iterations 45
Cbc0038I Pass  22: suminf.    9.36922 (33) obj. -4662.71 iterations 17
Cbc0038I Pass  23: suminf.    9.50743 (29) obj. -4662.71 iterations 20
Cbc0038I Pass  24: suminf.    9.22213 (29) obj. -4662.71 iterations 4
Cbc0038I Pass  25: suminf.   10.17458 (30) obj. -4662.71 iterations 24
Cbc0038I Pass  26: suminf.    9.70215 (35) obj. -4662.71 iterations 18
Cbc0038I Pass  27: suminf.    9.49150 (34) obj. -4662.71 iterations 3
Cbc0038I Pass  28: suminf.    9.47990 (34) obj. -4662.71 iterations 1
Cbc0038I Pass  29: suminf.   10.54952 (34) obj. -4662.71 iterations 16
Cbc0038I Pass  30: suminf.   10.15733 (36) obj. -4662.71 iterations 7
Cbc0038I Pass  31: suminf.   11.30650 (30) obj. -4662.71 iterations 25
Cbc0038I Pass  32: suminf.    9.60972 (31) obj. -4662.71 iterations 23
Cbc0038I Pass  33: suminf.    9.49733 (33) obj. -4662.71 iterations 4
Cbc0038I Pass  34: suminf.   11.30482 (29) obj. -4662.71 iterations 41
Cbc0038I Pass  35: suminf.   10.07292 (30) obj. -4662.71 iterations 24
Cbc0038I Pass  36: suminf.    9.98532 (32) obj. -4662.71 iterations 12
Cbc0038I Pass  37: suminf.    9.98532 (32) obj. -4662.71 iterations 1
Cbc0038I Pass  38: suminf.   10.50056 (29) obj. -4662.71 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 317 rows 161 columns, reduced to 286 rows 147 columns - 1 fixed gives 284, 146 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -3585.61 - took 0.04 seconds
Cbc0012I Integer solution of -3585.6119 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0031I 47 added rows had average density of 81.234043
Cbc0013I At root node, 47 cuts changed objective from -8971.0838 to -6919.7534 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 45386 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.352 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3171 row cuts average 156.0 elements, 0 column cuts (0 active)  in 0.381 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.242 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 627 row cuts average 6.9 elements, 0 column cuts (0 active)  in 0.525 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 223 row cuts average 129.2 elements, 0 column cuts (0 active)  in 0.131 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -3585.6119 best solution, best possible -6919.7534 (4.22 seconds)
Cbc0012I Integer solution of -3688.0199 found by DiveCoefficient after 17601 iterations and 13 nodes (4.86 seconds)
Cbc0010I After 16 nodes, 9 on tree, -3688.0199 best solution, best possible -6919.7534 (4.94 seconds)
Cbc0038I Full problem 317 rows 161 columns, reduced to 185 rows 95 columns - 1 fixed gives 182, 94 - still too large
Cbc0038I Full problem 317 rows 161 columns, reduced to 182 rows 94 columns - too large
Cbc0010I After 87 nodes, 11 on tree, -3688.0199 best solution, best possible -6919.7534 (5.65 seconds)
Cbc0038I Full problem 317 rows 161 columns, reduced to 197 rows 101 columns - 1 fixed gives 194, 100 - still too large
Cbc0038I Full problem 317 rows 161 columns, reduced to 194 rows 100 columns - too large
Cbc0016I Integer solution of -3688.0262 found by strong branching after 25332 iterations and 160 nodes (5.85 seconds)
Cbc0016I Integer solution of -3688.0268 found by strong branching after 26558 iterations and 199 nodes (5.96 seconds)
Cbc0016I Integer solution of -3688.0279 found by strong branching after 28254 iterations and 248 nodes (6.12 seconds)
Cbc0012I Integer solution of -3688.8078 found by DiveCoefficient after 29481 iterations and 268 nodes (6.25 seconds)
Cbc0016I Integer solution of -3689.2038 found by strong branching after 29502 iterations and 269 nodes (6.25 seconds)
Cbc0012I Integer solution of -3689.2042 found by rounding after 29506 iterations and 269 nodes (6.25 seconds)
Cbc0012I Integer solution of -3690.7885 found by DiveCoefficient after 29586 iterations and 274 nodes (6.26 seconds)
Cbc0001I Search completed - best objective -3690.788470000001, took 29587 iterations and 274 nodes (6.27 seconds)
Cbc0032I Strong branching done 2420 times (53709 iterations), fathomed 58 nodes and fixed 55 variables
Cbc0035I Maximum depth 27, 839 variables fixed on reduced cost
Total time (CPU seconds):       6.17   (Wallclock seconds):       6.31

