Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-11) rows, 48 (-2) columns and 264 (-21) elements
Clp1000I sum of infeasibilities 2.04604e-05 - average 2.32505e-07, 2 fixed columns
Coin0506I Presolve 84 (-4) rows, 46 (-2) columns and 252 (-12) elements
Clp0029I End of values pass after 46 iterations
Clp0000I Optimal - objective value 5091.9748
Clp0000I Optimal - objective value 5091.9748
Coin0511I After Postsolve, objective 5091.9748, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5306143 - largest nonzero change 0 ( 0%) - largest zero change 1.0354403e-05
Clp0000I Optimal - objective value 5091.9748
Clp0000I Optimal - objective value 5091.9748
Clp0000I Optimal - objective value 5091.9748
Coin0511I After Postsolve, objective 5091.9748, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 5091.97478 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 48 columns (47 integer (47 of which binary)) and 264 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.847%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 45 integers unsatisfied sum - 14.1497
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1349.12 iterations 37
Cbc0038I Solution found of 1349.12
Cbc0038I Relaxing continuous gives 1349.12
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 84 rows 46 columns
Cbc0038I Mini branch and bound improved solution from 1349.12 to -3119.17 (0.06 seconds)
Cbc0038I Round again with cutoff of -3316.45
Cbc0038I Pass   2: suminf.    9.25999 (45) obj. -3316.45 iterations 41
Cbc0038I Pass   3: suminf.    9.23478 (45) obj. -3316.45 iterations 7
Cbc0038I Pass   4: suminf.    3.36111 (16) obj. -3316.45 iterations 45
Cbc0038I Pass   5: suminf.    2.00000 (11) obj. -3316.45 iterations 9
Cbc0038I Pass   6: suminf.    5.00109 (18) obj. -3316.45 iterations 21
Cbc0038I Pass   7: suminf.    1.83187 (9) obj. -3316.45 iterations 11
Cbc0038I Pass   8: suminf.    1.29084 (8) obj. -3316.45 iterations 1
Cbc0038I Pass   9: suminf.    3.69090 (10) obj. -3316.45 iterations 7
Cbc0038I Pass  10: suminf.    1.67138 (9) obj. -3316.45 iterations 7
Cbc0038I Pass  11: suminf.    1.66528 (8) obj. -3316.45 iterations 1
Cbc0038I Pass  12: suminf.    2.46206 (8) obj. -3316.45 iterations 8
Cbc0038I Pass  13: suminf.    2.10122 (7) obj. -3316.45 iterations 2
Cbc0038I Pass  14: suminf.    1.61209 (6) obj. -3316.45 iterations 2
Cbc0038I Pass  15: suminf.    1.91562 (7) obj. -3316.45 iterations 5
Cbc0038I Pass  16: suminf.    1.36077 (6) obj. -3316.45 iterations 2
Cbc0038I Pass  17: suminf.    4.46300 (13) obj. -3316.45 iterations 10
Cbc0038I Pass  18: suminf.    1.89316 (8) obj. -3316.45 iterations 9
Cbc0038I Pass  19: suminf.    1.25731 (6) obj. -3316.45 iterations 3
Cbc0038I Pass  20: suminf.    2.77269 (8) obj. -3316.45 iterations 11
Cbc0038I Pass  21: suminf.    2.00000 (7) obj. -3316.45 iterations 8
Cbc0038I Pass  22: suminf.    2.85582 (9) obj. -3316.45 iterations 6
Cbc0038I Pass  23: suminf.    2.00000 (9) obj. -3316.45 iterations 8
Cbc0038I Pass  24: suminf.    4.04683 (16) obj. -3316.45 iterations 11
Cbc0038I Pass  25: suminf.    1.59146 (9) obj. -3316.45 iterations 11
Cbc0038I Pass  26: suminf.    1.57214 (8) obj. -3316.45 iterations 1
Cbc0038I Pass  27: suminf.    2.25370 (8) obj. -3316.45 iterations 8
Cbc0038I Pass  28: suminf.    1.56643 (6) obj. -3316.45 iterations 3
Cbc0038I Pass  29: suminf.    1.55550 (6) obj. -3316.45 iterations 1
Cbc0038I Pass  30: suminf.    1.86551 (7) obj. -3316.45 iterations 5
Cbc0038I Pass  31: suminf.    1.30393 (6) obj. -3316.45 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 84 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -3119.17 - took 0.08 seconds
Cbc0012I Integer solution of -3119.167 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 23 added rows had average density of 36.347826
Cbc0013I At root node, 23 cuts changed objective from -5091.9748 to -4037.6016 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7373 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.046 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1179 row cuts average 44.6 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 183 row cuts average 42.7 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0010I After 7 nodes, 8 on tree, -3119.167 best solution, best possible -4037.6016 (0.68 seconds)
Cbc0001I Search completed - best objective -3119.166999999999, took 6368 iterations and 24 nodes (0.72 seconds)
Cbc0032I Strong branching done 386 times (8740 iterations), fathomed 0 nodes and fixed 11 variables
Cbc0035I Maximum depth 11, 13 variables fixed on reduced cost
Total time (CPU seconds):       0.70   (Wallclock seconds):       0.72

