Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 39 (-30) rows, 21 (-14) columns and 113 (-82) elements
Clp0000I Optimal - objective value 124.74207
Coin0511I After Postsolve, objective 124.74207, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 124.7420685 - 19 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 39 rows, 21 columns (20 integer (20 of which binary)) and 114 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.430%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 5.48459
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -17.0003 iterations 15
Cbc0038I Solution found of -17.0003
Cbc0038I Relaxing continuous gives -17.0003
Cbc0038I Rounding solution of -19.3336 is better than previous of -17.0003

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 39 rows 21 columns, reduced to 25 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -29.4994
Cbc0038I Pass   2: suminf.    0.14574 (2) obj. -29.4994 iterations 2
Cbc0038I Pass   3: suminf.    0.30432 (3) obj. -29.4994 iterations 4
Cbc0038I Pass   4: suminf.    0.36000 (1) obj. -29.4994 iterations 4
Cbc0038I Pass   5: suminf.    0.49963 (2) obj. -29.4994 iterations 2
Cbc0038I Pass   6: suminf.    0.62609 (2) obj. -29.4994 iterations 2
Cbc0038I Pass   7: suminf.    2.12540 (7) obj. -29.4994 iterations 6
Cbc0038I Pass   8: suminf.    0.68097 (4) obj. -29.4994 iterations 6
Cbc0038I Pass   9: suminf.    1.64356 (8) obj. -29.4994 iterations 5
Cbc0038I Pass  10: suminf.    0.99621 (6) obj. -29.4994 iterations 5
Cbc0038I Pass  11: suminf.    0.44922 (2) obj. -29.4994 iterations 7
Cbc0038I Pass  12: suminf.    0.49963 (2) obj. -29.4994 iterations 3
Cbc0038I Pass  13: suminf.    0.62609 (2) obj. -29.4994 iterations 2
Cbc0038I Pass  14: suminf.    0.36000 (1) obj. -29.4994 iterations 1
Cbc0038I Pass  15: suminf.    0.36000 (1) obj. -29.4994 iterations 2
Cbc0038I Pass  16: suminf.    0.36000 (1) obj. -29.4994 iterations 2
Cbc0038I Pass  17: suminf.    2.68005 (7) obj. -29.4994 iterations 5
Cbc0038I Pass  18: suminf.    2.31268 (9) obj. -29.4994 iterations 4
Cbc0038I Pass  19: suminf.    0.94141 (4) obj. -29.4994 iterations 10
Cbc0038I Pass  20: suminf.    0.68546 (3) obj. -29.4994 iterations 1
Cbc0038I Pass  21: suminf.    0.30489 (5) obj. -29.4994 iterations 10
Cbc0038I Pass  22: suminf.    0.21042 (2) obj. -29.4994 iterations 3
Cbc0038I Pass  23: suminf.    0.34838 (3) obj. -29.4994 iterations 8
Cbc0038I Pass  24: suminf.    0.24000 (1) obj. -29.4994 iterations 4
Cbc0038I Pass  25: suminf.    0.20715 (2) obj. -29.4994 iterations 2
Cbc0038I Pass  26: suminf.    0.67826 (2) obj. -29.4994 iterations 2
Cbc0038I Pass  27: suminf.    0.30432 (3) obj. -29.4994 iterations 2
Cbc0038I Pass  28: suminf.    0.36000 (1) obj. -29.4994 iterations 4
Cbc0038I Pass  29: suminf.    0.49963 (2) obj. -29.4994 iterations 2
Cbc0038I Pass  30: suminf.    0.62609 (2) obj. -29.4994 iterations 2
Cbc0038I Pass  31: suminf.    0.68097 (4) obj. -29.4994 iterations 4
Cbc0038I Rounding solution of -20.8538 is better than previous of -19.3336

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 39 rows 21 columns, reduced to 33 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -47.7977
Cbc0038I Pass  31: suminf.    0.45095 (2) obj. -47.7977 iterations 0
Cbc0038I Pass  32: suminf.    0.65734 (3) obj. -47.7977 iterations 4
Cbc0038I Pass  33: suminf.    0.54119 (3) obj. -47.7977 iterations 3
Cbc0038I Pass  34: suminf.    1.03204 (3) obj. -47.7977 iterations 2
Cbc0038I Pass  35: suminf.    1.03204 (3) obj. -47.7977 iterations 0
Cbc0038I Pass  36: suminf.    1.03204 (3) obj. -47.7977 iterations 0
Cbc0038I Pass  37: suminf.    1.25871 (4) obj. -47.7977 iterations 5
Cbc0038I Pass  38: suminf.    0.68828 (4) obj. -47.7977 iterations 3
Cbc0038I Pass  39: suminf.    0.68828 (4) obj. -47.7977 iterations 0
Cbc0038I Pass  40: suminf.    0.54119 (3) obj. -47.7977 iterations 8
Cbc0038I Pass  41: suminf.    0.81315 (5) obj. -47.7977 iterations 6
Cbc0038I Pass  42: suminf.    0.54119 (3) obj. -47.7977 iterations 5
Cbc0038I Pass  43: suminf.    1.03204 (3) obj. -47.7977 iterations 3
Cbc0038I Pass  44: suminf.    1.36576 (5) obj. -47.7977 iterations 4
Cbc0038I Pass  45: suminf.    0.85257 (4) obj. -47.7977 iterations 4
Cbc0038I Pass  46: suminf.    1.15590 (4) obj. -47.7977 iterations 7
Cbc0038I Pass  47: suminf.    0.51952 (4) obj. -47.7977 iterations 4
Cbc0038I Pass  48: suminf.    0.42865 (2) obj. -47.7977 iterations 4
Cbc0038I Pass  49: suminf.    0.54119 (3) obj. -47.7977 iterations 4
Cbc0038I Pass  50: suminf.    0.54119 (3) obj. -47.7977 iterations 0
Cbc0038I Pass  51: suminf.    1.03204 (3) obj. -47.7977 iterations 2
Cbc0038I Pass  52: suminf.    0.62638 (7) obj. -47.7977 iterations 10
Cbc0038I Pass  53: suminf.    0.06483 (2) obj. -47.7977 iterations 6
Cbc0038I Pass  54: suminf.    0.46998 (3) obj. -47.7977 iterations 4
Cbc0038I Pass  55: suminf.    0.62286 (5) obj. -47.7977 iterations 7
Cbc0038I Pass  56: suminf.    0.52924 (4) obj. -47.7977 iterations 1
Cbc0038I Pass  57: suminf.    0.83513 (3) obj. -47.7977 iterations 7
Cbc0038I Pass  58: suminf.    0.56297 (2) obj. -47.7977 iterations 1
Cbc0038I Pass  59: suminf.    0.54119 (3) obj. -47.7977 iterations 3
Cbc0038I Pass  60: suminf.    0.54119 (3) obj. -47.7977 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 39 rows 21 columns, reduced to 35 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -20.8538 - took 0.02 seconds
Cbc0012I Integer solution of -22.66697 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 39 rows 21 columns, reduced to 27 rows 15 columns
Cbc0012I Integer solution of -63.0003 found by DiveCoefficient after 105 iterations and 0 nodes (0.04 seconds)
Cbc0031I 11 added rows had average density of 8.2727273
Cbc0013I At root node, 11 cuts changed objective from -120.99072 to -63.0003 in 8 passes
Cbc0014I Cut generator 0 (Probing) - 102 row cuts average 3.4 elements, 2 column cuts (2 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 41 row cuts average 16.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 76 row cuts average 16.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0001I Search completed - best objective -63.00030000000001, took 105 iterations and 0 nodes (0.04 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.05

