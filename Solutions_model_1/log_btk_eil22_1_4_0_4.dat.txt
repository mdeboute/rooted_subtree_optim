Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 26 (-21) rows, 17 (-7) columns and 80 (-49) elements
Clp0000I Optimal - objective value 112.65098
Coin0511I After Postsolve, objective 112.65098, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 112.6509816 - 14 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 26 rows, 17 columns (16 integer (16 of which binary)) and 80 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.034%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.51017
Cbc0038I Pass   1: suminf.    0.16000 (1) obj. -97.99 iterations 8
Cbc0038I Solution found of -44.23
Cbc0038I Relaxing continuous gives -54.75
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 17 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -60.765
Cbc0038I Pass   2: suminf.    0.16000 (1) obj. -97.99 iterations 0
Cbc0038I Pass   3: suminf.    0.09398 (1) obj. -60.765 iterations 2
Cbc0038I Pass   4: suminf.    0.09398 (1) obj. -60.765 iterations 1
Cbc0038I Pass   5: suminf.    0.09398 (1) obj. -60.765 iterations 1
Cbc0038I Pass   6: suminf.    0.28000 (1) obj. -65.67 iterations 4
Cbc0038I Pass   7: suminf.    0.09398 (1) obj. -60.765 iterations 2
Cbc0038I Pass   8: suminf.    0.28000 (1) obj. -60.765 iterations 1
Cbc0038I Pass   9: suminf.    0.95609 (4) obj. -60.765 iterations 5
Cbc0038I Pass  10: suminf.    0.95609 (4) obj. -60.765 iterations 1
Cbc0038I Pass  11: suminf.    0.45761 (3) obj. -60.765 iterations 3
Cbc0038I Pass  12: suminf.    0.40943 (3) obj. -60.765 iterations 3
Cbc0038I Pass  13: suminf.    0.51197 (2) obj. -60.765 iterations 7
Cbc0038I Pass  14: suminf.    0.32836 (1) obj. -60.765 iterations 4
Cbc0038I Pass  15: suminf.    0.48000 (1) obj. -60.765 iterations 1
Cbc0038I Pass  16: suminf.    0.48000 (1) obj. -60.765 iterations 1
Cbc0038I Pass  17: suminf.    0.48000 (1) obj. -60.765 iterations 1
Cbc0038I Pass  18: suminf.    1.13293 (4) obj. -60.765 iterations 7
Cbc0038I Pass  19: suminf.    0.60800 (2) obj. -60.765 iterations 1
Cbc0038I Pass  20: suminf.    0.51091 (2) obj. -60.765 iterations 5
Cbc0038I Pass  21: suminf.    0.32836 (1) obj. -60.765 iterations 1
Cbc0038I Pass  22: suminf.    2.26319 (8) obj. -60.765 iterations 7
Cbc0038I Pass  23: suminf.    0.87160 (2) obj. -60.765 iterations 5
Cbc0038I Pass  24: suminf.    0.38669 (2) obj. -60.765 iterations 5
Cbc0038I Pass  25: suminf.    0.34444 (2) obj. -60.765 iterations 3
Cbc0038I Pass  26: suminf.    0.16000 (1) obj. -60.765 iterations 2
Cbc0038I Pass  27: suminf.    0.32836 (1) obj. -60.765 iterations 1
Cbc0038I Pass  28: suminf.    0.41708 (2) obj. -60.765 iterations 2
Cbc0038I Pass  29: suminf.    0.41708 (2) obj. -60.765 iterations 0
Cbc0038I Pass  30: suminf.    0.86957 (2) obj. -70.2717 iterations 2
Cbc0038I Pass  31: suminf.    0.40000 (1) obj. -78.15 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 17 columns, reduced to 18 rows 12 columns
Cbc0038I Mini branch and bound improved solution from -54.75 to -80.75 (0.01 seconds)
Cbc0038I Round again with cutoff of -87.3301
Cbc0038I Pass  31: suminf.    0.16000 (1) obj. -97.99 iterations 0
Cbc0038I Pass  32: suminf.    0.49094 (1) obj. -87.3301 iterations 2
Cbc0038I Pass  33: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  34: suminf.    0.48000 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  35: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  36: suminf.    0.16000 (1) obj. -87.3301 iterations 2
Cbc0038I Pass  37: suminf.    0.52724 (2) obj. -87.3301 iterations 3
Cbc0038I Pass  38: suminf.    1.74980 (5) obj. -87.3301 iterations 5
Cbc0038I Pass  39: suminf.    0.51670 (2) obj. -87.3301 iterations 2
Cbc0038I Pass  40: suminf.    0.40000 (1) obj. -93.15 iterations 2
Cbc0038I Pass  41: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  42: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  43: suminf.    0.16000 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  44: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  45: suminf.    1.54617 (7) obj. -87.3301 iterations 7
Cbc0038I Pass  46: suminf.    1.17114 (5) obj. -87.3301 iterations 5
Cbc0038I Pass  47: suminf.    0.58539 (4) obj. -87.3301 iterations 5
Cbc0038I Pass  48: suminf.    0.47135 (4) obj. -87.3301 iterations 1
Cbc0038I Pass  49: suminf.    0.55524 (2) obj. -87.3301 iterations 5
Cbc0038I Pass  50: suminf.    0.16000 (1) obj. -87.3301 iterations 2
Cbc0038I Pass  51: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  52: suminf.    1.06991 (6) obj. -87.3301 iterations 7
Cbc0038I Pass  53: suminf.    0.98081 (5) obj. -87.3301 iterations 2
Cbc0038I Pass  54: suminf.    0.38568 (3) obj. -87.3301 iterations 7
Cbc0038I Pass  55: suminf.    0.26312 (3) obj. -87.3301 iterations 1
Cbc0038I Pass  56: suminf.    0.55524 (2) obj. -87.3301 iterations 9
Cbc0038I Pass  57: suminf.    0.16000 (1) obj. -87.3301 iterations 2
Cbc0038I Pass  58: suminf.    0.49094 (1) obj. -87.3301 iterations 1
Cbc0038I Pass  59: suminf.    1.51255 (5) obj. -87.3301 iterations 5
Cbc0038I Pass  60: suminf.    1.51255 (5) obj. -87.3301 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 17 columns, reduced to 19 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -80.75 - took 0.01 seconds
Cbc0012I Integer solution of -80.75 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 26 rows 17 columns, reduced to 13 rows 9 columns
Cbc0031I 5 added rows had average density of 11
Cbc0013I At root node, 5 cuts changed objective from -112.65098 to -83.012229 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 165 row cuts average 2.9 elements, 4 column cuts (4 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 277 row cuts average 11.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 17 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 22 row cuts average 8.1 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 125 row cuts average 8.7 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 22 row cuts average 15.4 elements, 0 column cuts (0 active)  in 0.705 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -80.75 best solution, best possible -83.005316 (1.30 seconds)
Cbc0001I Search completed - best objective -80.75, took 728 iterations and 2 nodes (1.30 seconds)
Cbc0032I Strong branching done 8 times (31 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.79   (Wallclock seconds):       1.30

