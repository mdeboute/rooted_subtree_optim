Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 84 (-15) rows, 47 (-3) columns and 254 (-31) elements
Clp1000I sum of infeasibilities 3.20828e-05 - average 3.81938e-07, 6 fixed columns
Coin0506I Presolve 73 (-11) rows, 41 (-6) columns and 220 (-34) elements
Clp0029I End of values pass after 41 iterations
Clp0014I Perturbing problem by 0.001% of 23.310973 - largest nonzero change 0 ( 0%) - largest zero change 2.5115664e-05
Clp0000I Optimal - objective value 1745.7378
Clp0000I Optimal - objective value 1745.7378
Coin0511I After Postsolve, objective 1745.7378, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1745.7378
Clp0000I Optimal - objective value 1745.7378
Clp0000I Optimal - objective value 1745.7378
Coin0511I After Postsolve, objective 1745.7378, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1745.737846 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 84 rows, 47 columns (46 integer (46 of which binary)) and 254 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.837%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 31 integers unsatisfied sum - 10.6008
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 244.411 iterations 30
Cbc0038I Solution found of 244.411
Cbc0038I Relaxing continuous gives 244.411
Cbc0038I Rounding solution of -81.9187 is better than previous of 244.411

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 47 columns, reduced to 56 rows 32 columns
Cbc0038I Mini branch and bound improved solution from -81.9187 to -320.085 (0.03 seconds)
Cbc0038I Round again with cutoff of -462.65
Cbc0038I Pass   2: suminf.    1.15295 (5) obj. -462.65 iterations 5
Cbc0038I Pass   3: suminf.    1.39945 (6) obj. -462.65 iterations 7
Cbc0038I Pass   4: suminf.    1.39945 (6) obj. -462.65 iterations 0
Cbc0038I Pass   5: suminf.    1.51590 (6) obj. -462.65 iterations 2
Cbc0038I Pass   6: suminf.    1.44946 (5) obj. -462.65 iterations 4
Cbc0038I Pass   7: suminf.    2.21837 (8) obj. -462.65 iterations 12
Cbc0038I Pass   8: suminf.    2.00283 (7) obj. -462.65 iterations 4
Cbc0038I Pass   9: suminf.    1.96954 (7) obj. -462.65 iterations 1
Cbc0038I Pass  10: suminf.    1.88024 (7) obj. -462.65 iterations 6
Cbc0038I Pass  11: suminf.    1.87506 (6) obj. -462.65 iterations 2
Cbc0038I Pass  12: suminf.    1.97484 (6) obj. -462.65 iterations 3
Cbc0038I Pass  13: suminf.    1.87999 (7) obj. -462.65 iterations 3
Cbc0038I Pass  14: suminf.    2.33313 (7) obj. -462.65 iterations 11
Cbc0038I Pass  15: suminf.    1.95623 (5) obj. -462.65 iterations 5
Cbc0038I Pass  16: suminf.    1.11384 (5) obj. -462.65 iterations 4
Cbc0038I Pass  17: suminf.    1.05797 (4) obj. -462.65 iterations 1
Cbc0038I Pass  18: suminf.    1.27583 (5) obj. -462.65 iterations 2
Cbc0038I Pass  19: suminf.    1.11384 (5) obj. -462.65 iterations 1
Cbc0038I Pass  20: suminf.    2.57740 (8) obj. -462.65 iterations 10
Cbc0038I Pass  21: suminf.    1.55952 (5) obj. -462.65 iterations 5
Cbc0038I Pass  22: suminf.    1.57101 (6) obj. -462.65 iterations 6
Cbc0038I Pass  23: suminf.    1.57101 (6) obj. -462.65 iterations 0
Cbc0038I Pass  24: suminf.    1.73117 (6) obj. -462.65 iterations 2
Cbc0038I Pass  25: suminf.    1.59664 (7) obj. -462.65 iterations 3
Cbc0038I Pass  26: suminf.    1.56760 (6) obj. -462.65 iterations 1
Cbc0038I Pass  27: suminf.    1.56704 (7) obj. -462.65 iterations 1
Cbc0038I Pass  28: suminf.    2.02215 (7) obj. -462.65 iterations 5
Cbc0038I Pass  29: suminf.    1.89406 (7) obj. -462.65 iterations 2
Cbc0038I Pass  30: suminf.    3.12267 (8) obj. -462.65 iterations 6
Cbc0038I Pass  31: suminf.    2.46298 (7) obj. -462.65 iterations 4
Cbc0038I Rounding solution of -385.632 is better than previous of -320.085

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 47 columns, reduced to 68 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -385.632 to -433.878 (0.06 seconds)
Cbc0038I Round again with cutoff of -719.268
Cbc0038I Pass  31: suminf.    1.53324 (6) obj. -719.268 iterations 1
Cbc0038I Pass  32: suminf.    1.45915 (5) obj. -719.268 iterations 1
Cbc0038I Pass  33: suminf.    1.61942 (6) obj. -719.268 iterations 5
Cbc0038I Pass  34: suminf.    1.61942 (6) obj. -719.268 iterations 0
Cbc0038I Pass  35: suminf.    2.14717 (9) obj. -719.268 iterations 6
Cbc0038I Pass  36: suminf.    2.14717 (9) obj. -719.268 iterations 0
Cbc0038I Pass  37: suminf.    2.46409 (6) obj. -719.268 iterations 5
Cbc0038I Pass  38: suminf.    2.40520 (6) obj. -719.268 iterations 2
Cbc0038I Pass  39: suminf.    2.39845 (7) obj. -719.268 iterations 2
Cbc0038I Pass  40: suminf.    2.32453 (7) obj. -719.268 iterations 3
Cbc0038I Pass  41: suminf.    2.15436 (7) obj. -719.268 iterations 4
Cbc0038I Pass  42: suminf.    2.15436 (7) obj. -719.268 iterations 0
Cbc0038I Pass  43: suminf.    2.39463 (7) obj. -719.268 iterations 3
Cbc0038I Pass  44: suminf.    2.14717 (9) obj. -719.268 iterations 3
Cbc0038I Pass  45: suminf.    2.46409 (6) obj. -719.268 iterations 5
Cbc0038I Pass  46: suminf.    2.40520 (6) obj. -719.268 iterations 2
Cbc0038I Pass  47: suminf.    2.39845 (7) obj. -719.268 iterations 2
Cbc0038I Pass  48: suminf.    2.32453 (7) obj. -719.268 iterations 3
Cbc0038I Pass  49: suminf.    2.15436 (7) obj. -719.268 iterations 4
Cbc0038I Pass  50: suminf.    2.15436 (7) obj. -719.268 iterations 0
Cbc0038I Pass  51: suminf.    2.39463 (7) obj. -719.268 iterations 3
Cbc0038I Pass  52: suminf.    2.14717 (9) obj. -719.268 iterations 3
Cbc0038I Pass  53: suminf.    2.46409 (6) obj. -719.268 iterations 5
Cbc0038I Pass  54: suminf.    2.40520 (6) obj. -719.268 iterations 2
Cbc0038I Pass  55: suminf.    2.39845 (7) obj. -719.268 iterations 2
Cbc0038I Pass  56: suminf.    2.32453 (7) obj. -719.268 iterations 3
Cbc0038I Pass  57: suminf.    2.15436 (7) obj. -719.268 iterations 4
Cbc0038I Pass  58: suminf.    2.15436 (7) obj. -719.268 iterations 0
Cbc0038I Pass  59: suminf.    2.39463 (7) obj. -719.268 iterations 3
Cbc0038I Pass  60: suminf.    2.14717 (9) obj. -719.268 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 47 columns, reduced to 56 rows 32 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -433.878 - took 0.07 seconds
Cbc0012I Integer solution of -433.8777 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 84 rows 47 columns, reduced to 64 rows 36 columns
Cbc0031I 28 added rows had average density of 26.214286
Cbc0013I At root node, 28 cuts changed objective from -1745.7378 to -998.35416 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10188 row cuts average 3.8 elements, 1 column cuts (1 active)  in 0.059 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2511 row cuts average 46.7 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 523 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 124 row cuts average 40.2 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0010I After 3 nodes, 4 on tree, -433.8777 best solution, best possible -998.35416 (0.70 seconds)
Cbc0012I Integer solution of -435.0427 found by rounding after 7633 iterations and 9 nodes (0.80 seconds)
Cbc0001I Search completed - best objective -435.0427, took 8206 iterations and 22 nodes (0.81 seconds)
Cbc0032I Strong branching done 390 times (8522 iterations), fathomed 1 nodes and fixed 9 variables
Cbc0035I Maximum depth 9, 19 variables fixed on reduced cost
Total time (CPU seconds):       0.80   (Wallclock seconds):       0.82

