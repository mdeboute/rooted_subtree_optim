Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 34 (-15) rows, 20 (-5) columns and 101 (-34) elements
Clp1000I sum of infeasibilities 3.53829e-10 - average 1.04067e-11, 7 fixed columns
Coin0506I Presolve 8 (-26) rows, 13 (-7) columns and 35 (-66) elements
Clp0029I End of values pass after 13 iterations
Clp0014I Perturbing problem by 0.001% of 1.5263647 - largest nonzero change 2.8668486e-05 ( 0.0025888945%) - largest zero change 0
Clp0000I Optimal - objective value 69.466186
Clp0000I Optimal - objective value 69.466186
Coin0511I After Postsolve, objective 69.466186, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.1834416 - largest nonzero change 2.8167904e-05 ( 0.0028167904%) - largest zero change 2.2742989e-05
Clp0000I Optimal - objective value 99.485329
Clp0000I Optimal - objective value 99.485329
Clp0000I Optimal - objective value 99.485329
Coin0511I After Postsolve, objective 99.485329, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 99.48532879 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 34 rows, 20 columns (19 integer (19 of which binary)) and 103 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.000%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 9 integers unsatisfied sum - 2.16111
Cbc0038I Pass   1: suminf.    0.71607 (2) obj. 2233.84 iterations 17
Cbc0038I Solution found of 5814.36
Cbc0038I Relaxing continuous gives 5814.36
Cbc0038I Rounding solution of 5808.85 is better than previous of 5814.36

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 34 rows 20 columns, reduced to 13 rows 12 columns
Cbc0038I Mini branch and bound improved solution from 5808.85 to -42.2958 (0.01 seconds)
Cbc0038I Round again with cutoff of -48.0103
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.46024 (2) obj. -48.2347 iterations 5
Cbc0038I Pass   3: suminf.    0.04130 (1) obj. -48.0103 iterations 3
Cbc0038I Pass   4: suminf.    0.09251 (1) obj. -48.0103 iterations 3
Cbc0038I Pass   5: suminf.    0.25195 (3) obj. -48.0103 iterations 4
Cbc0038I Pass   6: suminf.    0.10605 (1) obj. -48.0103 iterations 4
Cbc0038I Pass   7: suminf.    0.35661 (2) obj. -48.0103 iterations 2
Cbc0038I Pass   8: suminf.    0.67532 (2) obj. -48.0103 iterations 1
Cbc0038I Pass   9: suminf.    0.61216 (3) obj. -48.0103 iterations 3
Cbc0038I Pass  10: suminf.    0.24526 (2) obj. -48.0103 iterations 1
Cbc0038I Pass  11: suminf.    0.42903 (2) obj. -48.0103 iterations 4
Cbc0038I Pass  12: suminf.    0.20464 (1) obj. -48.0103 iterations 3
Cbc0038I Pass  13: suminf.    1.09051 (4) obj. -48.0103 iterations 5
Cbc0038I Pass  14: suminf.    0.86761 (3) obj. -48.0103 iterations 1
Cbc0038I Pass  15: suminf.    0.70454 (3) obj. -48.0103 iterations 1
Cbc0038I Pass  16: suminf.    1.09051 (4) obj. -48.0103 iterations 3
Cbc0038I Pass  17: suminf.    1.19603 (5) obj. -48.0103 iterations 2
Cbc0038I Pass  18: suminf.    1.29060 (6) obj. -48.0103 iterations 3
Cbc0038I Pass  19: suminf.    1.18500 (5) obj. -48.0103 iterations 1
Cbc0038I Pass  20: suminf.    0.44670 (3) obj. -48.0103 iterations 6
Cbc0038I Pass  21: suminf.    0.44670 (3) obj. -48.0103 iterations 0
Cbc0038I Pass  22: suminf.    1.04791 (4) obj. -48.0103 iterations 2
Cbc0038I Pass  23: suminf.    1.01214 (3) obj. -48.0103 iterations 1
Cbc0038I Pass  24: suminf.    0.95255 (4) obj. -48.0103 iterations 3
Cbc0038I Pass  25: suminf.    0.91885 (3) obj. -48.0103 iterations 4
Cbc0038I Pass  26: suminf.    0.44670 (3) obj. -48.0103 iterations 3
Cbc0038I Pass  27: suminf.    0.44670 (3) obj. -48.0103 iterations 0
Cbc0038I Pass  28: suminf.    1.04791 (4) obj. -48.0103 iterations 2
Cbc0038I Pass  29: suminf.    1.01214 (3) obj. -48.0103 iterations 1
Cbc0038I Pass  30: suminf.    0.86257 (3) obj. -48.0103 iterations 5
Cbc0038I Pass  31: suminf.    0.22182 (1) obj. -48.0103 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 34 rows 20 columns, reduced to 12 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -42.2958 to -44.444 (0.03 seconds)
Cbc0038I Round again with cutoff of -58.2963
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.55440 (3) obj. -58.2963 iterations 1
Cbc0038I Pass  32: suminf.    0.18300 (2) obj. -58.2963 iterations 3
Cbc0038I Pass  33: suminf.    0.55353 (3) obj. -58.2963 iterations 5
Cbc0038I Pass  34: suminf.    0.20319 (1) obj. -58.2963 iterations 3
Cbc0038I Pass  35: suminf.    0.43355 (2) obj. -58.2963 iterations 2
Cbc0038I Pass  36: suminf.    0.45508 (3) obj. -58.2963 iterations 1
Cbc0038I Pass  37: suminf.    0.46492 (2) obj. -58.2963 iterations 2
Cbc0038I Pass  38: suminf.    0.93094 (4) obj. -58.2963 iterations 2
Cbc0038I Pass  39: suminf.    0.90009 (3) obj. -58.2963 iterations 1
Cbc0038I Pass  40: suminf.    1.13305 (5) obj. -58.2963 iterations 7
Cbc0038I Pass  41: suminf.    1.04744 (4) obj. -58.2963 iterations 4
Cbc0038I Pass  42: suminf.    1.00888 (4) obj. -58.2963 iterations 5
Cbc0038I Pass  43: suminf.    0.32470 (2) obj. -58.2963 iterations 2
Cbc0038I Pass  44: suminf.    0.67874 (3) obj. -58.2963 iterations 2
Cbc0038I Pass  45: suminf.    0.67874 (3) obj. -58.2963 iterations 0
Cbc0038I Pass  46: suminf.    0.97886 (4) obj. -58.2963 iterations 2
Cbc0038I Pass  47: suminf.    1.04229 (4) obj. -58.2963 iterations 1
Cbc0038I Pass  48: suminf.    1.00652 (3) obj. -58.2963 iterations 1
Cbc0038I Pass  49: suminf.    0.44002 (3) obj. -58.2963 iterations 1
Cbc0038I Pass  50: suminf.    0.44002 (3) obj. -58.2963 iterations 0
Cbc0038I Pass  51: suminf.    1.04229 (4) obj. -58.2963 iterations 2
Cbc0038I Pass  52: suminf.    1.10294 (5) obj. -58.2963 iterations 6
Cbc0038I Pass  53: suminf.    0.33925 (3) obj. -58.2963 iterations 2
Cbc0038I Pass  54: suminf.    0.71413 (3) obj. -58.2963 iterations 3
Cbc0038I Pass  55: suminf.    0.44050 (2) obj. -58.2963 iterations 2
Cbc0038I Pass  56: suminf.    0.41239 (3) obj. -58.2963 iterations 8
Cbc0038I Pass  57: suminf.    0.16099 (3) obj. -58.2963 iterations 2
Cbc0038I Pass  58: suminf.    1.01185 (5) obj. -58.2963 iterations 6
Cbc0038I Pass  59: suminf.    0.67528 (4) obj. -58.2963 iterations 1
Cbc0038I Pass  60: suminf.    0.51225 (3) obj. -58.2963 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 34 rows 20 columns, reduced to 12 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -44.444 - took 0.03 seconds
Cbc0012I Integer solution of -44.443995 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 34 rows 20 columns, reduced to 12 rows 11 columns
Cbc0031I 7 added rows had average density of 12.285714
Cbc0013I At root node, 7 cuts changed objective from -99.439989 to -53.8763 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 229 row cuts average 4.7 elements, 2 column cuts (2 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 385 row cuts average 13.7 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 45 row cuts average 8.7 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 8 row cuts average 13.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 159 row cuts average 10.8 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 18.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -44.44399499999952, took 1247 iterations and 6 nodes (0.16 seconds)
Cbc0032I Strong branching done 28 times (104 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 2, 12 variables fixed on reduced cost
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.16

