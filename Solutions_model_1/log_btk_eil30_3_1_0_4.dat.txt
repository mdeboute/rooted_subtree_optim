Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 29 (-34) rows, 16 (-16) columns and 84 (-93) elements
Clp0000I Optimal - objective value 84.246153
Coin0511I After Postsolve, objective 84.246153, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 84.24615292 - 20 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 29 rows, 16 columns (15 integer (15 of which binary)) and 85 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.871%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 11 integers unsatisfied sum - 3.68865
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -12 iterations 9
Cbc0038I Solution found of -12
Cbc0038I Relaxing continuous gives -12
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 16 columns, reduced to 21 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -19.7473
Cbc0038I Pass   2: suminf.    0.18896 (2) obj. -19.7473 iterations 2
Cbc0038I Pass   3: suminf.    0.67692 (2) obj. -19.7473 iterations 1
Cbc0038I Pass   4: suminf.    0.25764 (4) obj. -19.7473 iterations 2
Cbc0038I Pass   5: suminf.    0.21167 (3) obj. -19.7473 iterations 1
Cbc0038I Pass   6: suminf.    0.58462 (2) obj. -19.7473 iterations 2
Cbc0038I Pass   7: suminf.    0.18896 (2) obj. -19.7473 iterations 1
Cbc0038I Pass   8: suminf.    0.48901 (4) obj. -19.7473 iterations 4
Cbc0038I Pass   9: suminf.    0.21167 (3) obj. -19.7473 iterations 2
Cbc0038I Pass  10: suminf.    0.48826 (2) obj. -19.7473 iterations 3
Cbc0038I Pass  11: suminf.    0.18896 (2) obj. -19.7473 iterations 2
Cbc0038I Pass  12: suminf.    0.55338 (2) obj. -19.7473 iterations 3
Cbc0038I Pass  13: suminf.    0.18896 (2) obj. -19.7473 iterations 2
Cbc0038I Pass  14: suminf.    0.61538 (2) obj. -19.7473 iterations 1
Cbc0038I Pass  15: suminf.    0.92308 (2) obj. -19.7473 iterations 1
Cbc0038I Pass  16: suminf.    0.67676 (2) obj. -19.7473 iterations 1
Cbc0038I Pass  17: suminf.    0.92308 (2) obj. -19.7473 iterations 1
Cbc0038I Pass  18: suminf.    1.27590 (4) obj. -19.7473 iterations 2
Cbc0038I Pass  19: suminf.    0.83937 (4) obj. -19.7473 iterations 3
Cbc0038I Pass  20: suminf.    0.74437 (4) obj. -19.7473 iterations 3
Cbc0038I Pass  21: suminf.    0.74437 (4) obj. -19.7473 iterations 0
Cbc0038I Pass  22: suminf.    0.67676 (2) obj. -19.7473 iterations 8
Cbc0038I Pass  23: suminf.    0.67676 (2) obj. -19.7473 iterations 0
Cbc0038I Pass  24: suminf.    0.92308 (2) obj. -19.7473 iterations 1
Cbc0038I Pass  25: suminf.    0.73464 (3) obj. -19.7473 iterations 3
Cbc0038I Pass  26: suminf.    0.68858 (3) obj. -19.7473 iterations 1
Cbc0038I Pass  27: suminf.    0.74437 (4) obj. -19.7473 iterations 3
Cbc0038I Pass  28: suminf.    0.74437 (4) obj. -19.7473 iterations 0
Cbc0038I Pass  29: suminf.    0.67676 (2) obj. -19.7473 iterations 8
Cbc0038I Pass  30: suminf.    0.67676 (2) obj. -19.7473 iterations 0
Cbc0038I Pass  31: suminf.    0.92308 (2) obj. -19.7473 iterations 1
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 16 columns, reduced to 29 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -31.8925
Cbc0038I Pass  31: suminf.    0.48518 (2) obj. -31.8925 iterations 0
Cbc0038I Pass  32: suminf.    0.67692 (2) obj. -31.8925 iterations 1
Cbc0038I Pass  33: suminf.    0.48516 (3) obj. -31.8925 iterations 1
Cbc0038I Pass  34: suminf.    0.30429 (3) obj. -31.8925 iterations 1
Cbc0038I Pass  35: suminf.    0.43168 (5) obj. -31.8925 iterations 3
Cbc0038I Pass  36: suminf.    0.30429 (3) obj. -31.8925 iterations 3
Cbc0038I Pass  37: suminf.    0.61966 (3) obj. -31.8925 iterations 3
Cbc0038I Pass  38: suminf.    0.61966 (3) obj. -31.8925 iterations 0
Cbc0038I Pass  39: suminf.    0.63607 (4) obj. -31.8925 iterations 3
Cbc0038I Pass  40: suminf.    0.20460 (1) obj. -31.8925 iterations 3
Cbc0038I Pass  41: suminf.    0.30429 (3) obj. -31.8925 iterations 4
Cbc0038I Pass  42: suminf.    0.52308 (2) obj. -31.8925 iterations 2
Cbc0038I Pass  43: suminf.    0.48518 (2) obj. -31.8925 iterations 1
Cbc0038I Pass  44: suminf.    0.30429 (3) obj. -31.8925 iterations 1
Cbc0038I Pass  45: suminf.    0.41021 (1) obj. -31.8925 iterations 4
Cbc0038I Pass  46: suminf.    0.48518 (2) obj. -31.8925 iterations 3
Cbc0038I Pass  47: suminf.    0.64869 (4) obj. -31.8925 iterations 2
Cbc0038I Pass  48: suminf.    1.92738 (9) obj. -31.8925 iterations 9
Cbc0038I Pass  49: suminf.    1.38142 (5) obj. -31.8925 iterations 3
Cbc0038I Pass  50: suminf.    1.38801 (3) obj. -31.8925 iterations 7
Cbc0038I Pass  51: suminf.    1.00472 (3) obj. -31.8925 iterations 1
Cbc0038I Pass  52: suminf.    0.97565 (3) obj. -31.8925 iterations 2
Cbc0038I Pass  53: suminf.    0.83726 (3) obj. -31.8925 iterations 5
Cbc0038I Pass  54: suminf.    1.09891 (6) obj. -31.8925 iterations 10
Cbc0038I Pass  55: suminf.    1.08402 (5) obj. -31.8925 iterations 2
Cbc0038I Pass  56: suminf.    1.06360 (4) obj. -31.8925 iterations 4
Cbc0038I Pass  57: suminf.    1.06188 (5) obj. -31.8925 iterations 2
Cbc0038I Pass  58: suminf.    0.85628 (4) obj. -31.8925 iterations 5
Cbc0038I Pass  59: suminf.    0.84087 (3) obj. -31.8925 iterations 1
Cbc0038I Pass  60: suminf.    1.09779 (4) obj. -31.8925 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 16 columns, reduced to 29 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -12 - took 0.01 seconds
Cbc0012I Integer solution of -12 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 29 rows 16 columns, reduced to 21 rows 12 columns
Cbc0031I 5 added rows had average density of 5.2
Cbc0013I At root node, 20 cuts changed objective from -80.473417 to -12.557662 in 7 passes
Cbc0014I Cut generator 0 (Probing) - 111 row cuts average 3.5 elements, 5 column cuts (5 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 36 row cuts average 8.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 54 row cuts average 8.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 15.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -12, took 90 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

