Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 262 (-2) columns and 1500 (-45) elements
Clp1000I sum of infeasibilities 3.16353e-05 - average 6.27685e-08, 124 fixed columns
Coin0506I Presolve 259 (-245) rows, 138 (-124) columns and 767 (-733) elements
Clp0029I End of values pass after 138 iterations
Clp0014I Perturbing problem by 0.001% of 0.16511009 - largest nonzero change 0 ( 0%) - largest zero change 2.9214168e-05
Clp0000I Optimal - objective value 124.59867
Clp0000I Optimal - objective value 124.59867
Coin0511I After Postsolve, objective 124.59867, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13422091 - largest nonzero change 0 ( 0%) - largest zero change 2.9750465e-05
Clp0000I Optimal - objective value 124.59867
Clp0000I Optimal - objective value 124.59867
Clp0000I Optimal - objective value 124.59867
Coin0511I After Postsolve, objective 124.59867, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 124.5986674 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.06

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 262 columns (261 integer (261 of which binary)) and 1500 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.365%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 77 integers unsatisfied sum - 12.0911
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 0.6075 iterations 236
Cbc0038I Solution found of 0.6075
Cbc0038I Relaxing continuous gives 0.6075
Cbc0038I Rounding solution of -4.11142 is better than previous of 0.6075

Cbc0038I Before mini branch and bound, 184 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 142 rows 78 columns
Cbc0038I Mini branch and bound improved solution from -4.11142 to -9.98459 (0.07 seconds)
Cbc0038I Round again with cutoff of -21.4461
Cbc0038I Pass   2: suminf.    1.18716 (8) obj. -21.4461 iterations 29
Cbc0038I Pass   3: suminf.    0.92296 (3) obj. -21.4461 iterations 30
Cbc0038I Pass   4: suminf.    0.69268 (3) obj. -21.4461 iterations 3
Cbc0038I Pass   5: suminf.    0.79267 (2) obj. -21.4461 iterations 13
Cbc0038I Pass   6: suminf.    0.65489 (3) obj. -21.4461 iterations 13
Cbc0038I Pass   7: suminf.    0.94413 (4) obj. -21.4461 iterations 3
Cbc0038I Pass   8: suminf.    0.92459 (4) obj. -21.4461 iterations 23
Cbc0038I Pass   9: suminf.    0.64361 (3) obj. -21.4461 iterations 1
Cbc0038I Pass  10: suminf.    0.42789 (3) obj. -21.4461 iterations 11
Cbc0038I Pass  11: suminf.    0.71876 (3) obj. -21.4461 iterations 9
Cbc0038I Pass  12: suminf.    0.65489 (3) obj. -21.4461 iterations 8
Cbc0038I Pass  13: suminf.    0.94413 (4) obj. -21.4461 iterations 3
Cbc0038I Pass  14: suminf.    0.92459 (4) obj. -21.4461 iterations 23
Cbc0038I Pass  15: suminf.    0.64361 (3) obj. -21.4461 iterations 1
Cbc0038I Pass  16: suminf.    0.42789 (3) obj. -21.4461 iterations 11
Cbc0038I Pass  17: suminf.    0.71876 (3) obj. -21.4461 iterations 9
Cbc0038I Pass  18: suminf.    0.65489 (3) obj. -21.4461 iterations 8
Cbc0038I Pass  19: suminf.    0.94413 (4) obj. -21.4461 iterations 3
Cbc0038I Pass  20: suminf.    0.92459 (4) obj. -21.4461 iterations 23
Cbc0038I Pass  21: suminf.    0.64361 (3) obj. -21.4461 iterations 1
Cbc0038I Pass  22: suminf.    0.42789 (3) obj. -21.4461 iterations 11
Cbc0038I Pass  23: suminf.    0.71876 (3) obj. -21.4461 iterations 9
Cbc0038I Pass  24: suminf.    0.65489 (3) obj. -21.4461 iterations 8
Cbc0038I Pass  25: suminf.    0.94413 (4) obj. -21.4461 iterations 3
Cbc0038I Pass  26: suminf.    0.92459 (4) obj. -21.4461 iterations 23
Cbc0038I Pass  27: suminf.    0.64361 (3) obj. -21.4461 iterations 1
Cbc0038I Pass  28: suminf.    0.42789 (3) obj. -21.4461 iterations 11
Cbc0038I Pass  29: suminf.    0.71876 (3) obj. -21.4461 iterations 9
Cbc0038I Pass  30: suminf.    0.65489 (3) obj. -21.4461 iterations 8
Cbc0038I Pass  31: suminf.    0.94413 (4) obj. -21.4461 iterations 3
Cbc0038I Rounding solution of -48.8246 is better than previous of -9.98459

Cbc0038I Before mini branch and bound, 179 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 150 rows 83 columns
Cbc0038I Mini branch and bound improved solution from -48.8246 to -59.3764 (0.15 seconds)
Cbc0038I Round again with cutoff of -72.4209
Cbc0038I Pass  31: suminf.    4.55138 (23) obj. -72.4209 iterations 30
Cbc0038I Pass  32: suminf.    4.20906 (11) obj. -72.4209 iterations 45
Cbc0038I Pass  33: suminf.    3.43381 (10) obj. -72.4209 iterations 26
Cbc0038I Pass  34: suminf.    3.23252 (9) obj. -72.4209 iterations 15
Cbc0038I Pass  35: suminf.    3.05777 (11) obj. -72.4209 iterations 6
Cbc0038I Pass  36: suminf.    4.02501 (11) obj. -72.4209 iterations 14
Cbc0038I Pass  37: suminf.    3.58597 (13) obj. -72.4209 iterations 18
Cbc0038I Pass  38: suminf.    3.27050 (11) obj. -72.4209 iterations 35
Cbc0038I Pass  39: suminf.    3.16027 (11) obj. -72.4209 iterations 18
Cbc0038I Pass  40: suminf.    3.11275 (12) obj. -72.4209 iterations 8
Cbc0038I Pass  41: suminf.    3.41438 (10) obj. -72.4209 iterations 47
Cbc0038I Pass  42: suminf.    3.16503 (10) obj. -72.4209 iterations 10
Cbc0038I Pass  43: suminf.    4.04677 (11) obj. -72.4209 iterations 38
Cbc0038I Pass  44: suminf.    3.65659 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  45: suminf.    3.32341 (10) obj. -72.4209 iterations 27
Cbc0038I Pass  46: suminf.    3.16403 (10) obj. -72.4209 iterations 23
Cbc0038I Pass  47: suminf.    2.74587 (10) obj. -72.4209 iterations 17
Cbc0038I Pass  48: suminf.    4.04677 (11) obj. -72.4209 iterations 32
Cbc0038I Pass  49: suminf.    3.65659 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  50: suminf.    3.32341 (10) obj. -72.4209 iterations 25
Cbc0038I Pass  51: suminf.    3.16403 (10) obj. -72.4209 iterations 26
Cbc0038I Pass  52: suminf.    2.74587 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  53: suminf.    4.04677 (11) obj. -72.4209 iterations 30
Cbc0038I Pass  54: suminf.    3.65659 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  55: suminf.    3.32341 (10) obj. -72.4209 iterations 27
Cbc0038I Pass  56: suminf.    3.16403 (10) obj. -72.4209 iterations 25
Cbc0038I Pass  57: suminf.    2.74587 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  58: suminf.    4.04677 (11) obj. -72.4209 iterations 33
Cbc0038I Pass  59: suminf.    3.65659 (10) obj. -72.4209 iterations 15
Cbc0038I Pass  60: suminf.    3.32341 (10) obj. -72.4209 iterations 26
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 175 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 158 rows 87 columns
Cbc0038I Mini branch and bound did not improve solution (0.24 seconds)
Cbc0038I After 0.24 seconds - Feasibility pump exiting with objective of -59.3764 - took 0.22 seconds
Cbc0012I Integer solution of -59.376407 found by feasibility pump after 0 iterations and 0 nodes (0.24 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 142 rows 78 columns
Cbc0031I 53 added rows had average density of 140.35849
Cbc0013I At root node, 53 cuts changed objective from -124.59867 to -112.11105 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 54860 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.596 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3194 row cuts average 258.7 elements, 0 column cuts (0 active)  in 0.548 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.109 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.563 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 203 row cuts average 182.0 elements, 0 column cuts (0 active)  in 0.183 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -59.376407 best solution, best possible -112.11105 (6.80 seconds)
Cbc0010I After 6 nodes, 7 on tree, -59.376407 best solution, best possible -112.11105 (7.59 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 202 rows 108 columns
Cbc0010I After 41 nodes, 12 on tree, -59.376407 best solution, best possible -112.11105 (8.31 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 202 rows 108 columns
Cbc0010I After 131 nodes, 18 on tree, -59.376407 best solution, best possible -112.11105 (9.02 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 29 rows 21 columns
Cbc0012I Integer solution of -59.74632 found by rounding after 36602 iterations and 211 nodes (9.45 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 134 rows 80 columns
Cbc0010I After 306 nodes, 18 on tree, -59.74632 best solution, best possible -112.11105 (9.72 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 21 rows 20 columns
Cbc0010I After 500 nodes, 3 on tree, -59.74632 best solution, best possible -80.460585 (10.44 seconds)
Cbc0012I Integer solution of -60.529057 found by DiveCoefficient after 46988 iterations and 546 nodes (10.60 seconds)
Cbc0012I Integer solution of -60.555418 found by rounding after 47027 iterations and 548 nodes (10.61 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 23 rows 17 columns
Cbc0001I Search completed - best objective -60.55541829999999, took 49504 iterations and 658 nodes (11.04 seconds)
Cbc0032I Strong branching done 4942 times (103501 iterations), fathomed 141 nodes and fixed 368 variables
Cbc0035I Maximum depth 69, 3653 variables fixed on reduced cost
Total time (CPU seconds):       10.70   (Wallclock seconds):       11.10

