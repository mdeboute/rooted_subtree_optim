Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 499 (-28) rows, 262 (-2) columns and 1491 (-54) elements
Clp1000I sum of infeasibilities 0.000113671 - average 2.27798e-07, 115 fixed columns
Coin0506I Presolve 265 (-234) rows, 144 (-118) columns and 796 (-695) elements
Clp0029I End of values pass after 144 iterations
Clp0014I Perturbing problem by 0.001% of 0.1675869 - largest nonzero change 0 ( 0%) - largest zero change 2.9975962e-05
Clp0000I Optimal - objective value 132.92944
Clp0000I Optimal - objective value 132.92944
Coin0511I After Postsolve, objective 132.92944, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13707262 - largest nonzero change 0 ( 0%) - largest zero change 2.9856677e-05
Clp0000I Optimal - objective value 132.92944
Clp0000I Optimal - objective value 132.92944
Clp0000I Optimal - objective value 132.92944
Coin0511I After Postsolve, objective 132.92944, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 132.9294352 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 499 rows, 262 columns (261 integer (261 of which binary)) and 1491 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.361%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 77 integers unsatisfied sum - 10.1046
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -20.6053 iterations 168
Cbc0038I Solution found of -20.6053
Cbc0038I Relaxing continuous gives -20.6053
Cbc0038I Before mini branch and bound, 184 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 262 columns, reduced to 138 rows 78 columns
Cbc0038I Mini branch and bound improved solution from -20.6053 to -45.2477 (0.07 seconds)
Cbc0038I Round again with cutoff of -54.016
Cbc0038I Pass   2: suminf.    1.59342 (9) obj. -54.016 iterations 28
Cbc0038I Pass   3: suminf.    2.82658 (8) obj. -54.016 iterations 29
Cbc0038I Pass   4: suminf.    2.20723 (7) obj. -54.016 iterations 7
Cbc0038I Pass   5: suminf.    1.85552 (6) obj. -54.016 iterations 6
Cbc0038I Pass   6: suminf.    1.42605 (5) obj. -54.016 iterations 3
Cbc0038I Pass   7: suminf.    1.24191 (5) obj. -54.016 iterations 23
Cbc0038I Pass   8: suminf.    1.12792 (4) obj. -54.016 iterations 3
Cbc0038I Pass   9: suminf.    1.23438 (4) obj. -54.016 iterations 19
Cbc0038I Pass  10: suminf.    3.98891 (12) obj. -54.016 iterations 76
Cbc0038I Pass  11: suminf.    1.51750 (6) obj. -54.016 iterations 41
Cbc0038I Pass  12: suminf.    1.20335 (6) obj. -54.016 iterations 3
Cbc0038I Pass  13: suminf.    1.44818 (4) obj. -54.016 iterations 27
Cbc0038I Pass  14: suminf.    1.14093 (4) obj. -54.016 iterations 1
Cbc0038I Pass  15: suminf.    0.55234 (2) obj. -54.016 iterations 4
Cbc0038I Pass  16: suminf.    0.53850 (2) obj. -54.016 iterations 1
Cbc0038I Pass  17: suminf.    0.71229 (3) obj. -54.016 iterations 3
Cbc0038I Pass  18: suminf.    1.04228 (4) obj. -54.016 iterations 7
Cbc0038I Pass  19: suminf.    1.04228 (4) obj. -54.016 iterations 0
Cbc0038I Pass  20: suminf.    0.43436 (1) obj. -54.016 iterations 7
Cbc0038I Pass  21: suminf.    0.10211 (2) obj. -54.016 iterations 3
Cbc0038I Pass  22: suminf.    0.75966 (2) obj. -54.016 iterations 2
Cbc0038I Pass  23: suminf.    0.68098 (3) obj. -54.016 iterations 1
Cbc0038I Pass  24: suminf.    1.10166 (3) obj. -54.016 iterations 8
Cbc0038I Pass  25: suminf.    5.07543 (15) obj. -54.016 iterations 52
Cbc0038I Pass  26: suminf.    2.58313 (9) obj. -54.016 iterations 33
Cbc0038I Pass  27: suminf.    2.54241 (10) obj. -54.016 iterations 4
Cbc0038I Pass  28: suminf.    2.09249 (5) obj. -54.016 iterations 51
Cbc0038I Pass  29: suminf.    1.19850 (3) obj. -54.016 iterations 5
Cbc0038I Pass  30: suminf.    0.49646 (1) obj. -54.016 iterations 8
Cbc0038I Pass  31: suminf.    0.36722 (2) obj. -54.016 iterations 2
Cbc0038I Rounding solution of -67.827 is better than previous of -45.2477

Cbc0038I Before mini branch and bound, 165 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 262 columns, reduced to 173 rows 97 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I Round again with cutoff of -80.8475
Cbc0038I Pass  31: suminf.    3.14298 (17) obj. -80.8475 iterations 12
Cbc0038I Pass  32: suminf.    4.53507 (12) obj. -80.8475 iterations 35
Cbc0038I Pass  33: suminf.    3.07203 (9) obj. -80.8475 iterations 21
Cbc0038I Pass  34: suminf.    3.07203 (9) obj. -80.8475 iterations 0
Cbc0038I Pass  35: suminf.    2.66720 (7) obj. -80.8475 iterations 19
Cbc0038I Pass  36: suminf.    2.55998 (9) obj. -80.8475 iterations 26
Cbc0038I Pass  37: suminf.    3.18424 (9) obj. -80.8475 iterations 25
Cbc0038I Pass  38: suminf.    2.46546 (7) obj. -80.8475 iterations 18
Cbc0038I Pass  39: suminf.    2.41601 (8) obj. -80.8475 iterations 13
Cbc0038I Pass  40: suminf.    3.25383 (9) obj. -80.8475 iterations 24
Cbc0038I Pass  41: suminf.    2.51059 (11) obj. -80.8475 iterations 21
Cbc0038I Pass  42: suminf.    2.45915 (8) obj. -80.8475 iterations 7
Cbc0038I Pass  43: suminf.    3.40005 (13) obj. -80.8475 iterations 16
Cbc0038I Pass  44: suminf.    2.51087 (8) obj. -80.8475 iterations 17
Cbc0038I Pass  45: suminf.    2.49060 (8) obj. -80.8475 iterations 6
Cbc0038I Pass  46: suminf.    3.47432 (15) obj. -80.8475 iterations 28
Cbc0038I Pass  47: suminf.    2.58843 (8) obj. -80.8475 iterations 17
Cbc0038I Pass  48: suminf.    2.55998 (9) obj. -80.8475 iterations 5
Cbc0038I Pass  49: suminf.    3.18424 (9) obj. -80.8475 iterations 28
Cbc0038I Pass  50: suminf.    2.46546 (7) obj. -80.8475 iterations 20
Cbc0038I Pass  51: suminf.    2.41601 (8) obj. -80.8475 iterations 15
Cbc0038I Pass  52: suminf.    3.25383 (9) obj. -80.8475 iterations 25
Cbc0038I Pass  53: suminf.    2.51059 (11) obj. -80.8475 iterations 19
Cbc0038I Pass  54: suminf.    2.45915 (8) obj. -80.8475 iterations 8
Cbc0038I Pass  55: suminf.    3.40005 (13) obj. -80.8475 iterations 17
Cbc0038I Pass  56: suminf.    2.51087 (8) obj. -80.8475 iterations 17
Cbc0038I Pass  57: suminf.    2.49060 (8) obj. -80.8475 iterations 6
Cbc0038I Pass  58: suminf.    3.47432 (15) obj. -80.8475 iterations 28
Cbc0038I Pass  59: suminf.    2.58843 (8) obj. -80.8475 iterations 17
Cbc0038I Pass  60: suminf.    2.55998 (9) obj. -80.8475 iterations 5
Cbc0038I Rounding solution of -69.8909 is better than previous of -67.827

Cbc0038I Before mini branch and bound, 173 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 262 columns, reduced to 157 rows 89 columns
Cbc0038I Mini branch and bound improved solution from -69.8909 to -70.3801 (0.22 seconds)
Cbc0038I Round again with cutoff of -96.4721
Cbc0038I Pass  60: suminf.    4.10509 (24) obj. -96.4721 iterations 3
Cbc0038I Pass  61: suminf.    5.40850 (19) obj. -96.4721 iterations 42
Cbc0038I Pass  62: suminf.    4.28186 (16) obj. -96.4721 iterations 32
Cbc0038I Pass  63: suminf.    4.10197 (15) obj. -96.4721 iterations 8
Cbc0038I Pass  64: suminf.    3.94589 (19) obj. -96.4721 iterations 14
Cbc0038I Pass  65: suminf.    6.02709 (17) obj. -96.4721 iterations 44
Cbc0038I Pass  66: suminf.    4.19521 (16) obj. -96.4721 iterations 42
Cbc0038I Pass  67: suminf.    8.18366 (32) obj. -96.4721 iterations 67
Cbc0038I Pass  68: suminf.    3.72335 (19) obj. -96.4721 iterations 101
Cbc0038I Pass  69: suminf.    3.62237 (19) obj. -96.4721 iterations 9
Cbc0038I Pass  70: suminf.    5.41197 (15) obj. -96.4721 iterations 34
Cbc0038I Pass  71: suminf.    3.76946 (14) obj. -96.4721 iterations 28
Cbc0038I Pass  72: suminf.    3.45855 (15) obj. -96.4721 iterations 12
Cbc0038I Pass  73: suminf.    4.33676 (14) obj. -96.4721 iterations 32
Cbc0038I Pass  74: suminf.    3.72335 (19) obj. -96.4721 iterations 36
Cbc0038I Pass  75: suminf.    3.62237 (19) obj. -96.4721 iterations 9
Cbc0038I Pass  76: suminf.    5.72451 (16) obj. -96.4721 iterations 44
Cbc0038I Pass  77: suminf.    3.59588 (13) obj. -96.4721 iterations 32
Cbc0038I Pass  78: suminf.    3.45855 (15) obj. -96.4721 iterations 12
Cbc0038I Pass  79: suminf.    4.87749 (14) obj. -96.4721 iterations 39
Cbc0038I Pass  80: suminf.    3.55910 (14) obj. -96.4721 iterations 36
Cbc0038I Pass  81: suminf.    5.50855 (17) obj. -96.4721 iterations 76
Cbc0038I Pass  82: suminf.    4.25889 (19) obj. -96.4721 iterations 59
Cbc0038I Pass  83: suminf.    3.91314 (13) obj. -96.4721 iterations 39
Cbc0038I Pass  84: suminf.    3.26029 (14) obj. -96.4721 iterations 27
Cbc0038I Pass  85: suminf.    5.78776 (16) obj. -96.4721 iterations 52
Cbc0038I Pass  86: suminf.    4.82211 (15) obj. -96.4721 iterations 29
Cbc0038I Pass  87: suminf.    4.28651 (15) obj. -96.4721 iterations 3
Cbc0038I Pass  88: suminf.    5.19829 (15) obj. -96.4721 iterations 34
Cbc0038I Pass  89: suminf.    3.89328 (18) obj. -96.4721 iterations 38
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 159 integers at bound fixed and 0 continuous
Cbc0038I Full problem 499 rows 262 columns, reduced to 184 rows 103 columns
Cbc0038I Mini branch and bound did not improve solution (0.34 seconds)
Cbc0038I After 0.34 seconds - Feasibility pump exiting with objective of -70.3801 - took 0.31 seconds
Cbc0012I Integer solution of -70.380052 found by feasibility pump after 0 iterations and 0 nodes (0.34 seconds)
Cbc0038I Full problem 499 rows 262 columns, reduced to 139 rows 79 columns
Cbc0031I 46 added rows had average density of 76.586957
Cbc0013I At root node, 46 cuts changed objective from -132.92944 to -121.29405 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 44077 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.527 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3426 row cuts average 258.7 elements, 0 column cuts (0 active)  in 0.534 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.082 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 65 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.606 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 242 row cuts average 255.4 elements, 0 column cuts (0 active)  in 0.229 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -70.380052 best solution, best possible -121.29405 (5.55 seconds)
Cbc0010I After 16 nodes, 10 on tree, -70.380052 best solution, best possible -121.29405 (6.27 seconds)
Cbc0038I Full problem 499 rows 262 columns, reduced to 199 rows 110 columns
Cbc0010I After 89 nodes, 17 on tree, -70.380052 best solution, best possible -121.29405 (6.97 seconds)
Cbc0038I Full problem 499 rows 262 columns, reduced to 134 rows 75 columns
Cbc0012I Integer solution of -72.274442 found by rounding after 26816 iterations and 199 nodes (7.50 seconds)
Cbc0010I After 255 nodes, 14 on tree, -72.274442 best solution, best possible -121.29405 (7.67 seconds)
Cbc0016I Integer solution of -73.021862 found by strong branching after 29208 iterations and 283 nodes (7.73 seconds)
Cbc0038I Full problem 499 rows 262 columns, reduced to 81 rows 50 columns
Cbc0001I Search completed - best objective -73.021862, took 31582 iterations and 330 nodes (7.90 seconds)
Cbc0032I Strong branching done 3260 times (78591 iterations), fathomed 30 nodes and fixed 131 variables
Cbc0035I Maximum depth 89, 1002 variables fixed on reduced cost
Total time (CPU seconds):       7.76   (Wallclock seconds):       7.97

