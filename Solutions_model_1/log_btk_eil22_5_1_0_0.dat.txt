Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 33 (-14) rows, 22 (-2) columns and 102 (-27) elements
Clp1000I sum of infeasibilities 8.61231e-07 - average 2.60979e-08, 1 fixed columns
Coin0506I Presolve 32 (-1) rows, 21 (-1) columns and 98 (-4) elements
Clp0029I End of values pass after 21 iterations
Clp0000I Optimal - objective value 63.148928
Clp0000I Optimal - objective value 63.148928
Coin0511I After Postsolve, objective 63.148928, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 63.148928
Clp0000I Optimal - objective value 63.148928
Clp0000I Optimal - objective value 63.148928
Coin0511I After Postsolve, objective 63.148928, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 63.1489282 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 33 rows, 22 columns (21 integer (21 of which binary)) and 102 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.131%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 12 integers unsatisfied sum - 4.32877
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -13.1976 iterations 14
Cbc0038I Solution found of -13.1976
Cbc0038I Relaxing continuous gives -13.1976
Cbc0038I Rounding solution of -15.0357 is better than previous of -13.1976

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 22 columns, reduced to 19 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -15.0357 to -25.0904 (0.01 seconds)
Cbc0038I Round again with cutoff of -28.8963
Cbc0038I Pass   2: suminf.    0.70915 (3) obj. -28.8963 iterations 4
Cbc0038I Pass   3: suminf.    0.23277 (1) obj. -28.8963 iterations 4
Cbc0038I Pass   4: suminf.    0.40842 (2) obj. -28.8963 iterations 5
Cbc0038I Pass   5: suminf.    0.56790 (5) obj. -28.8963 iterations 5
Cbc0038I Pass   6: suminf.    0.34741 (2) obj. -28.8963 iterations 8
Cbc0038I Pass   7: suminf.    0.23669 (1) obj. -28.8963 iterations 1
Cbc0038I Pass   8: suminf.    0.41731 (2) obj. -28.8963 iterations 5
Cbc0038I Pass   9: suminf.    0.52023 (4) obj. -28.8963 iterations 4
Cbc0038I Pass  10: suminf.    0.75311 (4) obj. -28.8963 iterations 8
Cbc0038I Pass  11: suminf.    0.65172 (5) obj. -28.8963 iterations 2
Cbc0038I Pass  12: suminf.    0.75552 (2) obj. -28.8963 iterations 7
Cbc0038I Pass  13: suminf.    0.44794 (2) obj. -28.8963 iterations 1
Cbc0038I Pass  14: suminf.    0.90471 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  15: suminf.    0.38697 (2) obj. -28.8963 iterations 4
Cbc0038I Pass  16: suminf.    0.83758 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  17: suminf.    0.94686 (5) obj. -28.8963 iterations 8
Cbc0038I Pass  18: suminf.    0.62890 (4) obj. -28.8963 iterations 3
Cbc0038I Pass  19: suminf.    0.75552 (2) obj. -28.8963 iterations 7
Cbc0038I Pass  20: suminf.    0.44794 (2) obj. -28.8963 iterations 1
Cbc0038I Pass  21: suminf.    0.90471 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  22: suminf.    0.38697 (2) obj. -28.8963 iterations 4
Cbc0038I Pass  23: suminf.    0.83758 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  24: suminf.    1.10026 (4) obj. -28.8963 iterations 4
Cbc0038I Pass  25: suminf.    0.75552 (2) obj. -28.8963 iterations 6
Cbc0038I Pass  26: suminf.    0.44794 (2) obj. -28.8963 iterations 1
Cbc0038I Pass  27: suminf.    0.90471 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  28: suminf.    0.38697 (2) obj. -28.8963 iterations 4
Cbc0038I Pass  29: suminf.    0.83758 (2) obj. -28.8963 iterations 3
Cbc0038I Pass  30: suminf.    0.86390 (4) obj. -28.8963 iterations 8
Cbc0038I Pass  31: suminf.    0.69205 (5) obj. -28.8963 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 22 columns, reduced to 25 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -25.0904 - took 0.02 seconds
Cbc0012I Integer solution of -25.0904 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 33 rows 22 columns, reduced to 19 rows 13 columns
Cbc0031I 9 added rows had average density of 18.111111
Cbc0013I At root node, 9 cuts changed objective from -63.148928 to -46.512069 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1808 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 675 row cuts average 21.2 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 124 row cuts average 8.7 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 100 row cuts average 19.1 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0001I Search completed - best objective -25.09039999999999, took 2443 iterations and 10 nodes (0.19 seconds)
Cbc0032I Strong branching done 112 times (1104 iterations), fathomed 0 nodes and fixed 10 variables
Cbc0035I Maximum depth 4, 13 variables fixed on reduced cost
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.19

