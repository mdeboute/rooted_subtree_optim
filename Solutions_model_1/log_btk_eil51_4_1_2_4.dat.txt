Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 90 (-15) rows, 51 (-2) columns and 274 (-29) elements
Clp1000I sum of infeasibilities 3.68208e-05 - average 4.09121e-07, 4 fixed columns
Coin0506I Presolve 82 (-8) rows, 47 (-4) columns and 250 (-24) elements
Clp0029I End of values pass after 47 iterations
Clp0000I Optimal - objective value 35.851926
Clp0000I Optimal - objective value 35.851926
Coin0511I After Postsolve, objective 35.851926, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 35.851926
Clp0000I Optimal - objective value 35.851926
Clp0000I Optimal - objective value 35.851926
Coin0511I After Postsolve, objective 35.851926, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 35.85192619 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 90 rows, 51 columns (50 integer (50 of which binary)) and 274 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.675%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 10.5153
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 18.3619 iterations 31
Cbc0038I Solution found of 18.3619
Cbc0038I Relaxing continuous gives 18.3619
Cbc0038I Rounding solution of -1.40206 is better than previous of 18.3619

Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 90 rows 51 columns, reduced to 65 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -1.40206 to -9.00427 (0.06 seconds)
Cbc0038I Round again with cutoff of -11.6891
Cbc0038I Pass   2: suminf.    2.98612 (30) obj. -11.6891 iterations 29
Cbc0038I Pass   3: suminf.    2.97620 (31) obj. -11.6891 iterations 2
Cbc0038I Pass   4: suminf.    0.68095 (4) obj. -11.6891 iterations 41
Cbc0038I Pass   5: suminf.    0.17845 (3) obj. -11.6891 iterations 3
Cbc0038I Pass   6: suminf.    1.05660 (5) obj. -11.6891 iterations 8
Cbc0038I Pass   7: suminf.    0.82979 (5) obj. -11.6891 iterations 3
Cbc0038I Pass   8: suminf.    1.69035 (7) obj. -11.6891 iterations 7
Cbc0038I Pass   9: suminf.    1.38478 (6) obj. -11.6891 iterations 2
Cbc0038I Pass  10: suminf.    2.04838 (6) obj. -11.6891 iterations 9
Cbc0038I Pass  11: suminf.    1.29114 (6) obj. -11.6891 iterations 3
Cbc0038I Pass  12: suminf.    0.92342 (4) obj. -11.6891 iterations 6
Cbc0038I Pass  13: suminf.    1.91302 (5) obj. -11.6891 iterations 5
Cbc0038I Pass  14: suminf.    1.64050 (5) obj. -11.6891 iterations 3
Cbc0038I Pass  15: suminf.    0.98466 (4) obj. -11.6891 iterations 1
Cbc0038I Pass  16: suminf.    0.96682 (5) obj. -11.6891 iterations 2
Cbc0038I Pass  17: suminf.    2.06061 (6) obj. -11.6891 iterations 5
Cbc0038I Pass  18: suminf.    1.07672 (4) obj. -11.6891 iterations 2
Cbc0038I Pass  19: suminf.    0.47192 (4) obj. -11.6891 iterations 2
Cbc0038I Pass  20: suminf.    1.64050 (5) obj. -11.6891 iterations 7
Cbc0038I Pass  21: suminf.    0.98466 (4) obj. -11.6891 iterations 1
Cbc0038I Pass  22: suminf.    0.96682 (5) obj. -11.6891 iterations 2
Cbc0038I Pass  23: suminf.    2.06061 (6) obj. -11.6891 iterations 5
Cbc0038I Pass  24: suminf.    1.07672 (4) obj. -11.6891 iterations 2
Cbc0038I Pass  25: suminf.    0.47192 (4) obj. -11.6891 iterations 2
Cbc0038I Pass  26: suminf.    1.64050 (5) obj. -11.6891 iterations 7
Cbc0038I Pass  27: suminf.    0.98466 (4) obj. -11.6891 iterations 1
Cbc0038I Pass  28: suminf.    0.96682 (5) obj. -11.6891 iterations 2
Cbc0038I Pass  29: suminf.    2.06061 (6) obj. -11.6891 iterations 5
Cbc0038I Pass  30: suminf.    1.07672 (4) obj. -11.6891 iterations 2
Cbc0038I Pass  31: suminf.    0.47192 (4) obj. -11.6891 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 90 rows 51 columns, reduced to 71 rows 41 columns
Cbc0038I Mini branch and bound improved solution from -9.00427 to -10.3622 (0.10 seconds)
Cbc0038I Round again with cutoff of -16.5217
Cbc0038I Pass  31: suminf.    4.25572 (30) obj. -16.5217 iterations 0
Cbc0038I Pass  32: suminf.    4.24159 (31) obj. -16.5217 iterations 2
Cbc0038I Pass  33: suminf.    1.42810 (7) obj. -16.5217 iterations 44
Cbc0038I Pass  34: suminf.    0.83447 (5) obj. -16.5217 iterations 8
Cbc0038I Pass  35: suminf.    2.82025 (7) obj. -16.5217 iterations 9
Cbc0038I Pass  36: suminf.    1.30401 (6) obj. -16.5217 iterations 3
Cbc0038I Pass  37: suminf.    1.30401 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  38: suminf.    2.58454 (7) obj. -16.5217 iterations 9
Cbc0038I Pass  39: suminf.    1.41116 (6) obj. -16.5217 iterations 3
Cbc0038I Pass  40: suminf.    1.41116 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  41: suminf.    1.56494 (5) obj. -16.5217 iterations 7
Cbc0038I Pass  42: suminf.    1.33824 (6) obj. -16.5217 iterations 2
Cbc0038I Pass  43: suminf.    1.33824 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  44: suminf.    2.16266 (5) obj. -16.5217 iterations 5
Cbc0038I Pass  45: suminf.    1.69530 (6) obj. -16.5217 iterations 5
Cbc0038I Pass  46: suminf.    1.69530 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  47: suminf.    2.03046 (6) obj. -16.5217 iterations 3
Cbc0038I Pass  48: suminf.    1.56494 (5) obj. -16.5217 iterations 2
Cbc0038I Pass  49: suminf.    1.33824 (6) obj. -16.5217 iterations 2
Cbc0038I Pass  50: suminf.    1.33824 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  51: suminf.    2.16266 (5) obj. -16.5217 iterations 5
Cbc0038I Pass  52: suminf.    1.69530 (6) obj. -16.5217 iterations 5
Cbc0038I Pass  53: suminf.    1.69530 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  54: suminf.    2.03046 (6) obj. -16.5217 iterations 3
Cbc0038I Pass  55: suminf.    1.56494 (5) obj. -16.5217 iterations 2
Cbc0038I Pass  56: suminf.    1.33824 (6) obj. -16.5217 iterations 2
Cbc0038I Pass  57: suminf.    1.33824 (6) obj. -16.5217 iterations 0
Cbc0038I Pass  58: suminf.    2.16266 (5) obj. -16.5217 iterations 5
Cbc0038I Pass  59: suminf.    1.69530 (6) obj. -16.5217 iterations 5
Cbc0038I Pass  60: suminf.    1.69530 (6) obj. -16.5217 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 90 rows 51 columns, reduced to 71 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I After 0.13 seconds - Feasibility pump exiting with objective of -10.3622 - took 0.12 seconds
Cbc0012I Integer solution of -10.362241 found by feasibility pump after 0 iterations and 0 nodes (0.13 seconds)
Cbc0038I Full problem 90 rows 51 columns, reduced to 65 rows 38 columns
Cbc0031I 23 added rows had average density of 35.217391
Cbc0013I At root node, 23 cuts changed objective from -35.851926 to -26.889983 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7639 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2068 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 99 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 156 row cuts average 50.7 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0010I After 7 nodes, 8 on tree, -10.362241 best solution, best possible -26.889983 (0.69 seconds)
Cbc0001I Search completed - best objective -10.362241, took 7230 iterations and 32 nodes (0.77 seconds)
Cbc0032I Strong branching done 530 times (6774 iterations), fathomed 3 nodes and fixed 20 variables
Cbc0035I Maximum depth 10, 80 variables fixed on reduced cost
Total time (CPU seconds):       0.74   (Wallclock seconds):       0.78

