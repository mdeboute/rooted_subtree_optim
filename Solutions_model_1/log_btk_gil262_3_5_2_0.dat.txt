Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 507 (-20) rows, 262 (-2) columns and 1506 (-39) elements
Clp1000I sum of infeasibilities 0.000160384 - average 3.16338e-07, 122 fixed columns
Coin0506I Presolve 262 (-245) rows, 138 (-124) columns and 773 (-733) elements
Clp0029I End of values pass after 138 iterations
Clp0014I Perturbing problem by 0.001% of 0.16597194 - largest nonzero change 0 ( 0%) - largest zero change 2.9368749e-05
Clp0000I Optimal - objective value 172.12473
Clp0000I Optimal - objective value 172.12473
Coin0511I After Postsolve, objective 172.12473, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.1348673 - largest nonzero change 0 ( 0%) - largest zero change 2.9975962e-05
Clp0000I Optimal - objective value 172.12473
Clp0000I Optimal - objective value 172.12473
Clp0000I Optimal - objective value 172.12473
Coin0511I After Postsolve, objective 172.12473, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 172.124734 - 0 iterations time 0.092, Presolve 0.00, Idiot 0.08

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 507 rows, 262 columns (261 integer (261 of which binary)) and 1506 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.367%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 68 integers unsatisfied sum - 12.5051
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 12.243 iterations 196
Cbc0038I Solution found of 12.243
Cbc0038I Relaxing continuous gives 12.243
Cbc0038I Rounding solution of -39.6833 is better than previous of 12.243

Cbc0038I Before mini branch and bound, 193 integers at bound fixed and 0 continuous
Cbc0038I Full problem 507 rows 262 columns, reduced to 127 rows 69 columns
Cbc0038I Mini branch and bound improved solution from -39.6833 to -84.52 (0.14 seconds)
Cbc0038I Round again with cutoff of -93.2806
Cbc0038I Pass   2: suminf.    3.13908 (12) obj. -93.2806 iterations 46
Cbc0038I Pass   3: suminf.    1.15972 (5) obj. -93.2806 iterations 49
Cbc0038I Pass   4: suminf.    1.13074 (4) obj. -93.2806 iterations 1
Cbc0038I Pass   5: suminf.    1.09635 (3) obj. -93.2806 iterations 23
Cbc0038I Pass   6: suminf.    1.09434 (3) obj. -93.2806 iterations 5
Cbc0038I Pass   7: suminf.    1.32137 (4) obj. -93.2806 iterations 8
Cbc0038I Pass   8: suminf.    0.93518 (4) obj. -93.2806 iterations 4
Cbc0038I Pass   9: suminf.    1.09477 (3) obj. -93.2806 iterations 26
Cbc0038I Pass  10: suminf.    1.09477 (3) obj. -93.2806 iterations 0
Cbc0038I Pass  11: suminf.    1.13074 (4) obj. -93.2806 iterations 19
Cbc0038I Pass  12: suminf.    1.13074 (4) obj. -93.2806 iterations 0
Cbc0038I Pass  13: suminf.    1.09635 (3) obj. -93.2806 iterations 23
Cbc0038I Pass  14: suminf.    1.09434 (3) obj. -93.2806 iterations 6
Cbc0038I Pass  15: suminf.    1.32137 (4) obj. -93.2806 iterations 9
Cbc0038I Pass  16: suminf.    0.93518 (4) obj. -93.2806 iterations 5
Cbc0038I Pass  17: suminf.    1.09477 (3) obj. -93.2806 iterations 28
Cbc0038I Pass  18: suminf.    1.09477 (3) obj. -93.2806 iterations 0
Cbc0038I Pass  19: suminf.    1.13074 (4) obj. -93.2806 iterations 19
Cbc0038I Pass  20: suminf.    1.13074 (4) obj. -93.2806 iterations 0
Cbc0038I Pass  21: suminf.    1.09635 (3) obj. -93.2806 iterations 22
Cbc0038I Pass  22: suminf.    1.09434 (3) obj. -93.2806 iterations 5
Cbc0038I Pass  23: suminf.    1.32137 (4) obj. -93.2806 iterations 8
Cbc0038I Pass  24: suminf.    0.93518 (4) obj. -93.2806 iterations 4
Cbc0038I Pass  25: suminf.    1.09477 (3) obj. -93.2806 iterations 26
Cbc0038I Pass  26: suminf.    1.09477 (3) obj. -93.2806 iterations 0
Cbc0038I Pass  27: suminf.    1.13074 (4) obj. -93.2806 iterations 19
Cbc0038I Pass  28: suminf.    1.13074 (4) obj. -93.2806 iterations 0
Cbc0038I Pass  29: suminf.    1.09635 (3) obj. -93.2806 iterations 23
Cbc0038I Pass  30: suminf.    1.09434 (3) obj. -93.2806 iterations 6
Cbc0038I Pass  31: suminf.    1.32137 (4) obj. -93.2806 iterations 9
Cbc0038I Rounding solution of -87.3901 is better than previous of -84.52

Cbc0038I Before mini branch and bound, 185 integers at bound fixed and 0 continuous
Cbc0038I Full problem 507 rows 262 columns, reduced to 141 rows 77 columns
Cbc0038I Mini branch and bound improved solution from -87.3901 to -93.2433 (0.28 seconds)
Cbc0038I Round again with cutoff of -109.049
Cbc0038I Pass  31: suminf.    3.87642 (16) obj. -109.049 iterations 11
Cbc0038I Pass  32: suminf.    1.94472 (10) obj. -109.049 iterations 58
Cbc0038I Pass  33: suminf.    1.94308 (8) obj. -109.049 iterations 2
Cbc0038I Pass  34: suminf.    1.60036 (6) obj. -109.049 iterations 25
Cbc0038I Pass  35: suminf.    1.32399 (6) obj. -109.049 iterations 10
Cbc0038I Pass  36: suminf.    1.32356 (5) obj. -109.049 iterations 2
Cbc0038I Pass  37: suminf.    2.21889 (6) obj. -109.049 iterations 58
Cbc0038I Pass  38: suminf.    2.21889 (6) obj. -109.049 iterations 0
Cbc0038I Pass  39: suminf.    1.85001 (7) obj. -109.049 iterations 19
Cbc0038I Pass  40: suminf.    1.43491 (7) obj. -109.049 iterations 5
Cbc0038I Pass  41: suminf.    2.20970 (8) obj. -109.049 iterations 31
Cbc0038I Pass  42: suminf.    2.19039 (8) obj. -109.049 iterations 4
Cbc0038I Pass  43: suminf.    2.86735 (8) obj. -109.049 iterations 35
Cbc0038I Pass  44: suminf.    2.30702 (7) obj. -109.049 iterations 19
Cbc0038I Pass  45: suminf.    2.22048 (7) obj. -109.049 iterations 1
Cbc0038I Pass  46: suminf.    2.10098 (12) obj. -109.049 iterations 29
Cbc0038I Pass  47: suminf.    3.03769 (10) obj. -109.049 iterations 30
Cbc0038I Pass  48: suminf.    2.29621 (10) obj. -109.049 iterations 6
Cbc0038I Pass  49: suminf.    3.52473 (11) obj. -109.049 iterations 50
Cbc0038I Pass  50: suminf.    1.94472 (10) obj. -109.049 iterations 14
Cbc0038I Pass  51: suminf.    1.94308 (8) obj. -109.049 iterations 2
Cbc0038I Pass  52: suminf.    1.60036 (6) obj. -109.049 iterations 24
Cbc0038I Pass  53: suminf.    1.32399 (6) obj. -109.049 iterations 11
Cbc0038I Pass  54: suminf.    1.32356 (5) obj. -109.049 iterations 2
Cbc0038I Pass  55: suminf.    2.21889 (6) obj. -109.049 iterations 59
Cbc0038I Pass  56: suminf.    2.21889 (6) obj. -109.049 iterations 0
Cbc0038I Pass  57: suminf.    1.85001 (7) obj. -109.049 iterations 19
Cbc0038I Pass  58: suminf.    1.43491 (7) obj. -109.049 iterations 5
Cbc0038I Pass  59: suminf.    2.20970 (8) obj. -109.049 iterations 32
Cbc0038I Pass  60: suminf.    2.19039 (8) obj. -109.049 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 185 integers at bound fixed and 0 continuous
Cbc0038I Full problem 507 rows 262 columns, reduced to 141 rows 77 columns
Cbc0038I Mini branch and bound did not improve solution (0.43 seconds)
Cbc0038I After 0.43 seconds - Feasibility pump exiting with objective of -93.2433 - took 0.40 seconds
Cbc0012I Integer solution of -93.24328 found by feasibility pump after 0 iterations and 0 nodes (0.44 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 128 rows 70 columns
Cbc0031I 32 added rows had average density of 163.8125
Cbc0013I At root node, 32 cuts changed objective from -172.12473 to -158.47155 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 30045 row cuts average 3.2 elements, 1 column cuts (1 active)  in 1.027 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2900 row cuts average 259.6 elements, 0 column cuts (0 active)  in 0.930 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.179 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.062 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.074 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 226 row cuts average 255.0 elements, 0 column cuts (0 active)  in 0.435 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -93.24328 best solution, best possible -158.47155 (10.22 seconds)
Cbc0010I After 4 nodes, 5 on tree, -93.24328 best solution, best possible -158.47155 (10.98 seconds)
Cbc0010I After 17 nodes, 10 on tree, -93.24328 best solution, best possible -158.47155 (11.69 seconds)
Cbc0012I Integer solution of -94.51048 found by rounding after 17645 iterations and 18 nodes (11.70 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 6 rows 8 columns
Cbc0012I Integer solution of -95.081904 found by rounding after 18791 iterations and 52 nodes (11.93 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 39 rows 26 columns
Cbc0012I Integer solution of -95.59278 found by rounding after 20481 iterations and 98 nodes (12.27 seconds)
Cbc0010I After 113 nodes, 20 on tree, -95.59278 best solution, best possible -158.47155 (12.40 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 24 rows 22 columns
Cbc0012I Integer solution of -96.47543 found by rounding after 23485 iterations and 210 nodes (12.88 seconds)
Cbc0010I After 238 nodes, 21 on tree, -96.47543 best solution, best possible -158.47155 (13.10 seconds)
Cbc0010I After 298 nodes, 28 on tree, -96.47543 best solution, best possible -158.47155 (13.80 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 82 rows 46 columns
Cbc0012I Integer solution of -97.714476 found by RINS after 26931 iterations and 300 nodes (13.92 seconds)
Cbc0010I After 353 nodes, 17 on tree, -97.714476 best solution, best possible -158.47155 (14.50 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 4 rows 8 columns
Cbc0012I Integer solution of -97.810876 found by RINS after 30924 iterations and 400 nodes (14.85 seconds)
Cbc0010I After 442 nodes, 37 on tree, -97.810876 best solution, best possible -158.47155 (15.21 seconds)
Cbc0012I Integer solution of -101.04529 found by rounding after 32618 iterations and 459 nodes (15.32 seconds)
Cbc0010I After 527 nodes, 16 on tree, -101.04529 best solution, best possible -158.47155 (15.93 seconds)
Cbc0010I After 594 nodes, 13 on tree, -101.04529 best solution, best possible -158.47155 (16.65 seconds)
Cbc0038I Full problem 507 rows 262 columns, reduced to 35 rows 24 columns
Cbc0012I Integer solution of -102.26354 found by DiveCoefficient after 39449 iterations and 646 nodes (17.36 seconds)
Cbc0010I After 646 nodes, 3 on tree, -102.26354 best solution, best possible -121.94569 (17.36 seconds)
Cbc0001I Search completed - best objective -102.26354, took 40287 iterations and 670 nodes (17.64 seconds)
Cbc0032I Strong branching done 4426 times (87928 iterations), fathomed 137 nodes and fixed 430 variables
Cbc0035I Maximum depth 55, 4220 variables fixed on reduced cost
Total time (CPU seconds):       16.89   (Wallclock seconds):       17.75

