Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 382 (-145) rows, 200 (-64) columns and 1148 (-397) elements
Clp1000I sum of infeasibilities 2.61458e-07 - average 6.84444e-10, 191 fixed columns
Coin0506I Presolve 8 (-374) rows, 8 (-192) columns and 28 (-1120) elements
Clp0029I End of values pass after 8 iterations
Clp0000I Optimal - objective value 214317.35
Clp0000I Optimal - objective value 214317.35
Coin0511I After Postsolve, objective 214317.35, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.14412985 - largest nonzero change 0 ( 0%) - largest zero change 2.9943738e-05
Clp0000I Optimal - objective value 214317.35
Clp0000I Optimal - objective value 214317.35
Clp0000I Optimal - objective value 214317.35
Coin0511I After Postsolve, objective 214317.35, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 214317.351 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 382 rows, 200 columns (199 integer (199 of which binary)) and 1148 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.474%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 1.95924
Cbc0038I Solution found of -187296
Cbc0038I Relaxing continuous gives -187296
Cbc0038I Before mini branch and bound, 191 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 200 columns, reduced to 5 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -187296 to -197443 (0.02 seconds)
Cbc0038I Round again with cutoff of -199130
Cbc0038I Reduced cost fixing fixed 42 variables on major pass 2
Cbc0038I Pass   1: suminf.    0.44882 (1) obj. -199130 iterations 44
Cbc0038I Pass   2: suminf.    0.25333 (1) obj. -206984 iterations 13
Cbc0038I Pass   3: suminf.    2.10029 (8) obj. -199130 iterations 35
Cbc0038I Pass   4: suminf.    0.25333 (1) obj. -206984 iterations 34
Cbc0038I Pass   5: suminf.    1.36700 (7) obj. -199130 iterations 19
Cbc0038I Pass   6: suminf.    0.51804 (2) obj. -199130 iterations 17
Cbc0038I Pass   7: suminf.    0.47033 (2) obj. -199130 iterations 19
Cbc0038I Pass   8: suminf.    0.33838 (5) obj. -199130 iterations 14
Cbc0038I Pass   9: suminf.    0.33838 (5) obj. -199130 iterations 0
Cbc0038I Pass  10: suminf.    0.88280 (4) obj. -199130 iterations 26
Cbc0038I Pass  11: suminf.    0.46052 (3) obj. -199130 iterations 11
Cbc0038I Pass  12: suminf.    0.89465 (3) obj. -199130 iterations 20
Cbc0038I Pass  13: suminf.    0.70523 (6) obj. -199130 iterations 17
Cbc0038I Pass  14: suminf.    0.04194 (1) obj. -199130 iterations 27
Cbc0038I Solution found of -200236
Cbc0038I Relaxing continuous gives -200236
Cbc0038I Rounding solution of -204843 is better than previous of -200236

Cbc0038I Before mini branch and bound, 178 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 200 columns, reduced to 11 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -206738
Cbc0038I Reduced cost fixing fixed 100 variables on major pass 3
Cbc0038I Pass  15: suminf.    0.26266 (1) obj. -206738 iterations 0
Cbc0038I Pass  16: suminf.    0.25333 (1) obj. -206984 iterations 11
Cbc0038I Pass  17: suminf.    0.82479 (3) obj. -206738 iterations 8
Cbc0038I Pass  18: suminf.    0.28069 (5) obj. -206738 iterations 18
Cbc0038I Pass  19: suminf.    0.99969 (6) obj. -206738 iterations 26
Cbc0038I Pass  20: suminf.    0.26266 (1) obj. -206738 iterations 19
Cbc0038I Pass  21: suminf.    0.25333 (1) obj. -206984 iterations 11
Cbc0038I Pass  22: suminf.    0.82121 (2) obj. -206738 iterations 13
Cbc0038I Pass  23: suminf.    0.45668 (1) obj. -206738 iterations 19
Cbc0038I Pass  24: suminf.    0.42667 (1) obj. -209814 iterations 11
Cbc0038I Pass  25: suminf.    1.03387 (5) obj. -206738 iterations 16
Cbc0038I Pass  26: suminf.    0.45545 (4) obj. -206738 iterations 30
Cbc0038I Pass  27: suminf.    0.07186 (1) obj. -206738 iterations 25
Cbc0038I Pass  28: suminf.    0.18667 (1) obj. -209765 iterations 11
Cbc0038I Pass  29: suminf.    0.21813 (5) obj. -206738 iterations 17
Cbc0038I Pass  30: suminf.    0.38636 (1) obj. -208400 iterations 26
Cbc0038I Pass  31: suminf.    0.38636 (1) obj. -208400 iterations 9
Cbc0038I Pass  32: suminf.    0.35252 (1) obj. -206738 iterations 11
Cbc0038I Pass  33: suminf.    0.36000 (1) obj. -206935 iterations 10
Cbc0038I Pass  34: suminf.    0.60427 (3) obj. -206738 iterations 19
Cbc0038I Pass  35: suminf.    0.60427 (3) obj. -206738 iterations 7
Cbc0038I Pass  36: suminf.    0.26923 (1) obj. -210870 iterations 17
Cbc0038I Pass  37: suminf.    0.07186 (1) obj. -206738 iterations 13
Cbc0038I Pass  38: suminf.    0.18667 (1) obj. -209765 iterations 11
Cbc0038I Pass  39: suminf.    0.61712 (7) obj. -206738 iterations 28
Cbc0038I Pass  40: suminf.    0.57742 (6) obj. -206738 iterations 7
Cbc0038I Pass  41: suminf.    1.10298 (4) obj. -206738 iterations 28
Cbc0038I Pass  42: suminf.    1.10298 (4) obj. -206738 iterations 7
Cbc0038I Pass  43: suminf.    0.63093 (3) obj. -206738 iterations 12
Cbc0038I Pass  44: suminf.    0.35252 (1) obj. -206738 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 181 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 200 columns, reduced to 8 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -200236 to -205152 (0.05 seconds)
Cbc0038I Round again with cutoff of -209012
Cbc0038I Reduced cost fixing fixed 121 variables on major pass 4
Cbc0038I Pass  44: suminf.    0.89825 (2) obj. -209012 iterations 6
Cbc0038I Pass  45: suminf.    0.23348 (2) obj. -210650 iterations 18
Cbc0038I Pass  46: suminf.    0.01010 (1) obj. -209454 iterations 22
Cbc0038I Pass  47: suminf.    0.62553 (2) obj. -210512 iterations 18
Cbc0038I Pass  48: suminf.    0.45708 (1) obj. -209012 iterations 20
Cbc0038I Pass  49: suminf.    0.42667 (1) obj. -209814 iterations 9
Cbc0038I Pass  50: suminf.    0.94377 (6) obj. -209012 iterations 20
Cbc0038I Pass  51: suminf.    0.42667 (1) obj. -209814 iterations 22
Cbc0038I Pass  52: suminf.    0.76483 (3) obj. -209012 iterations 13
Cbc0038I Pass  53: suminf.    0.95638 (4) obj. -209012 iterations 18
Cbc0038I Pass  54: suminf.    0.18667 (1) obj. -209765 iterations 22
Cbc0038I Pass  55: suminf.    0.15809 (1) obj. -209012 iterations 16
Cbc0038I Pass  56: suminf.    0.18667 (1) obj. -209765 iterations 10
Cbc0038I Pass  57: suminf.    0.25935 (3) obj. -210513 iterations 9
Cbc0038I Pass  58: suminf.    0.40520 (3) obj. -209012 iterations 17
Cbc0038I Pass  59: suminf.    0.90487 (5) obj. -209012 iterations 33
Cbc0038I Pass  60: suminf.    0.48077 (1) obj. -209066 iterations 38
Cbc0038I Pass  61: suminf.    0.48077 (1) obj. -209066 iterations 5
Cbc0038I Pass  62: suminf.    0.50295 (2) obj. -209012 iterations 15
Cbc0038I Pass  63: suminf.    0.39316 (2) obj. -209244 iterations 37
Cbc0038I Pass  64: suminf.    0.42434 (4) obj. -209363 iterations 9
Cbc0038I Pass  65: suminf.    1.29907 (4) obj. -209012 iterations 38
Cbc0038I Pass  66: suminf.    0.45708 (1) obj. -209012 iterations 24
Cbc0038I Pass  67: suminf.    0.42667 (1) obj. -209814 iterations 9
Cbc0038I Pass  68: suminf.    0.42667 (1) obj. -209814 iterations 7
Cbc0038I Pass  69: suminf.    0.42667 (1) obj. -209814 iterations 7
Cbc0038I Pass  70: suminf.    0.42667 (1) obj. -209814 iterations 12
Cbc0038I Pass  71: suminf.    0.66468 (2) obj. -211036 iterations 20
Cbc0038I Pass  72: suminf.    0.18667 (1) obj. -209765 iterations 27
Cbc0038I Pass  73: suminf.    0.15809 (1) obj. -209012 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 185 integers at bound fixed and 0 continuous
Cbc0038I Full problem 382 rows 200 columns, reduced to 6 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -205152 - took 0.05 seconds
Cbc0012I Integer solution of -205151.84 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 382 rows 200 columns, reduced to 5 rows 5 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from -214317.35 to -214317.35 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 17 column cuts (17 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -205151.84, took 0 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 88 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

