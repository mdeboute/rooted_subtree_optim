Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 44 (-21) rows, 25 (-8) columns and 131 (-52) elements
Clp1000I sum of infeasibilities 6.50194e-06 - average 1.47771e-07, 21 fixed columns
Coin0506I Presolve 2 (-42) rows, 2 (-23) columns and 4 (-127) elements
Clp0029I End of values pass after 2 iterations
Clp0000I Optimal - objective value 3025.6261
Clp0000I Optimal - objective value 3025.6261
Coin0511I After Postsolve, objective 3025.6261, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 3025.6261
Clp0000I Optimal - objective value 3025.6261
Clp0000I Optimal - objective value 3025.6261
Coin0511I After Postsolve, objective 3025.6261, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 3025.626144 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 25 columns (24 integer (24 of which binary)) and 135 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.902%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 2 integers unsatisfied sum - 0.600299
Cbc0038I Pass   1: suminf.    0.28013 (2) obj. -3001.08 iterations 3
Cbc0038I Solution found of -416.225
Cbc0038I Relaxing continuous gives -428.205
Cbc0038I Rounding solution of -1041.04 is better than previous of -428.205

Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound improved solution from -1041.04 to -1574.65 (0.01 seconds)
Cbc0038I Round again with cutoff of -1719.74
Cbc0038I Pass   2: suminf.    0.28013 (2) obj. -3001.08 iterations 0
Cbc0038I Pass   3: suminf.    0.33166 (1) obj. -1719.74 iterations 4
Cbc0038I Pass   4: suminf.    0.23577 (1) obj. -1905.04 iterations 1
Cbc0038I Pass   5: suminf.    0.39275 (2) obj. -1719.74 iterations 9
Cbc0038I Pass   6: suminf.    0.39275 (2) obj. -1719.74 iterations 1
Cbc0038I Pass   7: suminf.    0.57841 (2) obj. -1935.01 iterations 1
Cbc0038I Pass   8: suminf.    1.55734 (5) obj. -1719.74 iterations 6
Cbc0038I Pass   9: suminf.    1.07993 (4) obj. -1719.74 iterations 2
Cbc0038I Pass  10: suminf.    0.52085 (2) obj. -1719.74 iterations 3
Cbc0038I Pass  11: suminf.    0.56486 (2) obj. -1770.77 iterations 1
Cbc0038I Pass  12: suminf.    0.34146 (1) obj. -1777.68 iterations 4
Cbc0038I Pass  13: suminf.    0.34146 (1) obj. -1777.68 iterations 1
Cbc0038I Pass  14: suminf.    0.37144 (1) obj. -1719.74 iterations 1
Cbc0038I Pass  15: suminf.    0.29174 (1) obj. -1719.74 iterations 7
Cbc0038I Pass  16: suminf.    0.29174 (1) obj. -1719.74 iterations 1
Cbc0038I Pass  17: suminf.    0.30081 (1) obj. -1737.28 iterations 1
Cbc0038I Pass  18: suminf.    1.45954 (4) obj. -1719.74 iterations 7
Cbc0038I Pass  19: suminf.    0.33708 (2) obj. -1719.74 iterations 3
Cbc0038I Pass  20: suminf.    0.22357 (1) obj. -1719.74 iterations 2
Cbc0038I Pass  21: suminf.    0.28455 (1) obj. -1837.58 iterations 1
Cbc0038I Pass  22: suminf.    0.45455 (3) obj. -1719.74 iterations 6
Cbc0038I Pass  23: suminf.    0.26811 (1) obj. -1719.74 iterations 3
Cbc0038I Pass  24: suminf.    0.29268 (1) obj. -1767.22 iterations 1
Cbc0038I Pass  25: suminf.    0.37398 (1) obj. -1854.03 iterations 2
Cbc0038I Pass  26: suminf.    0.30449 (1) obj. -1719.74 iterations 2
Cbc0038I Pass  27: suminf.    0.37398 (1) obj. -1854.03 iterations 1
Cbc0038I Pass  28: suminf.    0.37000 (3) obj. -1719.74 iterations 4
Cbc0038I Pass  29: suminf.    0.23991 (2) obj. -1719.74 iterations 1
Cbc0038I Pass  30: suminf.    0.60587 (2) obj. -2256.76 iterations 1
Cbc0038I Pass  31: suminf.    0.42222 (1) obj. -1992.08 iterations 1
Cbc0038I Rounding solution of -1610.28 is better than previous of -1574.65

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 23 rows 16 columns
Cbc0038I Mini branch and bound improved solution from -1610.28 to -2063.04 (0.01 seconds)
Cbc0038I Round again with cutoff of -2255.56
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.28013 (2) obj. -3001.08 iterations 0
Cbc0038I Pass  32: suminf.    0.53809 (2) obj. -2255.56 iterations 3
Cbc0038I Pass  33: suminf.    0.53809 (2) obj. -2255.56 iterations 0
Cbc0038I Pass  34: suminf.    0.35236 (1) obj. -2255.56 iterations 2
Cbc0038I Pass  35: suminf.    1.68191 (4) obj. -2255.56 iterations 11
Cbc0038I Pass  36: suminf.    0.47658 (3) obj. -2255.56 iterations 8
Cbc0038I Pass  37: suminf.    0.35263 (2) obj. -2255.56 iterations 3
Cbc0038I Pass  38: suminf.    0.38756 (2) obj. -2255.56 iterations 1
Cbc0038I Pass  39: suminf.    2.28277 (8) obj. -2255.56 iterations 7
Cbc0038I Pass  40: suminf.    0.70615 (3) obj. -2255.56 iterations 5
Cbc0038I Pass  41: suminf.    0.26655 (1) obj. -2255.56 iterations 4
Cbc0038I Pass  42: suminf.    0.30081 (1) obj. -2321.77 iterations 1
Cbc0038I Pass  43: suminf.    1.18593 (4) obj. -2255.56 iterations 7
Cbc0038I Pass  44: suminf.    0.80956 (3) obj. -2255.56 iterations 4
Cbc0038I Pass  45: suminf.    0.32400 (2) obj. -2255.56 iterations 5
Cbc0038I Pass  46: suminf.    0.32520 (1) obj. -2604.68 iterations 3
Cbc0038I Pass  47: suminf.    0.49414 (1) obj. -2255.56 iterations 1
Cbc0038I Pass  48: suminf.    2.24844 (6) obj. -2255.56 iterations 9
Cbc0038I Pass  49: suminf.    0.60560 (3) obj. -2255.56 iterations 8
Cbc0038I Pass  50: suminf.    0.60560 (3) obj. -2255.56 iterations 1
Cbc0038I Pass  51: suminf.    0.85896 (2) obj. -2255.56 iterations 2
Cbc0038I Pass  52: suminf.    0.85218 (2) obj. -2255.56 iterations 1
Cbc0038I Pass  53: suminf.    0.86721 (2) obj. -2272.98 iterations 1
Cbc0038I Pass  54: suminf.    0.86721 (2) obj. -2272.98 iterations 0
Cbc0038I Pass  55: suminf.    1.65812 (4) obj. -2255.56 iterations 8
Cbc0038I Pass  56: suminf.    0.97087 (3) obj. -2255.56 iterations 1
Cbc0038I Pass  57: suminf.    0.71163 (2) obj. -2255.56 iterations 2
Cbc0038I Pass  58: suminf.    0.84436 (2) obj. -2255.56 iterations 1
Cbc0038I Pass  59: suminf.    1.05472 (3) obj. -2255.56 iterations 6
Cbc0038I Pass  60: suminf.    0.75425 (2) obj. -2255.56 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 31 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -2063.04 to -2111.42 (0.02 seconds)
Cbc0038I Round again with cutoff of -2486.58
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 4
Cbc0038I Pass  60: suminf.    0.28013 (2) obj. -3001.08 iterations 0
Cbc0038I Pass  61: suminf.    0.73286 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  62: suminf.    0.97211 (3) obj. -2486.58 iterations 8
Cbc0038I Pass  63: suminf.    0.97211 (3) obj. -2486.58 iterations 3
Cbc0038I Pass  64: suminf.    0.74817 (2) obj. -2486.58 iterations 3
Cbc0038I Pass  65: suminf.    0.63080 (2) obj. -2734.51 iterations 1
Cbc0038I Pass  66: suminf.    0.72446 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  67: suminf.    0.72446 (2) obj. -2486.58 iterations 0
Cbc0038I Pass  68: suminf.    1.40254 (7) obj. -2486.58 iterations 5
Cbc0038I Pass  69: suminf.    1.18652 (3) obj. -2486.58 iterations 3
Cbc0038I Pass  70: suminf.    0.73614 (2) obj. -2486.58 iterations 2
Cbc0038I Pass  71: suminf.    0.50743 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  72: suminf.    1.17453 (3) obj. -2486.58 iterations 3
Cbc0038I Pass  73: suminf.    0.45599 (1) obj. -2486.58 iterations 5
Cbc0038I Pass  74: suminf.    0.47967 (1) obj. -2610.91 iterations 1
Cbc0038I Pass  75: suminf.    0.47967 (1) obj. -2610.91 iterations 2
Cbc0038I Pass  76: suminf.    0.47967 (1) obj. -2610.91 iterations 2
Cbc0038I Pass  77: suminf.    1.07126 (3) obj. -2486.58 iterations 3
Cbc0038I Pass  78: suminf.    1.94736 (6) obj. -2486.58 iterations 7
Cbc0038I Pass  79: suminf.    0.89246 (3) obj. -2486.58 iterations 3
Cbc0038I Pass  80: suminf.    0.86949 (2) obj. -2486.58 iterations 2
Cbc0038I Pass  81: suminf.    0.88216 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  82: suminf.    1.26871 (4) obj. -2486.58 iterations 4
Cbc0038I Pass  83: suminf.    0.50743 (2) obj. -2486.58 iterations 3
Cbc0038I Pass  84: suminf.    0.73614 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  85: suminf.    0.73202 (2) obj. -2486.58 iterations 2
Cbc0038I Pass  86: suminf.    0.45718 (2) obj. -2805.23 iterations 1
Cbc0038I Pass  87: suminf.    0.73202 (2) obj. -2486.58 iterations 1
Cbc0038I Pass  88: suminf.    0.74813 (4) obj. -2486.58 iterations 3
Cbc0038I Pass  89: suminf.    0.65158 (2) obj. -2507.98 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 25 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -2111.42 - took 0.02 seconds
Cbc0012I Integer solution of -2111.416 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 43 rows 25 columns, reduced to 10 rows 7 columns
Cbc0031I 9 added rows had average density of 11.888889
Cbc0013I At root node, 9 cuts changed objective from -3025.6261 to -2222.4857 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 164 row cuts average 7.2 elements, 7 column cuts (7 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 376 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 49 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 133 row cuts average 15.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 141 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -2111.416, took 1145 iterations and 6 nodes (0.13 seconds)
Cbc0032I Strong branching done 30 times (191 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 1, 4 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.13

