Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 55 (-8) rows, 30 (-2) columns and 162 (-15) elements
Clp1000I sum of infeasibilities 0.00197445 - average 3.58991e-05, 7 fixed columns
Coin0506I Presolve 38 (-17) rows, 23 (-7) columns and 114 (-48) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 78.26552
Clp0000I Optimal - objective value 78.26552
Coin0511I After Postsolve, objective 78.26552, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 78.26552
Clp0000I Optimal - objective value 78.26552
Clp0000I Optimal - objective value 78.26552
Coin0511I After Postsolve, objective 78.26552, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 78.26551998 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 55 rows, 30 columns (29 integer (29 of which binary)) and 162 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.005%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 19 integers unsatisfied sum - 7.13485
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1.18377 iterations 23
Cbc0038I Solution found of 1.18377
Cbc0038I Relaxing continuous gives 1.18377
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 30 columns, reduced to 32 rows 20 columns
Cbc0038I Mini branch and bound improved solution from 1.18377 to -35.0415 (0.01 seconds)
Cbc0038I Round again with cutoff of -39.364
Cbc0038I Pass   2: suminf.    1.31089 (5) obj. -39.364 iterations 5
Cbc0038I Pass   3: suminf.    1.18272 (4) obj. -39.364 iterations 3
Cbc0038I Pass   4: suminf.    1.17035 (6) obj. -39.364 iterations 7
Cbc0038I Pass   5: suminf.    0.99713 (5) obj. -39.364 iterations 2
Cbc0038I Pass   6: suminf.    2.41816 (6) obj. -39.364 iterations 7
Cbc0038I Pass   7: suminf.    0.65631 (5) obj. -39.364 iterations 4
Cbc0038I Pass   8: suminf.    0.65631 (5) obj. -39.364 iterations 1
Cbc0038I Pass   9: suminf.    0.85708 (4) obj. -39.364 iterations 6
Cbc0038I Pass  10: suminf.    0.83946 (4) obj. -39.364 iterations 1
Cbc0038I Pass  11: suminf.    1.12299 (4) obj. -39.364 iterations 8
Cbc0038I Pass  12: suminf.    1.10881 (4) obj. -39.364 iterations 2
Cbc0038I Pass  13: suminf.    0.62505 (3) obj. -39.364 iterations 4
Cbc0038I Pass  14: suminf.    0.62461 (3) obj. -39.364 iterations 1
Cbc0038I Pass  15: suminf.    0.76409 (3) obj. -39.364 iterations 3
Cbc0038I Pass  16: suminf.    0.66467 (3) obj. -39.364 iterations 2
Cbc0038I Pass  17: suminf.    0.76240 (3) obj. -39.364 iterations 2
Cbc0038I Pass  18: suminf.    0.62505 (3) obj. -39.364 iterations 2
Cbc0038I Pass  19: suminf.    0.62461 (3) obj. -39.364 iterations 1
Cbc0038I Pass  20: suminf.    0.76409 (3) obj. -39.364 iterations 3
Cbc0038I Pass  21: suminf.    0.66467 (3) obj. -39.364 iterations 2
Cbc0038I Pass  22: suminf.    0.76240 (3) obj. -39.364 iterations 2
Cbc0038I Pass  23: suminf.    0.62505 (3) obj. -39.364 iterations 2
Cbc0038I Pass  24: suminf.    0.62461 (3) obj. -39.364 iterations 1
Cbc0038I Pass  25: suminf.    0.76409 (3) obj. -39.364 iterations 3
Cbc0038I Pass  26: suminf.    0.66467 (3) obj. -39.364 iterations 2
Cbc0038I Pass  27: suminf.    0.76240 (3) obj. -39.364 iterations 2
Cbc0038I Pass  28: suminf.    0.62505 (3) obj. -39.364 iterations 2
Cbc0038I Pass  29: suminf.    0.62461 (3) obj. -39.364 iterations 1
Cbc0038I Pass  30: suminf.    0.76409 (3) obj. -39.364 iterations 3
Cbc0038I Pass  31: suminf.    0.66467 (3) obj. -39.364 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 30 columns, reduced to 38 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -35.0415 - took 0.05 seconds
Cbc0012I Integer solution of -35.04153 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 55 rows 30 columns, reduced to 32 rows 20 columns
Cbc0031I 18 added rows had average density of 18.388889
Cbc0013I At root node, 18 cuts changed objective from -78.26552 to -46.985529 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2365 row cuts average 3.3 elements, 2 column cuts (2 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1016 row cuts average 28.8 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 7 row cuts average 3.1 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 178 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 103 row cuts average 26.6 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -35.04153000000001, took 2932 iterations and 4 nodes (0.24 seconds)
Cbc0032I Strong branching done 78 times (1162 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 1, 16 variables fixed on reduced cost
Total time (CPU seconds):       0.26   (Wallclock seconds):       0.24

