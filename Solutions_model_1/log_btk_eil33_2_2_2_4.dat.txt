Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 62 (-7) rows, 33 (-2) columns and 182 (-13) elements
Clp1000I sum of infeasibilities 1.49155e-05 - average 2.40573e-07, 1 fixed columns
Coin0506I Presolve 60 (-2) rows, 32 (-1) columns and 176 (-6) elements
Clp0029I End of values pass after 32 iterations
Clp0000I Optimal - objective value 79.500273
Clp0000I Optimal - objective value 79.500273
Coin0511I After Postsolve, objective 79.500273, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 79.500273
Clp0000I Optimal - objective value 79.500273
Clp0000I Optimal - objective value 79.500273
Coin0511I After Postsolve, objective 79.500273, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 79.50027287 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0004I processed model has 62 rows, 33 columns (32 integer (32 of which binary)) and 186 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.030%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 6.64967
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 5.23748 iterations 22
Cbc0038I Solution found of 5.23748
Cbc0038I Relaxing continuous gives 5.23748
Cbc0038I Rounding solution of -15.7209 is better than previous of 5.23748

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 62 rows 33 columns, reduced to 47 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -15.7209 to -28.4391 (0.02 seconds)
Cbc0038I Round again with cutoff of -33.5453
Cbc0038I Pass   2: suminf.    1.62326 (5) obj. -33.5453 iterations 6
Cbc0038I Pass   3: suminf.    1.60244 (4) obj. -33.5453 iterations 1
Cbc0038I Pass   4: suminf.    0.34763 (2) obj. -33.5453 iterations 4
Cbc0038I Pass   5: suminf.    0.41454 (3) obj. -33.5453 iterations 3
Cbc0038I Pass   6: suminf.    0.29876 (1) obj. -33.5453 iterations 2
Cbc0038I Pass   7: suminf.    1.47929 (5) obj. -33.5453 iterations 7
Cbc0038I Pass   8: suminf.    0.51694 (3) obj. -33.5453 iterations 4
Cbc0038I Pass   9: suminf.    0.85896 (2) obj. -33.5453 iterations 2
Cbc0038I Pass  10: suminf.    0.52075 (3) obj. -33.5453 iterations 2
Cbc0038I Pass  11: suminf.    0.70781 (2) obj. -33.5453 iterations 3
Cbc0038I Pass  12: suminf.    0.64416 (2) obj. -33.5453 iterations 2
Cbc0038I Pass  13: suminf.    0.64416 (2) obj. -33.5453 iterations 1
Cbc0038I Pass  14: suminf.    0.64416 (2) obj. -33.5453 iterations 1
Cbc0038I Pass  15: suminf.    1.60518 (5) obj. -33.5453 iterations 12
Cbc0038I Pass  16: suminf.    1.26236 (4) obj. -33.5453 iterations 2
Cbc0038I Pass  17: suminf.    0.74827 (3) obj. -33.5453 iterations 8
Cbc0038I Pass  18: suminf.    0.45765 (1) obj. -33.5453 iterations 2
Cbc0038I Pass  19: suminf.    0.40656 (1) obj. -33.5453 iterations 1
Cbc0038I Pass  20: suminf.    0.36374 (4) obj. -33.5453 iterations 5
Cbc0038I Pass  21: suminf.    0.35497 (2) obj. -33.5453 iterations 3
Cbc0038I Pass  22: suminf.    0.64342 (3) obj. -33.5453 iterations 3
Cbc0038I Pass  23: suminf.    0.43750 (1) obj. -33.5453 iterations 2
Cbc0038I Pass  24: suminf.    1.57556 (7) obj. -33.5453 iterations 8
Cbc0038I Pass  25: suminf.    1.05876 (5) obj. -33.5453 iterations 2
Cbc0038I Pass  26: suminf.    0.85620 (3) obj. -33.5453 iterations 9
Cbc0038I Pass  27: suminf.    0.65995 (3) obj. -33.5453 iterations 1
Cbc0038I Pass  28: suminf.    0.85075 (3) obj. -33.5453 iterations 4
Cbc0038I Pass  29: suminf.    0.60572 (2) obj. -33.5453 iterations 1
Cbc0038I Pass  30: suminf.    0.60572 (2) obj. -33.5453 iterations 0
Cbc0038I Pass  31: suminf.    0.62509 (2) obj. -33.5453 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 62 rows 33 columns, reduced to 52 rows 28 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -28.4391 - took 0.03 seconds
Cbc0012I Integer solution of -28.43912 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 62 rows 33 columns, reduced to 47 rows 25 columns
Cbc0031I 14 added rows had average density of 22.428571
Cbc0013I At root node, 14 cuts changed objective from -79.500273 to -55.728512 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1972 row cuts average 3.2 elements, 2 column cuts (2 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 811 row cuts average 31.7 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 77 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 106 row cuts average 29.7 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0012I Integer solution of -29.15934 found by rounding after 3421 iterations and 17 nodes (0.32 seconds)
Cbc0001I Search completed - best objective -29.15934, took 3442 iterations and 18 nodes (0.32 seconds)
Cbc0032I Strong branching done 180 times (1742 iterations), fathomed 0 nodes and fixed 13 variables
Cbc0035I Maximum depth 4, 49 variables fixed on reduced cost
Total time (CPU seconds):       0.31   (Wallclock seconds):       0.33

