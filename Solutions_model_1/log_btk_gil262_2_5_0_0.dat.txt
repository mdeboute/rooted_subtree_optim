Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 508 (-19) rows, 262 (-2) columns and 1508 (-37) elements
Clp1000I sum of infeasibilities 8.73203e-05 - average 1.7189e-07, 111 fixed columns
Coin0506I Presolve 277 (-231) rows, 145 (-117) columns and 822 (-686) elements
Clp0029I End of values pass after 145 iterations
Clp0014I Perturbing problem by 0.001% of 0.16191849 - largest nonzero change 0 ( 0%) - largest zero change 2.9856677e-05
Clp0000I Optimal - objective value 197.89986
Clp0000I Optimal - objective value 197.89986
Coin0511I After Postsolve, objective 197.89986, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.134373 - largest nonzero change 0 ( 0%) - largest zero change 2.9856677e-05
Clp0000I Optimal - objective value 197.89986
Clp0000I Optimal - objective value 197.89986
Clp0000I Optimal - objective value 197.89986
Coin0511I After Postsolve, objective 197.89986, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 197.899855 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 508 rows, 262 columns (261 integer (261 of which binary)) and 1508 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 91 integers unsatisfied sum - 10.4665
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -9.9012 iterations 221
Cbc0038I Solution found of -9.9012
Cbc0038I Relaxing continuous gives -9.9012
Cbc0038I Rounding solution of -60.2852 is better than previous of -9.9012

Cbc0038I Before mini branch and bound, 170 integers at bound fixed and 0 continuous
Cbc0038I Full problem 508 rows 262 columns, reduced to 173 rows 92 columns
Cbc0038I Mini branch and bound improved solution from -60.2852 to -89.9985 (0.08 seconds)
Cbc0038I Round again with cutoff of -100.789
Cbc0038I Pass   2: suminf.    3.20355 (13) obj. -100.789 iterations 63
Cbc0038I Pass   3: suminf.    2.60770 (10) obj. -100.789 iterations 33
Cbc0038I Pass   4: suminf.    2.30787 (8) obj. -100.789 iterations 41
Cbc0038I Pass   5: suminf.    2.97536 (9) obj. -100.789 iterations 38
Cbc0038I Pass   6: suminf.    2.60770 (10) obj. -100.789 iterations 41
Cbc0038I Pass   7: suminf.    4.19961 (15) obj. -100.789 iterations 77
Cbc0038I Pass   8: suminf.    2.13120 (8) obj. -100.789 iterations 35
Cbc0038I Pass   9: suminf.    2.11604 (9) obj. -100.789 iterations 1
Cbc0038I Pass  10: suminf.    1.53352 (6) obj. -100.789 iterations 46
Cbc0038I Pass  11: suminf.    1.41493 (5) obj. -100.789 iterations 5
Cbc0038I Pass  12: suminf.    1.43909 (4) obj. -100.789 iterations 11
Cbc0038I Pass  13: suminf.    1.31321 (5) obj. -100.789 iterations 8
Cbc0038I Pass  14: suminf.    1.20454 (7) obj. -100.789 iterations 17
Cbc0038I Pass  15: suminf.    0.71582 (5) obj. -100.789 iterations 4
Cbc0038I Pass  16: suminf.    2.12185 (8) obj. -100.789 iterations 31
Cbc0038I Pass  17: suminf.    1.34161 (6) obj. -100.789 iterations 23
Cbc0038I Pass  18: suminf.    1.74694 (6) obj. -100.789 iterations 16
Cbc0038I Pass  19: suminf.    1.37671 (6) obj. -100.789 iterations 7
Cbc0038I Pass  20: suminf.    1.90849 (7) obj. -100.789 iterations 23
Cbc0038I Pass  21: suminf.    1.57664 (5) obj. -100.789 iterations 11
Cbc0038I Pass  22: suminf.    2.97791 (13) obj. -100.789 iterations 65
Cbc0038I Pass  23: suminf.    2.04587 (11) obj. -100.789 iterations 43
Cbc0038I Pass  24: suminf.    3.14606 (7) obj. -100.789 iterations 23
Cbc0038I Pass  25: suminf.    1.10201 (4) obj. -100.789 iterations 5
Cbc0038I Pass  26: suminf.    1.00436 (6) obj. -100.789 iterations 13
Cbc0038I Pass  27: suminf.    2.05172 (6) obj. -100.789 iterations 9
Cbc0038I Pass  28: suminf.    1.74952 (8) obj. -100.789 iterations 14
Cbc0038I Pass  29: suminf.    2.07430 (6) obj. -100.789 iterations 15
Cbc0038I Pass  30: suminf.    1.84062 (6) obj. -100.789 iterations 22
Cbc0038I Pass  31: suminf.    2.65826 (8) obj. -100.789 iterations 25
Cbc0038I Rounding solution of -109.185 is better than previous of -89.9985

Cbc0038I Before mini branch and bound, 161 integers at bound fixed and 0 continuous
Cbc0038I Full problem 508 rows 262 columns, reduced to 190 rows 101 columns
Cbc0038I Mini branch and bound improved solution from -109.185 to -133.511 (0.18 seconds)
Cbc0038I Round again with cutoff of -146.389
Cbc0038I Pass  31: suminf.    5.07574 (30) obj. -146.389 iterations 3
Cbc0038I Pass  32: suminf.    5.04510 (31) obj. -146.389 iterations 7
Cbc0038I Pass  33: suminf.    5.12663 (14) obj. -146.389 iterations 51
Cbc0038I Pass  34: suminf.    3.22756 (15) obj. -146.389 iterations 27
Cbc0038I Pass  35: suminf.    3.19509 (17) obj. -146.389 iterations 6
Cbc0038I Pass  36: suminf.    5.11712 (16) obj. -146.389 iterations 51
Cbc0038I Pass  37: suminf.    3.10553 (12) obj. -146.389 iterations 29
Cbc0038I Pass  38: suminf.    4.44750 (14) obj. -146.389 iterations 29
Cbc0038I Pass  39: suminf.    2.73161 (11) obj. -146.389 iterations 30
Cbc0038I Pass  40: suminf.    2.43797 (17) obj. -146.389 iterations 20
Cbc0038I Pass  41: suminf.    4.23560 (14) obj. -146.389 iterations 35
Cbc0038I Pass  42: suminf.    2.81861 (12) obj. -146.389 iterations 14
Cbc0038I Pass  43: suminf.    2.79709 (12) obj. -146.389 iterations 1
Cbc0038I Pass  44: suminf.    3.87950 (18) obj. -146.389 iterations 47
Cbc0038I Pass  45: suminf.    2.42954 (10) obj. -146.389 iterations 47
Cbc0038I Pass  46: suminf.    1.99816 (9) obj. -146.389 iterations 7
Cbc0038I Pass  47: suminf.    1.66975 (7) obj. -146.389 iterations 32
Cbc0038I Pass  48: suminf.    2.06615 (12) obj. -146.389 iterations 15
Cbc0038I Pass  49: suminf.    2.06615 (12) obj. -146.389 iterations 0
Cbc0038I Pass  50: suminf.    3.51738 (15) obj. -146.389 iterations 39
Cbc0038I Pass  51: suminf.    3.20946 (15) obj. -146.389 iterations 10
Cbc0038I Pass  52: suminf.    5.42106 (14) obj. -146.389 iterations 45
Cbc0038I Pass  53: suminf.    2.73161 (11) obj. -146.389 iterations 46
Cbc0038I Pass  54: suminf.    2.43797 (17) obj. -146.389 iterations 17
Cbc0038I Pass  55: suminf.    5.10426 (16) obj. -146.389 iterations 36
Cbc0038I Pass  56: suminf.    3.09152 (13) obj. -146.389 iterations 19
Cbc0038I Pass  57: suminf.    3.09062 (13) obj. -146.389 iterations 2
Cbc0038I Pass  58: suminf.    3.67926 (13) obj. -146.389 iterations 42
Cbc0038I Pass  59: suminf.    2.77206 (12) obj. -146.389 iterations 19
Cbc0038I Pass  60: suminf.    2.74241 (16) obj. -146.389 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 159 integers at bound fixed and 0 continuous
Cbc0038I Full problem 508 rows 262 columns, reduced to 195 rows 103 columns
Cbc0038I Mini branch and bound did not improve solution (0.31 seconds)
Cbc0038I After 0.31 seconds - Feasibility pump exiting with objective of -133.511 - took 0.29 seconds
Cbc0012I Integer solution of -133.51138 found by feasibility pump after 0 iterations and 0 nodes (0.31 seconds)
Cbc0038I Full problem 508 rows 262 columns, reduced to 173 rows 92 columns
Cbc0031I 40 added rows had average density of 117.975
Cbc0013I At root node, 40 cuts changed objective from -197.89986 to -183.9081 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 44478 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.599 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3387 row cuts average 256.7 elements, 0 column cuts (0 active)  in 0.627 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.142 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.710 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 231 row cuts average 251.5 elements, 0 column cuts (0 active)  in 0.272 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -133.51138 best solution, best possible -183.9081 (6.65 seconds)
Cbc0010I After 9 nodes, 10 on tree, -133.51138 best solution, best possible -183.9081 (7.39 seconds)
Cbc0038I Full problem 508 rows 262 columns, reduced to 185 rows 99 columns
Cbc0010I After 55 nodes, 14 on tree, -133.51138 best solution, best possible -183.9081 (8.10 seconds)
Cbc0038I Full problem 508 rows 262 columns, reduced to 146 rows 80 columns
Cbc0010I After 153 nodes, 9 on tree, -133.51138 best solution, best possible -183.9081 (8.80 seconds)
Cbc0038I Full problem 508 rows 262 columns, reduced to 74 rows 42 columns
Cbc0001I Search completed - best objective -133.51138, took 29888 iterations and 222 nodes (9.08 seconds)
Cbc0032I Strong branching done 2218 times (64036 iterations), fathomed 9 nodes and fixed 31 variables
Cbc0035I Maximum depth 98, 381 variables fixed on reduced cost
Total time (CPU seconds):       8.76   (Wallclock seconds):       9.14

