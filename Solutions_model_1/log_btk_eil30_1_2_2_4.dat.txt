Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 51 (-12) rows, 29 (-3) columns and 152 (-25) elements
Clp1000I sum of infeasibilities 2.71542e-06 - average 5.32434e-08, 2 fixed columns
Coin0506I Presolve 46 (-5) rows, 27 (-2) columns and 138 (-14) elements
Clp0029I End of values pass after 27 iterations
Clp0000I Optimal - objective value 78.980475
Clp0000I Optimal - objective value 78.980475
Coin0511I After Postsolve, objective 78.980475, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 78.980475
Clp0000I Optimal - objective value 78.980475
Clp0000I Optimal - objective value 78.980475
Coin0511I After Postsolve, objective 78.980475, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 78.98047451 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 51 rows, 29 columns (28 integer (28 of which binary)) and 154 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.507%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 8.28568
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -14.0875 iterations 29
Cbc0038I Solution found of -14.0875
Cbc0038I Relaxing continuous gives -14.0875
Cbc0038I Rounding solution of -14.3611 is better than previous of -14.0875

Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 51 rows 29 columns, reduced to 39 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -14.3611 to -29.3795 (0.05 seconds)
Cbc0038I Round again with cutoff of -33.8664
Cbc0038I Pass   2: suminf.    1.06818 (5) obj. -33.8664 iterations 6
Cbc0038I Pass   3: suminf.    1.18309 (4) obj. -33.8664 iterations 5
Cbc0038I Pass   4: suminf.    1.17854 (4) obj. -33.8664 iterations 1
Cbc0038I Pass   5: suminf.    1.60531 (4) obj. -33.8664 iterations 2
Cbc0038I Pass   6: suminf.    1.32055 (5) obj. -33.8664 iterations 2
Cbc0038I Pass   7: suminf.    1.30344 (4) obj. -33.8664 iterations 1
Cbc0038I Pass   8: suminf.    1.48922 (4) obj. -33.8664 iterations 2
Cbc0038I Pass   9: suminf.    1.17854 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  10: suminf.    1.17854 (4) obj. -33.8664 iterations 0
Cbc0038I Pass  11: suminf.    1.60531 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  12: suminf.    1.32055 (5) obj. -33.8664 iterations 2
Cbc0038I Pass  13: suminf.    1.30344 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  14: suminf.    1.48922 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  15: suminf.    1.17854 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  16: suminf.    1.17854 (4) obj. -33.8664 iterations 0
Cbc0038I Pass  17: suminf.    1.60531 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  18: suminf.    1.32055 (5) obj. -33.8664 iterations 2
Cbc0038I Pass  19: suminf.    1.30344 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  20: suminf.    1.48922 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  21: suminf.    1.17854 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  22: suminf.    1.17854 (4) obj. -33.8664 iterations 0
Cbc0038I Pass  23: suminf.    1.60531 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  24: suminf.    1.32055 (5) obj. -33.8664 iterations 2
Cbc0038I Pass  25: suminf.    1.30344 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  26: suminf.    1.48922 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  27: suminf.    1.17854 (4) obj. -33.8664 iterations 1
Cbc0038I Pass  28: suminf.    1.17854 (4) obj. -33.8664 iterations 0
Cbc0038I Pass  29: suminf.    1.60531 (4) obj. -33.8664 iterations 2
Cbc0038I Pass  30: suminf.    1.32055 (5) obj. -33.8664 iterations 2
Cbc0038I Pass  31: suminf.    1.30344 (4) obj. -33.8664 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 51 rows 29 columns, reduced to 39 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -29.3795 - took 0.06 seconds
Cbc0012I Integer solution of -29.379502 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0031I 18 added rows had average density of 16.611111
Cbc0013I At root node, 18 cuts changed objective from -74.247896 to -49.110863 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2748 row cuts average 3.5 elements, 2 column cuts (2 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1147 row cuts average 27.9 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 205 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 122 row cuts average 27.2 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0001I Search completed - best objective -29.379502, took 3538 iterations and 12 nodes (0.34 seconds)
Cbc0032I Strong branching done 144 times (1844 iterations), fathomed 0 nodes and fixed 14 variables
Cbc0035I Maximum depth 3, 16 variables fixed on reduced cost
Total time (CPU seconds):       0.32   (Wallclock seconds):       0.35

