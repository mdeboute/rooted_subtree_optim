Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 46 (-19) rows, 25 (-8) columns and 134 (-49) elements
Clp1000I sum of infeasibilities 0 - average 0, 0 fixed columns
Coin0506I Presolve 46 (0) rows, 25 (0) columns and 134 (0) elements
Clp0029I End of values pass after 25 iterations
Clp0000I Optimal - objective value 59.469347
Clp0000I Optimal - objective value 59.469347
Coin0511I After Postsolve, objective 59.469347, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 59.469347
Clp0000I Optimal - objective value 59.469347
Clp0000I Optimal - objective value 59.469347
Coin0511I After Postsolve, objective 59.469347, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 59.46934713 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 44 rows, 25 columns (24 integer (24 of which binary)) and 136 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.098%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 4.87339
Cbc0038I Solution found of -6.85095
Cbc0038I Relaxing continuous gives -7.03947
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 44 rows 25 columns, reduced to 31 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -7.03947 to -26.2815 (0.02 seconds)
Cbc0038I Round again with cutoff of -29.537
Cbc0038I Pass   1: suminf.    1.27492 (5) obj. -29.537 iterations 20
Cbc0038I Pass   2: suminf.    0.05000 (1) obj. -33.3292 iterations 8
Cbc0038I Pass   3: suminf.    0.05000 (1) obj. -33.3292 iterations 1
Cbc0038I Pass   4: suminf.    0.22443 (1) obj. -29.537 iterations 2
Cbc0038I Pass   5: suminf.    1.92106 (6) obj. -29.537 iterations 10
Cbc0038I Pass   6: suminf.    0.96283 (4) obj. -29.537 iterations 4
Cbc0038I Pass   7: suminf.    0.47564 (3) obj. -29.537 iterations 4
Cbc0038I Pass   8: suminf.    0.47564 (3) obj. -29.537 iterations 0
Cbc0038I Pass   9: suminf.    0.77935 (3) obj. -29.537 iterations 4
Cbc0038I Pass  10: suminf.    0.92022 (3) obj. -29.537 iterations 4
Cbc0038I Pass  11: suminf.    0.65790 (2) obj. -29.537 iterations 1
Cbc0038I Pass  12: suminf.    0.68938 (2) obj. -29.537 iterations 1
Cbc0038I Pass  13: suminf.    1.00126 (4) obj. -29.537 iterations 12
Cbc0038I Pass  14: suminf.    1.00126 (4) obj. -29.537 iterations 0
Cbc0038I Pass  15: suminf.    0.79296 (3) obj. -29.537 iterations 7
Cbc0038I Pass  16: suminf.    1.24939 (3) obj. -29.537 iterations 5
Cbc0038I Pass  17: suminf.    0.90530 (3) obj. -29.537 iterations 2
Cbc0038I Pass  18: suminf.    0.81686 (3) obj. -29.537 iterations 5
Cbc0038I Pass  19: suminf.    0.69592 (3) obj. -29.537 iterations 3
Cbc0038I Pass  20: suminf.    0.59309 (4) obj. -29.537 iterations 3
Cbc0038I Pass  21: suminf.    0.44140 (3) obj. -29.537 iterations 2
Cbc0038I Pass  22: suminf.    0.48763 (2) obj. -29.537 iterations 3
Cbc0038I Pass  23: suminf.    0.54424 (3) obj. -29.537 iterations 4
Cbc0038I Pass  24: suminf.    0.72966 (3) obj. -29.537 iterations 4
Cbc0038I Pass  25: suminf.    0.34834 (1) obj. -29.537 iterations 10
Cbc0038I Pass  26: suminf.    0.21250 (1) obj. -34.9044 iterations 3
Cbc0038I Pass  27: suminf.    0.34834 (1) obj. -29.537 iterations 1
Cbc0038I Pass  28: suminf.    0.75244 (6) obj. -29.537 iterations 6
Cbc0038I Pass  29: suminf.    0.70165 (3) obj. -29.537 iterations 2
Cbc0038I Pass  30: suminf.    0.65263 (3) obj. -29.537 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 44 rows 25 columns, reduced to 38 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -26.2815 - took 0.03 seconds
Cbc0012I Integer solution of -26.281477 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 44 rows 25 columns, reduced to 31 rows 18 columns
Cbc0031I 9 added rows had average density of 12.666667
Cbc0013I At root node, 9 cuts changed objective from -58.836041 to -43.249557 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1105 row cuts average 3.3 elements, 4 column cuts (4 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 642 row cuts average 21.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 108 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -26.28147674, took 2853 iterations and 16 nodes (0.26 seconds)
Cbc0032I Strong branching done 156 times (1369 iterations), fathomed 0 nodes and fixed 8 variables
Cbc0035I Maximum depth 6, 9 variables fixed on reduced cost
Total time (CPU seconds):       0.24   (Wallclock seconds):       0.26

