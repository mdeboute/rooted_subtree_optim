Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 40 (-25) rows, 23 (-10) columns and 118 (-65) elements
Clp1000I sum of infeasibilities 6.64992e-06 - average 1.66248e-07, 14 fixed columns
Coin0506I Presolve 12 (-28) rows, 7 (-16) columns and 31 (-87) elements
Clp0029I End of values pass after 7 iterations
Clp0000I Optimal - objective value 1498.7344
Clp0000I Optimal - objective value 1498.7344
Coin0511I After Postsolve, objective 1498.7344, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1498.7344
Clp0000I Optimal - objective value 1498.7344
Clp0000I Optimal - objective value 1498.7344
Coin0511I After Postsolve, objective 1498.7344, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1498.734388 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 40 rows, 23 columns (22 integer (22 of which binary)) and 125 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.365%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 1.70896
Cbc0038I Solution found of -843.69
Cbc0038I Relaxing continuous gives -843.69
Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 23 columns, reduced to 2 rows 2 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -902.846
Cbc0038I Pass   1: suminf.    0.06608 (1) obj. -902.846 iterations 7
Cbc0038I Pass   2: suminf.    0.35556 (1) obj. -1420.64 iterations 1
Cbc0038I Pass   3: suminf.    1.31864 (4) obj. -1429.89 iterations 3
Cbc0038I Pass   4: suminf.    0.06608 (1) obj. -902.846 iterations 7
Cbc0038I Pass   5: suminf.    0.35556 (1) obj. -1420.64 iterations 1
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. -1154.54 iterations 6
Cbc0038I Solution found of -1154.54
Cbc0038I Relaxing continuous gives -1154.54
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 23 columns, reduced to 11 rows 7 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -1210.68
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass   7: suminf.    0.40992 (1) obj. -1210.68 iterations 0
Cbc0038I Pass   8: suminf.    0.35556 (1) obj. -1420.64 iterations 1
Cbc0038I Pass   9: suminf.    0.35556 (1) obj. -1420.64 iterations 3
Cbc0038I Pass  10: suminf.    0.35556 (1) obj. -1420.64 iterations 2
Cbc0038I Pass  11: suminf.    0.40992 (1) obj. -1210.68 iterations 1
Cbc0038I Pass  12: suminf.    0.92800 (2) obj. -1325.39 iterations 4
Cbc0038I Pass  13: suminf.    0.40992 (1) obj. -1210.68 iterations 4
Cbc0038I Pass  14: suminf.    1.33575 (4) obj. -1210.68 iterations 9
Cbc0038I Pass  15: suminf.    0.81960 (2) obj. -1210.68 iterations 2
Cbc0038I Pass  16: suminf.    0.81891 (4) obj. -1210.68 iterations 1
Cbc0038I Pass  17: suminf.    0.60637 (2) obj. -1210.68 iterations 3
Cbc0038I Pass  18: suminf.    0.60637 (2) obj. -1210.68 iterations 0
Cbc0038I Pass  19: suminf.    0.40000 (1) obj. -1263.67 iterations 5
Cbc0038I Pass  20: suminf.    0.45919 (1) obj. -1210.68 iterations 1
Cbc0038I Pass  21: suminf.    0.31619 (4) obj. -1210.68 iterations 5
Cbc0038I Pass  22: suminf.    0.07752 (1) obj. -1210.68 iterations 3
Cbc0038I Pass  23: suminf.    0.14464 (3) obj. -1210.68 iterations 1
Cbc0038I Pass  24: suminf.    0.07752 (1) obj. -1210.68 iterations 1
Cbc0038I Pass  25: suminf.    0.77063 (5) obj. -1210.68 iterations 10
Cbc0038I Pass  26: suminf.    0.44172 (2) obj. -1210.68 iterations 4
Cbc0038I Pass  27: suminf.    0.47778 (1) obj. -1287.52 iterations 3
Cbc0038I Pass  28: suminf.    0.39195 (1) obj. -1210.68 iterations 1
Cbc0038I Pass  29: suminf.    0.06570 (1) obj. -1210.68 iterations 3
Cbc0038I Pass  30: suminf.    0.06570 (1) obj. -1210.68 iterations 2
Cbc0038I Pass  31: suminf.    0.11111 (1) obj. -1251.34 iterations 1
Cbc0038I Pass  32: suminf.    3.16109 (9) obj. -1210.68 iterations 8
Cbc0038I Pass  33: suminf.    0.42769 (2) obj. -1210.68 iterations 8
Cbc0038I Pass  34: suminf.    1.40229 (5) obj. -1210.68 iterations 10
Cbc0038I Pass  35: suminf.    0.77800 (4) obj. -1210.68 iterations 3
Cbc0038I Pass  36: suminf.    0.30000 (1) obj. -1337.09 iterations 4
Cbc0038I Rounding solution of -1175.22 is better than previous of -1154.54

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 23 columns, reduced to 26 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -1175.22 to -1178.57 (0.03 seconds)
Cbc0038I Round again with cutoff of -1278.05
Cbc0038I Reduced cost fixing fixed 4 variables on major pass 4
Cbc0038I Pass  36: suminf.    0.48517 (1) obj. -1278.05 iterations 0
Cbc0038I Pass  37: suminf.    0.35556 (1) obj. -1420.64 iterations 1
Cbc0038I Pass  38: suminf.    1.86928 (6) obj. -1278.05 iterations 9
Cbc0038I Pass  39: suminf.    0.99324 (4) obj. -1278.05 iterations 6
Cbc0038I Pass  40: suminf.    0.27227 (3) obj. -1278.05 iterations 6
Cbc0038I Pass  41: suminf.    0.20888 (2) obj. -1278.05 iterations 3
Cbc0038I Pass  42: suminf.    0.21111 (1) obj. -1333.51 iterations 3
Cbc0038I Pass  43: suminf.    0.14917 (1) obj. -1278.05 iterations 1
Cbc0038I Pass  44: suminf.    0.20888 (2) obj. -1278.05 iterations 2
Cbc0038I Pass  45: suminf.    0.76380 (3) obj. -1278.05 iterations 4
Cbc0038I Pass  46: suminf.    0.59196 (2) obj. -1278.05 iterations 3
Cbc0038I Pass  47: suminf.    0.21111 (1) obj. -1333.51 iterations 3
Cbc0038I Pass  48: suminf.    0.14917 (1) obj. -1278.05 iterations 1
Cbc0038I Pass  49: suminf.    1.83489 (6) obj. -1278.05 iterations 5
Cbc0038I Pass  50: suminf.    0.49695 (2) obj. -1278.05 iterations 5
Cbc0038I Pass  51: suminf.    0.46335 (2) obj. -1278.05 iterations 2
Cbc0038I Pass  52: suminf.    0.46335 (2) obj. -1278.05 iterations 0
Cbc0038I Pass  53: suminf.    0.46335 (2) obj. -1278.05 iterations 0
Cbc0038I Pass  54: suminf.    0.21111 (1) obj. -1333.51 iterations 3
Cbc0038I Pass  55: suminf.    0.14917 (1) obj. -1278.05 iterations 1
Cbc0038I Pass  56: suminf.    0.86503 (4) obj. -1278.05 iterations 5
Cbc0038I Pass  57: suminf.    0.30780 (1) obj. -1278.05 iterations 4
Cbc0038I Pass  58: suminf.    0.33333 (1) obj. -1300.91 iterations 1
Cbc0038I Pass  59: suminf.    0.21111 (1) obj. -1333.51 iterations 4
Cbc0038I Pass  60: suminf.    0.84433 (4) obj. -1278.05 iterations 6
Cbc0038I Pass  61: suminf.    0.50692 (3) obj. -1278.05 iterations 3
Cbc0038I Pass  62: suminf.    0.87815 (3) obj. -1278.05 iterations 7
Cbc0038I Pass  63: suminf.    0.46335 (2) obj. -1278.05 iterations 1
Cbc0038I Pass  64: suminf.    0.21111 (1) obj. -1333.51 iterations 2
Cbc0038I Pass  65: suminf.    0.14917 (1) obj. -1278.05 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 23 columns, reduced to 23 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -1178.57 - took 0.03 seconds
Cbc0012I Integer solution of -1178.5732 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 40 rows 23 columns, reduced to 18 rows 11 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 2 added rows had average density of 4
Cbc0013I At root node, 4 cuts changed objective from -1435.2492 to -1175.215 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 13 row cuts average 2.6 elements, 13 column cuts (13 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 5 row cuts average 8.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 6.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 11 row cuts average 8.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -1178.57325, took 21 iterations and 0 nodes (0.05 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.06

