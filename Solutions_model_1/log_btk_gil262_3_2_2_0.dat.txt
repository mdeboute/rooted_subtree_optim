Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 498 (-29) rows, 260 (-4) columns and 1484 (-61) elements
Clp1000I sum of infeasibilities 5.82015e-05 - average 1.1687e-07, 122 fixed columns
Coin0506I Presolve 259 (-239) rows, 138 (-122) columns and 770 (-714) elements
Clp0029I End of values pass after 138 iterations
Clp0014I Perturbing problem by 0.001% of 0.1679599 - largest nonzero change 0 ( 0%) - largest zero change 2.9592953e-05
Clp0000I Optimal - objective value 143.30964
Clp0000I Optimal - objective value 143.30964
Coin0511I After Postsolve, objective 143.30964, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13582414 - largest nonzero change 0 ( 0%) - largest zero change 2.9753437e-05
Clp0000I Optimal - objective value 143.30964
Clp0000I Optimal - objective value 143.30964
Clp0000I Optimal - objective value 143.30964
Coin0511I After Postsolve, objective 143.30964, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 143.309637 - 0 iterations time 0.102, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 498 rows, 260 columns (259 integer (259 of which binary)) and 1484 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.366%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 77 integers unsatisfied sum - 11.0117
Cbc0038I Solution found of 8.86589
Cbc0038I Relaxing continuous gives -6.06184
Cbc0038I Before mini branch and bound, 182 integers at bound fixed and 0 continuous
Cbc0038I Full problem 498 rows 260 columns, reduced to 143 rows 78 columns
Cbc0038I Mini branch and bound improved solution from -6.06184 to -58.5448 (0.14 seconds)
Cbc0038I Round again with cutoff of -67.0214
Cbc0038I Pass   1: suminf.    3.73949 (42) obj. -67.0214 iterations 166
Cbc0038I Pass   2: suminf.    3.59001 (10) obj. -67.0214 iterations 58
Cbc0038I Pass   3: suminf.    2.28815 (12) obj. -67.0214 iterations 25
Cbc0038I Pass   4: suminf.    1.85149 (6) obj. -67.0214 iterations 3
Cbc0038I Pass   5: suminf.    1.57017 (6) obj. -67.0214 iterations 8
Cbc0038I Pass   6: suminf.    2.82847 (10) obj. -67.0214 iterations 15
Cbc0038I Pass   7: suminf.    2.80754 (9) obj. -67.0214 iterations 2
Cbc0038I Pass   8: suminf.    1.38425 (4) obj. -67.0214 iterations 14
Cbc0038I Pass   9: suminf.    0.64227 (3) obj. -67.0214 iterations 13
Cbc0038I Pass  10: suminf.    1.21148 (3) obj. -67.0214 iterations 4
Cbc0038I Pass  11: suminf.    0.78735 (2) obj. -67.0214 iterations 1
Cbc0038I Pass  12: suminf.    8.59437 (22) obj. -67.0214 iterations 49
Cbc0038I Pass  13: suminf.    3.68413 (14) obj. -67.0214 iterations 54
Cbc0038I Pass  14: suminf.    3.68413 (14) obj. -67.0214 iterations 0
Cbc0038I Pass  15: suminf.    4.04013 (10) obj. -67.0214 iterations 54
Cbc0038I Pass  16: suminf.    3.14076 (9) obj. -67.0214 iterations 23
Cbc0038I Pass  17: suminf.    3.10322 (9) obj. -67.0214 iterations 3
Cbc0038I Pass  18: suminf.    1.82272 (6) obj. -67.0214 iterations 14
Cbc0038I Pass  19: suminf.    0.74279 (4) obj. -67.0214 iterations 10
Cbc0038I Pass  20: suminf.    1.01528 (4) obj. -67.0214 iterations 9
Cbc0038I Pass  21: suminf.    0.36408 (4) obj. -67.0214 iterations 9
Cbc0038I Pass  22: suminf.    1.43467 (4) obj. -67.0214 iterations 7
Cbc0038I Pass  23: suminf.    1.08485 (3) obj. -67.0214 iterations 6
Cbc0038I Pass  24: suminf.    4.04556 (11) obj. -67.0214 iterations 38
Cbc0038I Pass  25: suminf.    1.90809 (6) obj. -67.0214 iterations 40
Cbc0038I Pass  26: suminf.    0.80694 (3) obj. -67.0214 iterations 9
Cbc0038I Pass  27: suminf.    0.60499 (4) obj. -67.0214 iterations 6
Cbc0038I Pass  28: suminf.    0.69085 (3) obj. -67.0214 iterations 5
Cbc0038I Pass  29: suminf.    0.37087 (2) obj. -67.0214 iterations 5
Cbc0038I Pass  30: suminf.    0.99194 (3) obj. -67.0214 iterations 8
Cbc0038I Rounding solution of -79.558 is better than previous of -58.5448

Cbc0038I Before mini branch and bound, 150 integers at bound fixed and 0 continuous
Cbc0038I Full problem 498 rows 260 columns, reduced to 202 rows 110 columns
Cbc0038I Mini branch and bound improved solution from -79.558 to -91.0381 (0.35 seconds)
Cbc0038I Round again with cutoff of -101.492
Cbc0038I Pass  30: suminf.    5.85407 (42) obj. -101.492 iterations 0
Cbc0038I Pass  31: suminf.    4.42033 (13) obj. -101.492 iterations 52
Cbc0038I Pass  32: suminf.    2.42964 (10) obj. -101.492 iterations 20
Cbc0038I Pass  33: suminf.    3.46537 (13) obj. -101.492 iterations 23
Cbc0038I Pass  34: suminf.    3.16872 (12) obj. -101.492 iterations 9
Cbc0038I Pass  35: suminf.    3.15197 (12) obj. -101.492 iterations 16
Cbc0038I Pass  36: suminf.    2.69926 (11) obj. -101.492 iterations 18
Cbc0038I Pass  37: suminf.    3.65996 (12) obj. -101.492 iterations 18
Cbc0038I Pass  38: suminf.    2.25514 (11) obj. -101.492 iterations 11
Cbc0038I Pass  39: suminf.    2.24751 (10) obj. -101.492 iterations 2
Cbc0038I Pass  40: suminf.    3.26816 (10) obj. -101.492 iterations 16
Cbc0038I Pass  41: suminf.    3.01216 (12) obj. -101.492 iterations 10
Cbc0038I Pass  42: suminf.    3.00892 (11) obj. -101.492 iterations 3
Cbc0038I Pass  43: suminf.    3.22693 (11) obj. -101.492 iterations 23
Cbc0038I Pass  44: suminf.    2.57918 (12) obj. -101.492 iterations 15
Cbc0038I Pass  45: suminf.    2.57918 (12) obj. -101.492 iterations 1
Cbc0038I Pass  46: suminf.    3.48767 (13) obj. -101.492 iterations 16
Cbc0038I Pass  47: suminf.    2.73220 (10) obj. -101.492 iterations 23
Cbc0038I Pass  48: suminf.    2.69926 (11) obj. -101.492 iterations 6
Cbc0038I Pass  49: suminf.    3.65996 (12) obj. -101.492 iterations 18
Cbc0038I Pass  50: suminf.    2.25514 (11) obj. -101.492 iterations 11
Cbc0038I Pass  51: suminf.    2.24751 (10) obj. -101.492 iterations 2
Cbc0038I Pass  52: suminf.    3.26816 (10) obj. -101.492 iterations 16
Cbc0038I Pass  53: suminf.    3.01216 (12) obj. -101.492 iterations 10
Cbc0038I Pass  54: suminf.    3.00892 (11) obj. -101.492 iterations 3
Cbc0038I Pass  55: suminf.    3.22693 (11) obj. -101.492 iterations 23
Cbc0038I Pass  56: suminf.    2.57918 (12) obj. -101.492 iterations 15
Cbc0038I Pass  57: suminf.    2.57918 (12) obj. -101.492 iterations 1
Cbc0038I Pass  58: suminf.    3.48767 (13) obj. -101.492 iterations 16
Cbc0038I Pass  59: suminf.    2.73220 (10) obj. -101.492 iterations 24
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 164 integers at bound fixed and 0 continuous
Cbc0038I Full problem 498 rows 260 columns, reduced to 177 rows 96 columns
Cbc0038I Mini branch and bound did not improve solution (0.58 seconds)
Cbc0038I After 0.58 seconds - Feasibility pump exiting with objective of -91.0381 - took 0.53 seconds
Cbc0012I Integer solution of -91.03807 found by feasibility pump after 0 iterations and 0 nodes (0.58 seconds)
Cbc0038I Full problem 498 rows 260 columns, reduced to 143 rows 78 columns
Cbc0031I 47 added rows had average density of 161
Cbc0013I At root node, 47 cuts changed objective from -143.30964 to -131.35788 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 32406 row cuts average 3.2 elements, 1 column cuts (1 active)  in 1.054 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2330 row cuts average 258.2 elements, 0 column cuts (0 active)  in 1.201 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.182 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.435 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.088 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 191 row cuts average 254.4 elements, 0 column cuts (0 active)  in 0.413 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -91.03807 best solution, best possible -131.35788 (11.69 seconds)
Cbc0010I After 5 nodes, 6 on tree, -91.03807 best solution, best possible -131.35788 (12.53 seconds)
Cbc0038I Full problem 498 rows 260 columns, reduced to 125 rows 71 columns
Cbc0010I After 47 nodes, 8 on tree, -91.03807 best solution, best possible -131.35788 (13.24 seconds)
Cbc0010I After 97 nodes, 1 on tree, -91.03807 best solution, best possible -131.35788 (13.94 seconds)
Cbc0001I Search completed - best objective -91.03806999999998, took 22693 iterations and 98 nodes (13.97 seconds)
Cbc0032I Strong branching done 1218 times (33520 iterations), fathomed 11 nodes and fixed 71 variables
Cbc0035I Maximum depth 30, 408 variables fixed on reduced cost
Total time (CPU seconds):       13.49   (Wallclock seconds):       14.05

