Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 188 (-17) rows, 100 (-3) columns and 568 (-35) elements
Clp1000I sum of infeasibilities 4.08326e-05 - average 2.17195e-07, 25 fixed columns
Coin0506I Presolve 134 (-54) rows, 74 (-26) columns and 408 (-160) elements
Clp0029I End of values pass after 74 iterations
Clp0014I Perturbing problem by 0.001% of 2.26334 - largest nonzero change 0 ( 0%) - largest zero change 2.8832638e-05
Clp0000I Optimal - objective value 45.354456
Clp0000I Optimal - objective value 45.354456
Coin0511I After Postsolve, objective 45.354456, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 45.354456
Clp0000I Optimal - objective value 45.354456
Clp0000I Optimal - objective value 45.354456
Coin0511I After Postsolve, objective 45.354456, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 45.35445648 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 188 rows, 100 columns (99 integer (99 of which binary)) and 568 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.925%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 48 integers unsatisfied sum - 11.3924
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -4.76416 iterations 76
Cbc0038I Solution found of -4.76416
Cbc0038I Relaxing continuous gives -4.76416
Cbc0038I Rounding solution of -8.05994 is better than previous of -4.76416

Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 100 columns, reduced to 87 rows 49 columns
Cbc0038I Mini branch and bound improved solution from -8.05994 to -10.5915 (0.07 seconds)
Cbc0038I Round again with cutoff of -14.0679
Cbc0038I Pass   2: suminf.    1.08993 (4) obj. -14.0679 iterations 5
Cbc0038I Pass   3: suminf.    1.58553 (5) obj. -14.0679 iterations 8
Cbc0038I Pass   4: suminf.    1.58553 (5) obj. -14.0679 iterations 0
Cbc0038I Pass   5: suminf.    1.81938 (5) obj. -14.0679 iterations 6
Cbc0038I Pass   6: suminf.    1.62747 (5) obj. -14.0679 iterations 2
Cbc0038I Pass   7: suminf.    1.78224 (5) obj. -14.0679 iterations 6
Cbc0038I Pass   8: suminf.    4.92282 (13) obj. -14.0679 iterations 27
Cbc0038I Pass   9: suminf.    2.60161 (8) obj. -14.0679 iterations 21
Cbc0038I Pass  10: suminf.    2.46150 (7) obj. -14.0679 iterations 1
Cbc0038I Pass  11: suminf.    2.41286 (7) obj. -14.0679 iterations 1
Cbc0038I Pass  12: suminf.    2.05964 (6) obj. -14.0679 iterations 6
Cbc0038I Pass  13: suminf.    1.94652 (5) obj. -14.0679 iterations 1
Cbc0038I Pass  14: suminf.    1.89008 (5) obj. -14.0679 iterations 1
Cbc0038I Pass  15: suminf.    1.56622 (6) obj. -14.0679 iterations 2
Cbc0038I Pass  16: suminf.    1.56334 (7) obj. -14.0679 iterations 1
Cbc0038I Pass  17: suminf.    3.47930 (9) obj. -14.0679 iterations 6
Cbc0038I Pass  18: suminf.    1.17003 (6) obj. -14.0679 iterations 8
Cbc0038I Pass  19: suminf.    1.17003 (6) obj. -14.0679 iterations 0
Cbc0038I Pass  20: suminf.    1.66394 (5) obj. -14.0679 iterations 7
Cbc0038I Pass  21: suminf.    1.61465 (6) obj. -14.0679 iterations 2
Cbc0038I Pass  22: suminf.    4.51219 (14) obj. -14.0679 iterations 37
Cbc0038I Pass  23: suminf.    1.68453 (7) obj. -14.0679 iterations 18
Cbc0038I Pass  24: suminf.    1.42607 (5) obj. -14.0679 iterations 14
Cbc0038I Pass  25: suminf.    1.42607 (5) obj. -14.0679 iterations 0
Cbc0038I Pass  26: suminf.    1.64063 (4) obj. -14.0679 iterations 2
Cbc0038I Pass  27: suminf.    1.35008 (4) obj. -14.0679 iterations 1
Cbc0038I Pass  28: suminf.    3.00104 (9) obj. -14.0679 iterations 26
Cbc0038I Pass  29: suminf.    2.04399 (8) obj. -14.0679 iterations 9
Cbc0038I Pass  30: suminf.    1.68100 (6) obj. -14.0679 iterations 17
Cbc0038I Pass  31: suminf.    1.62614 (5) obj. -14.0679 iterations 1
Cbc0038I Rounding solution of -12.6602 is better than previous of -10.5915

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 100 columns, reduced to 126 rows 69 columns - 4 fixed gives 105, 65 - ok now
Cbc0038I Full problem 188 rows 100 columns, reduced to 105 rows 65 columns
Cbc0038I Mini branch and bound improved solution from -12.6602 to -17.7108 (0.15 seconds)
Cbc0038I Round again with cutoff of -23.2396
Cbc0038I Pass  31: suminf.    2.44386 (10) obj. -23.2396 iterations 7
Cbc0038I Pass  32: suminf.    2.36260 (9) obj. -23.2396 iterations 1
Cbc0038I Pass  33: suminf.    2.41452 (8) obj. -23.2396 iterations 13
Cbc0038I Pass  34: suminf.    2.41452 (8) obj. -23.2396 iterations 4
Cbc0038I Pass  35: suminf.    2.29790 (7) obj. -23.2396 iterations 8
Cbc0038I Pass  36: suminf.    2.22387 (7) obj. -23.2396 iterations 3
Cbc0038I Pass  37: suminf.    2.74409 (7) obj. -23.2396 iterations 5
Cbc0038I Pass  38: suminf.    2.74409 (7) obj. -23.2396 iterations 0
Cbc0038I Pass  39: suminf.    1.82775 (8) obj. -23.2396 iterations 7
Cbc0038I Pass  40: suminf.    1.76931 (7) obj. -23.2396 iterations 1
Cbc0038I Pass  41: suminf.    2.41456 (8) obj. -23.2396 iterations 7
Cbc0038I Pass  42: suminf.    2.41456 (8) obj. -23.2396 iterations 0
Cbc0038I Pass  43: suminf.    2.81609 (8) obj. -23.2396 iterations 6
Cbc0038I Pass  44: suminf.    1.95909 (7) obj. -23.2396 iterations 4
Cbc0038I Pass  45: suminf.    1.76931 (7) obj. -23.2396 iterations 2
Cbc0038I Pass  46: suminf.    1.76931 (7) obj. -23.2396 iterations 0
Cbc0038I Pass  47: suminf.    2.41456 (8) obj. -23.2396 iterations 7
Cbc0038I Pass  48: suminf.    2.41456 (8) obj. -23.2396 iterations 0
Cbc0038I Pass  49: suminf.    2.81609 (8) obj. -23.2396 iterations 6
Cbc0038I Pass  50: suminf.    1.95909 (7) obj. -23.2396 iterations 4
Cbc0038I Pass  51: suminf.    1.76931 (7) obj. -23.2396 iterations 2
Cbc0038I Pass  52: suminf.    1.76931 (7) obj. -23.2396 iterations 0
Cbc0038I Pass  53: suminf.    2.41456 (8) obj. -23.2396 iterations 7
Cbc0038I Pass  54: suminf.    2.41456 (8) obj. -23.2396 iterations 0
Cbc0038I Pass  55: suminf.    2.81609 (8) obj. -23.2396 iterations 6
Cbc0038I Pass  56: suminf.    1.95909 (7) obj. -23.2396 iterations 4
Cbc0038I Pass  57: suminf.    1.76931 (7) obj. -23.2396 iterations 2
Cbc0038I Pass  58: suminf.    1.76931 (7) obj. -23.2396 iterations 0
Cbc0038I Pass  59: suminf.    2.41456 (8) obj. -23.2396 iterations 7
Cbc0038I Pass  60: suminf.    2.41456 (8) obj. -23.2396 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 100 columns, reduced to 89 rows 51 columns
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I After 0.20 seconds - Feasibility pump exiting with objective of -17.7108 - took 0.18 seconds
Cbc0012I Integer solution of -17.710839 found by feasibility pump after 0 iterations and 0 nodes (0.20 seconds)
Cbc0038I Full problem 188 rows 100 columns, reduced to 88 rows 50 columns
Cbc0031I 30 added rows had average density of 66.533333
Cbc0013I At root node, 30 cuts changed objective from -45.354456 to -33.828214 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 15089 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.131 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2265 row cuts average 97.2 elements, 0 column cuts (0 active)  in 0.134 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.125 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 222 row cuts average 64.4 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -17.710839 best solution, best possible -33.828214 (1.47 seconds)
Cbc0038I Full problem 188 rows 100 columns, reduced to 64 rows 40 columns
Cbc0001I Search completed - best objective -17.710839, took 11343 iterations and 62 nodes (1.85 seconds)
Cbc0032I Strong branching done 834 times (13559 iterations), fathomed 1 nodes and fixed 43 variables
Cbc0035I Maximum depth 24, 124 variables fixed on reduced cost
Total time (CPU seconds):       1.77   (Wallclock seconds):       1.87

