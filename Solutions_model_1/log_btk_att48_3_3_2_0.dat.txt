Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 89 (-10) rows, 47 (-3) columns and 264 (-21) elements
Clp1000I sum of infeasibilities 8.03643e-05 - average 9.02969e-07, 9 fixed columns
Coin0506I Presolve 71 (-18) rows, 38 (-9) columns and 210 (-54) elements
Clp0029I End of values pass after 38 iterations
Clp0000I Optimal - objective value 2203.8503
Clp0000I Optimal - objective value 2203.8503
Coin0511I After Postsolve, objective 2203.8503, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2203.8503
Clp0000I Optimal - objective value 2203.8503
Clp0000I Optimal - objective value 2203.8503
Coin0511I After Postsolve, objective 2203.8503, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2203.850314 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 89 rows, 47 columns (46 integer (46 of which binary)) and 264 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.948%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 32 integers unsatisfied sum - 9.61141
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 194.63 iterations 26
Cbc0038I Solution found of 194.63
Cbc0038I Relaxing continuous gives 194.63
Cbc0038I Rounding solution of -256.962 is better than previous of 194.63

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 47 columns, reduced to 61 rows 33 columns
Cbc0038I Mini branch and bound improved solution from -256.962 to -303.05 (0.03 seconds)
Cbc0038I Round again with cutoff of -493.13
Cbc0038I Pass   2: suminf.    1.05380 (5) obj. -493.13 iterations 4
Cbc0038I Pass   3: suminf.    1.44116 (4) obj. -493.13 iterations 6
Cbc0038I Pass   4: suminf.    1.38074 (5) obj. -493.13 iterations 3
Cbc0038I Pass   5: suminf.    1.93872 (7) obj. -493.13 iterations 8
Cbc0038I Pass   6: suminf.    1.88904 (8) obj. -493.13 iterations 2
Cbc0038I Pass   7: suminf.    2.06381 (8) obj. -493.13 iterations 12
Cbc0038I Pass   8: suminf.    2.06381 (8) obj. -493.13 iterations 0
Cbc0038I Pass   9: suminf.    2.50421 (7) obj. -493.13 iterations 6
Cbc0038I Pass  10: suminf.    2.32300 (8) obj. -493.13 iterations 3
Cbc0038I Pass  11: suminf.    2.32300 (8) obj. -493.13 iterations 0
Cbc0038I Pass  12: suminf.    2.83397 (8) obj. -493.13 iterations 5
Cbc0038I Pass  13: suminf.    2.10973 (7) obj. -493.13 iterations 4
Cbc0038I Pass  14: suminf.    2.10186 (8) obj. -493.13 iterations 1
Cbc0038I Pass  15: suminf.    2.62359 (8) obj. -493.13 iterations 5
Cbc0038I Pass  16: suminf.    2.62359 (8) obj. -493.13 iterations 1
Cbc0038I Pass  17: suminf.    2.78387 (7) obj. -493.13 iterations 5
Cbc0038I Pass  18: suminf.    2.71418 (8) obj. -493.13 iterations 4
Cbc0038I Pass  19: suminf.    3.17406 (9) obj. -493.13 iterations 4
Cbc0038I Pass  20: suminf.    2.68374 (9) obj. -493.13 iterations 2
Cbc0038I Pass  21: suminf.    2.68374 (9) obj. -493.13 iterations 0
Cbc0038I Pass  22: suminf.    2.67555 (7) obj. -493.13 iterations 7
Cbc0038I Pass  23: suminf.    1.26240 (6) obj. -493.13 iterations 1
Cbc0038I Pass  24: suminf.    1.25654 (5) obj. -493.13 iterations 1
Cbc0038I Pass  25: suminf.    2.46448 (8) obj. -493.13 iterations 5
Cbc0038I Pass  26: suminf.    2.44208 (9) obj. -493.13 iterations 10
Cbc0038I Pass  27: suminf.    1.81396 (6) obj. -493.13 iterations 5
Cbc0038I Pass  28: suminf.    1.91566 (5) obj. -493.13 iterations 5
Cbc0038I Pass  29: suminf.    1.89415 (6) obj. -493.13 iterations 1
Cbc0038I Pass  30: suminf.    2.35714 (7) obj. -493.13 iterations 4
Cbc0038I Pass  31: suminf.    2.35541 (14) obj. -493.13 iterations 15
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 47 columns, reduced to 63 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -303.05 - took 0.04 seconds
Cbc0012I Integer solution of -303.05 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 89 rows 47 columns, reduced to 61 rows 33 columns
Cbc0031I 25 added rows had average density of 27.08
Cbc0013I At root node, 25 cuts changed objective from -2203.8503 to -1287.5292 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5302 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1251 row cuts average 45.9 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 132 row cuts average 35.9 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0004I Integer solution of -368.8611 found after 5671 iterations and 8 nodes (0.54 seconds)
Cbc0001I Search completed - best objective -368.8611000000001, took 6591 iterations and 24 nodes (0.59 seconds)
Cbc0032I Strong branching done 396 times (7613 iterations), fathomed 0 nodes and fixed 18 variables
Cbc0035I Maximum depth 8, 33 variables fixed on reduced cost
Total time (CPU seconds):       0.57   (Wallclock seconds):       0.59

