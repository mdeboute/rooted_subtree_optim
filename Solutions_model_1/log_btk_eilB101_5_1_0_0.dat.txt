Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 185 (-20) rows, 98 (-5) columns and 558 (-45) elements
Clp1000I sum of infeasibilities 2.01445e-05 - average 1.08889e-07, 78 fixed columns
Coin0506I Presolve 19 (-166) rows, 11 (-87) columns and 53 (-505) elements
Clp0029I End of values pass after 11 iterations
Clp0000I Optimal - objective value 5383.8495
Clp0000I Optimal - objective value 5383.8495
Coin0511I After Postsolve, objective 5383.8495, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.7984851 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 5383.8495
Clp0000I Optimal - objective value 5383.8495
Clp0000I Optimal - objective value 5383.8495
Coin0511I After Postsolve, objective 5383.8495, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 5383.849456 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 10 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 185 rows, 98 columns (97 integer (97 of which binary)) and 575 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.129%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 5.64626
Cbc0038I Pass   1: suminf.    0.53968 (2) obj. -4889.4 iterations 20
Cbc0038I Solution found of -4141.65
Cbc0038I Relaxing continuous gives -4141.65
Cbc0038I Rounding solution of -4237.54 is better than previous of -4141.65

Cbc0038I Before mini branch and bound, 84 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 98 columns, reduced to 26 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -4237.54 to -4702.95 (0.02 seconds)
Cbc0038I Round again with cutoff of -4751.03
Cbc0038I Reduced cost fixing fixed 23 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.53968 (2) obj. -4889.4 iterations 0
Cbc0038I Pass   3: suminf.    0.43982 (2) obj. -4751.03 iterations 1
Cbc0038I Pass   4: suminf.    1.21959 (6) obj. -4751.03 iterations 17
Cbc0038I Pass   5: suminf.    0.53132 (3) obj. -4751.03 iterations 11
Cbc0038I Pass   6: suminf.    0.03040 (2) obj. -4751.03 iterations 10
Cbc0038I Pass   7: suminf.    0.06349 (2) obj. -4796.88 iterations 1
Cbc0038I Pass   8: suminf.    1.73012 (6) obj. -4751.03 iterations 18
Cbc0038I Pass   9: suminf.    3.09504 (13) obj. -4751.03 iterations 27
Cbc0038I Pass  10: suminf.    2.07498 (7) obj. -4751.03 iterations 5
Cbc0038I Pass  11: suminf.    0.81875 (4) obj. -4751.03 iterations 18
Cbc0038I Pass  12: suminf.    0.81875 (4) obj. -4751.03 iterations 8
Cbc0038I Pass  13: suminf.    0.95238 (2) obj. -4889.63 iterations 10
Cbc0038I Pass  14: suminf.    0.85234 (2) obj. -4751.03 iterations 1
Cbc0038I Pass  15: suminf.    0.95238 (2) obj. -4889.63 iterations 1
Cbc0038I Pass  16: suminf.    1.17026 (8) obj. -4751.03 iterations 15
Cbc0038I Pass  17: suminf.    0.84874 (2) obj. -4751.03 iterations 14
Cbc0038I Pass  18: suminf.    0.85714 (2) obj. -4762.67 iterations 1
Cbc0038I Pass  19: suminf.    1.67017 (5) obj. -4751.03 iterations 13
Cbc0038I Pass  20: suminf.    1.63121 (6) obj. -4751.03 iterations 6
Cbc0038I Pass  21: suminf.    0.30872 (5) obj. -4751.03 iterations 9
Cbc0038I Pass  22: suminf.    0.30872 (5) obj. -4751.03 iterations 5
Cbc0038I Pass  23: suminf.    1.29526 (5) obj. -4751.03 iterations 13
Cbc0038I Pass  24: suminf.    1.05818 (3) obj. -4875.24 iterations 2
Cbc0038I Pass  25: suminf.    1.14950 (3) obj. -4751.03 iterations 1
Cbc0038I Pass  26: suminf.    2.77484 (6) obj. -4751.03 iterations 11
Cbc0038I Pass  27: suminf.    0.41651 (4) obj. -4751.03 iterations 13
Cbc0038I Pass  28: suminf.    0.30872 (5) obj. -4751.03 iterations 6
Cbc0038I Pass  29: suminf.    1.29526 (5) obj. -4751.03 iterations 12
Cbc0038I Pass  30: suminf.    1.05818 (3) obj. -4875.24 iterations 2
Cbc0038I Pass  31: suminf.    1.14950 (3) obj. -4751.03 iterations 1
Cbc0038I Rounding solution of -4708.91 is better than previous of -4702.95

Cbc0038I Before mini branch and bound, 68 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 98 columns, reduced to 51 rows 29 columns
Cbc0038I Mini branch and bound improved solution from -4708.91 to -4712.7 (0.03 seconds)
Cbc0038I Round again with cutoff of -4837.58
Cbc0038I Reduced cost fixing fixed 31 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.53968 (2) obj. -4889.4 iterations 0
Cbc0038I Pass  32: suminf.    0.50228 (2) obj. -4837.58 iterations 1
Cbc0038I Pass  33: suminf.    0.53797 (7) obj. -4837.58 iterations 20
Cbc0038I Pass  34: suminf.    0.49397 (7) obj. -4837.58 iterations 4
Cbc0038I Pass  35: suminf.    1.74454 (5) obj. -4837.58 iterations 20
Cbc0038I Pass  36: suminf.    1.53187 (5) obj. -4837.58 iterations 2
Cbc0038I Pass  37: suminf.    1.01345 (5) obj. -4837.58 iterations 13
Cbc0038I Pass  38: suminf.    1.01345 (5) obj. -4837.58 iterations 6
Cbc0038I Pass  39: suminf.    3.85724 (10) obj. -4837.58 iterations 7
Cbc0038I Pass  40: suminf.    2.00118 (5) obj. -4837.58 iterations 10
Cbc0038I Pass  41: suminf.    1.87229 (5) obj. -4837.58 iterations 11
Cbc0038I Pass  42: suminf.    2.05038 (6) obj. -4837.58 iterations 9
Cbc0038I Pass  43: suminf.    1.87229 (5) obj. -4837.58 iterations 10
Cbc0038I Pass  44: suminf.    2.07521 (6) obj. -4837.58 iterations 8
Cbc0038I Pass  45: suminf.    1.57131 (5) obj. -4837.58 iterations 27
Cbc0038I Pass  46: suminf.    1.57131 (5) obj. -4837.58 iterations 3
Cbc0038I Pass  47: suminf.    1.87930 (5) obj. -4837.58 iterations 14
Cbc0038I Pass  48: suminf.    1.74647 (5) obj. -4837.58 iterations 1
Cbc0038I Pass  49: suminf.    1.57131 (5) obj. -4837.58 iterations 11
Cbc0038I Pass  50: suminf.    1.09936 (5) obj. -4837.58 iterations 20
Cbc0038I Pass  51: suminf.    1.05710 (5) obj. -4837.58 iterations 16
Cbc0038I Pass  52: suminf.    1.13397 (5) obj. -4837.58 iterations 13
Cbc0038I Pass  53: suminf.    1.51659 (6) obj. -4837.58 iterations 22
Cbc0038I Pass  54: suminf.    1.30812 (7) obj. -4837.58 iterations 6
Cbc0038I Pass  55: suminf.    1.79264 (5) obj. -4839.41 iterations 17
Cbc0038I Pass  56: suminf.    1.78846 (5) obj. -4837.58 iterations 4
Cbc0038I Pass  57: suminf.    2.15042 (5) obj. -4837.58 iterations 5
Cbc0038I Pass  58: suminf.    0.80113 (3) obj. -4837.58 iterations 3
Cbc0038I Pass  59: suminf.    0.81682 (3) obj. -4837.58 iterations 1
Cbc0038I Pass  60: suminf.    2.76793 (6) obj. -4837.58 iterations 18
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 77 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 98 columns, reduced to 35 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -4712.7 to -4786.24 (0.05 seconds)
Cbc0038I Round again with cutoff of -4941.43
Cbc0038I Reduced cost fixing fixed 45 variables on major pass 4
Cbc0038I Pass  60: suminf.    0.73071 (4) obj. -4941.43 iterations 9
Cbc0038I Pass  61: suminf.    0.73071 (4) obj. -4941.43 iterations 3
Cbc0038I Pass  62: suminf.    0.97981 (4) obj. -4941.43 iterations 10
Cbc0038I Pass  63: suminf.    1.05268 (5) obj. -4941.43 iterations 8
Cbc0038I Pass  64: suminf.    0.73071 (4) obj. -4941.43 iterations 12
Cbc0038I Pass  65: suminf.    1.18852 (5) obj. -4941.43 iterations 14
Cbc0038I Pass  66: suminf.    1.90825 (6) obj. -4941.43 iterations 22
Cbc0038I Pass  67: suminf.    1.53356 (5) obj. -4941.43 iterations 15
Cbc0038I Pass  68: suminf.    0.47690 (5) obj. -4941.43 iterations 9
Cbc0038I Pass  69: suminf.    0.47690 (5) obj. -4941.43 iterations 4
Cbc0038I Pass  70: suminf.    1.70338 (5) obj. -4941.43 iterations 13
Cbc0038I Pass  71: suminf.    1.33310 (5) obj. -4941.43 iterations 2
Cbc0038I Pass  72: suminf.    1.31107 (5) obj. -4941.43 iterations 3
Cbc0038I Pass  73: suminf.    1.70338 (5) obj. -4941.43 iterations 4
Cbc0038I Pass  74: suminf.    1.99189 (6) obj. -4941.43 iterations 16
Cbc0038I Pass  75: suminf.    0.79763 (5) obj. -4941.43 iterations 3
Cbc0038I Pass  76: suminf.    0.79763 (5) obj. -4941.43 iterations 0
Cbc0038I Pass  77: suminf.    1.17845 (5) obj. -4941.43 iterations 11
Cbc0038I Pass  78: suminf.    3.33861 (10) obj. -4941.43 iterations 21
Cbc0038I Pass  79: suminf.    2.16889 (7) obj. -4941.43 iterations 7
Cbc0038I Pass  80: suminf.    2.16889 (7) obj. -4941.43 iterations 0
Cbc0038I Pass  81: suminf.    1.20062 (5) obj. -4941.43 iterations 7
Cbc0038I Pass  82: suminf.    0.88308 (5) obj. -4941.43 iterations 8
Cbc0038I Pass  83: suminf.    1.80439 (8) obj. -4941.43 iterations 17
Cbc0038I Pass  84: suminf.    1.28743 (7) obj. -4941.43 iterations 9
Cbc0038I Pass  85: suminf.    0.64261 (6) obj. -4941.43 iterations 10
Cbc0038I Pass  86: suminf.    0.38095 (2) obj. -4978.12 iterations 10
Cbc0038I Pass  87: suminf.    0.40743 (2) obj. -4941.43 iterations 1
Cbc0038I Pass  88: suminf.    0.62289 (5) obj. -4941.43 iterations 11
Cbc0038I Pass  89: suminf.    2.07152 (8) obj. -4941.43 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 72 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 98 columns, reduced to 42 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -4786.24 - took 0.05 seconds
Cbc0012I Integer solution of -4786.2386 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 185 rows 98 columns, reduced to 29 rows 16 columns
Cbc0031I 5 added rows had average density of 40.2
Cbc0013I At root node, 5 cuts changed objective from -5183.7686 to -5013.4653 in 8 passes
Cbc0014I Cut generator 0 (Probing) - 54 row cuts average 3.0 elements, 10 column cuts (10 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 20.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 43 row cuts average 42.3 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0004I Integer solution of -4791.2272 found after 88 iterations and 1 nodes (0.09 seconds)
Cbc0001I Search completed - best objective -4791.227200000001, took 198 iterations and 4 nodes (0.11 seconds)
Cbc0032I Strong branching done 34 times (248 iterations), fathomed 1 nodes and fixed 2 variables
Cbc0035I Maximum depth 1, 58 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.11

