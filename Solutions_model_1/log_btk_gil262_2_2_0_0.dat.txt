Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 505 (-22) rows, 261 (-3) columns and 1501 (-44) elements
Clp1000I sum of infeasibilities 6.20412e-05 - average 1.22854e-07, 141 fixed columns
Coin0506I Presolve 211 (-294) rows, 113 (-148) columns and 630 (-871) elements
Clp0029I End of values pass after 113 iterations
Clp0000I Optimal - objective value 187.76903
Clp0000I Optimal - objective value 187.76903
Coin0511I After Postsolve, objective 187.76903, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13351183 - largest nonzero change 0 ( 0%) - largest zero change 2.9856677e-05
Clp0000I Optimal - objective value 187.76903
Clp0000I Optimal - objective value 187.76903
Clp0000I Optimal - objective value 187.76903
Coin0511I After Postsolve, objective 187.76903, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 187.7690262 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 505 rows, 261 columns (260 integer (260 of which binary)) and 1501 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 71 integers unsatisfied sum - 10.1766
Cbc0038I Solution found of -9.73783
Cbc0038I Relaxing continuous gives -16.3817
Cbc0038I Before mini branch and bound, 189 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 126 rows 72 columns
Cbc0038I Mini branch and bound improved solution from -16.3817 to -77.7346 (0.08 seconds)
Cbc0038I Round again with cutoff of -88.7382
Cbc0038I Pass   1: suminf.    2.77024 (23) obj. -88.7382 iterations 200
Cbc0038I Pass   2: suminf.    2.24256 (9) obj. -88.7382 iterations 42
Cbc0038I Pass   3: suminf.    1.58082 (8) obj. -88.7382 iterations 11
Cbc0038I Pass   4: suminf.    1.44544 (7) obj. -88.7382 iterations 11
Cbc0038I Pass   5: suminf.    3.10291 (9) obj. -88.7382 iterations 21
Cbc0038I Pass   6: suminf.    2.31065 (6) obj. -88.7382 iterations 6
Cbc0038I Pass   7: suminf.    0.52495 (3) obj. -88.7382 iterations 11
Cbc0038I Pass   8: suminf.    1.45470 (5) obj. -88.7382 iterations 14
Cbc0038I Pass   9: suminf.    1.10848 (4) obj. -88.7382 iterations 1
Cbc0038I Pass  10: suminf.    0.91690 (3) obj. -88.7382 iterations 7
Cbc0038I Pass  11: suminf.    0.75156 (4) obj. -88.7382 iterations 6
Cbc0038I Pass  12: suminf.    1.22351 (4) obj. -88.7382 iterations 8
Cbc0038I Pass  13: suminf.    4.24115 (11) obj. -88.7382 iterations 46
Cbc0038I Pass  14: suminf.    3.19821 (11) obj. -88.7382 iterations 29
Cbc0038I Pass  15: suminf.    2.63012 (7) obj. -88.7382 iterations 36
Cbc0038I Pass  16: suminf.    1.05744 (4) obj. -88.7382 iterations 13
Cbc0038I Pass  17: suminf.    0.70736 (3) obj. -88.7382 iterations 1
Cbc0038I Pass  18: suminf.    1.20090 (3) obj. -88.7382 iterations 5
Cbc0038I Pass  19: suminf.    1.45395 (6) obj. -88.7382 iterations 46
Cbc0038I Pass  20: suminf.    1.21733 (4) obj. -88.7382 iterations 20
Cbc0038I Pass  21: suminf.    0.55299 (2) obj. -88.7382 iterations 37
Cbc0038I Pass  22: suminf.    0.31249 (2) obj. -88.7382 iterations 6
Cbc0038I Pass  23: suminf.    2.64398 (10) obj. -88.7382 iterations 34
Cbc0038I Pass  24: suminf.    2.33331 (10) obj. -88.7382 iterations 32
Cbc0038I Pass  25: suminf.    1.83722 (8) obj. -88.7382 iterations 10
Cbc0038I Pass  26: suminf.    1.14238 (3) obj. -88.7382 iterations 22
Cbc0038I Pass  27: suminf.    0.73041 (2) obj. -88.7382 iterations 4
Cbc0038I Pass  28: suminf.    0.59849 (2) obj. -88.7382 iterations 4
Cbc0038I Pass  29: suminf.    0.75274 (3) obj. -88.7382 iterations 5
Cbc0038I Pass  30: suminf.    0.29123 (1) obj. -88.7382 iterations 2
Cbc0038I Rounding solution of -87.9261 is better than previous of -77.7346

Cbc0038I Before mini branch and bound, 171 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 155 rows 90 columns
Cbc0038I Mini branch and bound improved solution from -87.9261 to -105.197 (0.19 seconds)
Cbc0038I Round again with cutoff of -121.711
Cbc0038I Pass  30: suminf.    4.28114 (25) obj. -121.711 iterations 12
Cbc0038I Pass  31: suminf.    4.87570 (12) obj. -121.711 iterations 54
Cbc0038I Pass  32: suminf.    4.05678 (12) obj. -121.711 iterations 18
Cbc0038I Pass  33: suminf.    3.59923 (10) obj. -121.711 iterations 32
Cbc0038I Pass  34: suminf.    3.18575 (8) obj. -121.711 iterations 19
Cbc0038I Pass  35: suminf.    2.97384 (8) obj. -121.711 iterations 14
Cbc0038I Pass  36: suminf.    2.69449 (11) obj. -121.711 iterations 18
Cbc0038I Pass  37: suminf.    2.24458 (9) obj. -121.711 iterations 63
Cbc0038I Pass  38: suminf.    2.22334 (8) obj. -121.711 iterations 10
Cbc0038I Pass  39: suminf.    2.81446 (8) obj. -121.711 iterations 13
Cbc0038I Pass  40: suminf.    1.89130 (10) obj. -121.711 iterations 19
Cbc0038I Pass  41: suminf.    1.84365 (9) obj. -121.711 iterations 4
Cbc0038I Pass  42: suminf.    3.12577 (8) obj. -121.711 iterations 45
Cbc0038I Pass  43: suminf.    2.98373 (8) obj. -121.711 iterations 17
Cbc0038I Pass  44: suminf.    3.45955 (10) obj. -121.711 iterations 38
Cbc0038I Pass  45: suminf.    3.15897 (10) obj. -121.711 iterations 8
Cbc0038I Pass  46: suminf.    2.24458 (9) obj. -121.711 iterations 40
Cbc0038I Pass  47: suminf.    2.22334 (8) obj. -121.711 iterations 10
Cbc0038I Pass  48: suminf.    2.81446 (8) obj. -121.711 iterations 13
Cbc0038I Pass  49: suminf.    1.89130 (10) obj. -121.711 iterations 19
Cbc0038I Pass  50: suminf.    1.84365 (9) obj. -121.711 iterations 4
Cbc0038I Pass  51: suminf.    3.12577 (8) obj. -121.711 iterations 49
Cbc0038I Pass  52: suminf.    2.98373 (8) obj. -121.711 iterations 18
Cbc0038I Pass  53: suminf.    3.45955 (10) obj. -121.711 iterations 39
Cbc0038I Pass  54: suminf.    3.15897 (10) obj. -121.711 iterations 9
Cbc0038I Pass  55: suminf.    2.24458 (9) obj. -121.711 iterations 46
Cbc0038I Pass  56: suminf.    2.22334 (8) obj. -121.711 iterations 10
Cbc0038I Pass  57: suminf.    2.81446 (8) obj. -121.711 iterations 12
Cbc0038I Pass  58: suminf.    1.89130 (10) obj. -121.711 iterations 19
Cbc0038I Pass  59: suminf.    1.84365 (9) obj. -121.711 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 182 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 137 rows 79 columns
Cbc0038I Mini branch and bound did not improve solution (0.29 seconds)
Cbc0038I After 0.29 seconds - Feasibility pump exiting with objective of -105.197 - took 0.27 seconds
Cbc0012I Integer solution of -105.19671 found by feasibility pump after 0 iterations and 0 nodes (0.29 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 127 rows 73 columns
Cbc0031I 28 added rows had average density of 140.14286
Cbc0013I At root node, 28 cuts changed objective from -187.76903 to -173.07804 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 35057 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.475 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2319 row cuts average 255.2 elements, 0 column cuts (0 active)  in 0.396 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.104 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.363 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 146 row cuts average 250.8 elements, 0 column cuts (0 active)  in 0.169 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -105.19671 best solution, best possible -173.07804 (4.22 seconds)
Cbc0010I After 24 nodes, 11 on tree, -105.19671 best solution, best possible -173.07804 (4.92 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 10 rows 13 columns
Cbc0012I Integer solution of -105.42903 found by RINS after 16591 iterations and 44 nodes (4.98 seconds)
Cbc0004I Integer solution of -106.53381 found after 17205 iterations and 66 nodes (5.06 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 147 rows 79 columns
Cbc0012I Integer solution of -108.66743 found by RINS after 17920 iterations and 93 nodes (5.21 seconds)
Cbc0001I Search completed - best objective -108.66743, took 21604 iterations and 196 nodes (5.60 seconds)
Cbc0032I Strong branching done 1580 times (40258 iterations), fathomed 31 nodes and fixed 69 variables
Cbc0035I Maximum depth 46, 1075 variables fixed on reduced cost
Total time (CPU seconds):       5.49   (Wallclock seconds):       5.65

