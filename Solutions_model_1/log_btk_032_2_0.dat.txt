Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 57 (-9) rows, 30 (-4) columns and 141 (-18) elements
Clp1000I sum of infeasibilities 0.0418836 - average 0.0007348, 5 fixed columns
Coin0506I Presolve 43 (-14) rows, 25 (-5) columns and 108 (-33) elements
Clp0029I End of values pass after 25 iterations
Clp0014I Perturbing problem by 0.001% of 1.1278033 - largest nonzero change 0 ( 0%) - largest zero change 2.6331912e-05
Clp0000I Optimal - objective value 4527.7201
Clp0000I Optimal - objective value 4527.7201
Coin0511I After Postsolve, objective 4527.7201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.1722256 - largest nonzero change 0 ( 0%) - largest zero change 2.56423e-05
Clp0000I Optimal - objective value 4527.7201
Clp0000I Optimal - objective value 4527.7201
Clp0000I Optimal - objective value 4527.7201
Coin0511I After Postsolve, objective 4527.7201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4527.720076 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 57 rows, 30 columns (29 integer (29 of which binary)) and 141 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.060%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 10.1144
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -501.776 iterations 30
Cbc0038I Solution found of -501.776
Cbc0038I Relaxing continuous gives -501.776
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 57 rows 30 columns, reduced to 43 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -501.776 to -823.998 (0.01 seconds)
Cbc0038I Round again with cutoff of -1194.37
Cbc0038I Pass   2: suminf.    0.64254 (7) obj. -1194.37 iterations 9
Cbc0038I Pass   3: suminf.    1.44061 (7) obj. -1194.37 iterations 14
Cbc0038I Pass   4: suminf.    1.31253 (12) obj. -1194.37 iterations 2
Cbc0038I Pass   5: suminf.    1.10944 (6) obj. -1194.37 iterations 14
Cbc0038I Pass   6: suminf.    1.00127 (5) obj. -1194.37 iterations 1
Cbc0038I Pass   7: suminf.    0.89666 (4) obj. -1194.37 iterations 7
Cbc0038I Pass   8: suminf.    1.53377 (4) obj. -1194.37 iterations 3
Cbc0038I Pass   9: suminf.    1.53377 (4) obj. -1194.37 iterations 0
Cbc0038I Pass  10: suminf.    1.39731 (4) obj. -1194.37 iterations 2
Cbc0038I Pass  11: suminf.    3.75235 (10) obj. -1194.37 iterations 10
Cbc0038I Pass  12: suminf.    1.95043 (6) obj. -1194.37 iterations 6
Cbc0038I Pass  13: suminf.    1.32679 (11) obj. -1194.37 iterations 5
Cbc0038I Pass  14: suminf.    1.83246 (5) obj. -1194.37 iterations 14
Cbc0038I Pass  15: suminf.    1.42884 (4) obj. -1194.37 iterations 6
Cbc0038I Pass  16: suminf.    1.50225 (4) obj. -1194.37 iterations 2
Cbc0038I Pass  17: suminf.    1.06503 (4) obj. -1194.37 iterations 2
Cbc0038I Pass  18: suminf.    1.49337 (5) obj. -1194.37 iterations 3
Cbc0038I Pass  19: suminf.    1.20359 (7) obj. -1194.37 iterations 6
Cbc0038I Pass  20: suminf.    1.20359 (7) obj. -1194.37 iterations 0
Cbc0038I Pass  21: suminf.    2.01477 (5) obj. -1194.37 iterations 7
Cbc0038I Pass  22: suminf.    1.83246 (5) obj. -1194.37 iterations 1
Cbc0038I Pass  23: suminf.    1.42884 (4) obj. -1194.37 iterations 6
Cbc0038I Pass  24: suminf.    1.50225 (4) obj. -1194.37 iterations 2
Cbc0038I Pass  25: suminf.    1.06503 (4) obj. -1194.37 iterations 2
Cbc0038I Pass  26: suminf.    1.49337 (5) obj. -1194.37 iterations 3
Cbc0038I Pass  27: suminf.    1.72867 (6) obj. -1194.37 iterations 15
Cbc0038I Pass  28: suminf.    1.29635 (6) obj. -1194.37 iterations 4
Cbc0038I Pass  29: suminf.    1.49692 (10) obj. -1194.37 iterations 13
Cbc0038I Pass  30: suminf.    2.40689 (6) obj. -1194.37 iterations 11
Cbc0038I Pass  31: suminf.    2.36998 (6) obj. -1194.37 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 57 rows 30 columns, reduced to 45 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -823.998 - took 0.04 seconds
Cbc0012I Integer solution of -823.9985 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0031I 13 added rows had average density of 21.230769
Cbc0013I At root node, 13 cuts changed objective from -4527.7201 to -1768.8775 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2305 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 605 row cuts average 28.8 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 97 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 97 row cuts average 23.1 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0001I Search completed - best objective -823.9984999999997, took 2529 iterations and 2 nodes (0.23 seconds)
Cbc0032I Strong branching done 50 times (901 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 4 variables fixed on reduced cost
Total time (CPU seconds):       0.25   (Wallclock seconds):       0.23

