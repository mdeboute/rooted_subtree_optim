Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 36 (-13) rows, 21 (-4) columns and 106 (-29) elements
Clp1000I sum of infeasibilities 0 - average 0, 17 fixed columns
Coin0506I Presolve 0 (-36) rows, 0 (-21) columns and 0 (-106) elements
Clp0000I Optimal - objective value 8049.3454
Clp0000I Optimal - objective value 8049.3454
Coin0511I After Postsolve, objective 8049.3454, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.1164093 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 8049.3454
Clp0000I Optimal - objective value 8049.3454
Clp0000I Optimal - objective value 8049.3454
Coin0511I After Postsolve, objective 8049.3454, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 8049.345439 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0004I processed model has 36 rows, 21 columns (20 integer (20 of which binary)) and 111 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.873%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 10 integers unsatisfied sum - 4.03731
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -5361.05 iterations 13
Cbc0038I Solution found of -5361.05
Cbc0038I Relaxing continuous gives -5361.05
Cbc0038I Rounding solution of -5406.2 is better than previous of -5361.05

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -5441.76
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.18356 (4) obj. -5441.76 iterations 2
Cbc0038I Pass   3: suminf.    0.74609 (3) obj. -5441.76 iterations 9
Cbc0038I Pass   4: suminf.    0.66551 (3) obj. -5441.76 iterations 2
Cbc0038I Pass   5: suminf.    0.71295 (3) obj. -5441.76 iterations 3
Cbc0038I Pass   6: suminf.    0.39335 (3) obj. -5441.76 iterations 1
Cbc0038I Pass   7: suminf.    1.12076 (5) obj. -5441.76 iterations 5
Cbc0038I Pass   8: suminf.    1.12076 (5) obj. -5441.76 iterations 0
Cbc0038I Pass   9: suminf.    1.39624 (3) obj. -5441.76 iterations 2
Cbc0038I Pass  10: suminf.    0.57670 (2) obj. -5441.76 iterations 2
Cbc0038I Pass  11: suminf.    0.72472 (2) obj. -5441.76 iterations 1
Cbc0038I Pass  12: suminf.    1.22637 (5) obj. -5441.76 iterations 3
Cbc0038I Pass  13: suminf.    0.74906 (2) obj. -5441.76 iterations 4
Cbc0038I Pass  14: suminf.    0.76643 (2) obj. -5441.76 iterations 1
Cbc0038I Pass  15: suminf.    1.48132 (4) obj. -5441.76 iterations 4
Cbc0038I Pass  16: suminf.    0.86158 (3) obj. -5441.76 iterations 2
Cbc0038I Pass  17: suminf.    1.70330 (5) obj. -5441.76 iterations 3
Cbc0038I Pass  18: suminf.    1.13039 (4) obj. -5441.76 iterations 1
Cbc0038I Pass  19: suminf.    0.32352 (3) obj. -5441.76 iterations 1
Cbc0038I Pass  20: suminf.    0.79828 (3) obj. -5441.76 iterations 2
Cbc0038I Pass  21: suminf.    0.68656 (3) obj. -5441.76 iterations 1
Cbc0038I Pass  22: suminf.    0.54110 (3) obj. -5441.76 iterations 2
Cbc0038I Pass  23: suminf.    0.32290 (2) obj. -5441.76 iterations 8
Cbc0038I Pass  24: suminf.    0.19455 (1) obj. -5497.48 iterations 3
Cbc0038I Pass  25: suminf.    0.54103 (4) obj. -5441.76 iterations 3
Cbc0038I Pass  26: suminf.    0.81563 (2) obj. -5441.76 iterations 5
Cbc0038I Pass  27: suminf.    0.65708 (2) obj. -5441.76 iterations 1
Cbc0038I Pass  28: suminf.    0.04001 (3) obj. -5441.76 iterations 5
Cbc0038I Pass  29: suminf.    0.04001 (3) obj. -5441.76 iterations 1
Cbc0038I Pass  30: suminf.    0.85651 (3) obj. -5441.76 iterations 2
Cbc0038I Pass  31: suminf.    1.06625 (4) obj. -5441.76 iterations 2
Cbc0038I Rounding solution of -5414.4 is better than previous of -5406.2

Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 21 columns, reduced to 12 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -5414.4 to -5518.07 (0.01 seconds)
Cbc0038I Round again with cutoff of -5566.81
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.47199 (4) obj. -5566.81 iterations 1
Cbc0038I Pass  32: suminf.    1.29009 (3) obj. -5566.81 iterations 6
Cbc0038I Pass  33: suminf.    0.98209 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  34: suminf.    0.90139 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  35: suminf.    1.29009 (3) obj. -5566.81 iterations 3
Cbc0038I Pass  36: suminf.    1.52795 (6) obj. -5566.81 iterations 6
Cbc0038I Pass  37: suminf.    0.79477 (2) obj. -5566.81 iterations 5
Cbc0038I Pass  38: suminf.    0.81188 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  39: suminf.    1.67930 (5) obj. -5566.81 iterations 5
Cbc0038I Pass  40: suminf.    1.67930 (5) obj. -5566.81 iterations 0
Cbc0038I Pass  41: suminf.    1.29938 (4) obj. -5566.81 iterations 4
Cbc0038I Pass  42: suminf.    1.18802 (5) obj. -5566.81 iterations 1
Cbc0038I Pass  43: suminf.    1.01313 (5) obj. -5566.81 iterations 2
Cbc0038I Pass  44: suminf.    1.01313 (5) obj. -5566.81 iterations 0
Cbc0038I Pass  45: suminf.    1.29938 (4) obj. -5566.81 iterations 4
Cbc0038I Pass  46: suminf.    2.26124 (5) obj. -5566.81 iterations 3
Cbc0038I Pass  47: suminf.    1.11501 (4) obj. -5566.81 iterations 2
Cbc0038I Pass  48: suminf.    1.29938 (4) obj. -5566.81 iterations 2
Cbc0038I Pass  49: suminf.    1.18802 (5) obj. -5566.81 iterations 1
Cbc0038I Pass  50: suminf.    1.01313 (5) obj. -5566.81 iterations 2
Cbc0038I Pass  51: suminf.    1.01313 (5) obj. -5566.81 iterations 0
Cbc0038I Pass  52: suminf.    1.29938 (4) obj. -5566.81 iterations 4
Cbc0038I Pass  53: suminf.    0.33579 (2) obj. -5566.81 iterations 9
Cbc0038I Pass  54: suminf.    0.33579 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  55: suminf.    0.70273 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  56: suminf.    1.41051 (6) obj. -5566.81 iterations 10
Cbc0038I Pass  57: suminf.    1.41051 (6) obj. -5566.81 iterations 4
Cbc0038I Pass  58: suminf.    1.08479 (3) obj. -5566.81 iterations 6
Cbc0038I Pass  59: suminf.    0.99596 (2) obj. -5566.81 iterations 1
Cbc0038I Pass  60: suminf.    0.94694 (2) obj. -5566.81 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 36 rows 21 columns, reduced to 14 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -5518.07 - took 0.05 seconds
Cbc0012I Integer solution of -5518.069 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 36 rows 21 columns, reduced to 13 rows 10 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 5 added rows had average density of 8
Cbc0013I At root node, 5 cuts changed objective from -5761.7716 to -5578.0368 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 54 row cuts average 2.3 elements, 7 column cuts (7 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 3 row cuts average 13.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -5518.069, took 15 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 5 variables fixed on reduced cost
Total time (CPU seconds):       0.06   (Wallclock seconds):       0.03

