Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 281 (-212) rows, 142 (-105) columns and 699 (-756) elements
Clp0000I Optimal - objective value 115141.55
Coin0511I After Postsolve, objective 115141.55, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 115141.5481 - 121 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 281 rows, 142 columns (141 integer (141 of which binary)) and 699 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.692%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 21 integers unsatisfied sum - 8.59401
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -27634.3 iterations 80
Cbc0038I Solution found of -27634.3
Cbc0038I Relaxing continuous gives -27634.3
Cbc0038I Rounding solution of -30761.6 is better than previous of -27634.3

Cbc0038I Before mini branch and bound, 120 integers at bound fixed and 0 continuous
Cbc0038I Full problem 281 rows 142 columns, reduced to 39 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -30761.6 to -58452.6 (0.02 seconds)
Cbc0038I Round again with cutoff of -64121.5
Cbc0038I Pass   2: suminf.    0.73003 (2) obj. -64121.5 iterations 2
Cbc0038I Pass   3: suminf.    0.21858 (1) obj. -64121.5 iterations 3
Cbc0038I Pass   4: suminf.    0.44906 (2) obj. -64121.5 iterations 3
Cbc0038I Pass   5: suminf.    0.51055 (2) obj. -64121.5 iterations 3
Cbc0038I Pass   6: suminf.    4.47355 (11) obj. -64121.5 iterations 27
Cbc0038I Pass   7: suminf.    0.73314 (3) obj. -64121.5 iterations 16
Cbc0038I Pass   8: suminf.    0.73314 (3) obj. -64121.5 iterations 1
Cbc0038I Pass   9: suminf.    1.18126 (3) obj. -64121.5 iterations 1
Cbc0038I Pass  10: suminf.    0.73314 (3) obj. -64121.5 iterations 2
Cbc0038I Pass  11: suminf.    5.01098 (13) obj. -64121.5 iterations 40
Cbc0038I Pass  12: suminf.    2.24767 (14) obj. -64121.5 iterations 23
Cbc0038I Pass  13: suminf.    2.55244 (11) obj. -64121.5 iterations 16
Cbc0038I Pass  14: suminf.    2.55244 (11) obj. -64121.5 iterations 0
Cbc0038I Pass  15: suminf.    2.24767 (14) obj. -64121.5 iterations 14
Cbc0038I Pass  16: suminf.    3.43927 (14) obj. -64121.5 iterations 36
Cbc0038I Pass  17: suminf.    2.41233 (14) obj. -64121.5 iterations 11
Cbc0038I Pass  18: suminf.    2.41233 (14) obj. -64121.5 iterations 0
Cbc0038I Pass  19: suminf.    3.19375 (12) obj. -64121.5 iterations 15
Cbc0038I Pass  20: suminf.    1.89291 (14) obj. -64121.5 iterations 6
Cbc0038I Pass  21: suminf.    1.89291 (14) obj. -64121.5 iterations 0
Cbc0038I Pass  22: suminf.    2.21082 (11) obj. -64121.5 iterations 15
Cbc0038I Pass  23: suminf.    2.21082 (11) obj. -64121.5 iterations 0
Cbc0038I Pass  24: suminf.    2.49509 (13) obj. -64121.5 iterations 12
Cbc0038I Pass  25: suminf.    2.49509 (13) obj. -64121.5 iterations 2
Cbc0038I Pass  26: suminf.    1.78422 (15) obj. -64121.5 iterations 19
Cbc0038I Pass  27: suminf.    1.74990 (14) obj. -64121.5 iterations 2
Cbc0038I Pass  28: suminf.    2.07310 (11) obj. -64121.5 iterations 15
Cbc0038I Pass  29: suminf.    2.07310 (11) obj. -64121.5 iterations 0
Cbc0038I Pass  30: suminf.    1.74990 (14) obj. -64121.5 iterations 13
Cbc0038I Pass  31: suminf.    2.07667 (8) obj. -64121.5 iterations 27
Cbc0038I Rounding solution of -59430.3 is better than previous of -58452.6

Cbc0038I Before mini branch and bound, 83 integers at bound fixed and 0 continuous
Cbc0038I Full problem 281 rows 142 columns, reduced to 59 rows 59 columns
Cbc0038I Mini branch and bound improved solution from -59430.3 to -60263.3 (0.09 seconds)
Cbc0038I Round again with cutoff of -74325.5
Cbc0038I Pass  31: suminf.    1.07342 (3) obj. -74325.5 iterations 2
Cbc0038I Pass  32: suminf.    0.75617 (2) obj. -74325.5 iterations 8
Cbc0038I Pass  33: suminf.    0.61896 (2) obj. -74325.5 iterations 4
Cbc0038I Pass  34: suminf.    0.75617 (2) obj. -74325.5 iterations 2
Cbc0038I Pass  35: suminf.    1.96863 (12) obj. -74325.5 iterations 22
Cbc0038I Pass  36: suminf.    1.74244 (14) obj. -74325.5 iterations 12
Cbc0038I Pass  37: suminf.    2.87120 (12) obj. -74325.5 iterations 12
Cbc0038I Pass  38: suminf.    2.73410 (11) obj. -74325.5 iterations 3
Cbc0038I Pass  39: suminf.    2.06976 (6) obj. -74325.5 iterations 16
Cbc0038I Pass  40: suminf.    3.63707 (15) obj. -74325.5 iterations 26
Cbc0038I Pass  41: suminf.    3.22909 (14) obj. -74325.5 iterations 15
Cbc0038I Pass  42: suminf.    3.44488 (14) obj. -74325.5 iterations 15
Cbc0038I Pass  43: suminf.    3.44488 (14) obj. -74325.5 iterations 0
Cbc0038I Pass  44: suminf.    2.95026 (15) obj. -74325.5 iterations 19
Cbc0038I Pass  45: suminf.    2.86084 (14) obj. -74325.5 iterations 4
Cbc0038I Pass  46: suminf.    2.95529 (12) obj. -74325.5 iterations 14
Cbc0038I Pass  47: suminf.    2.63332 (12) obj. -74325.5 iterations 1
Cbc0038I Pass  48: suminf.    2.86084 (14) obj. -74325.5 iterations 17
Cbc0038I Pass  49: suminf.    6.82857 (17) obj. -74325.5 iterations 32
Cbc0038I Pass  50: suminf.    5.02810 (16) obj. -74325.5 iterations 19
Cbc0038I Pass  51: suminf.    5.02810 (16) obj. -74325.5 iterations 0
Cbc0038I Pass  52: suminf.    3.91482 (15) obj. -74325.5 iterations 16
Cbc0038I Pass  53: suminf.    3.91482 (15) obj. -74325.5 iterations 0
Cbc0038I Pass  54: suminf.    3.82985 (15) obj. -74325.5 iterations 19
Cbc0038I Pass  55: suminf.    3.56835 (14) obj. -74325.5 iterations 6
Cbc0038I Pass  56: suminf.    3.91482 (15) obj. -74325.5 iterations 18
Cbc0038I Pass  57: suminf.    5.32142 (18) obj. -74325.5 iterations 31
Cbc0038I Pass  58: suminf.    3.63775 (15) obj. -74325.5 iterations 18
Cbc0038I Pass  59: suminf.    3.47031 (16) obj. -74325.5 iterations 1
Cbc0038I Pass  60: suminf.    3.59891 (14) obj. -74325.5 iterations 24
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 91 integers at bound fixed and 0 continuous
Cbc0038I Full problem 281 rows 142 columns, reduced to 50 rows 48 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of -60263.3 - took 0.12 seconds
Cbc0012I Integer solution of -60263.291 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 281 rows 142 columns, reduced to 42 rows 24 columns
Cbc0031I 18 added rows had average density of 7.8333333
Cbc0013I At root node, 18 cuts changed objective from -115141.55 to -60513.372 in 26 passes
Cbc0014I Cut generator 0 (Probing) - 3602 row cuts average 3.4 elements, 22 column cuts (22 active)  in 0.051 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 108 row cuts average 22.3 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 19 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 66 row cuts average 20.5 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0001I Search completed - best objective -60263.29099999998, took 434 iterations and 2 nodes (0.32 seconds)
Cbc0032I Strong branching done 32 times (150 iterations), fathomed 0 nodes and fixed 4 variables
Cbc0035I Maximum depth 0, 26 variables fixed on reduced cost
Total time (CPU seconds):       0.30   (Wallclock seconds):       0.32

