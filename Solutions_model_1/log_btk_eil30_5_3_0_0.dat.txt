Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 48 (-15) rows, 26 (-6) columns and 140 (-37) elements
Clp1000I sum of infeasibilities 3.09266e-06 - average 6.44305e-08, 3 fixed columns
Coin0506I Presolve 39 (-9) rows, 23 (-3) columns and 116 (-24) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 83.934198
Clp0000I Optimal - objective value 83.934198
Coin0511I After Postsolve, objective 83.934198, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.934198
Clp0000I Optimal - objective value 83.934198
Clp0000I Optimal - objective value 83.934198
Coin0511I After Postsolve, objective 83.934198, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.93419785 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 47 rows, 26 columns (25 integer (25 of which binary)) and 142 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.919%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 5.92928
Cbc0038I Pass   1: suminf.    0.05556 (2) obj. 11.4366 iterations 15
Cbc0038I Solution found of 42.2212
Cbc0038I Relaxing continuous gives 42.2212
Cbc0038I Rounding solution of 16.4804 is better than previous of 42.2212

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 47 rows 26 columns, reduced to 28 rows 17 columns
Cbc0038I Mini branch and bound improved solution from 16.4804 to -24.025 (0.02 seconds)
Cbc0038I Round again with cutoff of -29.7026
Cbc0038I Pass   2: suminf.    0.82649 (6) obj. -29.7026 iterations 7
Cbc0038I Pass   3: suminf.    2.18066 (6) obj. -29.7026 iterations 7
Cbc0038I Pass   4: suminf.    1.86700 (7) obj. -29.7026 iterations 2
Cbc0038I Pass   5: suminf.    1.75999 (6) obj. -29.7026 iterations 1
Cbc0038I Pass   6: suminf.    0.52526 (5) obj. -29.7026 iterations 5
Cbc0038I Pass   7: suminf.    0.82122 (4) obj. -29.7026 iterations 6
Cbc0038I Pass   8: suminf.    0.62563 (3) obj. -29.7026 iterations 1
Cbc0038I Pass   9: suminf.    0.71507 (6) obj. -29.7026 iterations 6
Cbc0038I Pass  10: suminf.    1.86700 (7) obj. -29.7026 iterations 8
Cbc0038I Pass  11: suminf.    1.75999 (6) obj. -29.7026 iterations 1
Cbc0038I Pass  12: suminf.    0.52526 (5) obj. -29.7026 iterations 5
Cbc0038I Pass  13: suminf.    1.90011 (7) obj. -29.7026 iterations 4
Cbc0038I Pass  14: suminf.    1.90011 (7) obj. -29.7026 iterations 0
Cbc0038I Pass  15: suminf.    2.16721 (6) obj. -29.7026 iterations 8
Cbc0038I Pass  16: suminf.    2.11948 (5) obj. -29.7026 iterations 1
Cbc0038I Pass  17: suminf.    0.65407 (4) obj. -29.7026 iterations 3
Cbc0038I Pass  18: suminf.    0.76745 (5) obj. -29.7026 iterations 3
Cbc0038I Pass  19: suminf.    0.76745 (5) obj. -29.7026 iterations 1
Cbc0038I Pass  20: suminf.    2.18242 (6) obj. -29.7026 iterations 8
Cbc0038I Pass  21: suminf.    2.13469 (5) obj. -29.7026 iterations 1
Cbc0038I Pass  22: suminf.    0.46143 (4) obj. -29.7026 iterations 3
Cbc0038I Pass  23: suminf.    0.76265 (6) obj. -29.7026 iterations 5
Cbc0038I Pass  24: suminf.    0.76265 (6) obj. -29.7026 iterations 1
Cbc0038I Pass  25: suminf.    0.71041 (4) obj. -29.7026 iterations 7
Cbc0038I Pass  26: suminf.    1.95697 (6) obj. -29.7026 iterations 4
Cbc0038I Pass  27: suminf.    1.93651 (5) obj. -29.7026 iterations 1
Cbc0038I Pass  28: suminf.    0.59364 (4) obj. -29.7026 iterations 3
Cbc0038I Pass  29: suminf.    0.35018 (1) obj. -29.7026 iterations 4
Cbc0038I Pass  30: suminf.    0.40996 (2) obj. -29.7026 iterations 3
Cbc0038I Pass  31: suminf.    0.27306 (2) obj. -29.7026 iterations 1
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 47 rows 26 columns, reduced to 37 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -39.9219
Cbc0038I Pass  31: suminf.    1.10063 (7) obj. -39.9219 iterations 1
Cbc0038I Pass  32: suminf.    0.97528 (6) obj. -39.9219 iterations 2
Cbc0038I Pass  33: suminf.    2.06337 (5) obj. -39.9219 iterations 5
Cbc0038I Pass  34: suminf.    0.76740 (5) obj. -39.9219 iterations 3
Cbc0038I Pass  35: suminf.    2.28635 (6) obj. -39.9219 iterations 6
Cbc0038I Pass  36: suminf.    2.84228 (8) obj. -39.9219 iterations 2
Cbc0038I Pass  37: suminf.    3.83754 (13) obj. -39.9219 iterations 14
Cbc0038I Pass  38: suminf.    2.57261 (12) obj. -39.9219 iterations 5
Cbc0038I Pass  39: suminf.    1.87197 (5) obj. -39.9219 iterations 12
Cbc0038I Pass  40: suminf.    0.96032 (5) obj. -39.9219 iterations 2
Cbc0038I Pass  41: suminf.    2.37329 (6) obj. -39.9219 iterations 6
Cbc0038I Pass  42: suminf.    3.17915 (9) obj. -39.9219 iterations 5
Cbc0038I Pass  43: suminf.    2.56119 (6) obj. -39.9219 iterations 4
Cbc0038I Pass  44: suminf.    1.04853 (5) obj. -39.9219 iterations 4
Cbc0038I Pass  45: suminf.    2.01096 (5) obj. -39.9219 iterations 3
Cbc0038I Pass  46: suminf.    1.15903 (5) obj. -39.9219 iterations 3
Cbc0038I Pass  47: suminf.    2.38850 (6) obj. -39.9219 iterations 5
Cbc0038I Pass  48: suminf.    4.24847 (16) obj. -39.9219 iterations 12
Cbc0038I Pass  49: suminf.    2.16178 (10) obj. -39.9219 iterations 10
Cbc0038I Pass  50: suminf.    2.10960 (10) obj. -39.9219 iterations 1
Cbc0038I Pass  51: suminf.    2.29094 (7) obj. -39.9219 iterations 8
Cbc0038I Pass  52: suminf.    2.37093 (6) obj. -39.9219 iterations 5
Cbc0038I Pass  53: suminf.    1.38040 (5) obj. -39.9219 iterations 3
Cbc0038I Pass  54: suminf.    1.24415 (6) obj. -39.9219 iterations 5
Cbc0038I Pass  55: suminf.    0.97295 (5) obj. -39.9219 iterations 1
Cbc0038I Pass  56: suminf.    2.47300 (7) obj. -39.9219 iterations 9
Cbc0038I Pass  57: suminf.    1.50824 (8) obj. -39.9219 iterations 9
Cbc0038I Pass  58: suminf.    1.49667 (8) obj. -39.9219 iterations 1
Cbc0038I Pass  59: suminf.    0.56671 (5) obj. -39.9219 iterations 7
Cbc0038I Pass  60: suminf.    0.56671 (5) obj. -39.9219 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 47 rows 26 columns, reduced to 40 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -24.025 - took 0.06 seconds
Cbc0012I Integer solution of -24.02505 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 47 rows 26 columns, reduced to 28 rows 17 columns
Cbc0031I 8 added rows had average density of 14.5
Cbc0013I At root node, 8 cuts changed objective from -80.799319 to -50.321072 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1301 row cuts average 3.3 elements, 2 column cuts (2 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 587 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 74 row cuts average 5.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 105 row cuts average 23.5 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -24.02504999999999, took 2234 iterations and 4 nodes (0.20 seconds)
Cbc0032I Strong branching done 58 times (783 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 1, 5 variables fixed on reduced cost
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.20

