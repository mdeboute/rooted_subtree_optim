Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 53 (-10) rows, 28 (-4) columns and 154 (-23) elements
Clp1000I sum of infeasibilities 0.00651109 - average 0.000122851, 2 fixed columns
Coin0506I Presolve 36 (-17) rows, 25 (-3) columns and 114 (-40) elements
Clp0029I End of values pass after 24 iterations
Clp0000I Optimal - objective value 92.015357
Clp0000I Optimal - objective value 92.015357
Coin0511I After Postsolve, objective 92.015357, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 92.015357
Clp0000I Optimal - objective value 92.015357
Clp0000I Optimal - objective value 92.015357
Coin0511I After Postsolve, objective 92.015357, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 92.01535675 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 53 rows, 28 columns (27 integer (27 of which binary)) and 156 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.509%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 5.77057
Cbc0038I Pass   1: suminf.    0.11667 (1) obj. -45.817 iterations 21
Cbc0038I Solution found of -16.5368
Cbc0038I Relaxing continuous gives -16.5368
Cbc0038I Rounding solution of -18.4618 is better than previous of -16.5368

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 53 rows 28 columns, reduced to 31 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -18.4618 to -53.8 (0.02 seconds)
Cbc0038I Round again with cutoff of -57.6216
Cbc0038I Pass   2: suminf.    0.34268 (3) obj. -57.6216 iterations 2
Cbc0038I Pass   3: suminf.    0.36697 (2) obj. -57.6216 iterations 5
Cbc0038I Pass   4: suminf.    0.15179 (1) obj. -57.6216 iterations 5
Cbc0038I Pass   5: suminf.    0.48678 (1) obj. -57.6216 iterations 2
Cbc0038I Pass   6: suminf.    0.96383 (4) obj. -57.6216 iterations 7
Cbc0038I Pass   7: suminf.    0.31652 (2) obj. -57.6216 iterations 5
Cbc0038I Pass   8: suminf.    0.42505 (2) obj. -57.6216 iterations 4
Cbc0038I Pass   9: suminf.    0.07533 (1) obj. -57.6216 iterations 5
Cbc0038I Pass  10: suminf.    0.53802 (2) obj. -57.6216 iterations 3
Cbc0038I Pass  11: suminf.    0.75506 (3) obj. -57.6216 iterations 6
Cbc0038I Pass  12: suminf.    0.05000 (1) obj. -57.6216 iterations 2
Cbc0038I Pass  13: suminf.    0.46200 (2) obj. -57.6216 iterations 2
Cbc0038I Pass  14: suminf.    0.72114 (7) obj. -57.6216 iterations 8
Cbc0038I Pass  15: suminf.    0.36773 (6) obj. -57.6216 iterations 3
Cbc0038I Pass  16: suminf.    0.95123 (3) obj. -57.6216 iterations 7
Cbc0038I Pass  17: suminf.    0.77020 (3) obj. -57.6216 iterations 2
Cbc0038I Pass  18: suminf.    1.89538 (11) obj. -57.6216 iterations 12
Cbc0038I Pass  19: suminf.    1.84755 (8) obj. -57.6216 iterations 7
Cbc0038I Pass  20: suminf.    2.07960 (6) obj. -57.6216 iterations 8
Cbc0038I Pass  21: suminf.    0.76893 (3) obj. -57.6216 iterations 6
Cbc0038I Pass  22: suminf.    0.74376 (3) obj. -57.6216 iterations 1
Cbc0038I Pass  23: suminf.    0.95550 (3) obj. -57.6216 iterations 1
Cbc0038I Pass  24: suminf.    1.79938 (4) obj. -57.6216 iterations 3
Cbc0038I Pass  25: suminf.    1.68443 (7) obj. -57.6216 iterations 8
Cbc0038I Pass  26: suminf.    1.88514 (5) obj. -57.6216 iterations 9
Cbc0038I Pass  27: suminf.    0.67597 (3) obj. -57.6216 iterations 7
Cbc0038I Pass  28: suminf.    1.01605 (3) obj. -57.6216 iterations 2
Cbc0038I Pass  29: suminf.    3.07242 (9) obj. -57.6216 iterations 6
Cbc0038I Pass  30: suminf.    0.86239 (4) obj. -57.6216 iterations 7
Cbc0038I Pass  31: suminf.    0.63597 (3) obj. -57.6216 iterations 1
Cbc0038I Rounding solution of -55.725 is better than previous of -53.8

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 53 rows 28 columns, reduced to 44 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -64.5004
Cbc0038I Pass  31: suminf.    0.54207 (4) obj. -64.5004 iterations 1
Cbc0038I Pass  32: suminf.    0.54165 (2) obj. -64.5004 iterations 6
Cbc0038I Pass  33: suminf.    0.42502 (1) obj. -64.5004 iterations 2
Cbc0038I Pass  34: suminf.    0.44143 (1) obj. -64.5004 iterations 3
Cbc0038I Pass  35: suminf.    0.91853 (6) obj. -64.5004 iterations 5
Cbc0038I Pass  36: suminf.    0.59932 (6) obj. -64.5004 iterations 2
Cbc0038I Pass  37: suminf.    1.00723 (4) obj. -64.5004 iterations 6
Cbc0038I Pass  38: suminf.    1.00723 (4) obj. -64.5004 iterations 1
Cbc0038I Pass  39: suminf.    1.43928 (4) obj. -64.5004 iterations 6
Cbc0038I Pass  40: suminf.    0.54936 (2) obj. -64.5004 iterations 3
Cbc0038I Pass  41: suminf.    0.53976 (2) obj. -64.5004 iterations 2
Cbc0038I Pass  42: suminf.    0.57734 (2) obj. -64.5004 iterations 3
Cbc0038I Pass  43: suminf.    2.42315 (9) obj. -64.5004 iterations 11
Cbc0038I Pass  44: suminf.    1.79094 (8) obj. -64.5004 iterations 5
Cbc0038I Pass  45: suminf.    0.95778 (5) obj. -64.5004 iterations 14
Cbc0038I Pass  46: suminf.    0.95778 (5) obj. -64.5004 iterations 1
Cbc0038I Pass  47: suminf.    1.43928 (4) obj. -64.5004 iterations 6
Cbc0038I Pass  48: suminf.    0.54936 (2) obj. -64.5004 iterations 2
Cbc0038I Pass  49: suminf.    0.53976 (2) obj. -64.5004 iterations 2
Cbc0038I Pass  50: suminf.    0.57734 (2) obj. -64.5004 iterations 2
Cbc0038I Pass  51: suminf.    2.72432 (16) obj. -64.5004 iterations 15
Cbc0038I Pass  52: suminf.    1.62544 (5) obj. -64.5004 iterations 7
Cbc0038I Pass  53: suminf.    1.38121 (4) obj. -64.5004 iterations 8
Cbc0038I Pass  54: suminf.    0.47289 (2) obj. -64.5004 iterations 3
Cbc0038I Pass  55: suminf.    0.42502 (1) obj. -64.5004 iterations 1
Cbc0038I Pass  56: suminf.    0.44143 (1) obj. -64.5004 iterations 3
Cbc0038I Pass  57: suminf.    2.81630 (9) obj. -64.5004 iterations 8
Cbc0038I Pass  58: suminf.    0.34856 (1) obj. -64.5004 iterations 11
Cbc0038I Pass  59: suminf.    0.46152 (1) obj. -64.5004 iterations 2
Cbc0038I Pass  60: suminf.    0.92904 (9) obj. -64.5004 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 53 rows 28 columns, reduced to 33 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -55.725 - took 0.02 seconds
Cbc0012I Integer solution of -55.72501 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 53 rows 28 columns, reduced to 31 rows 20 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 2 added rows had average density of 15
Cbc0013I At root node, 9 cuts changed objective from -92.015357 to -54.273166 in 33 passes
Cbc0014I Cut generator 0 (Probing) - 238 row cuts average 4.6 elements, 11 column cuts (11 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 206 row cuts average 23.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 8 row cuts average 9.1 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 9 row cuts average 6.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 107 row cuts average 18.3 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective -55.72501, took 383 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

