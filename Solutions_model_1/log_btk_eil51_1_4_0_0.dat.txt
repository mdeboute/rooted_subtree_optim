Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 91 (-14) rows, 51 (-2) columns and 277 (-26) elements
Clp1000I sum of infeasibilities 1.66977e-05 - average 1.83491e-07, 4 fixed columns
Coin0506I Presolve 83 (-8) rows, 47 (-4) columns and 253 (-24) elements
Clp0029I End of values pass after 47 iterations
Clp0000I Optimal - objective value 43.054094
Clp0000I Optimal - objective value 43.054094
Coin0511I After Postsolve, objective 43.054094, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 43.054094
Clp0000I Optimal - objective value 43.054094
Clp0000I Optimal - objective value 43.054094
Coin0511I After Postsolve, objective 43.054094, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 43.05409384 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 91 rows, 51 columns (50 integer (50 of which binary)) and 277 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.694%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 33 integers unsatisfied sum - 9.00331
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 4.81865 iterations 37
Cbc0038I Solution found of 4.81865
Cbc0038I Relaxing continuous gives 4.81865
Cbc0038I Rounding solution of 1.38562 is better than previous of 4.81865

Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 51 columns, reduced to 58 rows 34 columns
Cbc0038I Mini branch and bound improved solution from 1.38562 to -16.4322 (0.04 seconds)
Cbc0038I Round again with cutoff of -19.0945
Cbc0038I Pass   2: suminf.    3.00940 (11) obj. -19.0945 iterations 14
Cbc0038I Pass   3: suminf.    2.01008 (6) obj. -19.0945 iterations 13
Cbc0038I Pass   4: suminf.    1.33121 (5) obj. -19.0945 iterations 2
Cbc0038I Pass   5: suminf.    0.83430 (3) obj. -19.0945 iterations 7
Cbc0038I Pass   6: suminf.    0.83417 (3) obj. -19.0945 iterations 1
Cbc0038I Pass   7: suminf.    1.15553 (4) obj. -19.0945 iterations 6
Cbc0038I Pass   8: suminf.    2.00277 (13) obj. -19.0945 iterations 15
Cbc0038I Pass   9: suminf.    1.15960 (5) obj. -19.0945 iterations 11
Cbc0038I Pass  10: suminf.    0.80007 (4) obj. -19.0945 iterations 2
Cbc0038I Pass  11: suminf.    1.48187 (6) obj. -19.0945 iterations 7
Cbc0038I Pass  12: suminf.    1.43744 (5) obj. -19.0945 iterations 1
Cbc0038I Pass  13: suminf.    1.73523 (4) obj. -19.0945 iterations 5
Cbc0038I Pass  14: suminf.    1.15443 (4) obj. -19.0945 iterations 2
Cbc0038I Pass  15: suminf.    0.71456 (4) obj. -19.0945 iterations 1
Cbc0038I Pass  16: suminf.    1.48187 (6) obj. -19.0945 iterations 6
Cbc0038I Pass  17: suminf.    1.43744 (5) obj. -19.0945 iterations 1
Cbc0038I Pass  18: suminf.    1.73523 (4) obj. -19.0945 iterations 5
Cbc0038I Pass  19: suminf.    1.15443 (4) obj. -19.0945 iterations 2
Cbc0038I Pass  20: suminf.    0.71456 (4) obj. -19.0945 iterations 1
Cbc0038I Pass  21: suminf.    1.48187 (6) obj. -19.0945 iterations 6
Cbc0038I Pass  22: suminf.    1.43744 (5) obj. -19.0945 iterations 1
Cbc0038I Pass  23: suminf.    1.73523 (4) obj. -19.0945 iterations 5
Cbc0038I Pass  24: suminf.    1.15443 (4) obj. -19.0945 iterations 2
Cbc0038I Pass  25: suminf.    0.71456 (4) obj. -19.0945 iterations 1
Cbc0038I Pass  26: suminf.    1.48187 (6) obj. -19.0945 iterations 6
Cbc0038I Pass  27: suminf.    1.43744 (5) obj. -19.0945 iterations 1
Cbc0038I Pass  28: suminf.    1.73523 (4) obj. -19.0945 iterations 5
Cbc0038I Pass  29: suminf.    1.15443 (4) obj. -19.0945 iterations 2
Cbc0038I Pass  30: suminf.    0.71456 (4) obj. -19.0945 iterations 1
Cbc0038I Pass  31: suminf.    1.48187 (6) obj. -19.0945 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 51 columns, reduced to 68 rows 39 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -16.4322 - took 0.06 seconds
Cbc0012I Integer solution of -16.432226 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 91 rows 51 columns, reduced to 58 rows 34 columns
Cbc0031I 23 added rows had average density of 34.565217
Cbc0013I At root node, 23 cuts changed objective from -43.054094 to -32.077272 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8308 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.061 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1973 row cuts average 49.4 elements, 0 column cuts (0 active)  in 0.054 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 131 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 150 row cuts average 41.4 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0010I After 16 nodes, 1 on tree, -16.432226 best solution, best possible -23.314247 (0.70 seconds)
Cbc0001I Search completed - best objective -16.43222590400001, took 6438 iterations and 22 nodes (0.71 seconds)
Cbc0032I Strong branching done 392 times (5004 iterations), fathomed 2 nodes and fixed 22 variables
Cbc0035I Maximum depth 5, 32 variables fixed on reduced cost
Total time (CPU seconds):       0.69   (Wallclock seconds):       0.72

