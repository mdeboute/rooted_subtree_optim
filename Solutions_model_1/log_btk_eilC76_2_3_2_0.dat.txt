Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 132 (-23) rows, 72 (-6) columns and 400 (-53) elements
Clp1000I sum of infeasibilities 9.70441e-06 - average 7.35183e-08, 7 fixed columns
Coin0506I Presolve 118 (-14) rows, 65 (-7) columns and 358 (-42) elements
Clp0029I End of values pass after 65 iterations
Clp0000I Optimal - objective value 42.98277
Clp0000I Optimal - objective value 42.98277
Coin0511I After Postsolve, objective 42.98277, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 42.98277
Clp0000I Optimal - objective value 42.98277
Clp0000I Optimal - objective value 42.98277
Coin0511I After Postsolve, objective 42.98277, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 42.98277048 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 132 rows, 72 columns (71 integer (71 of which binary)) and 400 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.245%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 56 integers unsatisfied sum - 9.38728
Cbc0038I Solution found of -5.00758
Cbc0038I Relaxing continuous gives -12.3404
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 72 columns, reduced to 104 rows 57 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I Round again with cutoff of -15.4047
Cbc0038I Pass   1: suminf.    0.89335 (50) obj. -15.4047 iterations 40
Cbc0038I Pass   2: suminf.    2.31157 (9) obj. -15.4047 iterations 46
Cbc0038I Pass   3: suminf.    0.48820 (4) obj. -15.4047 iterations 19
Cbc0038I Pass   4: suminf.    0.48800 (3) obj. -15.4047 iterations 1
Cbc0038I Pass   5: suminf.    0.58852 (3) obj. -15.4047 iterations 9
Cbc0038I Pass   6: suminf.    0.82958 (8) obj. -15.4047 iterations 9
Cbc0038I Pass   7: suminf.    1.98098 (7) obj. -15.4047 iterations 11
Cbc0038I Pass   8: suminf.    1.39161 (5) obj. -15.4047 iterations 6
Cbc0038I Pass   9: suminf.    1.39113 (5) obj. -15.4047 iterations 2
Cbc0038I Pass  10: suminf.    1.63390 (4) obj. -15.4047 iterations 10
Cbc0038I Pass  11: suminf.    0.77567 (3) obj. -15.4047 iterations 2
Cbc0038I Pass  12: suminf.    1.06349 (3) obj. -15.4047 iterations 7
Cbc0038I Pass  13: suminf.    0.77567 (3) obj. -15.4047 iterations 7
Cbc0038I Pass  14: suminf.    1.83532 (6) obj. -15.4047 iterations 20
Cbc0038I Pass  15: suminf.    1.42059 (6) obj. -15.4047 iterations 7
Cbc0038I Pass  16: suminf.    0.95702 (5) obj. -15.4047 iterations 2
Cbc0038I Pass  17: suminf.    0.89981 (4) obj. -15.4047 iterations 12
Cbc0038I Pass  18: suminf.    0.89981 (4) obj. -15.4047 iterations 0
Cbc0038I Pass  19: suminf.    1.52059 (6) obj. -15.4047 iterations 13
Cbc0038I Pass  20: suminf.    0.82600 (4) obj. -15.4047 iterations 3
Cbc0038I Pass  21: suminf.    0.82600 (4) obj. -15.4047 iterations 0
Cbc0038I Pass  22: suminf.    0.90843 (4) obj. -15.4047 iterations 2
Cbc0038I Pass  23: suminf.    0.89981 (4) obj. -15.4047 iterations 2
Cbc0038I Pass  24: suminf.    1.52059 (6) obj. -15.4047 iterations 13
Cbc0038I Pass  25: suminf.    0.82600 (4) obj. -15.4047 iterations 3
Cbc0038I Pass  26: suminf.    0.82600 (4) obj. -15.4047 iterations 0
Cbc0038I Pass  27: suminf.    0.90843 (4) obj. -15.4047 iterations 2
Cbc0038I Pass  28: suminf.    0.89981 (4) obj. -15.4047 iterations 2
Cbc0038I Pass  29: suminf.    1.52059 (6) obj. -15.4047 iterations 13
Cbc0038I Pass  30: suminf.    0.82600 (4) obj. -15.4047 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 72 columns, reduced to 113 rows 62 columns
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I After 0.13 seconds - Feasibility pump exiting with objective of -12.3404 - took 0.12 seconds
Cbc0012I Integer solution of -12.3404 found by feasibility pump after 0 iterations and 0 nodes (0.13 seconds)
Cbc0038I Full problem 132 rows 72 columns, reduced to 104 rows 57 columns
Cbc0031I 34 added rows had average density of 44.088235
Cbc0013I At root node, 34 cuts changed objective from -42.98277 to -36.5721 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14306 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.088 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2310 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.093 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 11 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.088 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 160 row cuts average 71.8 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -12.3404 best solution, best possible -36.5721 (1.06 seconds)
Cbc0038I Full problem 132 rows 72 columns, reduced to 82 rows 45 columns
Cbc0038I Full problem 132 rows 72 columns, reduced to 75 rows 42 columns
Cbc0001I Search completed - best objective -12.3404, took 13960 iterations and 198 nodes (1.72 seconds)
Cbc0032I Strong branching done 1892 times (25570 iterations), fathomed 26 nodes and fixed 130 variables
Cbc0035I Maximum depth 21, 509 variables fixed on reduced cost
Total time (CPU seconds):       1.66   (Wallclock seconds):       1.73

