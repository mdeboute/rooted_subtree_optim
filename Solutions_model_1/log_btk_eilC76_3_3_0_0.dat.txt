Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 131 (-24) rows, 74 (-4) columns and 402 (-51) elements
Clp1000I sum of infeasibilities 4.92246e-05 - average 3.7576e-07, 22 fixed columns
Coin0506I Presolve 90 (-41) rows, 51 (-23) columns and 275 (-127) elements
Clp0029I End of values pass after 51 iterations
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.40056301 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 131 rows, 74 columns (73 integer (73 of which binary)) and 402 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.170%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 8.19593
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.0593 iterations 48
Cbc0038I Solution found of -25.0593
Cbc0038I Relaxing continuous gives -25.0593
Cbc0038I Rounding solution of -50.9787 is better than previous of -25.0593

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -50.9787 to -64.1421 (0.03 seconds)
Cbc0038I Round again with cutoff of -66.068
Cbc0038I Pass   2: suminf.    2.50878 (8) obj. -66.068 iterations 14
Cbc0038I Pass   3: suminf.    2.24401 (6) obj. -66.068 iterations 8
Cbc0038I Pass   4: suminf.    2.24401 (6) obj. -66.068 iterations 0
Cbc0038I Pass   5: suminf.    1.81491 (5) obj. -66.068 iterations 6
Cbc0038I Pass   6: suminf.    1.44602 (4) obj. -66.068 iterations 6
Cbc0038I Pass   7: suminf.    1.44602 (4) obj. -66.068 iterations 0
Cbc0038I Pass   8: suminf.    2.02156 (5) obj. -66.068 iterations 4
Cbc0038I Pass   9: suminf.    1.31547 (4) obj. -66.068 iterations 3
Cbc0038I Pass  10: suminf.    1.45283 (4) obj. -66.068 iterations 5
Cbc0038I Pass  11: suminf.    3.62767 (11) obj. -66.068 iterations 20
Cbc0038I Pass  12: suminf.    1.69102 (5) obj. -66.068 iterations 23
Cbc0038I Pass  13: suminf.    1.67437 (5) obj. -66.068 iterations 8
Cbc0038I Pass  14: suminf.    0.74623 (2) obj. -66.068 iterations 8
Cbc0038I Pass  15: suminf.    0.74623 (2) obj. -66.068 iterations 0
Cbc0038I Pass  16: suminf.    0.74878 (2) obj. -66.068 iterations 2
Cbc0038I Pass  17: suminf.    2.44498 (6) obj. -66.068 iterations 13
Cbc0038I Pass  18: suminf.    1.92330 (7) obj. -66.068 iterations 13
Cbc0038I Pass  19: suminf.    1.92330 (7) obj. -66.068 iterations 0
Cbc0038I Pass  20: suminf.    2.21185 (5) obj. -66.068 iterations 7
Cbc0038I Pass  21: suminf.    0.92475 (3) obj. -66.068 iterations 5
Cbc0038I Pass  22: suminf.    0.92475 (3) obj. -66.068 iterations 0
Cbc0038I Pass  23: suminf.    1.52127 (4) obj. -66.068 iterations 4
Cbc0038I Pass  24: suminf.    0.92475 (3) obj. -66.068 iterations 4
Cbc0038I Pass  25: suminf.    5.25510 (16) obj. -66.068 iterations 28
Cbc0038I Pass  26: suminf.    0.21336 (4) obj. -66.068 iterations 26
Cbc0038I Pass  27: suminf.    0.21289 (2) obj. -66.068 iterations 3
Cbc0038I Pass  28: suminf.    0.61176 (3) obj. -66.068 iterations 4
Cbc0038I Pass  29: suminf.    0.47853 (2) obj. -66.068 iterations 1
Cbc0038I Pass  30: suminf.    0.21666 (2) obj. -66.068 iterations 3
Cbc0038I Pass  31: suminf.    0.33297 (2) obj. -66.068 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 64 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -64.1421 - took 0.04 seconds
Cbc0012I Integer solution of -64.142104 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0031I 19 added rows had average density of 34.157895
Cbc0013I At root node, 19 cuts changed objective from -83.400563 to -71.11059 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6037 row cuts average 5.3 elements, 3 column cuts (3 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1824 row cuts average 53.4 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 321 row cuts average 6.3 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 154 row cuts average 45.6 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0001I Search completed - best objective -64.14210399999999, took 5701 iterations and 24 nodes (0.65 seconds)
Cbc0032I Strong branching done 352 times (5968 iterations), fathomed 2 nodes and fixed 14 variables
Cbc0035I Maximum depth 6, 101 variables fixed on reduced cost
Total time (CPU seconds):       0.63   (Wallclock seconds):       0.66

