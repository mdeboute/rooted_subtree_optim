Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 117 (-88) rows, 67 (-36) columns and 362 (-241) elements
Clp0000I Optimal - objective value 3592.8694
Coin0511I After Postsolve, objective 3592.8694, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 3592.869444 - 19 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 117 rows, 67 columns (66 integer (66 of which binary)) and 364 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.316%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 1.44186
Cbc0038I Pass   1: suminf.    0.93939 (2) obj. -3368.73 iterations 3
Cbc0038I Solution found of -2232
Cbc0038I Relaxing continuous gives -2232
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 117 rows 67 columns, reduced to 8 rows 5 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -2368.09
Cbc0038I Pass   2: suminf.    0.93939 (2) obj. -3368.73 iterations 0
Cbc0038I Pass   3: suminf.    0.12697 (2) obj. -2368.09 iterations 3
Cbc0038I Pass   4: suminf.    0.64185 (7) obj. -2368.09 iterations 10
Cbc0038I Pass   5: suminf.    0.56731 (5) obj. -2368.09 iterations 3
Cbc0038I Pass   6: suminf.    0.60606 (2) obj. -2933.74 iterations 4
Cbc0038I Pass   7: suminf.    0.07829 (2) obj. -2368.09 iterations 3
Cbc0038I Pass   8: suminf.    0.74265 (5) obj. -2368.09 iterations 7
Cbc0038I Pass   9: suminf.    0.23645 (3) obj. -2368.09 iterations 12
Cbc0038I Pass  10: suminf.    0.42424 (2) obj. -2784.72 iterations 2
Cbc0038I Pass  11: suminf.    0.03551 (2) obj. -2368.09 iterations 3
Cbc0038I Pass  12: suminf.    0.62241 (4) obj. -2368.09 iterations 21
Cbc0038I Pass  13: suminf.    0.03082 (2) obj. -2368.09 iterations 16
Cbc0038I Pass  14: suminf.    0.09091 (2) obj. -2432.49 iterations 1
Cbc0038I Pass  15: suminf.    1.21302 (8) obj. -2368.09 iterations 15
Cbc0038I Pass  16: suminf.    0.14562 (4) obj. -2368.09 iterations 13
Cbc0038I Pass  17: suminf.    0.52424 (4) obj. -2368.09 iterations 6
Cbc0038I Pass  18: suminf.    0.52424 (4) obj. -2368.09 iterations 1
Cbc0038I Pass  19: suminf.    0.57576 (2) obj. -2898.01 iterations 5
Cbc0038I Pass  20: suminf.    0.08133 (2) obj. -2368.09 iterations 3
Cbc0038I Pass  21: suminf.    0.61526 (4) obj. -2368.09 iterations 8
Cbc0038I Pass  22: suminf.    0.12410 (2) obj. -2368.09 iterations 5
Cbc0038I Pass  23: suminf.    0.48485 (2) obj. -2754.73 iterations 1
Cbc0038I Pass  24: suminf.    0.33333 (1) obj. -2376.42 iterations 16
Cbc0038I Pass  25: suminf.    0.33333 (1) obj. -2376.42 iterations 5
Cbc0038I Pass  26: suminf.    0.08009 (4) obj. -2368.09 iterations 2
Cbc0038I Pass  27: suminf.    0.19889 (4) obj. -2368.09 iterations 6
Cbc0038I Pass  28: suminf.    0.19889 (4) obj. -2368.09 iterations 0
Cbc0038I Pass  29: suminf.    0.60606 (2) obj. -2931.07 iterations 4
Cbc0038I Pass  30: suminf.    0.08078 (2) obj. -2368.09 iterations 3
Cbc0038I Pass  31: suminf.    0.48820 (4) obj. -2368.09 iterations 7
Cbc0038I Rounding solution of -2425.2 is better than previous of -2232

Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 117 rows 67 columns, reduced to 21 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -2658.73
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.93939 (2) obj. -3368.73 iterations 0
Cbc0038I Pass  32: suminf.    0.39815 (2) obj. -2658.73 iterations 1
Cbc0038I Pass  33: suminf.    1.72742 (8) obj. -2658.73 iterations 15
Cbc0038I Pass  34: suminf.    0.74200 (4) obj. -2658.73 iterations 12
Cbc0038I Pass  35: suminf.    0.70344 (3) obj. -2658.73 iterations 8
Cbc0038I Pass  36: suminf.    0.40282 (2) obj. -2658.73 iterations 3
Cbc0038I Pass  37: suminf.    0.57576 (2) obj. -2844.08 iterations 1
Cbc0038I Pass  38: suminf.    0.50369 (3) obj. -2658.73 iterations 14
Cbc0038I Pass  39: suminf.    0.34947 (2) obj. -2658.73 iterations 6
Cbc0038I Pass  40: suminf.    0.42424 (2) obj. -2738.87 iterations 1
Cbc0038I Pass  41: suminf.    0.31599 (5) obj. -2658.73 iterations 16
Cbc0038I Pass  42: suminf.    0.31599 (5) obj. -2658.73 iterations 1
Cbc0038I Pass  43: suminf.    0.63685 (4) obj. -2658.73 iterations 9
Cbc0038I Pass  44: suminf.    0.63685 (4) obj. -2658.73 iterations 1
Cbc0038I Pass  45: suminf.    0.39394 (2) obj. -2763.01 iterations 4
Cbc0038I Pass  46: suminf.    0.29665 (2) obj. -2658.73 iterations 1
Cbc0038I Pass  47: suminf.    0.85654 (5) obj. -2658.73 iterations 14
Cbc0038I Pass  48: suminf.    0.51883 (4) obj. -2658.73 iterations 8
Cbc0038I Pass  49: suminf.    0.70908 (4) obj. -2658.73 iterations 3
Cbc0038I Pass  50: suminf.    0.62221 (5) obj. -2658.73 iterations 6
Cbc0038I Pass  51: suminf.    0.93467 (6) obj. -2658.73 iterations 8
Cbc0038I Pass  52: suminf.    0.98270 (6) obj. -2658.73 iterations 8
Cbc0038I Pass  53: suminf.    0.77980 (5) obj. -2658.73 iterations 3
Cbc0038I Pass  54: suminf.    1.30104 (4) obj. -2658.73 iterations 3
Cbc0038I Pass  55: suminf.    1.30104 (4) obj. -2658.73 iterations 0
Cbc0038I Pass  56: suminf.    0.62301 (4) obj. -2658.73 iterations 6
Cbc0038I Pass  57: suminf.    0.62301 (4) obj. -2658.73 iterations 1
Cbc0038I Pass  58: suminf.    1.07824 (8) obj. -2658.73 iterations 14
Cbc0038I Pass  59: suminf.    0.55759 (5) obj. -2658.73 iterations 10
Cbc0038I Pass  60: suminf.    1.09787 (4) obj. -2658.73 iterations 4
Cbc0038I Rounding solution of -2426.91 is better than previous of -2425.2

Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 117 rows 67 columns, reduced to 20 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -2938.97
Cbc0038I Reduced cost fixing fixed 4 variables on major pass 4
Cbc0038I Pass  60: suminf.    0.93939 (2) obj. -3368.73 iterations 0
Cbc0038I Pass  61: suminf.    0.65963 (2) obj. -2938.97 iterations 1
Cbc0038I Pass  62: suminf.    1.69692 (5) obj. -2938.97 iterations 9
Cbc0038I Pass  63: suminf.    1.33728 (4) obj. -2938.97 iterations 9
Cbc0038I Pass  64: suminf.    1.65625 (4) obj. -2938.97 iterations 3
Cbc0038I Pass  65: suminf.    1.65625 (4) obj. -2938.97 iterations 0
Cbc0038I Pass  66: suminf.    1.33728 (4) obj. -2938.97 iterations 5
Cbc0038I Pass  67: suminf.    1.37466 (4) obj. -2938.97 iterations 8
Cbc0038I Pass  68: suminf.    1.00215 (3) obj. -2938.97 iterations 3
Cbc0038I Pass  69: suminf.    0.96297 (3) obj. -2938.97 iterations 2
Cbc0038I Pass  70: suminf.    0.96297 (3) obj. -2938.97 iterations 0
Cbc0038I Pass  71: suminf.    1.12000 (3) obj. -3024.27 iterations 3
Cbc0038I Pass  72: suminf.    1.92509 (6) obj. -2938.97 iterations 11
Cbc0038I Pass  73: suminf.    1.33401 (4) obj. -2938.97 iterations 9
Cbc0038I Pass  74: suminf.    1.64882 (4) obj. -2938.97 iterations 3
Cbc0038I Pass  75: suminf.    1.64882 (4) obj. -2938.97 iterations 0
Cbc0038I Pass  76: suminf.    1.33401 (4) obj. -2938.97 iterations 5
Cbc0038I Pass  77: suminf.    1.77973 (6) obj. -2938.97 iterations 10
Cbc0038I Pass  78: suminf.    1.33053 (4) obj. -2938.97 iterations 7
Cbc0038I Pass  79: suminf.    1.42926 (4) obj. -2938.97 iterations 3
Cbc0038I Pass  80: suminf.    1.42926 (4) obj. -2938.97 iterations 0
Cbc0038I Pass  81: suminf.    1.33053 (4) obj. -2938.97 iterations 5
Cbc0038I Pass  82: suminf.    1.26861 (5) obj. -2938.97 iterations 6
Cbc0038I Pass  83: suminf.    1.26861 (5) obj. -2938.97 iterations 2
Cbc0038I Pass  84: suminf.    1.20240 (4) obj. -2938.97 iterations 3
Cbc0038I Pass  85: suminf.    1.20240 (4) obj. -2938.97 iterations 0
Cbc0038I Pass  86: suminf.    1.23081 (4) obj. -2938.97 iterations 5
Cbc0038I Pass  87: suminf.    1.23081 (4) obj. -2938.97 iterations 1
Cbc0038I Pass  88: suminf.    1.70191 (5) obj. -2938.97 iterations 2
Cbc0038I Pass  89: suminf.    1.23081 (4) obj. -2938.97 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 117 rows 67 columns, reduced to 13 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -2426.91 - took 0.03 seconds
Cbc0012I Integer solution of -2358.1457 found by DiveCoefficient after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 117 rows 67 columns, reduced to 9 rows 8 columns
Cbc0012I Integer solution of -2441.9268 found by DiveCoefficient after 149 iterations and 0 nodes (0.18 seconds)
Cbc0031I 10 added rows had average density of 36.9
Cbc0013I At root node, 10 cuts changed objective from -3592.8694 to -2479.7068 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 39 row cuts average 2.4 elements, 7 column cuts (7 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 26 row cuts average 55.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 27.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2 row cuts average 39.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 34 row cuts average 47.9 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 8 row cuts average 64.9 elements, 0 column cuts (0 active)  in 0.067 seconds - new frequency is 1
Cbc0016I Integer solution of -2479.7066 found by strong branching after 149 iterations and 0 nodes (0.19 seconds)
Cbc0001I Search completed - best objective -2479.7066, took 149 iterations and 0 nodes (0.19 seconds)
Cbc0032I Strong branching done 2 times (28 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.19

