Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 493 (-34) rows, 255 (-9) columns and 1469 (-76) elements
Clp1000I sum of infeasibilities 6.90191e-05 - average 1.39998e-07, 111 fixed columns
Coin0506I Presolve 265 (-228) rows, 139 (-116) columns and 785 (-684) elements
Clp0029I End of values pass after 139 iterations
Clp0000I Optimal - objective value 164.73283
Clp0000I Optimal - objective value 164.73283
Coin0511I After Postsolve, objective 164.73283, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13367227 - largest nonzero change 0 ( 0%) - largest zero change 2.9697068e-05
Clp0000I Optimal - objective value 164.73283
Clp0000I Optimal - objective value 164.73283
Clp0000I Optimal - objective value 164.73283
Coin0511I After Postsolve, objective 164.73283, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 164.732826 - 0 iterations time 0.102, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 493 rows, 255 columns (254 integer (254 of which binary)) and 1469 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.377%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 81 integers unsatisfied sum - 9.95088
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -23.699 iterations 133
Cbc0038I Solution found of -23.699
Cbc0038I Relaxing continuous gives -23.699
Cbc0038I Rounding solution of -79.7261 is better than previous of -23.699

Cbc0038I Before mini branch and bound, 173 integers at bound fixed and 0 continuous
Cbc0038I Full problem 493 rows 255 columns, reduced to 152 rows 82 columns
Cbc0038I Mini branch and bound improved solution from -79.7261 to -101.02 (0.14 seconds)
Cbc0038I Round again with cutoff of -107.391
Cbc0038I Pass   2: suminf.    2.91622 (9) obj. -107.391 iterations 19
Cbc0038I Pass   3: suminf.    0.89226 (5) obj. -107.391 iterations 13
Cbc0038I Pass   4: suminf.    0.81842 (5) obj. -107.391 iterations 17
Cbc0038I Pass   5: suminf.    1.62512 (5) obj. -107.391 iterations 20
Cbc0038I Pass   6: suminf.    1.09585 (4) obj. -107.391 iterations 16
Cbc0038I Pass   7: suminf.    1.05571 (4) obj. -107.391 iterations 17
Cbc0038I Pass   8: suminf.    1.67582 (6) obj. -107.391 iterations 9
Cbc0038I Pass   9: suminf.    1.35751 (6) obj. -107.391 iterations 21
Cbc0038I Pass  10: suminf.    1.65536 (6) obj. -107.391 iterations 30
Cbc0038I Pass  11: suminf.    0.94379 (5) obj. -107.391 iterations 10
Cbc0038I Pass  12: suminf.    0.92745 (5) obj. -107.391 iterations 3
Cbc0038I Pass  13: suminf.    1.93453 (7) obj. -107.391 iterations 10
Cbc0038I Pass  14: suminf.    1.36169 (7) obj. -107.391 iterations 10
Cbc0038I Pass  15: suminf.    1.35751 (6) obj. -107.391 iterations 7
Cbc0038I Pass  16: suminf.    1.65536 (6) obj. -107.391 iterations 28
Cbc0038I Pass  17: suminf.    0.94379 (5) obj. -107.391 iterations 10
Cbc0038I Pass  18: suminf.    0.92745 (5) obj. -107.391 iterations 3
Cbc0038I Pass  19: suminf.    1.93453 (7) obj. -107.391 iterations 10
Cbc0038I Pass  20: suminf.    1.36169 (7) obj. -107.391 iterations 10
Cbc0038I Pass  21: suminf.    1.35751 (6) obj. -107.391 iterations 7
Cbc0038I Pass  22: suminf.    1.65536 (6) obj. -107.391 iterations 28
Cbc0038I Pass  23: suminf.    0.94379 (5) obj. -107.391 iterations 10
Cbc0038I Pass  24: suminf.    0.92745 (5) obj. -107.391 iterations 3
Cbc0038I Pass  25: suminf.    1.93453 (7) obj. -107.391 iterations 10
Cbc0038I Pass  26: suminf.    1.36169 (7) obj. -107.391 iterations 10
Cbc0038I Pass  27: suminf.    1.35751 (6) obj. -107.391 iterations 7
Cbc0038I Pass  28: suminf.    1.65536 (6) obj. -107.391 iterations 28
Cbc0038I Pass  29: suminf.    0.94379 (5) obj. -107.391 iterations 10
Cbc0038I Pass  30: suminf.    0.92745 (5) obj. -107.391 iterations 3
Cbc0038I Pass  31: suminf.    1.93453 (7) obj. -107.391 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 170 integers at bound fixed and 0 continuous
Cbc0038I Full problem 493 rows 255 columns, reduced to 157 rows 85 columns
Cbc0038I Mini branch and bound improved solution from -101.02 to -106.178 (0.29 seconds)
Cbc0038I Round again with cutoff of -118.86
Cbc0038I Pass  31: suminf.    2.97593 (11) obj. -118.86 iterations 3
Cbc0038I Pass  32: suminf.    2.00248 (8) obj. -118.86 iterations 25
Cbc0038I Pass  33: suminf.    1.93490 (9) obj. -118.86 iterations 3
Cbc0038I Pass  34: suminf.    2.91043 (8) obj. -118.86 iterations 34
Cbc0038I Pass  35: suminf.    2.30168 (8) obj. -118.86 iterations 4
Cbc0038I Pass  36: suminf.    3.08931 (8) obj. -118.86 iterations 18
Cbc0038I Pass  37: suminf.    2.54171 (9) obj. -118.86 iterations 10
Cbc0038I Pass  38: suminf.    2.54302 (12) obj. -118.86 iterations 29
Cbc0038I Pass  39: suminf.    2.33187 (8) obj. -118.86 iterations 12
Cbc0038I Pass  40: suminf.    2.31875 (9) obj. -118.86 iterations 8
Cbc0038I Pass  41: suminf.    2.98755 (9) obj. -118.86 iterations 31
Cbc0038I Pass  42: suminf.    2.76905 (11) obj. -118.86 iterations 11
Cbc0038I Pass  43: suminf.    3.23991 (12) obj. -118.86 iterations 26
Cbc0038I Pass  44: suminf.    2.73621 (9) obj. -118.86 iterations 15
Cbc0038I Pass  45: suminf.    2.60963 (9) obj. -118.86 iterations 11
Cbc0038I Pass  46: suminf.    3.20524 (9) obj. -118.86 iterations 28
Cbc0038I Pass  47: suminf.    2.76905 (11) obj. -118.86 iterations 10
Cbc0038I Pass  48: suminf.    3.23991 (12) obj. -118.86 iterations 27
Cbc0038I Pass  49: suminf.    2.73621 (9) obj. -118.86 iterations 15
Cbc0038I Pass  50: suminf.    2.60963 (9) obj. -118.86 iterations 11
Cbc0038I Pass  51: suminf.    3.20524 (9) obj. -118.86 iterations 25
Cbc0038I Pass  52: suminf.    2.76905 (11) obj. -118.86 iterations 10
Cbc0038I Pass  53: suminf.    3.23991 (12) obj. -118.86 iterations 26
Cbc0038I Pass  54: suminf.    2.73621 (9) obj. -118.86 iterations 15
Cbc0038I Pass  55: suminf.    2.60963 (9) obj. -118.86 iterations 11
Cbc0038I Pass  56: suminf.    3.20524 (9) obj. -118.86 iterations 23
Cbc0038I Pass  57: suminf.    2.76905 (11) obj. -118.86 iterations 10
Cbc0038I Pass  58: suminf.    3.23991 (12) obj. -118.86 iterations 24
Cbc0038I Pass  59: suminf.    2.73621 (9) obj. -118.86 iterations 15
Cbc0038I Pass  60: suminf.    2.60963 (9) obj. -118.86 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 167 integers at bound fixed and 0 continuous
Cbc0038I Full problem 493 rows 255 columns, reduced to 163 rows 88 columns
Cbc0038I Mini branch and bound did not improve solution (0.47 seconds)
Cbc0038I After 0.47 seconds - Feasibility pump exiting with objective of -106.178 - took 0.43 seconds
Cbc0012I Integer solution of -106.17786 found by feasibility pump after 0 iterations and 0 nodes (0.47 seconds)
Cbc0038I Full problem 493 rows 255 columns, reduced to 152 rows 82 columns
Cbc0031I 33 added rows had average density of 177.60606
Cbc0013I At root node, 33 cuts changed objective from -164.73283 to -150.96091 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 39224 row cuts average 3.3 elements, 1 column cuts (1 active)  in 1.096 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2963 row cuts average 252.7 elements, 0 column cuts (0 active)  in 1.011 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.211 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 32 row cuts average 4.6 elements, 0 column cuts (0 active)  in 1.161 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.071 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 210 row cuts average 247.0 elements, 0 column cuts (0 active)  in 0.468 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -106.17786 best solution, best possible -150.96091 (10.73 seconds)
Cbc0010I After 4 nodes, 5 on tree, -106.17786 best solution, best possible -150.96091 (11.52 seconds)
Cbc0010I After 18 nodes, 9 on tree, -106.17786 best solution, best possible -150.96091 (12.23 seconds)
Cbc0038I Full problem 493 rows 255 columns, reduced to 153 rows 82 columns
Cbc0010I After 60 nodes, 18 on tree, -106.17786 best solution, best possible -150.96091 (12.95 seconds)
Cbc0038I Full problem 493 rows 255 columns, reduced to 16 rows 15 columns
Cbc0010I After 139 nodes, 13 on tree, -106.17786 best solution, best possible -150.96091 (13.66 seconds)
Cbc0001I Search completed - best objective -106.17786, took 22758 iterations and 164 nodes (13.83 seconds)
Cbc0032I Strong branching done 1578 times (43387 iterations), fathomed 34 nodes and fixed 120 variables
Cbc0035I Maximum depth 32, 1103 variables fixed on reduced cost
Total time (CPU seconds):       13.41   (Wallclock seconds):       13.93

