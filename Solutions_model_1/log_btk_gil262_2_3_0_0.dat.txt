Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 500 (-27) rows, 259 (-5) columns and 1487 (-58) elements
Clp1000I sum of infeasibilities 3.10839e-05 - average 6.21679e-08, 143 fixed columns
Coin0506I Presolve 207 (-293) rows, 113 (-146) columns and 618 (-869) elements
Clp0029I End of values pass after 113 iterations
Clp0014I Perturbing problem by 0.001% of 0.17323407 - largest nonzero change 0 ( 0%) - largest zero change 2.9365872e-05
Clp0000I Optimal - objective value 212.67022
Clp0000I Optimal - objective value 212.67022
Coin0511I After Postsolve, objective 212.67022, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13511577 - largest nonzero change 0 ( 0%) - largest zero change 2.9790845e-05
Clp0000I Optimal - objective value 212.67022
Clp0000I Optimal - objective value 212.67022
Clp0000I Optimal - objective value 212.67022
Coin0511I After Postsolve, objective 212.67022, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 212.6702179 - 0 iterations time 0.042, Presolve 0.00, Idiot 0.04

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 500 rows, 259 columns (258 integer (258 of which binary)) and 1487 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 58 integers unsatisfied sum - 8.24358
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -68.3871 iterations 117
Cbc0038I Solution found of -68.3871
Cbc0038I Relaxing continuous gives -68.3871
Cbc0038I Rounding solution of -131.068 is better than previous of -68.3871

Cbc0038I Before mini branch and bound, 200 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 103 rows 59 columns
Cbc0038I Mini branch and bound improved solution from -131.068 to -134.187 (0.05 seconds)
Cbc0038I Round again with cutoff of -142.035
Cbc0038I Pass   2: suminf.    1.29186 (5) obj. -142.035 iterations 26
Cbc0038I Pass   3: suminf.    1.29186 (5) obj. -142.035 iterations 0
Cbc0038I Pass   4: suminf.    1.85230 (5) obj. -142.035 iterations 21
Cbc0038I Pass   5: suminf.    1.29186 (5) obj. -142.035 iterations 20
Cbc0038I Pass   6: suminf.    3.33062 (12) obj. -142.035 iterations 57
Cbc0038I Pass   7: suminf.    1.84386 (9) obj. -142.035 iterations 34
Cbc0038I Pass   8: suminf.    1.34891 (4) obj. -142.035 iterations 52
Cbc0038I Pass   9: suminf.    0.78490 (3) obj. -142.035 iterations 3
Cbc0038I Pass  10: suminf.    0.58507 (3) obj. -142.035 iterations 4
Cbc0038I Pass  11: suminf.    0.61312 (3) obj. -142.035 iterations 3
Cbc0038I Pass  12: suminf.    0.61312 (3) obj. -142.035 iterations 0
Cbc0038I Pass  13: suminf.    0.65169 (2) obj. -142.035 iterations 4
Cbc0038I Pass  14: suminf.    0.37148 (2) obj. -142.035 iterations 2
Cbc0038I Pass  15: suminf.    0.72992 (3) obj. -142.035 iterations 17
Cbc0038I Pass  16: suminf.    0.08682 (1) obj. -142.035 iterations 6
Cbc0038I Pass  17: suminf.    0.21000 (1) obj. -142.035 iterations 2
Cbc0038I Pass  18: suminf.    2.82673 (11) obj. -142.035 iterations 35
Cbc0038I Pass  19: suminf.    1.27603 (6) obj. -142.035 iterations 51
Cbc0038I Pass  20: suminf.    1.62362 (5) obj. -142.035 iterations 10
Cbc0038I Pass  21: suminf.    1.07489 (4) obj. -142.035 iterations 11
Cbc0038I Pass  22: suminf.    0.22969 (2) obj. -142.035 iterations 5
Cbc0038I Pass  23: suminf.    0.06311 (2) obj. -142.035 iterations 4
Cbc0038I Pass  24: suminf.    2.95165 (11) obj. -142.035 iterations 47
Cbc0038I Pass  25: suminf.    1.28783 (6) obj. -142.035 iterations 49
Cbc0038I Pass  26: suminf.    1.23534 (4) obj. -142.035 iterations 31
Cbc0038I Pass  27: suminf.    0.49865 (3) obj. -142.035 iterations 11
Cbc0038I Pass  28: suminf.    0.78939 (3) obj. -142.035 iterations 4
Cbc0038I Pass  29: suminf.    6.82592 (18) obj. -142.035 iterations 49
Cbc0038I Pass  30: suminf.    3.51954 (16) obj. -142.035 iterations 52
Cbc0038I Pass  31: suminf.    3.33768 (18) obj. -142.035 iterations 7
Cbc0038I Rounding solution of -139.51 is better than previous of -134.187

Cbc0038I Before mini branch and bound, 176 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 145 rows 81 columns
Cbc0038I Mini branch and bound improved solution from -139.51 to -152.026 (0.13 seconds)
Cbc0038I Round again with cutoff of -164.155
Cbc0038I Pass  31: suminf.    1.93089 (8) obj. -164.155 iterations 5
Cbc0038I Pass  32: suminf.    1.10335 (5) obj. -164.155 iterations 64
Cbc0038I Pass  33: suminf.    1.30151 (5) obj. -164.155 iterations 21
Cbc0038I Pass  34: suminf.    3.11180 (11) obj. -164.155 iterations 54
Cbc0038I Pass  35: suminf.    1.53924 (6) obj. -164.155 iterations 43
Cbc0038I Pass  36: suminf.    1.14016 (4) obj. -164.155 iterations 16
Cbc0038I Pass  37: suminf.    1.33867 (7) obj. -164.155 iterations 19
Cbc0038I Pass  38: suminf.    1.10335 (5) obj. -164.155 iterations 19
Cbc0038I Pass  39: suminf.    1.10335 (5) obj. -164.155 iterations 0
Cbc0038I Pass  40: suminf.    1.30151 (5) obj. -164.155 iterations 20
Cbc0038I Pass  41: suminf.    4.42945 (20) obj. -164.155 iterations 66
Cbc0038I Pass  42: suminf.    2.38277 (8) obj. -164.155 iterations 91
Cbc0038I Pass  43: suminf.    0.72437 (4) obj. -164.155 iterations 28
Cbc0038I Pass  44: suminf.    0.89825 (6) obj. -164.155 iterations 23
Cbc0038I Pass  45: suminf.    0.89454 (7) obj. -164.155 iterations 9
Cbc0038I Pass  46: suminf.    2.46575 (9) obj. -164.155 iterations 28
Cbc0038I Pass  47: suminf.    0.94593 (5) obj. -164.155 iterations 27
Cbc0038I Pass  48: suminf.    2.35739 (9) obj. -164.155 iterations 106
Cbc0038I Pass  49: suminf.    1.45418 (9) obj. -164.155 iterations 45
Cbc0038I Pass  50: suminf.    1.71100 (9) obj. -164.155 iterations 28
Cbc0038I Pass  51: suminf.    6.59462 (29) obj. -164.155 iterations 64
Cbc0038I Pass  52: suminf.    2.16205 (10) obj. -164.155 iterations 59
Cbc0038I Pass  53: suminf.    2.16205 (10) obj. -164.155 iterations 0
Cbc0038I Pass  54: suminf.    2.31993 (11) obj. -164.155 iterations 26
Cbc0038I Pass  55: suminf.    2.19386 (10) obj. -164.155 iterations 23
Cbc0038I Pass  56: suminf.    2.56570 (10) obj. -164.155 iterations 27
Cbc0038I Pass  57: suminf.    6.84580 (24) obj. -164.155 iterations 73
Cbc0038I Pass  58: suminf.    3.56988 (16) obj. -164.155 iterations 59
Cbc0038I Pass  59: suminf.    3.17287 (14) obj. -164.155 iterations 10
Cbc0038I Pass  60: suminf.    3.41654 (11) obj. -164.155 iterations 41
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 168 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 163 rows 90 columns
Cbc0038I Mini branch and bound did not improve solution (0.23 seconds)
Cbc0038I After 0.23 seconds - Feasibility pump exiting with objective of -152.026 - took 0.21 seconds
Cbc0012I Integer solution of -152.02612 found by feasibility pump after 0 iterations and 0 nodes (0.23 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 105 rows 61 columns
Cbc0031I 26 added rows had average density of 121.53846
Cbc0013I At root node, 26 cuts changed objective from -212.67022 to -191.45824 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 22209 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.414 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2080 row cuts average 256.6 elements, 0 column cuts (0 active)  in 0.337 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.087 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.286 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 140 row cuts average 249.3 elements, 0 column cuts (0 active)  in 0.176 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -152.02612 best solution, best possible -191.45824 (3.18 seconds)
Cbc0010I After 36 nodes, 12 on tree, -152.02612 best solution, best possible -191.45824 (3.90 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 103 rows 60 columns
Cbc0038I Full problem 500 rows 259 columns, reduced to 71 rows 45 columns
Cbc0001I Search completed - best objective -152.02612, took 18194 iterations and 174 nodes (4.54 seconds)
Cbc0032I Strong branching done 1864 times (46462 iterations), fathomed 16 nodes and fixed 21 variables
Cbc0035I Maximum depth 64, 878 variables fixed on reduced cost
Total time (CPU seconds):       4.45   (Wallclock seconds):       4.58

