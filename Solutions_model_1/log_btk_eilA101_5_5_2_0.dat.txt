Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 188 (-17) rows, 101 (-2) columns and 570 (-33) elements
Clp1000I sum of infeasibilities 2.61529e-05 - average 1.39111e-07, 7 fixed columns
Coin0506I Presolve 162 (-26) rows, 94 (-7) columns and 504 (-66) elements
Clp0029I End of values pass after 94 iterations
Clp0014I Perturbing problem by 0.001% of 0.26851956 - largest nonzero change 0 ( 0%) - largest zero change 2.6406164e-05
Clp0000I Optimal - objective value 32.729934
Clp0000I Optimal - objective value 32.729934
Coin0511I After Postsolve, objective 32.729934, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 32.729934
Clp0000I Optimal - objective value 32.729934
Clp0000I Optimal - objective value 32.729934
Coin0511I After Postsolve, objective 32.729934, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 32.72993437 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 188 rows, 101 columns (100 integer (100 of which binary)) and 570 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.907%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 69 integers unsatisfied sum - 13.736
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 7.10053 iterations 101
Cbc0038I Solution found of 7.10053
Cbc0038I Relaxing continuous gives 7.10053
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 117 rows 70 columns - 0 fixed gives 117, 70 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 117 rows 70 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 3.11739
Cbc0038I Pass   2: suminf.    0.39110 (4) obj. 3.11739 iterations 8
Cbc0038I Pass   3: suminf.    0.69017 (3) obj. 3.11739 iterations 9
Cbc0038I Pass   4: suminf.    0.16092 (1) obj. 3.11739 iterations 9
Cbc0038I Pass   5: suminf.    0.00000 (0) obj. 3.11739 iterations 6
Cbc0038I Solution found of 3.11739
Cbc0038I Relaxing continuous gives -1.66653
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 71 columns - 1 fixed gives 125, 70 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 125 rows 70 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -7.87929
Cbc0038I Pass   6: suminf.    3.03214 (20) obj. -7.87929 iterations 14
Cbc0038I Pass   7: suminf.    2.17633 (8) obj. -7.87929 iterations 25
Cbc0038I Pass   8: suminf.    2.17633 (8) obj. -7.87929 iterations 0
Cbc0038I Pass   9: suminf.    3.57299 (9) obj. -7.87929 iterations 7
Cbc0038I Pass  10: suminf.    2.54755 (8) obj. -7.87929 iterations 5
Cbc0038I Pass  11: suminf.    2.54755 (8) obj. -7.87929 iterations 0
Cbc0038I Pass  12: suminf.    3.38707 (9) obj. -7.87929 iterations 8
Cbc0038I Pass  13: suminf.    3.11923 (8) obj. -7.87929 iterations 2
Cbc0038I Pass  14: suminf.    2.41729 (8) obj. -7.87929 iterations 5
Cbc0038I Pass  15: suminf.    2.38488 (10) obj. -7.87929 iterations 2
Cbc0038I Pass  16: suminf.    4.15669 (16) obj. -7.87929 iterations 10
Cbc0038I Pass  17: suminf.    3.12982 (19) obj. -7.87929 iterations 6
Cbc0038I Pass  18: suminf.    2.82535 (24) obj. -7.87929 iterations 7
Cbc0038I Pass  19: suminf.    2.35132 (8) obj. -7.87929 iterations 30
Cbc0038I Pass  20: suminf.    2.14893 (8) obj. -7.87929 iterations 2
Cbc0038I Pass  21: suminf.    3.16038 (9) obj. -7.87929 iterations 10
Cbc0038I Pass  22: suminf.    1.95804 (7) obj. -7.87929 iterations 5
Cbc0038I Pass  23: suminf.    1.77160 (7) obj. -7.87929 iterations 1
Cbc0038I Pass  24: suminf.    2.75235 (8) obj. -7.87929 iterations 11
Cbc0038I Pass  25: suminf.    2.36488 (7) obj. -7.87929 iterations 1
Cbc0038I Pass  26: suminf.    2.29131 (6) obj. -7.87929 iterations 4
Cbc0038I Pass  27: suminf.    2.32769 (8) obj. -7.87929 iterations 7
Cbc0038I Pass  28: suminf.    1.79477 (7) obj. -7.87929 iterations 2
Cbc0038I Pass  29: suminf.    1.79477 (7) obj. -7.87929 iterations 1
Cbc0038I Pass  30: suminf.    2.46020 (8) obj. -7.87929 iterations 10
Cbc0038I Pass  31: suminf.    2.30290 (7) obj. -7.87929 iterations 1
Cbc0038I Pass  32: suminf.    1.99965 (6) obj. -7.87929 iterations 1
Cbc0038I Pass  33: suminf.    2.00157 (7) obj. -7.87929 iterations 3
Cbc0038I Pass  34: suminf.    2.27156 (7) obj. -7.87929 iterations 11
Cbc0038I Pass  35: suminf.    2.10474 (6) obj. -7.87929 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 133 rows 73 columns - 0 fixed gives 133, 73 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 133 rows 73 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -1.66653 - took 0.02 seconds
Cbc0012I Integer solution of -1.66653 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 71 columns - 1 fixed gives 125, 70 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 125 rows 70 columns - too large
Cbc0031I 37 added rows had average density of 56.486486
Cbc0013I At root node, 37 cuts changed objective from -32.729934 to -25.219595 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 26282 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.152 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3443 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.178 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 19 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.187 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -1.66653 best solution, best possible -25.219595 (1.84 seconds)
Cbc0012I Integer solution of -2.097994 found by rounding after 14106 iterations and 31 nodes (2.17 seconds)
Cbc0012I Integer solution of -2.400894 found by rounding after 14214 iterations and 36 nodes (2.18 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 119 rows 65 columns - 1 fixed gives 115, 64 - ok now
Cbc0038I Full problem 188 rows 101 columns, reduced to 115 rows 64 columns
Cbc0038I Full problem 188 rows 101 columns, reduced to 4 rows 4 columns
Cbc0001I Search completed - best objective -2.400894000000001, took 17837 iterations and 116 nodes (2.50 seconds)
Cbc0032I Strong branching done 1282 times (27794 iterations), fathomed 15 nodes and fixed 65 variables
Cbc0035I Maximum depth 37, 312 variables fixed on reduced cost
Total time (CPU seconds):       2.45   (Wallclock seconds):       2.52

