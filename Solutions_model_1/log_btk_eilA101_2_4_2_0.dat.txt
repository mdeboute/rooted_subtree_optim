Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 185 (-20) rows, 99 (-4) columns and 560 (-43) elements
Clp1000I sum of infeasibilities 6.2232e-05 - average 3.36389e-07, 7 fixed columns
Coin0506I Presolve 170 (-15) rows, 91 (-8) columns and 514 (-46) elements
Clp0029I End of values pass after 91 iterations
Clp0014I Perturbing problem by 0.001% of 0.25564297 - largest nonzero change 0 ( 0%) - largest zero change 2.9994168e-05
Clp0000I Optimal - objective value 38.067338
Clp0000I Optimal - objective value 38.067338
Coin0511I After Postsolve, objective 38.067338, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 38.067338
Clp0000I Optimal - objective value 38.067338
Clp0000I Optimal - objective value 38.067338
Coin0511I After Postsolve, objective 38.067338, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 38.06733771 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 185 rows, 99 columns (98 integer (98 of which binary)) and 560 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.929%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 63 integers unsatisfied sum - 14.685
Cbc0038I Solution found of 7.92286
Cbc0038I Relaxing continuous gives -1.14693
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 99 columns, reduced to 119 rows 64 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -4.83906
Cbc0038I Pass   1: suminf.    1.18632 (47) obj. -4.83906 iterations 66
Cbc0038I Pass   2: suminf.    1.71026 (4) obj. -6.32052 iterations 53
Cbc0038I Pass   3: suminf.    1.29394 (6) obj. -8.12912 iterations 3
Cbc0038I Pass   4: suminf.    1.13504 (3) obj. -4.83906 iterations 11
Cbc0038I Pass   5: suminf.    1.07533 (3) obj. -4.83906 iterations 6
Cbc0038I Pass   6: suminf.    0.92059 (5) obj. -4.83906 iterations 1
Cbc0038I Pass   7: suminf.    0.94894 (3) obj. -4.83906 iterations 6
Cbc0038I Pass   8: suminf.    0.42812 (3) obj. -4.83906 iterations 3
Cbc0038I Pass   9: suminf.    0.61216 (2) obj. -4.83906 iterations 4
Cbc0038I Pass  10: suminf.    0.61010 (2) obj. -4.83906 iterations 1
Cbc0038I Pass  11: suminf.    0.47132 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  12: suminf.    0.47132 (3) obj. -4.83906 iterations 0
Cbc0038I Pass  13: suminf.    1.18557 (3) obj. -4.83906 iterations 5
Cbc0038I Pass  14: suminf.    0.85230 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  15: suminf.    0.61010 (2) obj. -4.83906 iterations 2
Cbc0038I Pass  16: suminf.    0.47132 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  17: suminf.    0.47132 (3) obj. -4.83906 iterations 0
Cbc0038I Pass  18: suminf.    1.18557 (3) obj. -4.83906 iterations 5
Cbc0038I Pass  19: suminf.    0.85230 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  20: suminf.    0.61010 (2) obj. -4.83906 iterations 2
Cbc0038I Pass  21: suminf.    0.47132 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  22: suminf.    0.47132 (3) obj. -4.83906 iterations 0
Cbc0038I Pass  23: suminf.    1.18557 (3) obj. -4.83906 iterations 5
Cbc0038I Pass  24: suminf.    0.85230 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  25: suminf.    0.61010 (2) obj. -4.83906 iterations 2
Cbc0038I Pass  26: suminf.    0.47132 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  27: suminf.    0.47132 (3) obj. -4.83906 iterations 0
Cbc0038I Pass  28: suminf.    1.18557 (3) obj. -4.83906 iterations 5
Cbc0038I Pass  29: suminf.    0.85230 (3) obj. -4.83906 iterations 2
Cbc0038I Pass  30: suminf.    0.61010 (2) obj. -4.83906 iterations 2
Cbc0038I Rounding solution of -11.7219 is better than previous of -1.14693

Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 99 columns, reduced to 138 rows 74 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -16.9911
Cbc0038I Pass  30: suminf.    4.94471 (47) obj. -16.9911 iterations 0
Cbc0038I Pass  31: suminf.    4.35212 (32) obj. -16.9911 iterations 27
Cbc0038I Pass  32: suminf.    4.35299 (23) obj. -16.9911 iterations 8
Cbc0038I Pass  33: suminf.    3.07460 (11) obj. -16.9911 iterations 26
Cbc0038I Pass  34: suminf.    2.62722 (10) obj. -16.9911 iterations 7
Cbc0038I Pass  35: suminf.    2.33335 (9) obj. -16.9911 iterations 16
Cbc0038I Pass  36: suminf.    2.33335 (9) obj. -16.9911 iterations 0
Cbc0038I Pass  37: suminf.    2.35383 (7) obj. -16.9911 iterations 11
Cbc0038I Pass  38: suminf.    1.67865 (6) obj. -16.9911 iterations 3
Cbc0038I Pass  39: suminf.    1.68784 (6) obj. -16.9911 iterations 10
Cbc0038I Pass  40: suminf.    1.68784 (6) obj. -16.9911 iterations 0
Cbc0038I Pass  41: suminf.    1.78650 (7) obj. -16.9911 iterations 15
Cbc0038I Pass  42: suminf.    1.78276 (7) obj. -16.9911 iterations 4
Cbc0038I Pass  43: suminf.    1.87731 (5) obj. -16.9911 iterations 8
Cbc0038I Pass  44: suminf.    1.86016 (5) obj. -16.9911 iterations 3
Cbc0038I Pass  45: suminf.    1.78287 (5) obj. -16.9911 iterations 3
Cbc0038I Pass  46: suminf.    1.78287 (5) obj. -16.9911 iterations 0
Cbc0038I Pass  47: suminf.    1.46799 (5) obj. -16.9911 iterations 4
Cbc0038I Pass  48: suminf.    1.33688 (6) obj. -16.9911 iterations 4
Cbc0038I Pass  49: suminf.    1.79418 (6) obj. -16.9911 iterations 4
Cbc0038I Pass  50: suminf.    1.78276 (7) obj. -16.9911 iterations 3
Cbc0038I Pass  51: suminf.    1.87731 (5) obj. -16.9911 iterations 8
Cbc0038I Pass  52: suminf.    1.86016 (5) obj. -16.9911 iterations 3
Cbc0038I Pass  53: suminf.    1.78287 (5) obj. -16.9911 iterations 3
Cbc0038I Pass  54: suminf.    1.78287 (5) obj. -16.9911 iterations 0
Cbc0038I Pass  55: suminf.    1.46799 (5) obj. -16.9911 iterations 4
Cbc0038I Pass  56: suminf.    1.33688 (6) obj. -16.9911 iterations 4
Cbc0038I Pass  57: suminf.    1.79418 (6) obj. -16.9911 iterations 4
Cbc0038I Pass  58: suminf.    1.78276 (7) obj. -16.9911 iterations 3
Cbc0038I Pass  59: suminf.    1.87731 (5) obj. -16.9911 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 99 columns, reduced to 138 rows 74 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -11.7219 - took 0.03 seconds
Cbc0012I Integer solution of -11.721894 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 185 rows 99 columns, reduced to 123 rows 67 columns - 5 fixed gives 96, 62 - ok now
Cbc0038I Full problem 185 rows 99 columns, reduced to 96 rows 62 columns
Cbc0012I Integer solution of -12.607169 found by RINS after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 34 added rows had average density of 46.470588
Cbc0013I At root node, 34 cuts changed objective from -38.067338 to -30.877491 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 23796 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.140 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3097 row cuts average 99.0 elements, 0 column cuts (0 active)  in 0.152 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.133 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -12.607169 best solution, best possible -30.877491 (1.59 seconds)
Cbc0038I Full problem 185 rows 99 columns, reduced to 12 rows 16 columns
Cbc0016I Integer solution of -13.266125 found by strong branching after 14292 iterations and 46 nodes (1.92 seconds)
Cbc0004I Integer solution of -13.304465 found after 14412 iterations and 54 nodes (1.93 seconds)
Cbc0038I Full problem 185 rows 99 columns, reduced to 36 rows 27 columns
Cbc0012I Integer solution of -13.70687 found by RINS after 15212 iterations and 91 nodes (2.05 seconds)
Cbc0012I Integer solution of -13.893829 found by rounding after 17172 iterations and 160 nodes (2.21 seconds)
Cbc0001I Search completed - best objective -13.893829, took 18569 iterations and 186 nodes (2.27 seconds)
Cbc0032I Strong branching done 1780 times (31511 iterations), fathomed 19 nodes and fixed 84 variables
Cbc0035I Maximum depth 41, 354 variables fixed on reduced cost
Total time (CPU seconds):       2.23   (Wallclock seconds):       2.29

