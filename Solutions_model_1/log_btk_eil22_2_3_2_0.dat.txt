Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 31 (-16) rows, 20 (-4) columns and 94 (-35) elements
Clp1000I sum of infeasibilities 7.57979e-06 - average 2.44509e-07, 2 fixed columns
Coin0506I Presolve 26 (-5) rows, 17 (-3) columns and 78 (-16) elements
Clp0029I End of values pass after 17 iterations
Clp0000I Optimal - objective value 66.933904
Clp0000I Optimal - objective value 66.933904
Coin0511I After Postsolve, objective 66.933904, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 66.933904
Clp0000I Optimal - objective value 66.933904
Clp0000I Optimal - objective value 66.933904
Coin0511I After Postsolve, objective 66.933904, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 66.9339035 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 31 rows, 20 columns (19 integer (19 of which binary)) and 94 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.537%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 12 integers unsatisfied sum - 4.25069
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -2.58907 iterations 15
Cbc0038I Solution found of -2.58907
Cbc0038I Relaxing continuous gives -2.58907
Cbc0038I Rounding solution of -22.4124 is better than previous of -2.58907

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 20 columns, reduced to 20 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -22.4124 to -29.0783 (0.01 seconds)
Cbc0038I Round again with cutoff of -32.8639
Cbc0038I Pass   2: suminf.    1.33138 (5) obj. -32.8639 iterations 7
Cbc0038I Pass   3: suminf.    1.56163 (5) obj. -32.8639 iterations 4
Cbc0038I Pass   4: suminf.    1.36167 (5) obj. -32.8639 iterations 3
Cbc0038I Pass   5: suminf.    0.69279 (3) obj. -32.8639 iterations 7
Cbc0038I Pass   6: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I Pass   7: suminf.    0.94338 (3) obj. -32.8639 iterations 1
Cbc0038I Pass   8: suminf.    0.70966 (3) obj. -32.8639 iterations 4
Cbc0038I Pass   9: suminf.    0.54977 (2) obj. -32.8639 iterations 1
Cbc0038I Pass  10: suminf.    0.69279 (3) obj. -32.8639 iterations 2
Cbc0038I Pass  11: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I Pass  12: suminf.    0.94338 (3) obj. -32.8639 iterations 1
Cbc0038I Pass  13: suminf.    0.70966 (3) obj. -32.8639 iterations 4
Cbc0038I Pass  14: suminf.    0.54977 (2) obj. -32.8639 iterations 1
Cbc0038I Pass  15: suminf.    0.69279 (3) obj. -32.8639 iterations 2
Cbc0038I Pass  16: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I Pass  17: suminf.    0.94338 (3) obj. -32.8639 iterations 1
Cbc0038I Pass  18: suminf.    0.70966 (3) obj. -32.8639 iterations 4
Cbc0038I Pass  19: suminf.    0.54977 (2) obj. -32.8639 iterations 1
Cbc0038I Pass  20: suminf.    0.69279 (3) obj. -32.8639 iterations 2
Cbc0038I Pass  21: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I Pass  22: suminf.    0.94338 (3) obj. -32.8639 iterations 1
Cbc0038I Pass  23: suminf.    0.70966 (3) obj. -32.8639 iterations 4
Cbc0038I Pass  24: suminf.    0.54977 (2) obj. -32.8639 iterations 1
Cbc0038I Pass  25: suminf.    0.69279 (3) obj. -32.8639 iterations 2
Cbc0038I Pass  26: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I Pass  27: suminf.    0.94338 (3) obj. -32.8639 iterations 1
Cbc0038I Pass  28: suminf.    0.70966 (3) obj. -32.8639 iterations 4
Cbc0038I Pass  29: suminf.    0.54977 (2) obj. -32.8639 iterations 1
Cbc0038I Pass  30: suminf.    0.69279 (3) obj. -32.8639 iterations 2
Cbc0038I Pass  31: suminf.    1.03403 (3) obj. -32.8639 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 20 columns, reduced to 24 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -29.0783 - took 0.01 seconds
Cbc0012I Integer solution of -29.07829 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 31 rows 20 columns, reduced to 20 rows 13 columns
Cbc0031I 13 added rows had average density of 14
Cbc0013I At root node, 13 cuts changed objective from -66.933904 to -46.555219 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1233 row cuts average 3.3 elements, 2 column cuts (2 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 433 row cuts average 17.8 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 56 row cuts average 7.3 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 104 row cuts average 16.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -29.07829000000001, took 1856 iterations and 6 nodes (0.16 seconds)
Cbc0032I Strong branching done 58 times (500 iterations), fathomed 0 nodes and fixed 6 variables
Cbc0035I Maximum depth 2, 16 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16

