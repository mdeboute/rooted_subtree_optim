Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 127 (-28) rows, 75 (-3) columns and 396 (-57) elements
Clp1000I sum of infeasibilities 4.79146e-05 - average 3.7728e-07, 7 fixed columns
Coin0506I Presolve 113 (-14) rows, 67 (-8) columns and 352 (-44) elements
Clp0029I End of values pass after 67 iterations
Clp0014I Perturbing problem by 0.001% of 2.6328177 - largest nonzero change 0 ( 0%) - largest zero change 2.623149e-05
Clp0000I Optimal - objective value 33.52793
Clp0000I Optimal - objective value 33.52793
Coin0511I After Postsolve, objective 33.52793, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 33.52793
Clp0000I Optimal - objective value 33.52793
Clp0000I Optimal - objective value 33.52793
Coin0511I After Postsolve, objective 33.52793, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 33.52792956 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 127 rows, 75 columns (74 integer (74 of which binary)) and 396 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.104%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 40 integers unsatisfied sum - 10.6251
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 15.8153 iterations 52
Cbc0038I Solution found of 15.8153
Cbc0038I Relaxing continuous gives 15.8153
Cbc0038I Rounding solution of -2.21233 is better than previous of 15.8153

Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 75 columns, reduced to 65 rows 41 columns
Cbc0038I Mini branch and bound improved solution from -2.21233 to -4.35974 (0.08 seconds)
Cbc0038I Round again with cutoff of -7.27665
Cbc0038I Pass   2: suminf.    2.77954 (10) obj. -7.27665 iterations 16
Cbc0038I Pass   3: suminf.    2.57436 (9) obj. -7.27665 iterations 2
Cbc0038I Pass   4: suminf.    0.58523 (4) obj. -7.27665 iterations 10
Cbc0038I Pass   5: suminf.    0.58523 (4) obj. -7.27665 iterations 1
Cbc0038I Pass   6: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Pass   7: suminf.    1.70027 (6) obj. -7.27665 iterations 0
Cbc0038I Pass   8: suminf.    2.08221 (5) obj. -7.27665 iterations 8
Cbc0038I Pass   9: suminf.    0.95930 (5) obj. -7.27665 iterations 6
Cbc0038I Pass  10: suminf.    0.58523 (4) obj. -7.27665 iterations 5
Cbc0038I Pass  11: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Pass  12: suminf.    1.70027 (6) obj. -7.27665 iterations 0
Cbc0038I Pass  13: suminf.    2.08221 (5) obj. -7.27665 iterations 8
Cbc0038I Pass  14: suminf.    0.95930 (5) obj. -7.27665 iterations 6
Cbc0038I Pass  15: suminf.    0.58523 (4) obj. -7.27665 iterations 5
Cbc0038I Pass  16: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Pass  17: suminf.    1.70027 (6) obj. -7.27665 iterations 0
Cbc0038I Pass  18: suminf.    2.08221 (5) obj. -7.27665 iterations 8
Cbc0038I Pass  19: suminf.    0.95930 (5) obj. -7.27665 iterations 6
Cbc0038I Pass  20: suminf.    0.58523 (4) obj. -7.27665 iterations 5
Cbc0038I Pass  21: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Pass  22: suminf.    1.70027 (6) obj. -7.27665 iterations 0
Cbc0038I Pass  23: suminf.    2.08221 (5) obj. -7.27665 iterations 8
Cbc0038I Pass  24: suminf.    0.95930 (5) obj. -7.27665 iterations 6
Cbc0038I Pass  25: suminf.    0.58523 (4) obj. -7.27665 iterations 5
Cbc0038I Pass  26: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Pass  27: suminf.    1.70027 (6) obj. -7.27665 iterations 0
Cbc0038I Pass  28: suminf.    2.08221 (5) obj. -7.27665 iterations 8
Cbc0038I Pass  29: suminf.    0.95930 (5) obj. -7.27665 iterations 6
Cbc0038I Pass  30: suminf.    0.58523 (4) obj. -7.27665 iterations 5
Cbc0038I Pass  31: suminf.    1.70027 (6) obj. -7.27665 iterations 8
Cbc0038I Rounding solution of -5.45252 is better than previous of -4.35974

Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 75 columns, reduced to 65 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I Round again with cutoff of -12.5269
Cbc0038I Pass  31: suminf.    3.88762 (15) obj. -12.5269 iterations 3
Cbc0038I Pass  32: suminf.    3.70281 (14) obj. -12.5269 iterations 1
Cbc0038I Pass  33: suminf.    1.20620 (7) obj. -12.5269 iterations 9
Cbc0038I Pass  34: suminf.    1.20620 (7) obj. -12.5269 iterations 1
Cbc0038I Pass  35: suminf.    2.04211 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  36: suminf.    1.85400 (5) obj. -12.5269 iterations 1
Cbc0038I Pass  37: suminf.    1.71254 (7) obj. -12.5269 iterations 4
Cbc0038I Pass  38: suminf.    1.71254 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  39: suminf.    2.03709 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  40: suminf.    1.20620 (7) obj. -12.5269 iterations 3
Cbc0038I Pass  41: suminf.    1.20620 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  42: suminf.    2.04211 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  43: suminf.    1.85400 (5) obj. -12.5269 iterations 1
Cbc0038I Pass  44: suminf.    1.71254 (7) obj. -12.5269 iterations 4
Cbc0038I Pass  45: suminf.    1.71254 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  46: suminf.    2.03709 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  47: suminf.    1.20620 (7) obj. -12.5269 iterations 3
Cbc0038I Pass  48: suminf.    1.20620 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  49: suminf.    2.04211 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  50: suminf.    1.85400 (5) obj. -12.5269 iterations 1
Cbc0038I Pass  51: suminf.    1.71254 (7) obj. -12.5269 iterations 4
Cbc0038I Pass  52: suminf.    1.71254 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  53: suminf.    2.03709 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  54: suminf.    1.20620 (7) obj. -12.5269 iterations 3
Cbc0038I Pass  55: suminf.    1.20620 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  56: suminf.    2.04211 (6) obj. -12.5269 iterations 6
Cbc0038I Pass  57: suminf.    1.85400 (5) obj. -12.5269 iterations 1
Cbc0038I Pass  58: suminf.    1.71254 (7) obj. -12.5269 iterations 4
Cbc0038I Pass  59: suminf.    1.71254 (7) obj. -12.5269 iterations 0
Cbc0038I Pass  60: suminf.    2.03709 (6) obj. -12.5269 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 75 columns, reduced to 65 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.24 seconds)
Cbc0038I After 0.24 seconds - Feasibility pump exiting with objective of -5.45252 - took 0.20 seconds
Cbc0012I Integer solution of -5.45252 found by feasibility pump after 0 iterations and 0 nodes (0.24 seconds)
Cbc0038I Full problem 127 rows 75 columns, reduced to 71 rows 47 columns
Cbc0012I Integer solution of -8.16611 found by RINS after 0 iterations and 0 nodes (0.28 seconds)
Cbc0031I 29 added rows had average density of 58.103448
Cbc0013I At root node, 29 cuts changed objective from -33.52793 to -24.589145 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13685 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.106 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2395 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.115 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 126 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.096 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 157 row cuts average 74.8 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -8.16611 best solution, best possible -24.589145 (1.39 seconds)
Cbc0038I Full problem 127 rows 75 columns, reduced to 39 rows 26 columns
Cbc0001I Search completed - best objective -8.166110000000003, took 10190 iterations and 88 nodes (1.94 seconds)
Cbc0032I Strong branching done 942 times (18839 iterations), fathomed 8 nodes and fixed 15 variables
Cbc0035I Maximum depth 33, 164 variables fixed on reduced cost
Total time (CPU seconds):       1.81   (Wallclock seconds):       1.97

