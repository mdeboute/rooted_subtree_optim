Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 112 (-43) rows, 60 (-18) columns and 336 (-117) elements
Clp1000I sum of infeasibilities 3.13129e-05 - average 2.7958e-07, 8 fixed columns
Coin0506I Presolve 96 (-16) rows, 51 (-9) columns and 286 (-50) elements
Clp0029I End of values pass after 51 iterations
Clp0014I Perturbing problem by 0.001% of 2.3991927 - largest nonzero change 0 ( 0%) - largest zero change 2.0786599e-05
Clp0000I Optimal - objective value 103.85707
Clp0000I Optimal - objective value 103.85707
Coin0511I After Postsolve, objective 103.85707, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 103.85707
Clp0000I Optimal - objective value 103.85707
Clp0000I Optimal - objective value 103.85707
Coin0511I After Postsolve, objective 103.85707, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 103.8570655 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 20 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 16 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 10 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 110 rows, 60 columns (59 integer (59 of which binary)) and 388 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.893%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 5.55294
Cbc0038I Solution found of -18.3373
Cbc0038I Relaxing continuous gives -19.1399
Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 110 rows 60 columns, reduced to 53 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -19.1399 to -73.8188 (0.03 seconds)
Cbc0038I Round again with cutoff of -76.7537
Cbc0038I Pass   1: suminf.    2.04139 (8) obj. -76.7537 iterations 37
Cbc0038I Pass   2: suminf.    1.02197 (7) obj. -76.7537 iterations 3
Cbc0038I Pass   3: suminf.    0.71616 (3) obj. -76.7537 iterations 4
Cbc0038I Pass   4: suminf.    0.56259 (3) obj. -76.7537 iterations 4
Cbc0038I Pass   5: suminf.    0.27331 (2) obj. -76.7537 iterations 1
Cbc0038I Pass   6: suminf.    0.71667 (3) obj. -76.7537 iterations 6
Cbc0038I Pass   7: suminf.    3.54379 (12) obj. -76.7537 iterations 14
Cbc0038I Pass   8: suminf.    0.81388 (4) obj. -76.7537 iterations 18
Cbc0038I Pass   9: suminf.    0.80300 (5) obj. -76.7537 iterations 4
Cbc0038I Pass  10: suminf.    1.13608 (3) obj. -76.7537 iterations 7
Cbc0038I Pass  11: suminf.    0.99577 (3) obj. -76.7537 iterations 2
Cbc0038I Pass  12: suminf.    0.99577 (3) obj. -76.7537 iterations 0
Cbc0038I Pass  13: suminf.    1.12829 (3) obj. -76.7537 iterations 3
Cbc0038I Pass  14: suminf.    1.40893 (4) obj. -76.7537 iterations 13
Cbc0038I Pass  15: suminf.    0.92856 (4) obj. -76.7537 iterations 8
Cbc0038I Pass  16: suminf.    0.33205 (2) obj. -76.7537 iterations 8
Cbc0038I Pass  17: suminf.    1.29761 (3) obj. -76.7537 iterations 3
Cbc0038I Pass  18: suminf.    0.44670 (1) obj. -76.7537 iterations 2
Cbc0038I Pass  19: suminf.    1.03683 (6) obj. -76.7537 iterations 15
Cbc0038I Pass  20: suminf.    0.78082 (4) obj. -76.7537 iterations 5
Cbc0038I Pass  21: suminf.    0.72034 (4) obj. -76.7537 iterations 11
Cbc0038I Pass  22: suminf.    0.71828 (5) obj. -76.7537 iterations 5
Cbc0038I Pass  23: suminf.    1.26714 (3) obj. -76.7537 iterations 9
Cbc0038I Pass  24: suminf.    0.21005 (1) obj. -76.7537 iterations 3
Cbc0038I Pass  25: suminf.    0.36165 (2) obj. -76.7537 iterations 3
Cbc0038I Pass  26: suminf.    4.40941 (13) obj. -76.7537 iterations 18
Cbc0038I Pass  27: suminf.    1.57714 (6) obj. -76.7537 iterations 19
Cbc0038I Pass  28: suminf.    1.51938 (6) obj. -76.7537 iterations 6
Cbc0038I Pass  29: suminf.    0.52557 (4) obj. -76.7537 iterations 10
Cbc0038I Pass  30: suminf.    0.47974 (4) obj. -76.7537 iterations 1
Cbc0038I Rounding solution of -76.1529 is better than previous of -73.8188

Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 110 rows 60 columns, reduced to 75 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -82.0364
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  30: suminf.    2.08892 (8) obj. -82.0364 iterations 0
Cbc0038I Pass  31: suminf.    1.12542 (8) obj. -82.0364 iterations 8
Cbc0038I Pass  32: suminf.    1.48425 (5) obj. -82.0364 iterations 9
Cbc0038I Pass  33: suminf.    1.27387 (8) obj. -82.0364 iterations 7
Cbc0038I Pass  34: suminf.    1.84017 (5) obj. -82.0364 iterations 10
Cbc0038I Pass  35: suminf.    1.73664 (6) obj. -82.0364 iterations 1
Cbc0038I Pass  36: suminf.    1.73664 (6) obj. -82.0364 iterations 0
Cbc0038I Pass  37: suminf.    0.53461 (3) obj. -82.0364 iterations 8
Cbc0038I Pass  38: suminf.    0.53461 (3) obj. -82.0364 iterations 0
Cbc0038I Pass  39: suminf.    0.89809 (6) obj. -82.0364 iterations 7
Cbc0038I Pass  40: suminf.    0.89084 (4) obj. -82.0364 iterations 4
Cbc0038I Pass  41: suminf.    0.50841 (3) obj. -82.0364 iterations 4
Cbc0038I Pass  42: suminf.    0.45485 (4) obj. -82.0364 iterations 3
Cbc0038I Pass  43: suminf.    0.89084 (4) obj. -82.0364 iterations 6
Cbc0038I Pass  44: suminf.    1.81320 (6) obj. -82.0364 iterations 18
Cbc0038I Pass  45: suminf.    1.48462 (6) obj. -82.0364 iterations 7
Cbc0038I Pass  46: suminf.    0.89084 (4) obj. -82.0364 iterations 8
Cbc0038I Pass  47: suminf.    0.89084 (4) obj. -82.0364 iterations 2
Cbc0038I Pass  48: suminf.    0.50841 (3) obj. -82.0364 iterations 4
Cbc0038I Pass  49: suminf.    0.45485 (4) obj. -82.0364 iterations 3
Cbc0038I Pass  50: suminf.    0.89084 (4) obj. -82.0364 iterations 6
Cbc0038I Pass  51: suminf.    1.18930 (6) obj. -82.0364 iterations 6
Cbc0038I Pass  52: suminf.    1.14416 (7) obj. -82.0364 iterations 4
Cbc0038I Pass  53: suminf.    2.83600 (7) obj. -82.0364 iterations 12
Cbc0038I Pass  54: suminf.    2.17013 (6) obj. -82.0364 iterations 4
Cbc0038I Pass  55: suminf.    0.80788 (4) obj. -82.0364 iterations 8
Cbc0038I Pass  56: suminf.    0.65473 (3) obj. -82.0364 iterations 1
Cbc0038I Pass  57: suminf.    1.23894 (4) obj. -82.0364 iterations 3
Cbc0038I Pass  58: suminf.    1.13295 (5) obj. -82.0364 iterations 3
Cbc0038I Pass  59: suminf.    1.40541 (4) obj. -82.0364 iterations 7
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 110 rows 60 columns, reduced to 61 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I Round again with cutoff of -88.3756
Cbc0038I Reduced cost fixing fixed 4 variables on major pass 4
Cbc0038I Pass  59: suminf.    2.38604 (11) obj. -88.3756 iterations 3
Cbc0038I Pass  60: suminf.    1.73274 (11) obj. -88.3756 iterations 8
Cbc0038I Pass  61: suminf.    1.99233 (6) obj. -88.3756 iterations 22
Cbc0038I Pass  62: suminf.    1.40609 (6) obj. -88.3756 iterations 7
Cbc0038I Pass  63: suminf.    1.34150 (5) obj. -88.3756 iterations 3
Cbc0038I Pass  64: suminf.    2.47549 (6) obj. -88.3756 iterations 5
Cbc0038I Pass  65: suminf.    1.26651 (7) obj. -88.3756 iterations 3
Cbc0038I Pass  66: suminf.    1.26651 (7) obj. -88.3756 iterations 0
Cbc0038I Pass  67: suminf.    1.64056 (5) obj. -88.3756 iterations 8
Cbc0038I Pass  68: suminf.    1.40958 (5) obj. -88.3756 iterations 6
Cbc0038I Pass  69: suminf.    1.38549 (6) obj. -88.3756 iterations 2
Cbc0038I Pass  70: suminf.    1.28430 (6) obj. -88.3756 iterations 6
Cbc0038I Pass  71: suminf.    1.26651 (7) obj. -88.3756 iterations 3
Cbc0038I Pass  72: suminf.    1.64056 (5) obj. -88.3756 iterations 8
Cbc0038I Pass  73: suminf.    1.40958 (5) obj. -88.3756 iterations 6
Cbc0038I Pass  74: suminf.    1.38549 (6) obj. -88.3756 iterations 2
Cbc0038I Pass  75: suminf.    1.28430 (6) obj. -88.3756 iterations 6
Cbc0038I Pass  76: suminf.    1.26651 (7) obj. -88.3756 iterations 3
Cbc0038I Pass  77: suminf.    1.64056 (5) obj. -88.3756 iterations 8
Cbc0038I Pass  78: suminf.    1.40958 (5) obj. -88.3756 iterations 6
Cbc0038I Pass  79: suminf.    1.38549 (6) obj. -88.3756 iterations 2
Cbc0038I Pass  80: suminf.    1.28430 (6) obj. -88.3756 iterations 6
Cbc0038I Pass  81: suminf.    1.26651 (7) obj. -88.3756 iterations 3
Cbc0038I Pass  82: suminf.    1.64056 (5) obj. -88.3756 iterations 8
Cbc0038I Pass  83: suminf.    1.40958 (5) obj. -88.3756 iterations 6
Cbc0038I Pass  84: suminf.    1.38549 (6) obj. -88.3756 iterations 2
Cbc0038I Pass  85: suminf.    1.28430 (6) obj. -88.3756 iterations 6
Cbc0038I Pass  86: suminf.    1.26651 (7) obj. -88.3756 iterations 3
Cbc0038I Pass  87: suminf.    1.64056 (5) obj. -88.3756 iterations 8
Cbc0038I Pass  88: suminf.    1.40958 (5) obj. -88.3756 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 110 rows 60 columns, reduced to 56 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -76.1529 - took 0.08 seconds
Cbc0012I Integer solution of -76.15292 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 110 rows 60 columns, reduced to 54 rows 29 columns
Cbc0031I 14 added rows had average density of 41.571429
Cbc0013I At root node, 14 cuts changed objective from -103.167 to -92.689896 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3778 row cuts average 5.3 elements, 3 column cuts (3 active)  in 0.060 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1346 row cuts average 55.6 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 150 row cuts average 49.7 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0001I Search completed - best objective -76.15291999999999, took 4616 iterations and 22 nodes (0.54 seconds)
Cbc0032I Strong branching done 272 times (4058 iterations), fathomed 4 nodes and fixed 14 variables
Cbc0035I Maximum depth 9, 55 variables fixed on reduced cost
Total time (CPU seconds):       0.52   (Wallclock seconds):       0.54

