Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 109 (-46) rows, 63 (-15) columns and 337 (-116) elements
Clp1000I sum of infeasibilities 3.52115e-05 - average 3.23041e-07, 43 fixed columns
Coin0506I Presolve 15 (-94) rows, 15 (-48) columns and 54 (-283) elements
Clp0029I End of values pass after 15 iterations
Clp0000I Optimal - objective value 681.13905
Clp0000I Optimal - objective value 681.13905
Coin0511I After Postsolve, objective 681.13905, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 681.13905
Clp0000I Optimal - objective value 681.13905
Clp0000I Optimal - objective value 681.13905
Coin0511I After Postsolve, objective 681.13905, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 681.1390472 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 109 rows, 63 columns (62 integer (62 of which binary)) and 337 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.337%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 11 integers unsatisfied sum - 1.69222
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -600.72 iterations 11
Cbc0038I Solution found of -600.72
Cbc0038I Relaxing continuous gives -600.72
Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 109 rows 63 columns, reduced to 14 rows 12 columns
Cbc0038I Mini branch and bound improved solution from -600.72 to -602.768 (0.01 seconds)
Cbc0038I Round again with cutoff of -610.605
Cbc0038I Pass   2: suminf.    0.16490 (4) obj. -610.605 iterations 7
Cbc0038I Pass   3: suminf.    0.26621 (2) obj. -610.605 iterations 13
Cbc0038I Pass   4: suminf.    0.26621 (2) obj. -610.605 iterations 0
Cbc0038I Pass   5: suminf.    1.14867 (3) obj. -610.605 iterations 3
Cbc0038I Pass   6: suminf.    0.53128 (4) obj. -610.605 iterations 5
Cbc0038I Pass   7: suminf.    3.02546 (9) obj. -610.605 iterations 12
Cbc0038I Pass   8: suminf.    0.72802 (3) obj. -610.605 iterations 9
Cbc0038I Pass   9: suminf.    0.00000 (0) obj. -610.605 iterations 8
Cbc0038I Solution found of -610.605
Cbc0038I Relaxing continuous gives -625.804
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 109 rows 63 columns, reduced to 22 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -625.804 to -632.858 (0.01 seconds)
Cbc0038I Round again with cutoff of -642.514
Cbc0038I Reduced cost fixing fixed 7 variables on major pass 3
Cbc0038I Pass  10: suminf.    0.69721 (4) obj. -642.514 iterations 0
Cbc0038I Pass  11: suminf.    0.49170 (7) obj. -642.514 iterations 11
Cbc0038I Pass  12: suminf.    0.37811 (6) obj. -642.514 iterations 2
Cbc0038I Pass  13: suminf.    2.73858 (7) obj. -642.514 iterations 12
Cbc0038I Pass  14: suminf.    2.73858 (7) obj. -642.514 iterations 2
Cbc0038I Pass  15: suminf.    0.84818 (5) obj. -642.514 iterations 4
Cbc0038I Pass  16: suminf.    0.69721 (4) obj. -642.514 iterations 1
Cbc0038I Pass  17: suminf.    0.49170 (7) obj. -642.514 iterations 11
Cbc0038I Pass  18: suminf.    0.37811 (6) obj. -642.514 iterations 2
Cbc0038I Pass  19: suminf.    2.73858 (7) obj. -642.514 iterations 12
Cbc0038I Pass  20: suminf.    2.73858 (7) obj. -642.514 iterations 2
Cbc0038I Pass  21: suminf.    0.84818 (5) obj. -642.514 iterations 4
Cbc0038I Pass  22: suminf.    0.69721 (4) obj. -642.514 iterations 1
Cbc0038I Pass  23: suminf.    0.49170 (7) obj. -642.514 iterations 11
Cbc0038I Pass  24: suminf.    0.37811 (6) obj. -642.514 iterations 2
Cbc0038I Pass  25: suminf.    2.73858 (7) obj. -642.514 iterations 12
Cbc0038I Pass  26: suminf.    2.73858 (7) obj. -642.514 iterations 2
Cbc0038I Pass  27: suminf.    0.84818 (5) obj. -642.514 iterations 4
Cbc0038I Pass  28: suminf.    0.69721 (4) obj. -642.514 iterations 1
Cbc0038I Pass  29: suminf.    0.49170 (7) obj. -642.514 iterations 11
Cbc0038I Pass  30: suminf.    0.37811 (6) obj. -642.514 iterations 2
Cbc0038I Pass  31: suminf.    2.73858 (7) obj. -642.514 iterations 12
Cbc0038I Pass  32: suminf.    2.73858 (7) obj. -642.514 iterations 2
Cbc0038I Pass  33: suminf.    0.84818 (5) obj. -642.514 iterations 4
Cbc0038I Pass  34: suminf.    0.69721 (4) obj. -642.514 iterations 1
Cbc0038I Pass  35: suminf.    0.49170 (7) obj. -642.514 iterations 11
Cbc0038I Pass  36: suminf.    0.37811 (6) obj. -642.514 iterations 2
Cbc0038I Pass  37: suminf.    2.73858 (7) obj. -642.514 iterations 12
Cbc0038I Pass  38: suminf.    2.73858 (7) obj. -642.514 iterations 2
Cbc0038I Pass  39: suminf.    0.84818 (5) obj. -642.514 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 109 rows 63 columns, reduced to 15 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -632.858 - took 0.02 seconds
Cbc0012I Integer solution of -632.85802 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 109 rows 63 columns, reduced to 14 rows 13 columns
Cbc0031I 7 added rows had average density of 24.285714
Cbc0013I At root node, 7 cuts changed objective from -681.13905 to -654.05486 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 36 row cuts average 2.9 elements, 12 column cuts (12 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 13.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 38.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 56 row cuts average 33.3 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 6 row cuts average 61.5 elements, 0 column cuts (0 active)  in 0.074 seconds - new frequency is 1
Cbc0010I After 12 nodes, 2 on tree, -632.85802 best solution, best possible -654.05486 (0.71 seconds)
Cbc0001I Search completed - best objective -632.8580199999999, took 303 iterations and 14 nodes (0.76 seconds)
Cbc0032I Strong branching done 96 times (454 iterations), fathomed 4 nodes and fixed 3 variables
Cbc0035I Maximum depth 5, 67 variables fixed on reduced cost
Total time (CPU seconds):       0.46   (Wallclock seconds):       0.76

