Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 50 (-15) rows, 28 (-5) columns and 149 (-34) elements
Clp1000I sum of infeasibilities 7.93791e-07 - average 1.58758e-08, 3 fixed columns
Coin0506I Presolve 44 (-6) rows, 25 (-3) columns and 131 (-18) elements
Clp0029I End of values pass after 25 iterations
Clp0000I Optimal - objective value 93.160526
Clp0000I Optimal - objective value 93.160526
Coin0511I After Postsolve, objective 93.160526, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 93.160526
Clp0000I Optimal - objective value 93.160526
Clp0000I Optimal - objective value 93.160526
Coin0511I After Postsolve, objective 93.160526, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 93.16052626 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0004I processed model has 48 rows, 28 columns (27 integer (27 of which binary)) and 155 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.702%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 3.463
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -17.8358 iterations 13
Cbc0038I Solution found of -17.8358
Cbc0038I Relaxing continuous gives -17.8358
Cbc0038I Rounding solution of -23.3332 is better than previous of -17.8358

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 48 rows 28 columns, reduced to 22 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -23.3332 to -56.1429 (0.01 seconds)
Cbc0038I Round again with cutoff of -59.0658
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    1.48890 (5) obj. -59.0658 iterations 3
Cbc0038I Pass   3: suminf.    0.86082 (2) obj. -59.0658 iterations 7
Cbc0038I Pass   4: suminf.    0.63521 (2) obj. -59.0658 iterations 3
Cbc0038I Pass   5: suminf.    0.46250 (1) obj. -59.0658 iterations 2
Cbc0038I Pass   6: suminf.    0.48927 (1) obj. -59.0658 iterations 1
Cbc0038I Pass   7: suminf.    1.68034 (6) obj. -59.0658 iterations 11
Cbc0038I Pass   8: suminf.    1.26818 (5) obj. -59.0658 iterations 4
Cbc0038I Pass   9: suminf.    0.43574 (2) obj. -59.0658 iterations 8
Cbc0038I Pass  10: suminf.    0.49197 (2) obj. -59.0658 iterations 4
Cbc0038I Pass  11: suminf.    0.35000 (1) obj. -59.0658 iterations 2
Cbc0038I Pass  12: suminf.    1.20728 (4) obj. -59.0658 iterations 3
Cbc0038I Pass  13: suminf.    0.35000 (1) obj. -59.0658 iterations 6
Cbc0038I Pass  14: suminf.    0.86647 (3) obj. -59.0658 iterations 4
Cbc0038I Pass  15: suminf.    0.49254 (2) obj. -59.0658 iterations 2
Cbc0038I Pass  16: suminf.    0.49254 (2) obj. -59.0658 iterations 0
Cbc0038I Pass  17: suminf.    0.49197 (2) obj. -59.0658 iterations 4
Cbc0038I Pass  18: suminf.    1.75816 (5) obj. -59.0658 iterations 10
Cbc0038I Pass  19: suminf.    1.51361 (6) obj. -59.0658 iterations 3
Cbc0038I Pass  20: suminf.    0.46371 (2) obj. -59.0658 iterations 6
Cbc0038I Pass  21: suminf.    0.46371 (2) obj. -59.0658 iterations 0
Cbc0038I Pass  22: suminf.    0.41346 (2) obj. -59.0658 iterations 4
Cbc0038I Pass  23: suminf.    0.41346 (2) obj. -59.0658 iterations 0
Cbc0038I Pass  24: suminf.    0.20684 (1) obj. -59.0658 iterations 5
Cbc0038I Pass  25: suminf.    0.06250 (1) obj. -59.0658 iterations 2
Cbc0038I Pass  26: suminf.    0.56935 (2) obj. -59.0658 iterations 1
Cbc0038I Pass  27: suminf.    0.56935 (2) obj. -59.0658 iterations 0
Cbc0038I Pass  28: suminf.    1.30454 (4) obj. -59.0658 iterations 7
Cbc0038I Pass  29: suminf.    0.87735 (2) obj. -59.0658 iterations 1
Cbc0038I Pass  30: suminf.    0.46250 (1) obj. -59.0658 iterations 2
Cbc0038I Pass  31: suminf.    0.48927 (1) obj. -59.0658 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 48 rows 28 columns, reduced to 40 rows 23 columns
Cbc0038I Mini branch and bound improved solution from -56.1429 to -61.6534 (0.03 seconds)
Cbc0038I Round again with cutoff of -66.397
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    1.80959 (5) obj. -66.397 iterations 1
Cbc0038I Pass  32: suminf.    1.07609 (4) obj. -66.397 iterations 4
Cbc0038I Pass  33: suminf.    0.77585 (3) obj. -66.397 iterations 3
Cbc0038I Pass  34: suminf.    0.77585 (3) obj. -66.397 iterations 0
Cbc0038I Pass  35: suminf.    0.57001 (2) obj. -66.397 iterations 4
Cbc0038I Pass  36: suminf.    0.57001 (2) obj. -66.397 iterations 0
Cbc0038I Pass  37: suminf.    0.10616 (2) obj. -66.397 iterations 2
Cbc0038I Pass  38: suminf.    0.10616 (2) obj. -66.397 iterations 1
Cbc0038I Pass  39: suminf.    0.10616 (2) obj. -66.397 iterations 1
Cbc0038I Pass  40: suminf.    0.10616 (2) obj. -66.397 iterations 1
Cbc0038I Pass  41: suminf.    0.57001 (2) obj. -66.397 iterations 3
Cbc0038I Pass  42: suminf.    0.57001 (2) obj. -66.397 iterations 0
Cbc0038I Pass  43: suminf.    0.10616 (2) obj. -66.397 iterations 2
Cbc0038I Pass  44: suminf.    1.70716 (5) obj. -66.397 iterations 9
Cbc0038I Pass  45: suminf.    0.92119 (3) obj. -66.397 iterations 6
Cbc0038I Pass  46: suminf.    0.84860 (3) obj. -66.397 iterations 2
Cbc0038I Pass  47: suminf.    1.67369 (4) obj. -66.397 iterations 4
Cbc0038I Pass  48: suminf.    1.27672 (3) obj. -66.397 iterations 3
Cbc0038I Pass  49: suminf.    0.51345 (4) obj. -66.397 iterations 2
Cbc0038I Pass  50: suminf.    0.51345 (4) obj. -66.397 iterations 0
Cbc0038I Pass  51: suminf.    1.21686 (4) obj. -66.397 iterations 9
Cbc0038I Pass  52: suminf.    0.82977 (3) obj. -66.397 iterations 3
Cbc0038I Pass  53: suminf.    0.82597 (3) obj. -66.397 iterations 1
Cbc0038I Pass  54: suminf.    1.31129 (4) obj. -66.397 iterations 4
Cbc0038I Pass  55: suminf.    1.13662 (3) obj. -66.397 iterations 4
Cbc0038I Pass  56: suminf.    0.69603 (4) obj. -66.397 iterations 12
Cbc0038I Pass  57: suminf.    0.68345 (3) obj. -66.397 iterations 5
Cbc0038I Pass  58: suminf.    1.36143 (3) obj. -66.397 iterations 4
Cbc0038I Pass  59: suminf.    0.16250 (1) obj. -66.397 iterations 4
Cbc0038I Pass  60: suminf.    0.16848 (1) obj. -66.397 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 48 rows 28 columns, reduced to 32 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -61.6534 - took 0.03 seconds
Cbc0012I Integer solution of -61.653386 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 48 rows 28 columns, reduced to 30 rows 18 columns
Cbc0031I 10 added rows had average density of 21.6
Cbc0013I At root node, 10 cuts changed objective from -85.371038 to -71.933324 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 589 row cuts average 3.6 elements, 2 column cuts (2 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 432 row cuts average 26.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 9 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 73 row cuts average 25.4 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -61.65338629999999, took 1861 iterations and 6 nodes (0.22 seconds)
Cbc0032I Strong branching done 68 times (679 iterations), fathomed 0 nodes and fixed 6 variables
Cbc0035I Maximum depth 2, 17 variables fixed on reduced cost
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.23

