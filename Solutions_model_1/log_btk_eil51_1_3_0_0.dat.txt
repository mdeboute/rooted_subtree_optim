Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 93 (-12) rows, 51 (-2) columns and 280 (-23) elements
Clp1000I sum of infeasibilities 1.27336e-05 - average 1.36921e-07, 12 fixed columns
Coin0506I Presolve 67 (-26) rows, 37 (-14) columns and 200 (-80) elements
Clp0029I End of values pass after 37 iterations
Clp0000I Optimal - objective value 117.33912
Clp0000I Optimal - objective value 117.33912
Coin0511I After Postsolve, objective 117.33912, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 117.33912
Clp0000I Optimal - objective value 117.33912
Clp0000I Optimal - objective value 117.33912
Coin0511I After Postsolve, objective 117.33912, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 117.3391189 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 93 rows, 51 columns (50 integer (50 of which binary)) and 280 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.732%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 7.2668
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -56.4489 iterations 27
Cbc0038I Solution found of -56.4489
Cbc0038I Relaxing continuous gives -56.4489
Cbc0038I Rounding solution of -80.6854 is better than previous of -56.4489

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 43 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -80.6854 to -89.105 (0.02 seconds)
Cbc0038I Round again with cutoff of -91.9285
Cbc0038I Pass   2: suminf.    2.04200 (6) obj. -91.9285 iterations 7
Cbc0038I Pass   3: suminf.    1.42265 (4) obj. -91.9285 iterations 7
Cbc0038I Pass   4: suminf.    1.18309 (4) obj. -91.9285 iterations 6
Cbc0038I Pass   5: suminf.    1.18309 (4) obj. -91.9285 iterations 0
Cbc0038I Pass   6: suminf.    1.46778 (4) obj. -91.9285 iterations 5
Cbc0038I Pass   7: suminf.    1.46778 (4) obj. -91.9285 iterations 2
Cbc0038I Pass   8: suminf.    1.16311 (3) obj. -91.9285 iterations 7
Cbc0038I Pass   9: suminf.    0.63220 (3) obj. -91.9285 iterations 5
Cbc0038I Pass  10: suminf.    1.18309 (4) obj. -91.9285 iterations 7
Cbc0038I Pass  11: suminf.    1.18309 (4) obj. -91.9285 iterations 0
Cbc0038I Pass  12: suminf.    1.46778 (4) obj. -91.9285 iterations 5
Cbc0038I Pass  13: suminf.    1.46778 (4) obj. -91.9285 iterations 2
Cbc0038I Pass  14: suminf.    1.16311 (3) obj. -91.9285 iterations 7
Cbc0038I Pass  15: suminf.    0.63220 (3) obj. -91.9285 iterations 5
Cbc0038I Pass  16: suminf.    1.18309 (4) obj. -91.9285 iterations 7
Cbc0038I Pass  17: suminf.    1.18309 (4) obj. -91.9285 iterations 0
Cbc0038I Pass  18: suminf.    1.46778 (4) obj. -91.9285 iterations 5
Cbc0038I Pass  19: suminf.    1.46778 (4) obj. -91.9285 iterations 2
Cbc0038I Pass  20: suminf.    1.16311 (3) obj. -91.9285 iterations 7
Cbc0038I Pass  21: suminf.    0.63220 (3) obj. -91.9285 iterations 5
Cbc0038I Pass  22: suminf.    1.18309 (4) obj. -91.9285 iterations 7
Cbc0038I Pass  23: suminf.    1.18309 (4) obj. -91.9285 iterations 0
Cbc0038I Pass  24: suminf.    1.46778 (4) obj. -91.9285 iterations 5
Cbc0038I Pass  25: suminf.    1.46778 (4) obj. -91.9285 iterations 2
Cbc0038I Pass  26: suminf.    1.16311 (3) obj. -91.9285 iterations 7
Cbc0038I Pass  27: suminf.    0.63220 (3) obj. -91.9285 iterations 5
Cbc0038I Pass  28: suminf.    1.18309 (4) obj. -91.9285 iterations 7
Cbc0038I Pass  29: suminf.    1.18309 (4) obj. -91.9285 iterations 0
Cbc0038I Pass  30: suminf.    1.46778 (4) obj. -91.9285 iterations 5
Cbc0038I Pass  31: suminf.    1.46778 (4) obj. -91.9285 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 43 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -89.105 - took 0.03 seconds
Cbc0012I Integer solution of -89.10495 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 93 rows 51 columns, reduced to 43 rows 25 columns
Cbc0031I 14 added rows had average density of 28.785714
Cbc0013I At root node, 14 cuts changed objective from -117.33912 to -102.48313 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4040 row cuts average 3.5 elements, 2 column cuts (2 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1260 row cuts average 35.6 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 135 row cuts average 31.7 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89.10494999999999, took 4092 iterations and 12 nodes (0.39 seconds)
Cbc0032I Strong branching done 190 times (1835 iterations), fathomed 2 nodes and fixed 12 variables
Cbc0035I Maximum depth 4, 80 variables fixed on reduced cost
Total time (CPU seconds):       0.38   (Wallclock seconds):       0.40

