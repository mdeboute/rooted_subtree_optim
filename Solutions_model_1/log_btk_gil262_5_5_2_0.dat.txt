Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 261 (-3) columns and 1498 (-47) elements
Clp1000I sum of infeasibilities 0.000280012 - average 5.55579e-07, 148 fixed columns
Coin0506I Presolve 197 (-307) rows, 107 (-154) columns and 587 (-911) elements
Clp0029I End of values pass after 107 iterations
Clp0014I Perturbing problem by 0.001% of 2.5403922 - largest nonzero change 0 ( 0%) - largest zero change 2.8981471e-05
Clp0000I Optimal - objective value 175.68192
Clp0000I Optimal - objective value 175.68192
Coin0511I After Postsolve, objective 175.68192, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13595458 - largest nonzero change 0 ( 0%) - largest zero change 2.9658347e-05
Clp0000I Optimal - objective value 175.68192
Clp0000I Optimal - objective value 175.68192
Clp0000I Optimal - objective value 175.68192
Coin0511I After Postsolve, objective 175.68192, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 175.6819226 - 0 iterations time 0.102, Presolve 0.00, Idiot 0.09

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 261 columns (260 integer (260 of which binary)) and 1498 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 69 integers unsatisfied sum - 11.861
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -21.1245 iterations 210
Cbc0038I Solution found of -21.1245
Cbc0038I Relaxing continuous gives -21.1245
Cbc0038I Rounding solution of -43.4812 is better than previous of -21.1245

Cbc0038I Before mini branch and bound, 191 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 127 rows 70 columns
Cbc0038I Mini branch and bound improved solution from -43.4812 to -105.642 (0.15 seconds)
Cbc0038I Round again with cutoff of -112.646
Cbc0038I Pass   2: suminf.    3.74345 (15) obj. -112.646 iterations 75
Cbc0038I Pass   3: suminf.    3.63649 (18) obj. -112.646 iterations 26
Cbc0038I Pass   4: suminf.    2.77468 (9) obj. -112.646 iterations 44
Cbc0038I Pass   5: suminf.    2.53518 (9) obj. -112.646 iterations 12
Cbc0038I Pass   6: suminf.    1.48382 (6) obj. -112.646 iterations 49
Cbc0038I Pass   7: suminf.    1.34022 (5) obj. -112.646 iterations 11
Cbc0038I Pass   8: suminf.    1.54140 (4) obj. -112.646 iterations 17
Cbc0038I Pass   9: suminf.    1.34022 (5) obj. -112.646 iterations 14
Cbc0038I Pass  10: suminf.    5.14278 (16) obj. -112.646 iterations 56
Cbc0038I Pass  11: suminf.    2.25259 (8) obj. -112.646 iterations 47
Cbc0038I Pass  12: suminf.    1.99602 (5) obj. -112.646 iterations 16
Cbc0038I Pass  13: suminf.    1.75182 (6) obj. -112.646 iterations 10
Cbc0038I Pass  14: suminf.    1.37851 (5) obj. -112.646 iterations 13
Cbc0038I Pass  15: suminf.    1.05792 (5) obj. -112.646 iterations 46
Cbc0038I Pass  16: suminf.    1.41165 (6) obj. -112.646 iterations 38
Cbc0038I Pass  17: suminf.    1.05346 (5) obj. -112.646 iterations 6
Cbc0038I Pass  18: suminf.    1.05201 (3) obj. -112.646 iterations 10
Cbc0038I Pass  19: suminf.    1.07418 (5) obj. -112.646 iterations 11
Cbc0038I Pass  20: suminf.    2.91285 (9) obj. -112.646 iterations 40
Cbc0038I Pass  21: suminf.    2.18126 (8) obj. -112.646 iterations 18
Cbc0038I Pass  22: suminf.    1.20143 (4) obj. -112.646 iterations 21
Cbc0038I Pass  23: suminf.    1.03315 (3) obj. -112.646 iterations 5
Cbc0038I Pass  24: suminf.    0.85407 (4) obj. -112.646 iterations 9
Cbc0038I Pass  25: suminf.    2.90367 (10) obj. -112.646 iterations 39
Cbc0038I Pass  26: suminf.    2.20623 (8) obj. -112.646 iterations 29
Cbc0038I Pass  27: suminf.    2.20623 (8) obj. -112.646 iterations 7
Cbc0038I Pass  28: suminf.    0.90923 (4) obj. -112.646 iterations 22
Cbc0038I Pass  29: suminf.    0.85941 (4) obj. -112.646 iterations 3
Cbc0038I Pass  30: suminf.    1.39143 (5) obj. -112.646 iterations 10
Cbc0038I Pass  31: suminf.    1.36563 (4) obj. -112.646 iterations 9
Cbc0038I Rounding solution of -106.378 is better than previous of -105.642

Cbc0038I Before mini branch and bound, 164 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 177 rows 97 columns
Cbc0038I Mini branch and bound improved solution from -106.378 to -111.754 (0.34 seconds)
Cbc0038I Round again with cutoff of -125.253
Cbc0038I Pass  31: suminf.    4.39074 (20) obj. -125.253 iterations 12
Cbc0038I Pass  32: suminf.    4.36074 (14) obj. -125.253 iterations 20
Cbc0038I Pass  33: suminf.    3.07441 (10) obj. -125.253 iterations 35
Cbc0038I Pass  34: suminf.    2.33204 (10) obj. -125.253 iterations 35
Cbc0038I Pass  35: suminf.    2.29772 (9) obj. -125.253 iterations 5
Cbc0038I Pass  36: suminf.    3.05778 (9) obj. -125.253 iterations 29
Cbc0038I Pass  37: suminf.    1.90674 (8) obj. -125.253 iterations 18
Cbc0038I Pass  38: suminf.    1.90674 (8) obj. -125.253 iterations 9
Cbc0038I Pass  39: suminf.    2.99737 (9) obj. -125.253 iterations 23
Cbc0038I Pass  40: suminf.    2.68615 (7) obj. -125.253 iterations 23
Cbc0038I Pass  41: suminf.    1.92388 (7) obj. -125.253 iterations 13
Cbc0038I Pass  42: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  43: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  44: suminf.    2.99737 (9) obj. -125.253 iterations 23
Cbc0038I Pass  45: suminf.    2.68615 (7) obj. -125.253 iterations 23
Cbc0038I Pass  46: suminf.    1.92388 (7) obj. -125.253 iterations 13
Cbc0038I Pass  47: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  48: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  49: suminf.    2.99737 (9) obj. -125.253 iterations 23
Cbc0038I Pass  50: suminf.    2.68615 (7) obj. -125.253 iterations 23
Cbc0038I Pass  51: suminf.    1.92388 (7) obj. -125.253 iterations 13
Cbc0038I Pass  52: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  53: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  54: suminf.    2.99737 (9) obj. -125.253 iterations 23
Cbc0038I Pass  55: suminf.    2.68615 (7) obj. -125.253 iterations 23
Cbc0038I Pass  56: suminf.    1.92388 (7) obj. -125.253 iterations 13
Cbc0038I Pass  57: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  58: suminf.    1.90674 (8) obj. -125.253 iterations 3
Cbc0038I Pass  59: suminf.    2.99737 (9) obj. -125.253 iterations 23
Cbc0038I Pass  60: suminf.    2.68615 (7) obj. -125.253 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 181 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 146 rows 80 columns
Cbc0038I Mini branch and bound did not improve solution (0.52 seconds)
Cbc0038I After 0.52 seconds - Feasibility pump exiting with objective of -111.754 - took 0.48 seconds
Cbc0012I Integer solution of -111.75386 found by feasibility pump after 0 iterations and 0 nodes (0.52 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 130 rows 72 columns
Cbc0031I 40 added rows had average density of 142.4
Cbc0013I At root node, 40 cuts changed objective from -175.68192 to -159.08021 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 26887 row cuts average 3.3 elements, 1 column cuts (1 active)  in 1.021 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2937 row cuts average 253.0 elements, 0 column cuts (0 active)  in 0.916 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.056 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.174 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.881 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.070 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 187 row cuts average 181.2 elements, 0 column cuts (0 active)  in 0.286 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -111.75386 best solution, best possible -159.08021 (9.20 seconds)
Cbc0010I After 5 nodes, 6 on tree, -111.75386 best solution, best possible -159.08021 (10.04 seconds)
Cbc0010I After 15 nodes, 10 on tree, -111.75386 best solution, best possible -159.08021 (10.75 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 107 rows 62 columns
Cbc0010I After 44 nodes, 11 on tree, -111.75386 best solution, best possible -159.08021 (11.54 seconds)
Cbc0010I After 87 nodes, 11 on tree, -111.75386 best solution, best possible -159.08021 (12.29 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 110 rows 61 columns
Cbc0012I Integer solution of -112.48895 found by RINS after 18909 iterations and 93 nodes (12.47 seconds)
Cbc0010I After 165 nodes, 13 on tree, -112.48895 best solution, best possible -159.08021 (13.02 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 6 rows 8 columns
Cbc0010I After 301 nodes, 17 on tree, -112.48895 best solution, best possible -159.08021 (13.72 seconds)
Cbc0001I Search completed - best objective -112.48895, took 25881 iterations and 368 nodes (14.01 seconds)
Cbc0032I Strong branching done 2942 times (63346 iterations), fathomed 75 nodes and fixed 197 variables
Cbc0035I Maximum depth 76, 1904 variables fixed on reduced cost
Total time (CPU seconds):       13.37   (Wallclock seconds):       14.10

