Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 123 (-32) rows, 68 (-10) columns and 374 (-79) elements
Clp1000I sum of infeasibilities 4.4842e-05 - average 3.64569e-07, 11 fixed columns
Coin0506I Presolve 103 (-20) rows, 57 (-11) columns and 312 (-62) elements
Clp0029I End of values pass after 57 iterations
Clp0014I Perturbing problem by 0.001% of 2.1402828 - largest nonzero change 0 ( 0%) - largest zero change 2.7080466e-05
Clp0000I Optimal - objective value 67.049119
Clp0000I Optimal - objective value 67.049119
Coin0511I After Postsolve, objective 67.049119, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.23187706 - largest nonzero change 0 ( 0%) - largest zero change 2.9905028e-05
Clp0000I Optimal - objective value 67.049119
Clp0000I Optimal - objective value 67.049119
Clp0000I Optimal - objective value 67.049119
Coin0511I After Postsolve, objective 67.049119, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.04911942 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 22 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 15 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 118 rows, 68 columns (67 integer (67 of which binary)) and 400 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.921%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 33 integers unsatisfied sum - 5.0762
Cbc0038I Solution found of -4.63054
Cbc0038I Relaxing continuous gives -10.441
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 118 rows 68 columns, reduced to 63 rows 34 columns
Cbc0038I Mini branch and bound improved solution from -10.441 to -41.9394 (0.03 seconds)
Cbc0038I Round again with cutoff of -44.4055
Cbc0038I Pass   1: suminf.    2.51132 (25) obj. -44.4055 iterations 48
Cbc0038I Pass   2: suminf.    0.63676 (3) obj. -44.4055 iterations 34
Cbc0038I Pass   3: suminf.    0.33611 (2) obj. -44.4055 iterations 8
Cbc0038I Pass   4: suminf.    1.34606 (3) obj. -44.4055 iterations 5
Cbc0038I Pass   5: suminf.    1.05307 (3) obj. -44.4055 iterations 7
Cbc0038I Pass   6: suminf.    1.05307 (3) obj. -44.4055 iterations 0
Cbc0038I Pass   7: suminf.    1.66392 (4) obj. -44.4055 iterations 5
Cbc0038I Pass   8: suminf.    0.99102 (4) obj. -44.4055 iterations 4
Cbc0038I Pass   9: suminf.    0.94284 (4) obj. -44.4055 iterations 3
Cbc0038I Pass  10: suminf.    1.07474 (4) obj. -44.4055 iterations 8
Cbc0038I Pass  11: suminf.    1.07474 (4) obj. -44.4055 iterations 0
Cbc0038I Pass  12: suminf.    0.45670 (2) obj. -44.4055 iterations 7
Cbc0038I Pass  13: suminf.    0.37698 (2) obj. -44.4055 iterations 3
Cbc0038I Pass  14: suminf.    0.45670 (2) obj. -44.4055 iterations 4
Cbc0038I Pass  15: suminf.    1.38265 (8) obj. -44.4055 iterations 11
Cbc0038I Pass  16: suminf.    0.92269 (2) obj. -44.4055 iterations 16
Cbc0038I Pass  17: suminf.    0.24960 (2) obj. -44.4055 iterations 8
Cbc0038I Pass  18: suminf.    0.80275 (2) obj. -44.4055 iterations 9
Cbc0038I Pass  19: suminf.    0.26909 (2) obj. -44.4055 iterations 2
Cbc0038I Pass  20: suminf.    2.34535 (7) obj. -44.4055 iterations 16
Cbc0038I Pass  21: suminf.    0.59671 (5) obj. -44.4055 iterations 11
Cbc0038I Pass  22: suminf.    0.96898 (4) obj. -44.4055 iterations 11
Cbc0038I Pass  23: suminf.    0.77592 (2) obj. -44.4055 iterations 4
Cbc0038I Pass  24: suminf.    0.71057 (2) obj. -44.4055 iterations 6
Cbc0038I Pass  25: suminf.    0.47779 (3) obj. -44.4055 iterations 7
Cbc0038I Pass  26: suminf.    0.96898 (4) obj. -44.4055 iterations 9
Cbc0038I Pass  27: suminf.    2.19959 (7) obj. -44.4055 iterations 19
Cbc0038I Pass  28: suminf.    1.77472 (6) obj. -44.4055 iterations 10
Cbc0038I Pass  29: suminf.    1.52696 (4) obj. -44.4055 iterations 11
Cbc0038I Pass  30: suminf.    1.27400 (6) obj. -44.4055 iterations 9
Cbc0038I Rounding solution of -43.8059 is better than previous of -41.9394

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 118 rows 68 columns, reduced to 92 rows 53 columns
Cbc0038I Mini branch and bound improved solution from -43.8059 to -44.4689 (0.09 seconds)
Cbc0038I Round again with cutoff of -48.8951
Cbc0038I Pass  30: suminf.    2.84328 (25) obj. -48.8951 iterations 0
Cbc0038I Pass  31: suminf.    1.14386 (4) obj. -48.8951 iterations 36
Cbc0038I Pass  32: suminf.    0.93568 (6) obj. -48.8951 iterations 5
Cbc0038I Pass  33: suminf.    2.00283 (7) obj. -48.8951 iterations 10
Cbc0038I Pass  34: suminf.    1.08823 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  35: suminf.    0.64645 (3) obj. -48.8951 iterations 4
Cbc0038I Pass  36: suminf.    1.58198 (6) obj. -48.8951 iterations 6
Cbc0038I Pass  37: suminf.    1.54168 (7) obj. -48.8951 iterations 3
Cbc0038I Pass  38: suminf.    1.57087 (7) obj. -48.8951 iterations 8
Cbc0038I Pass  39: suminf.    1.04494 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  40: suminf.    0.92019 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  41: suminf.    0.93744 (4) obj. -48.8951 iterations 4
Cbc0038I Pass  42: suminf.    1.62272 (5) obj. -48.8951 iterations 7
Cbc0038I Pass  43: suminf.    1.08823 (4) obj. -48.8951 iterations 5
Cbc0038I Pass  44: suminf.    0.64645 (3) obj. -48.8951 iterations 5
Cbc0038I Pass  45: suminf.    1.58198 (6) obj. -48.8951 iterations 7
Cbc0038I Pass  46: suminf.    1.54168 (7) obj. -48.8951 iterations 3
Cbc0038I Pass  47: suminf.    1.57087 (7) obj. -48.8951 iterations 8
Cbc0038I Pass  48: suminf.    1.04494 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  49: suminf.    0.92019 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  50: suminf.    0.93744 (4) obj. -48.8951 iterations 4
Cbc0038I Pass  51: suminf.    1.62272 (5) obj. -48.8951 iterations 7
Cbc0038I Pass  52: suminf.    1.08823 (4) obj. -48.8951 iterations 5
Cbc0038I Pass  53: suminf.    0.64645 (3) obj. -48.8951 iterations 5
Cbc0038I Pass  54: suminf.    1.58198 (6) obj. -48.8951 iterations 7
Cbc0038I Pass  55: suminf.    1.54168 (7) obj. -48.8951 iterations 3
Cbc0038I Pass  56: suminf.    1.57087 (7) obj. -48.8951 iterations 8
Cbc0038I Pass  57: suminf.    1.04494 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  58: suminf.    0.92019 (4) obj. -48.8951 iterations 6
Cbc0038I Pass  59: suminf.    0.93744 (4) obj. -48.8951 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 118 rows 68 columns, reduced to 79 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I After 0.13 seconds - Feasibility pump exiting with objective of -44.4689 - took 0.11 seconds
Cbc0012I Integer solution of -44.46892 found by feasibility pump after 0 iterations and 0 nodes (0.13 seconds)
Cbc0038I Full problem 118 rows 68 columns, reduced to 64 rows 35 columns
Cbc0031I 32 added rows had average density of 23.90625
Cbc0013I At root node, 32 cuts changed objective from -66.599295 to -58.209063 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10467 row cuts average 4.2 elements, 1 column cuts (1 active)  in 0.093 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2360 row cuts average 67.7 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 33 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 135 row cuts average 58.3 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -44.46892 best solution, best possible -58.209063 (0.87 seconds)
Cbc0038I Full problem 118 rows 68 columns, reduced to 2 rows 2 columns
Cbc0001I Search completed - best objective -44.46892, took 9663 iterations and 62 nodes (1.09 seconds)
Cbc0032I Strong branching done 644 times (12160 iterations), fathomed 4 nodes and fixed 25 variables
Cbc0035I Maximum depth 20, 157 variables fixed on reduced cost
Total time (CPU seconds):       1.04   (Wallclock seconds):       1.10

