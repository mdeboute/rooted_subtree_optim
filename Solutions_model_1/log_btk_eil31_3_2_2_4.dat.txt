Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 44 (-21) rows, 25 (-8) columns and 131 (-52) elements
Clp1000I sum of infeasibilities 4.24418e-06 - average 9.64586e-08, 18 fixed columns
Coin0506I Presolve 7 (-37) rows, 5 (-20) columns and 17 (-114) elements
Clp0029I End of values pass after 5 iterations
Clp0000I Optimal - objective value 3054.752
Clp0000I Optimal - objective value 3054.752
Coin0511I After Postsolve, objective 3054.752, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 3054.752
Clp0000I Optimal - objective value 3054.752
Clp0000I Optimal - objective value 3054.752
Coin0511I After Postsolve, objective 3054.752, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 3054.752034 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 25 columns (24 integer (24 of which binary)) and 135 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.902%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 2 integers unsatisfied sum - 0.600299
Cbc0038I Pass   1: suminf.    0.28013 (2) obj. -3036.7 iterations 4
Cbc0038I Solution found of -533.693
Cbc0038I Relaxing continuous gives -545.673
Cbc0038I Rounding solution of -951.067 is better than previous of -545.673

Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound improved solution from -951.067 to -1760.44 (0.01 seconds)
Cbc0038I Round again with cutoff of -1889.87
Cbc0038I Pass   2: suminf.    0.28013 (2) obj. -3036.7 iterations 0
Cbc0038I Pass   3: suminf.    0.24759 (2) obj. -1889.87 iterations 3
Cbc0038I Pass   4: suminf.    0.24759 (2) obj. -1889.87 iterations 0
Cbc0038I Pass   5: suminf.    0.07439 (1) obj. -1889.87 iterations 4
Cbc0038I Pass   6: suminf.    1.11205 (3) obj. -1889.87 iterations 6
Cbc0038I Pass   7: suminf.    0.45071 (2) obj. -1889.87 iterations 4
Cbc0038I Pass   8: suminf.    0.57340 (2) obj. -1889.87 iterations 1
Cbc0038I Pass   9: suminf.    1.10808 (3) obj. -1889.87 iterations 7
Cbc0038I Pass  10: suminf.    0.84410 (2) obj. -1889.87 iterations 3
Cbc0038I Pass  11: suminf.    0.47154 (1) obj. -2660.23 iterations 1
Cbc0038I Pass  12: suminf.    0.02879 (1) obj. -1889.87 iterations 1
Cbc0038I Pass  13: suminf.    0.02879 (1) obj. -1889.87 iterations 0
Cbc0038I Pass  14: suminf.    1.18037 (5) obj. -1889.87 iterations 8
Cbc0038I Pass  15: suminf.    1.01986 (3) obj. -1889.87 iterations 6
Cbc0038I Pass  16: suminf.    0.32361 (2) obj. -1889.87 iterations 3
Cbc0038I Pass  17: suminf.    0.77957 (2) obj. -1889.87 iterations 1
Cbc0038I Pass  18: suminf.    0.77957 (2) obj. -1889.87 iterations 0
Cbc0038I Pass  19: suminf.    0.72873 (2) obj. -2403.73 iterations 1
Cbc0038I Pass  20: suminf.    0.94011 (2) obj. -1987.69 iterations 2
Cbc0038I Pass  21: suminf.    0.86044 (2) obj. -1889.87 iterations 1
Cbc0038I Pass  22: suminf.    0.94011 (2) obj. -1987.69 iterations 1
Cbc0038I Pass  23: suminf.    0.82041 (5) obj. -1889.87 iterations 4
Cbc0038I Pass  24: suminf.    0.52967 (2) obj. -1889.87 iterations 4
Cbc0038I Pass  25: suminf.    0.20357 (2) obj. -1889.87 iterations 4
Cbc0038I Pass  26: suminf.    0.20357 (2) obj. -1889.87 iterations 0
Cbc0038I Pass  27: suminf.    0.18050 (2) obj. -1889.87 iterations 7
Cbc0038I Pass  28: suminf.    0.18050 (2) obj. -1889.87 iterations 1
Cbc0038I Pass  29: suminf.    0.42276 (1) obj. -1956.82 iterations 4
Cbc0038I Pass  30: suminf.    0.38429 (1) obj. -1889.87 iterations 1
Cbc0038I Pass  31: suminf.    0.90286 (3) obj. -1889.87 iterations 11
Cbc0038I Rounding solution of -2013.38 is better than previous of -1760.44

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 19 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -2013.38 to -2283.03 (0.02 seconds)
Cbc0038I Round again with cutoff of -2437.37
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.28013 (2) obj. -3036.7 iterations 0
Cbc0038I Pass  32: suminf.    0.69395 (2) obj. -2437.37 iterations 4
Cbc0038I Pass  33: suminf.    0.69395 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  34: suminf.    0.38906 (1) obj. -2437.37 iterations 3
Cbc0038I Pass  35: suminf.    1.62798 (4) obj. -2437.37 iterations 10
Cbc0038I Pass  36: suminf.    0.40283 (3) obj. -2437.37 iterations 7
Cbc0038I Pass  37: suminf.    0.40283 (3) obj. -2437.37 iterations 0
Cbc0038I Pass  38: suminf.    0.89191 (2) obj. -2437.37 iterations 3
Cbc0038I Pass  39: suminf.    0.64706 (2) obj. -2737.98 iterations 1
Cbc0038I Pass  40: suminf.    0.89191 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  41: suminf.    1.74610 (5) obj. -2437.37 iterations 8
Cbc0038I Pass  42: suminf.    0.79623 (2) obj. -2437.37 iterations 6
Cbc0038I Pass  43: suminf.    0.79623 (2) obj. -2437.37 iterations 0
Cbc0038I Pass  44: suminf.    0.79476 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  45: suminf.    2.15034 (8) obj. -2437.37 iterations 10
Cbc0038I Pass  46: suminf.    1.23473 (4) obj. -2437.37 iterations 8
Cbc0038I Pass  47: suminf.    0.91039 (2) obj. -2437.37 iterations 2
Cbc0038I Pass  48: suminf.    0.93017 (2) obj. -2523.33 iterations 1
Cbc0038I Pass  49: suminf.    0.86241 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  50: suminf.    0.91039 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  51: suminf.    1.20385 (3) obj. -2437.37 iterations 7
Cbc0038I Pass  52: suminf.    0.88053 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  53: suminf.    0.88053 (2) obj. -2437.37 iterations 0
Cbc0038I Pass  54: suminf.    0.97823 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  55: suminf.    1.09528 (3) obj. -2437.37 iterations 2
Cbc0038I Pass  56: suminf.    1.00933 (3) obj. -2437.37 iterations 6
Cbc0038I Pass  57: suminf.    0.84640 (2) obj. -2437.37 iterations 2
Cbc0038I Pass  58: suminf.    0.97321 (2) obj. -2437.37 iterations 1
Cbc0038I Pass  59: suminf.    1.38899 (3) obj. -2437.37 iterations 4
Cbc0038I Pass  60: suminf.    0.63008 (2) obj. -2522.63 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 32 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -2283.03 - took 0.01 seconds
Cbc0012I Integer solution of -2283.025 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 43 rows 25 columns, reduced to 4 rows 6 columns
Cbc0031I 7 added rows had average density of 8.1428571
Cbc0013I At root node, 7 cuts changed objective from -3054.752 to -2359.3056 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 29 row cuts average 2.7 elements, 7 column cuts (7 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 11 row cuts average 13.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 24 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 6 row cuts average 12.7 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 55 row cuts average 12.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -2283.025, took 105 iterations and 2 nodes (0.03 seconds)
Cbc0032I Strong branching done 16 times (86 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 5 variables fixed on reduced cost
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

