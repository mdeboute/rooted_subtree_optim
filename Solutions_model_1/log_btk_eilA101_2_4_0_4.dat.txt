Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 145 (-60) rows, 82 (-21) columns and 447 (-156) elements
Clp1000I sum of infeasibilities 2.32154e-05 - average 1.60106e-07, 32 fixed columns
Coin0506I Presolve 58 (-87) rows, 42 (-40) columns and 194 (-253) elements
Clp0029I End of values pass after 42 iterations
Clp0014I Perturbing problem by 0.001% of 2.882358 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 393.00469
Clp0000I Optimal - objective value 393.00469
Coin0511I After Postsolve, objective 393.00469, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 393.00469
Clp0000I Optimal - objective value 393.00469
Clp0000I Optimal - objective value 393.00469
Coin0511I After Postsolve, objective 393.00469, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 393.0046886 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 145 rows, 82 columns (81 integer (81 of which binary)) and 447 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.057%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 2.83487
Cbc0038I Pass   1: suminf.    0.93072 (2) obj. -375.654 iterations 21
Cbc0038I Pass   2: suminf.    0.26087 (1) obj. -364.414 iterations 1
Cbc0038I Solution found of -338.153
Cbc0038I Relaxing continuous gives -338.153
Cbc0038I Rounding solution of -348.681 is better than previous of -338.153

Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 145 rows 82 columns, reduced to 18 rows 16 columns
Cbc0038I Mini branch and bound improved solution from -348.681 to -364.165 (0.02 seconds)
Cbc0038I Round again with cutoff of -367.05
Cbc0038I Reduced cost fixing fixed 10 variables on major pass 2
Cbc0038I Pass   3: suminf.    0.93072 (2) obj. -375.654 iterations 0
Cbc0038I Pass   4: suminf.    0.27206 (2) obj. -367.05 iterations 8
Cbc0038I Pass   5: suminf.    0.45006 (2) obj. -367.05 iterations 8
Cbc0038I Pass   6: suminf.    0.45006 (2) obj. -367.05 iterations 0
Cbc0038I Pass   7: suminf.    0.21572 (2) obj. -367.05 iterations 6
Cbc0038I Pass   8: suminf.    0.11798 (2) obj. -367.05 iterations 13
Cbc0038I Pass   9: suminf.    0.91395 (7) obj. -367.05 iterations 22
Cbc0038I Pass  10: suminf.    0.65572 (9) obj. -367.05 iterations 13
Cbc0038I Pass  11: suminf.    2.54270 (9) obj. -367.05 iterations 26
Cbc0038I Pass  12: suminf.    0.83386 (8) obj. -367.05 iterations 10
Cbc0038I Pass  13: suminf.    0.94465 (7) obj. -367.05 iterations 26
Cbc0038I Pass  14: suminf.    0.94465 (7) obj. -367.05 iterations 0
Cbc0038I Pass  15: suminf.    0.55713 (3) obj. -367.05 iterations 17
Cbc0038I Pass  16: suminf.    0.55713 (3) obj. -367.05 iterations 0
Cbc0038I Pass  17: suminf.    0.54256 (2) obj. -367.05 iterations 7
Cbc0038I Pass  18: suminf.    0.41684 (2) obj. -367.05 iterations 15
Cbc0038I Pass  19: suminf.    0.38508 (2) obj. -367.05 iterations 6
Cbc0038I Pass  20: suminf.    0.22968 (2) obj. -367.05 iterations 8
Cbc0038I Pass  21: suminf.    1.84901 (9) obj. -367.05 iterations 18
Cbc0038I Pass  22: suminf.    0.75770 (4) obj. -367.05 iterations 9
Cbc0038I Pass  23: suminf.    0.71446 (4) obj. -367.05 iterations 5
Cbc0038I Pass  24: suminf.    0.64525 (3) obj. -367.05 iterations 7
Cbc0038I Pass  25: suminf.    0.06932 (2) obj. -367.05 iterations 6
Cbc0038I Pass  26: suminf.    0.42208 (4) obj. -367.05 iterations 13
Cbc0038I Pass  27: suminf.    2.87533 (13) obj. -367.05 iterations 23
Cbc0038I Pass  28: suminf.    0.23901 (1) obj. -367.05 iterations 26
Cbc0038I Pass  29: suminf.    0.05000 (1) obj. -373.466 iterations 7
Cbc0038I Pass  30: suminf.    0.21519 (1) obj. -367.05 iterations 5
Cbc0038I Pass  31: suminf.    0.73987 (5) obj. -367.05 iterations 14
Cbc0038I Pass  32: suminf.    0.20813 (2) obj. -367.05 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 56 integers at bound fixed and 0 continuous
Cbc0038I Full problem 145 rows 82 columns, reduced to 27 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -364.165 to -371.622 (0.04 seconds)
Cbc0038I Round again with cutoff of -375.899
Cbc0038I Reduced cost fixing fixed 20 variables on major pass 3
Cbc0038I Pass  32: suminf.    0.93736 (3) obj. -375.899 iterations 1
Cbc0038I Pass  33: suminf.    0.69246 (3) obj. -375.899 iterations 4
Cbc0038I Pass  34: suminf.    0.67482 (4) obj. -375.899 iterations 14
Cbc0038I Pass  35: suminf.    0.53484 (4) obj. -375.899 iterations 3
Cbc0038I Pass  36: suminf.    1.02001 (6) obj. -375.899 iterations 11
Cbc0038I Pass  37: suminf.    1.00544 (4) obj. -375.899 iterations 2
Cbc0038I Pass  38: suminf.    0.48074 (3) obj. -375.899 iterations 8
Cbc0038I Pass  39: suminf.    0.83778 (3) obj. -375.899 iterations 7
Cbc0038I Pass  40: suminf.    0.66226 (3) obj. -375.899 iterations 7
Cbc0038I Pass  41: suminf.    0.61592 (3) obj. -375.899 iterations 10
Cbc0038I Pass  42: suminf.    2.73257 (15) obj. -375.899 iterations 18
Cbc0038I Pass  43: suminf.    0.82987 (6) obj. -375.899 iterations 16
Cbc0038I Pass  44: suminf.    0.85857 (4) obj. -375.899 iterations 19
Cbc0038I Pass  45: suminf.    0.77285 (6) obj. -375.899 iterations 10
Cbc0038I Pass  46: suminf.    1.89871 (7) obj. -375.899 iterations 11
Cbc0038I Pass  47: suminf.    0.92731 (5) obj. -375.899 iterations 10
Cbc0038I Pass  48: suminf.    2.75448 (9) obj. -375.899 iterations 20
Cbc0038I Pass  49: suminf.    0.51287 (5) obj. -375.899 iterations 14
Cbc0038I Pass  50: suminf.    0.51287 (5) obj. -375.899 iterations 0
Cbc0038I Pass  51: suminf.    1.61762 (7) obj. -375.899 iterations 10
Cbc0038I Pass  52: suminf.    1.33706 (5) obj. -375.899 iterations 6
Cbc0038I Pass  53: suminf.    1.47019 (9) obj. -375.899 iterations 16
Cbc0038I Pass  54: suminf.    3.15997 (10) obj. -375.899 iterations 21
Cbc0038I Pass  55: suminf.    2.14214 (11) obj. -375.899 iterations 7
Cbc0038I Pass  56: suminf.    0.82355 (4) obj. -375.899 iterations 23
Cbc0038I Pass  57: suminf.    0.78092 (5) obj. -375.899 iterations 11
Cbc0038I Pass  58: suminf.    0.45291 (5) obj. -375.899 iterations 9
Cbc0038I Pass  59: suminf.    0.18041 (3) obj. -375.899 iterations 15
Cbc0038I Pass  60: suminf.    0.18041 (3) obj. -375.899 iterations 1
Cbc0038I Pass  61: suminf.    0.33484 (2) obj. -375.899 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 145 rows 82 columns, reduced to 30 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -371.622 - took 0.04 seconds
Cbc0012I Integer solution of -371.62217 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 145 rows 82 columns, reduced to 19 rows 16 columns
Cbc0031I 8 added rows had average density of 24.125
Cbc0013I At root node, 8 cuts changed objective from -393.00469 to -379.56692 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 80 row cuts average 2.9 elements, 6 column cuts (6 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 12.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 55 row cuts average 34.9 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -371.62217, took 426 iterations and 24 nodes (0.13 seconds)
Cbc0032I Strong branching done 150 times (677 iterations), fathomed 8 nodes and fixed 5 variables
Cbc0035I Maximum depth 5, 93 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.13

