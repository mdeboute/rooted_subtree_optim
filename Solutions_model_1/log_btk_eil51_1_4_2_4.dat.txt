Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-17) rows, 48 (-5) columns and 264 (-39) elements
Clp1000I sum of infeasibilities 0.00025636 - average 2.91318e-06, 4 fixed columns
Coin0506I Presolve 80 (-8) rows, 44 (-4) columns and 240 (-24) elements
Clp0029I End of values pass after 44 iterations
Clp0000I Optimal - objective value 40.945694
Clp0000I Optimal - objective value 40.945694
Coin0511I After Postsolve, objective 40.945694, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 40.945694
Clp0000I Optimal - objective value 40.945694
Clp0000I Optimal - objective value 40.945694
Coin0511I After Postsolve, objective 40.945694, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 40.94569394 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 48 columns (47 integer (47 of which binary)) and 264 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.847%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 31 integers unsatisfied sum - 8.68281
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 2.83971 iterations 30
Cbc0038I Solution found of 2.83971
Cbc0038I Relaxing continuous gives 2.83971
Cbc0038I Rounding solution of 0.72536 is better than previous of 2.83971

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 49 rows 32 columns
Cbc0038I Mini branch and bound improved solution from 0.72536 to -6.49397 (0.05 seconds)
Cbc0038I Round again with cutoff of -9.93923
Cbc0038I Pass   2: suminf.    1.24720 (6) obj. -9.93923 iterations 5
Cbc0038I Pass   3: suminf.    1.14048 (5) obj. -9.93923 iterations 6
Cbc0038I Pass   4: suminf.    1.14048 (5) obj. -9.93923 iterations 0
Cbc0038I Pass   5: suminf.    1.59519 (5) obj. -9.93923 iterations 8
Cbc0038I Pass   6: suminf.    0.84539 (4) obj. -9.93923 iterations 6
Cbc0038I Pass   7: suminf.    0.97731 (4) obj. -9.93923 iterations 2
Cbc0038I Pass   8: suminf.    0.97731 (4) obj. -9.93923 iterations 0
Cbc0038I Pass   9: suminf.    1.14048 (5) obj. -9.93923 iterations 4
Cbc0038I Pass  10: suminf.    1.14048 (5) obj. -9.93923 iterations 0
Cbc0038I Pass  11: suminf.    1.59519 (5) obj. -9.93923 iterations 8
Cbc0038I Pass  12: suminf.    0.84539 (4) obj. -9.93923 iterations 6
Cbc0038I Pass  13: suminf.    0.97731 (4) obj. -9.93923 iterations 2
Cbc0038I Pass  14: suminf.    0.97731 (4) obj. -9.93923 iterations 0
Cbc0038I Pass  15: suminf.    1.14048 (5) obj. -9.93923 iterations 4
Cbc0038I Pass  16: suminf.    1.14048 (5) obj. -9.93923 iterations 0
Cbc0038I Pass  17: suminf.    1.59519 (5) obj. -9.93923 iterations 8
Cbc0038I Pass  18: suminf.    0.84539 (4) obj. -9.93923 iterations 6
Cbc0038I Pass  19: suminf.    0.97731 (4) obj. -9.93923 iterations 2
Cbc0038I Pass  20: suminf.    0.97731 (4) obj. -9.93923 iterations 0
Cbc0038I Pass  21: suminf.    1.14048 (5) obj. -9.93923 iterations 4
Cbc0038I Pass  22: suminf.    1.14048 (5) obj. -9.93923 iterations 0
Cbc0038I Pass  23: suminf.    1.59519 (5) obj. -9.93923 iterations 8
Cbc0038I Pass  24: suminf.    0.84539 (4) obj. -9.93923 iterations 6
Cbc0038I Pass  25: suminf.    0.97731 (4) obj. -9.93923 iterations 2
Cbc0038I Pass  26: suminf.    0.97731 (4) obj. -9.93923 iterations 0
Cbc0038I Pass  27: suminf.    1.14048 (5) obj. -9.93923 iterations 4
Cbc0038I Pass  28: suminf.    1.14048 (5) obj. -9.93923 iterations 0
Cbc0038I Pass  29: suminf.    1.59519 (5) obj. -9.93923 iterations 9
Cbc0038I Pass  30: suminf.    0.84539 (4) obj. -9.93923 iterations 6
Cbc0038I Pass  31: suminf.    0.97731 (4) obj. -9.93923 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 49 rows 32 columns
Cbc0038I Mini branch and bound improved solution from -6.49397 to -9.33809 (0.10 seconds)
Cbc0038I Round again with cutoff of -16.1405
Cbc0038I Pass  31: suminf.    2.28236 (10) obj. -16.1405 iterations 5
Cbc0038I Pass  32: suminf.    1.51633 (6) obj. -16.1405 iterations 11
Cbc0038I Pass  33: suminf.    0.62121 (6) obj. -16.1405 iterations 3
Cbc0038I Pass  34: suminf.    0.53544 (5) obj. -16.1405 iterations 2
Cbc0038I Pass  35: suminf.    2.07399 (7) obj. -16.1405 iterations 3
Cbc0038I Pass  36: suminf.    1.76232 (8) obj. -16.1405 iterations 5
Cbc0038I Pass  37: suminf.    1.76232 (8) obj. -16.1405 iterations 0
Cbc0038I Pass  38: suminf.    0.59797 (4) obj. -16.1405 iterations 12
Cbc0038I Pass  39: suminf.    0.42500 (2) obj. -16.1405 iterations 3
Cbc0038I Pass  40: suminf.    0.99574 (4) obj. -16.1405 iterations 4
Cbc0038I Pass  41: suminf.    1.99217 (10) obj. -16.1405 iterations 15
Cbc0038I Pass  42: suminf.    1.73472 (9) obj. -16.1405 iterations 8
Cbc0038I Pass  43: suminf.    2.00575 (8) obj. -16.1405 iterations 20
Cbc0038I Pass  44: suminf.    1.76232 (8) obj. -16.1405 iterations 3
Cbc0038I Pass  45: suminf.    0.59797 (4) obj. -16.1405 iterations 11
Cbc0038I Pass  46: suminf.    0.42500 (2) obj. -16.1405 iterations 3
Cbc0038I Pass  47: suminf.    0.99574 (4) obj. -16.1405 iterations 4
Cbc0038I Pass  48: suminf.    2.73260 (14) obj. -16.1405 iterations 11
Cbc0038I Pass  49: suminf.    2.50706 (13) obj. -16.1405 iterations 2
Cbc0038I Pass  50: suminf.    1.31755 (7) obj. -16.1405 iterations 15
Cbc0038I Pass  51: suminf.    0.95083 (6) obj. -16.1405 iterations 4
Cbc0038I Pass  52: suminf.    1.87410 (5) obj. -16.1405 iterations 7
Cbc0038I Pass  53: suminf.    1.87410 (5) obj. -16.1405 iterations 0
Cbc0038I Pass  54: suminf.    1.90543 (6) obj. -16.1405 iterations 2
Cbc0038I Pass  55: suminf.    1.90543 (6) obj. -16.1405 iterations 0
Cbc0038I Pass  56: suminf.    2.08675 (5) obj. -16.1405 iterations 5
Cbc0038I Pass  57: suminf.    2.08675 (5) obj. -16.1405 iterations 0
Cbc0038I Pass  58: suminf.    1.90543 (6) obj. -16.1405 iterations 3
Cbc0038I Pass  59: suminf.    1.70308 (9) obj. -16.1405 iterations 17
Cbc0038I Pass  60: suminf.    1.62619 (7) obj. -16.1405 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 67 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -9.33809 - took 0.13 seconds
Cbc0012I Integer solution of -9.33809 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 88 rows 48 columns, reduced to 49 rows 32 columns
Cbc0012I Integer solution of -9.9235 found by RINS after 0 iterations and 0 nodes (0.19 seconds)
Cbc0031I 20 added rows had average density of 39.2
Cbc0013I At root node, 20 cuts changed objective from -40.945694 to -30.958926 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7053 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1637 row cuts average 48.0 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.054 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 143 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 130 row cuts average 47.6 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0010I After 3 nodes, 4 on tree, -9.9235 best solution, best possible -30.958926 (0.68 seconds)
Cbc0038I Full problem 88 rows 48 columns, reduced to 3 rows 4 columns
Cbc0001I Search completed - best objective -9.923499999999997, took 7990 iterations and 46 nodes (0.88 seconds)
Cbc0032I Strong branching done 534 times (10089 iterations), fathomed 2 nodes and fixed 2 variables
Cbc0035I Maximum depth 16, 69 variables fixed on reduced cost
Total time (CPU seconds):       0.85   (Wallclock seconds):       0.89

