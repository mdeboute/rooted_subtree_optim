Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 136 (-19) rows, 75 (-3) columns and 414 (-39) elements
Clp1000I sum of infeasibilities 0.000238037 - average 1.75027e-06, 17 fixed columns
Coin0506I Presolve 101 (-35) rows, 57 (-18) columns and 308 (-106) elements
Clp0029I End of values pass after 57 iterations
Clp0014I Perturbing problem by 0.001% of 2.7694557 - largest nonzero change 0 ( 0%) - largest zero change 2.8834042e-05
Clp0000I Optimal - objective value 36.294123
Clp0000I Optimal - objective value 36.294123
Coin0511I After Postsolve, objective 36.294123, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 36.294123
Clp0000I Optimal - objective value 36.294123
Clp0000I Optimal - objective value 36.294123
Coin0511I After Postsolve, objective 36.294123, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36.29412306 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 136 rows, 75 columns (74 integer (74 of which binary)) and 414 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.183%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 31 integers unsatisfied sum - 8.81441
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 11.8752 iterations 37
Cbc0038I Solution found of 11.8752
Cbc0038I Relaxing continuous gives 11.8752
Cbc0038I Rounding solution of -4.46427 is better than previous of 11.8752

Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 136 rows 75 columns, reduced to 56 rows 32 columns
Cbc0038I Mini branch and bound improved solution from -4.46427 to -7.93539 (0.04 seconds)
Cbc0038I Round again with cutoff of -10.7714
Cbc0038I Pass   2: suminf.    2.93458 (10) obj. -10.7714 iterations 19
Cbc0038I Pass   3: suminf.    1.13238 (5) obj. -10.7714 iterations 17
Cbc0038I Pass   4: suminf.    1.10763 (4) obj. -10.7714 iterations 7
Cbc0038I Pass   5: suminf.    1.67843 (4) obj. -10.7714 iterations 3
Cbc0038I Pass   6: suminf.    1.18477 (3) obj. -10.7714 iterations 4
Cbc0038I Pass   7: suminf.    1.15013 (3) obj. -10.7714 iterations 11
Cbc0038I Pass   8: suminf.    1.15013 (3) obj. -10.7714 iterations 4
Cbc0038I Pass   9: suminf.    0.72099 (3) obj. -10.7714 iterations 8
Cbc0038I Pass  10: suminf.    1.15774 (3) obj. -10.7714 iterations 2
Cbc0038I Pass  11: suminf.    0.72724 (2) obj. -10.7714 iterations 1
Cbc0038I Pass  12: suminf.    1.66110 (7) obj. -10.7714 iterations 20
Cbc0038I Pass  13: suminf.    1.32431 (6) obj. -10.7714 iterations 8
Cbc0038I Pass  14: suminf.    0.89982 (5) obj. -10.7714 iterations 15
Cbc0038I Pass  15: suminf.    0.89982 (5) obj. -10.7714 iterations 0
Cbc0038I Pass  16: suminf.    1.03655 (3) obj. -10.7714 iterations 12
Cbc0038I Pass  17: suminf.    1.00555 (3) obj. -10.7714 iterations 6
Cbc0038I Pass  18: suminf.    1.42457 (3) obj. -10.7714 iterations 2
Cbc0038I Pass  19: suminf.    1.16263 (4) obj. -10.7714 iterations 8
Cbc0038I Pass  20: suminf.    3.90668 (11) obj. -10.7714 iterations 31
Cbc0038I Pass  21: suminf.    0.96673 (3) obj. -10.7714 iterations 14
Cbc0038I Pass  22: suminf.    0.88798 (4) obj. -10.7714 iterations 3
Cbc0038I Pass  23: suminf.    0.84647 (3) obj. -10.7714 iterations 13
Cbc0038I Pass  24: suminf.    0.78128 (4) obj. -10.7714 iterations 3
Cbc0038I Pass  25: suminf.    1.14076 (4) obj. -10.7714 iterations 7
Cbc0038I Pass  26: suminf.    1.14076 (4) obj. -10.7714 iterations 0
Cbc0038I Pass  27: suminf.    1.01797 (3) obj. -10.7714 iterations 9
Cbc0038I Pass  28: suminf.    0.99280 (3) obj. -10.7714 iterations 6
Cbc0038I Pass  29: suminf.    1.44023 (3) obj. -10.7714 iterations 2
Cbc0038I Pass  30: suminf.    3.84561 (12) obj. -10.7714 iterations 17
Cbc0038I Pass  31: suminf.    1.12044 (4) obj. -10.7714 iterations 16
Cbc0038I Rounding solution of -10.2214 is better than previous of -7.93539

Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 0 continuous
Cbc0038I Full problem 136 rows 75 columns, reduced to 80 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I Round again with cutoff of -15.8759
Cbc0038I Pass  31: suminf.    3.84508 (13) obj. -15.8759 iterations 1
Cbc0038I Pass  32: suminf.    2.13621 (7) obj. -15.8759 iterations 16
Cbc0038I Pass  33: suminf.    2.13253 (6) obj. -15.8759 iterations 2
Cbc0038I Pass  34: suminf.    1.64898 (5) obj. -15.8759 iterations 10
Cbc0038I Pass  35: suminf.    1.57253 (5) obj. -15.8759 iterations 3
Cbc0038I Pass  36: suminf.    1.81280 (5) obj. -15.8759 iterations 4
Cbc0038I Pass  37: suminf.    1.72427 (4) obj. -15.8759 iterations 1
Cbc0038I Pass  38: suminf.    1.67651 (4) obj. -15.8759 iterations 3
Cbc0038I Pass  39: suminf.    2.83903 (11) obj. -15.8759 iterations 17
Cbc0038I Pass  40: suminf.    1.24258 (6) obj. -15.8759 iterations 11
Cbc0038I Pass  41: suminf.    0.95747 (6) obj. -15.8759 iterations 7
Cbc0038I Pass  42: suminf.    1.73150 (6) obj. -15.8759 iterations 9
Cbc0038I Pass  43: suminf.    1.21636 (4) obj. -15.8759 iterations 8
Cbc0038I Pass  44: suminf.    1.21636 (4) obj. -15.8759 iterations 0
Cbc0038I Pass  45: suminf.    1.50479 (4) obj. -15.8759 iterations 5
Cbc0038I Pass  46: suminf.    2.53361 (9) obj. -15.8759 iterations 16
Cbc0038I Pass  47: suminf.    1.45560 (5) obj. -15.8759 iterations 15
Cbc0038I Pass  48: suminf.    1.45560 (5) obj. -15.8759 iterations 0
Cbc0038I Pass  49: suminf.    1.91037 (8) obj. -15.8759 iterations 13
Cbc0038I Pass  50: suminf.    1.91037 (8) obj. -15.8759 iterations 0
Cbc0038I Pass  51: suminf.    1.83050 (9) obj. -15.8759 iterations 14
Cbc0038I Pass  52: suminf.    1.82878 (8) obj. -15.8759 iterations 1
Cbc0038I Pass  53: suminf.    1.92568 (6) obj. -15.8759 iterations 11
Cbc0038I Pass  54: suminf.    1.72427 (4) obj. -15.8759 iterations 1
Cbc0038I Pass  55: suminf.    1.67651 (4) obj. -15.8759 iterations 3
Cbc0038I Pass  56: suminf.    1.57253 (5) obj. -15.8759 iterations 4
Cbc0038I Pass  57: suminf.    1.81280 (5) obj. -15.8759 iterations 4
Cbc0038I Pass  58: suminf.    2.35761 (10) obj. -15.8759 iterations 19
Cbc0038I Pass  59: suminf.    1.40341 (5) obj. -15.8759 iterations 19
Cbc0038I Pass  60: suminf.    1.95875 (6) obj. -15.8759 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 136 rows 75 columns, reduced to 72 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I After 0.13 seconds - Feasibility pump exiting with objective of -10.2214 - took 0.11 seconds
Cbc0012I Integer solution of -10.221439 found by feasibility pump after 0 iterations and 0 nodes (0.13 seconds)
Cbc0038I Full problem 136 rows 75 columns, reduced to 59 rows 34 columns
Cbc0031I 22 added rows had average density of 36.681818
Cbc0013I At root node, 22 cuts changed objective from -36.294123 to -26.200055 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 11945 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.076 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1856 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.073 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 20 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -10.221439 best solution, best possible -26.200055 (0.77 seconds)
Cbc0038I Full problem 136 rows 75 columns, reduced to 1 rows 3 columns
Cbc0012I Integer solution of -10.441749 found by RINS after 7560 iterations and 42 nodes (0.95 seconds)
Cbc0038I Full problem 136 rows 75 columns, reduced to 23 rows 21 columns
Cbc0001I Search completed - best objective -10.441749, took 9180 iterations and 100 nodes (1.06 seconds)
Cbc0032I Strong branching done 1092 times (16937 iterations), fathomed 9 nodes and fixed 33 variables
Cbc0035I Maximum depth 24, 188 variables fixed on reduced cost
Total time (CPU seconds):       1.03   (Wallclock seconds):       1.07

