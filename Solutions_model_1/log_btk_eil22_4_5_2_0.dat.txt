Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 33 (-14) rows, 21 (-3) columns and 101 (-28) elements
Clp1000I sum of infeasibilities 4.12814e-06 - average 1.25095e-07, 1 fixed columns
Coin0506I Presolve 28 (-5) rows, 18 (-3) columns and 86 (-15) elements
Clp0029I End of values pass after 18 iterations
Clp0000I Optimal - objective value 108.41676
Clp0000I Optimal - objective value 108.41676
Coin0511I After Postsolve, objective 108.41676, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 108.41676
Clp0000I Optimal - objective value 108.41676
Clp0000I Optimal - objective value 108.41676
Coin0511I After Postsolve, objective 108.41676, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 108.4167592 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 33 rows, 21 columns (20 integer (20 of which binary)) and 101 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.433%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 4.78015
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -28.9 iterations 14
Cbc0038I Solution found of -28.9
Cbc0038I Relaxing continuous gives -28.9
Cbc0038I Rounding solution of -50 is better than previous of -28.9

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 21 columns, reduced to 23 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -50 to -71.4 (0.01 seconds)
Cbc0038I Round again with cutoff of -75.2
Cbc0038I Pass   2: suminf.    1.12890 (4) obj. -75.2 iterations 5
Cbc0038I Pass   3: suminf.    0.42489 (4) obj. -75.2 iterations 3
Cbc0038I Pass   4: suminf.    0.74417 (3) obj. -75.2 iterations 4
Cbc0038I Pass   5: suminf.    0.50191 (3) obj. -75.2 iterations 2
Cbc0038I Pass   6: suminf.    0.85043 (3) obj. -75.2 iterations 3
Cbc0038I Pass   7: suminf.    0.52551 (3) obj. -75.2 iterations 3
Cbc0038I Pass   8: suminf.    1.36383 (4) obj. -75.2 iterations 5
Cbc0038I Pass   9: suminf.    0.58327 (2) obj. -75.2 iterations 4
Cbc0038I Pass  10: suminf.    0.58327 (2) obj. -75.2 iterations 0
Cbc0038I Pass  11: suminf.    0.64696 (3) obj. -75.2 iterations 4
Cbc0038I Pass  12: suminf.    0.62086 (3) obj. -75.2 iterations 1
Cbc0038I Pass  13: suminf.    0.42927 (4) obj. -75.2 iterations 3
Cbc0038I Pass  14: suminf.    0.42489 (4) obj. -75.2 iterations 1
Cbc0038I Pass  15: suminf.    0.74417 (3) obj. -75.2 iterations 4
Cbc0038I Pass  16: suminf.    0.50191 (3) obj. -75.2 iterations 2
Cbc0038I Pass  17: suminf.    1.12890 (4) obj. -75.2 iterations 7
Cbc0038I Pass  18: suminf.    0.97267 (3) obj. -75.2 iterations 2
Cbc0038I Pass  19: suminf.    0.62086 (3) obj. -75.2 iterations 3
Cbc0038I Pass  20: suminf.    0.42927 (4) obj. -75.2 iterations 3
Cbc0038I Pass  21: suminf.    0.42489 (4) obj. -75.2 iterations 1
Cbc0038I Pass  22: suminf.    0.74417 (3) obj. -75.2 iterations 4
Cbc0038I Pass  23: suminf.    0.50191 (3) obj. -75.2 iterations 2
Cbc0038I Pass  24: suminf.    1.12890 (4) obj. -75.2 iterations 7
Cbc0038I Pass  25: suminf.    1.37845 (5) obj. -75.2 iterations 4
Cbc0038I Pass  26: suminf.    0.77694 (3) obj. -75.2 iterations 3
Cbc0038I Pass  27: suminf.    0.77694 (3) obj. -75.2 iterations 1
Cbc0038I Pass  28: suminf.    0.65803 (2) obj. -75.2 iterations 7
Cbc0038I Pass  29: suminf.    0.46970 (1) obj. -75.2 iterations 4
Cbc0038I Pass  30: suminf.    0.44444 (1) obj. -75.2 iterations 2
Cbc0038I Pass  31: suminf.    1.26938 (5) obj. -75.2 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 21 columns, reduced to 25 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -71.4 - took 0.02 seconds
Cbc0012I Integer solution of -71.4 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 33 rows 21 columns, reduced to 23 rows 15 columns
Cbc0031I 8 added rows had average density of 16.25
Cbc0013I At root node, 8 cuts changed objective from -108.41676 to -86.999335 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 975 row cuts average 3.9 elements, 1 column cuts (1 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 362 row cuts average 19.3 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 6.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 31 row cuts average 10.3 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 79 row cuts average 15.4 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -71.40000000000001, took 1603 iterations and 6 nodes (0.14 seconds)
Cbc0032I Strong branching done 60 times (429 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 1, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.13   (Wallclock seconds):       0.14

