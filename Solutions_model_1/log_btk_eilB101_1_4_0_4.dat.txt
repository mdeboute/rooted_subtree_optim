Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 142 (-63) rows, 79 (-24) columns and 436 (-167) elements
Clp1000I sum of infeasibilities 2.76073e-07 - average 1.94417e-09, 74 fixed columns
Coin0506I Presolve 5 (-137) rows, 4 (-75) columns and 14 (-422) elements
Clp0029I End of values pass after 4 iterations
Clp0000I Optimal - objective value 36719.309
Clp0000I Optimal - objective value 36719.309
Coin0511I After Postsolve, objective 36719.309, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.6258606 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 36719.309
Clp0000I Optimal - objective value 36719.309
Clp0000I Optimal - objective value 36719.309
Coin0511I After Postsolve, objective 36719.309, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36719.30894 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 142 rows, 79 columns (78 integer (78 of which binary)) and 444 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.234%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.965022
Cbc0038I Solution found of -32140.7
Cbc0038I Relaxing continuous gives -32140.7
Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous
Cbc0038I Full problem 142 rows 79 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -32598.6
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 2
Cbc0038I Pass   1: suminf.    0.09331 (4) obj. -32598.6 iterations 9
Cbc0038I Pass   2: suminf.    0.41818 (2) obj. -32807.1 iterations 8
Cbc0038I Pass   3: suminf.    0.34062 (2) obj. -32598.6 iterations 1
Cbc0038I Pass   4: suminf.    0.61394 (2) obj. -32598.6 iterations 5
Cbc0038I Pass   5: suminf.    0.51694 (2) obj. -32598.6 iterations 2
Cbc0038I Pass   6: suminf.    0.62471 (3) obj. -32598.6 iterations 4
Cbc0038I Pass   7: suminf.    0.54556 (2) obj. -32598.6 iterations 7
Cbc0038I Pass   8: suminf.    0.52632 (2) obj. -32901.4 iterations 3
Cbc0038I Pass   9: suminf.    0.40000 (1) obj. -32717.1 iterations 3
Cbc0038I Pass  10: suminf.    1.19290 (4) obj. -32598.6 iterations 14
Cbc0038I Pass  11: suminf.    1.19290 (4) obj. -32598.6 iterations 1
Cbc0038I Pass  12: suminf.    0.61394 (2) obj. -32598.6 iterations 8
Cbc0038I Pass  13: suminf.    0.51694 (2) obj. -32598.6 iterations 2
Cbc0038I Pass  14: suminf.    3.03027 (7) obj. -32598.6 iterations 19
Cbc0038I Pass  15: suminf.    1.00597 (4) obj. -32598.6 iterations 9
Cbc0038I Pass  16: suminf.    1.00597 (4) obj. -32598.6 iterations 0
Cbc0038I Pass  17: suminf.    0.21739 (2) obj. -33806.2 iterations 9
Cbc0038I Pass  18: suminf.    0.14404 (3) obj. -33999.9 iterations 3
Cbc0038I Pass  19: suminf.    1.00597 (4) obj. -32598.6 iterations 9
Cbc0038I Pass  20: suminf.    1.63569 (6) obj. -32598.6 iterations 11
Cbc0038I Pass  21: suminf.    0.54339 (2) obj. -32598.6 iterations 10
Cbc0038I Pass  22: suminf.    0.42308 (1) obj. -33815.8 iterations 5
Cbc0038I Pass  23: suminf.    0.09331 (4) obj. -32598.6 iterations 6
Cbc0038I Pass  24: suminf.    0.41818 (2) obj. -32807.1 iterations 8
Cbc0038I Pass  25: suminf.    0.34062 (2) obj. -32598.6 iterations 1
Cbc0038I Pass  26: suminf.    0.61394 (2) obj. -32598.6 iterations 5
Cbc0038I Pass  27: suminf.    0.51694 (2) obj. -32598.6 iterations 2
Cbc0038I Pass  28: suminf.    0.83358 (3) obj. -32598.6 iterations 7
Cbc0038I Pass  29: suminf.    0.83358 (3) obj. -32598.6 iterations 5
Cbc0038I Pass  30: suminf.    0.46214 (2) obj. -33543.6 iterations 5
Cbc0038I Rounding solution of -32681.4 is better than previous of -32140.7

Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 142 rows 79 columns, reduced to 24 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -33489
Cbc0038I Reduced cost fixing fixed 18 variables on major pass 3
Cbc0038I Pass  30: suminf.    0.27476 (4) obj. -33489 iterations 0
Cbc0038I Pass  31: suminf.    0.67683 (3) obj. -33489 iterations 8
Cbc0038I Pass  32: suminf.    0.67683 (3) obj. -33489 iterations 0
Cbc0038I Pass  33: suminf.    0.84624 (3) obj. -33489 iterations 2
Cbc0038I Pass  34: suminf.    0.81720 (2) obj. -33489 iterations 2
Cbc0038I Pass  35: suminf.    0.77127 (2) obj. -33489 iterations 2
Cbc0038I Pass  36: suminf.    1.51313 (4) obj. -33489 iterations 9
Cbc0038I Pass  37: suminf.    1.06982 (3) obj. -33489 iterations 5
Cbc0038I Pass  38: suminf.    1.06982 (3) obj. -33489 iterations 3
Cbc0038I Pass  39: suminf.    1.06982 (3) obj. -33489 iterations 3
Cbc0038I Pass  40: suminf.    1.70607 (4) obj. -33489 iterations 3
Cbc0038I Pass  41: suminf.    1.07059 (5) obj. -33489 iterations 6
Cbc0038I Pass  42: suminf.    1.20349 (5) obj. -33489 iterations 6
Cbc0038I Pass  43: suminf.    1.20349 (5) obj. -33489 iterations 0
Cbc0038I Pass  44: suminf.    0.67683 (3) obj. -33489 iterations 7
Cbc0038I Pass  45: suminf.    0.67683 (3) obj. -33489 iterations 0
Cbc0038I Pass  46: suminf.    0.84624 (3) obj. -33489 iterations 2
Cbc0038I Pass  47: suminf.    0.81720 (2) obj. -33489 iterations 2
Cbc0038I Pass  48: suminf.    0.77127 (2) obj. -33489 iterations 2
Cbc0038I Pass  49: suminf.    1.58026 (4) obj. -33489 iterations 7
Cbc0038I Pass  50: suminf.    1.06982 (3) obj. -33489 iterations 5
Cbc0038I Pass  51: suminf.    1.83495 (4) obj. -33489 iterations 5
Cbc0038I Pass  52: suminf.    1.06982 (3) obj. -33489 iterations 5
Cbc0038I Pass  53: suminf.    1.75899 (7) obj. -33489 iterations 7
Cbc0038I Pass  54: suminf.    1.67516 (5) obj. -33489 iterations 8
Cbc0038I Pass  55: suminf.    1.67516 (5) obj. -33489 iterations 2
Cbc0038I Pass  56: suminf.    1.20349 (5) obj. -33489 iterations 10
Cbc0038I Pass  57: suminf.    1.20349 (5) obj. -33489 iterations 0
Cbc0038I Pass  58: suminf.    0.67683 (3) obj. -33489 iterations 6
Cbc0038I Pass  59: suminf.    0.67683 (3) obj. -33489 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 142 rows 79 columns, reduced to 20 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -32681.4 - took 0.02 seconds
Cbc0012I Integer solution of -32681.396 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 142 rows 79 columns, reduced to 0 rows 0 columns
Cbc0031I 8 added rows had average density of 21
Cbc0013I At root node, 8 cuts changed objective from -36719.309 to -34534.509 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 4 row cuts average 3.0 elements, 19 column cuts (19 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3 row cuts average 29.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 3 row cuts average 10.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 5 row cuts average 24.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 53 row cuts average 30.2 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 7 row cuts average 78.0 elements, 0 column cuts (0 active)  in 0.072 seconds - new frequency is 1
Cbc0016I Integer solution of -33011.742 found by strong branching after 204 iterations and 5 nodes (0.60 seconds)
Cbc0001I Search completed - best objective -33011.742, took 281 iterations and 10 nodes (0.64 seconds)
Cbc0032I Strong branching done 88 times (485 iterations), fathomed 1 nodes and fixed 1 variables
Cbc0035I Maximum depth 4, 92 variables fixed on reduced cost
Total time (CPU seconds):       0.38   (Wallclock seconds):       0.65

