Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 48 (-17) rows, 27 (-6) columns and 143 (-40) elements
Clp1000I sum of infeasibilities 5.59251e-06 - average 1.16511e-07, 10 fixed columns
Coin0506I Presolve 27 (-21) rows, 16 (-11) columns and 80 (-63) elements
Clp0029I End of values pass after 16 iterations
Clp0000I Optimal - objective value 142.9112
Clp0000I Optimal - objective value 142.9112
Coin0511I After Postsolve, objective 142.9112, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 142.9112
Clp0000I Optimal - objective value 142.9112
Clp0000I Optimal - objective value 142.9112
Coin0511I After Postsolve, objective 142.9112, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 142.9111971 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 10 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 46 rows, 27 columns (26 integer (26 of which binary)) and 157 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.734%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 10 integers unsatisfied sum - 4.28524
Cbc0038I Pass   1: suminf.    0.25000 (1) obj. -70.7311 iterations 15
Cbc0038I Solution found of -42.1907
Cbc0038I Relaxing continuous gives -42.1907
Cbc0038I Rounding solution of -68.426 is better than previous of -42.1907

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 46 rows 27 columns, reduced to 19 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -68.426 to -82.4384 (0.02 seconds)
Cbc0038I Round again with cutoff of -86.783
Cbc0038I Pass   2: suminf.    0.96551 (4) obj. -86.783 iterations 2
Cbc0038I Pass   3: suminf.    0.75510 (3) obj. -86.783 iterations 7
Cbc0038I Pass   4: suminf.    0.22764 (1) obj. -86.783 iterations 3
Cbc0038I Pass   5: suminf.    0.32102 (1) obj. -86.783 iterations 1
Cbc0038I Pass   6: suminf.    0.82823 (4) obj. -86.783 iterations 6
Cbc0038I Pass   7: suminf.    0.46454 (2) obj. -86.783 iterations 1
Cbc0038I Pass   8: suminf.    0.59637 (3) obj. -86.783 iterations 3
Cbc0038I Pass   9: suminf.    0.66892 (2) obj. -86.783 iterations 4
Cbc0038I Pass  10: suminf.    0.12156 (1) obj. -86.783 iterations 2
Cbc0038I Pass  11: suminf.    0.84616 (2) obj. -86.783 iterations 2
Cbc0038I Pass  12: suminf.    0.66892 (2) obj. -86.783 iterations 1
Cbc0038I Pass  13: suminf.    2.53166 (8) obj. -86.783 iterations 7
Cbc0038I Pass  14: suminf.    0.65850 (2) obj. -86.783 iterations 9
Cbc0038I Pass  15: suminf.    0.56109 (2) obj. -86.783 iterations 3
Cbc0038I Pass  16: suminf.    0.50496 (2) obj. -86.783 iterations 2
Cbc0038I Pass  17: suminf.    0.35473 (2) obj. -86.783 iterations 2
Cbc0038I Pass  18: suminf.    1.18166 (3) obj. -86.783 iterations 3
Cbc0038I Pass  19: suminf.    1.26316 (3) obj. -86.783 iterations 8
Cbc0038I Pass  20: suminf.    0.91040 (3) obj. -86.783 iterations 3
Cbc0038I Pass  21: suminf.    0.85168 (3) obj. -86.783 iterations 1
Cbc0038I Pass  22: suminf.    0.96736 (2) obj. -86.783 iterations 3
Cbc0038I Pass  23: suminf.    0.54677 (3) obj. -86.783 iterations 3
Cbc0038I Pass  24: suminf.    0.32102 (1) obj. -86.783 iterations 4
Cbc0038I Pass  25: suminf.    0.22764 (1) obj. -86.783 iterations 1
Cbc0038I Pass  26: suminf.    1.27462 (4) obj. -86.783 iterations 6
Cbc0038I Pass  27: suminf.    0.22764 (1) obj. -86.783 iterations 4
Cbc0038I Pass  28: suminf.    0.54962 (2) obj. -86.783 iterations 3
Cbc0038I Pass  29: suminf.    0.54962 (2) obj. -86.783 iterations 2
Cbc0038I Pass  30: suminf.    0.68733 (3) obj. -86.783 iterations 2
Cbc0038I Pass  31: suminf.    0.65452 (4) obj. -86.783 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 46 rows 27 columns, reduced to 39 rows 23 columns
Cbc0038I Mini branch and bound improved solution from -82.4384 to -84.7154 (0.03 seconds)
Cbc0038I Round again with cutoff of -94.6029
Cbc0038I Pass  31: suminf.    1.31464 (6) obj. -94.6029 iterations 1
Cbc0038I Pass  32: suminf.    0.91775 (3) obj. -94.6029 iterations 2
Cbc0038I Pass  33: suminf.    0.86997 (4) obj. -94.6029 iterations 3
Cbc0038I Pass  34: suminf.    0.38133 (2) obj. -94.6029 iterations 5
Cbc0038I Pass  35: suminf.    0.16842 (1) obj. -94.6029 iterations 1
Cbc0038I Pass  36: suminf.    0.46204 (2) obj. -94.6029 iterations 3
Cbc0038I Pass  37: suminf.    3.26100 (8) obj. -94.6029 iterations 11
Cbc0038I Pass  38: suminf.    1.47699 (5) obj. -94.6029 iterations 9
Cbc0038I Pass  39: suminf.    0.94474 (5) obj. -94.6029 iterations 4
Cbc0038I Pass  40: suminf.    0.95580 (4) obj. -94.6029 iterations 6
Cbc0038I Pass  41: suminf.    0.43241 (2) obj. -94.6029 iterations 2
Cbc0038I Pass  42: suminf.    0.81752 (2) obj. -94.6029 iterations 3
Cbc0038I Pass  43: suminf.    3.62639 (10) obj. -94.6029 iterations 7
Cbc0038I Pass  44: suminf.    0.81752 (2) obj. -94.6029 iterations 9
Cbc0038I Pass  45: suminf.    1.91097 (7) obj. -94.6029 iterations 14
Cbc0038I Pass  46: suminf.    1.32148 (4) obj. -94.6029 iterations 5
Cbc0038I Pass  47: suminf.    0.69013 (4) obj. -94.6029 iterations 4
Cbc0038I Pass  48: suminf.    0.69013 (4) obj. -94.6029 iterations 1
Cbc0038I Pass  49: suminf.    0.84616 (2) obj. -94.6029 iterations 5
Cbc0038I Pass  50: suminf.    0.81752 (2) obj. -94.6029 iterations 1
Cbc0038I Pass  51: suminf.    0.81752 (2) obj. -94.6029 iterations 0
Cbc0038I Pass  52: suminf.    0.43241 (2) obj. -94.6029 iterations 3
Cbc0038I Pass  53: suminf.    2.33510 (8) obj. -94.6029 iterations 8
Cbc0038I Pass  54: suminf.    0.79232 (4) obj. -94.6029 iterations 4
Cbc0038I Pass  55: suminf.    0.79232 (4) obj. -94.6029 iterations 0
Cbc0038I Pass  56: suminf.    1.52562 (5) obj. -94.6029 iterations 4
Cbc0038I Pass  57: suminf.    1.18161 (6) obj. -94.6029 iterations 6
Cbc0038I Pass  58: suminf.    1.36493 (4) obj. -94.6029 iterations 6
Cbc0038I Pass  59: suminf.    0.42220 (2) obj. -94.6029 iterations 4
Cbc0038I Pass  60: suminf.    0.25882 (3) obj. -94.6029 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 46 rows 27 columns, reduced to 33 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -84.7154 - took 0.03 seconds
Cbc0012I Integer solution of -84.71535 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 46 rows 27 columns, reduced to 21 rows 12 columns
Cbc0031I 10 added rows had average density of 15
Cbc0013I At root node, 10 cuts changed objective from -125.88273 to -99.406852 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 326 row cuts average 3.2 elements, 7 column cuts (7 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 611 row cuts average 19.7 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 33 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 160 row cuts average 16.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0001I Search completed - best objective -84.71535, took 1756 iterations and 8 nodes (0.16 seconds)
Cbc0032I Strong branching done 86 times (546 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 3, 15 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16

