Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 25 (-22) rows, 16 (-8) columns and 76 (-53) elements
Clp1000I sum of infeasibilities 0.00154795 - average 6.19178e-05, 2 fixed columns
Coin0506I Presolve 22 (-3) rows, 14 (-2) columns and 66 (-10) elements
Clp0029I End of values pass after 14 iterations
Clp0000I Optimal - objective value 83.955457
Clp0000I Optimal - objective value 83.955457
Coin0511I After Postsolve, objective 83.955457, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.955457
Clp0000I Optimal - objective value 83.955457
Clp0000I Optimal - objective value 83.955457
Coin0511I After Postsolve, objective 83.955457, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.95545699 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 25 rows, 16 columns (15 integer (15 of which binary)) and 77 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.735%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 10 integers unsatisfied sum - 3.28844
Cbc0038I Pass   1: suminf.    0.91279 (3) obj. -55.1453 iterations 8
Cbc0038I Solution found of -53
Cbc0038I Relaxing continuous gives -53
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 16 columns, reduced to 18 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -56.208
Cbc0038I Pass   2: suminf.    0.95239 (4) obj. -56.208 iterations 1
Cbc0038I Pass   3: suminf.    0.06844 (1) obj. -56.208 iterations 4
Cbc0038I Pass   4: suminf.    0.38911 (1) obj. -56.208 iterations 1
Cbc0038I Pass   5: suminf.    0.51275 (3) obj. -56.208 iterations 2
Cbc0038I Pass   6: suminf.    0.38911 (1) obj. -56.208 iterations 2
Cbc0038I Pass   7: suminf.    1.44208 (5) obj. -56.208 iterations 7
Cbc0038I Pass   8: suminf.    0.42979 (1) obj. -56.208 iterations 8
Cbc0038I Pass   9: suminf.    0.28000 (1) obj. -56.208 iterations 1
Cbc0038I Pass  10: suminf.    1.19505 (4) obj. -56.208 iterations 4
Cbc0038I Pass  11: suminf.    0.57964 (2) obj. -56.208 iterations 2
Cbc0038I Pass  12: suminf.    0.06844 (1) obj. -56.208 iterations 1
Cbc0038I Pass  13: suminf.    0.38911 (1) obj. -56.208 iterations 1
Cbc0038I Pass  14: suminf.    0.63185 (3) obj. -56.208 iterations 7
Cbc0038I Pass  15: suminf.    0.62882 (3) obj. -56.208 iterations 1
Cbc0038I Pass  16: suminf.    0.62882 (3) obj. -56.208 iterations 0
Cbc0038I Pass  17: suminf.    0.62882 (3) obj. -56.208 iterations 0
Cbc0038I Pass  18: suminf.    1.22807 (7) obj. -56.208 iterations 6
Cbc0038I Pass  19: suminf.    0.78242 (3) obj. -56.208 iterations 6
Cbc0038I Pass  20: suminf.    0.65398 (3) obj. -56.208 iterations 2
Cbc0038I Pass  21: suminf.    0.96888 (4) obj. -56.208 iterations 3
Cbc0038I Pass  22: suminf.    0.78242 (3) obj. -56.208 iterations 4
Cbc0038I Pass  23: suminf.    0.76157 (3) obj. -56.208 iterations 4
Cbc0038I Pass  24: suminf.    0.51958 (2) obj. -56.208 iterations 2
Cbc0038I Pass  25: suminf.    0.06844 (1) obj. -56.208 iterations 2
Cbc0038I Pass  26: suminf.    0.38911 (1) obj. -56.208 iterations 1
Cbc0038I Pass  27: suminf.    0.38911 (1) obj. -56.208 iterations 0
Cbc0038I Pass  28: suminf.    0.38911 (1) obj. -56.208 iterations 0
Cbc0038I Pass  29: suminf.    0.69195 (4) obj. -56.208 iterations 3
Cbc0038I Pass  30: suminf.    0.39746 (2) obj. -56.208 iterations 2
Cbc0038I Pass  31: suminf.    2.21238 (6) obj. -56.208 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 25 rows 16 columns, reduced to 23 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -53 - took 0.01 seconds
Cbc0012I Integer solution of -53 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 25 rows 16 columns, reduced to 18 rows 11 columns
Cbc0031I 7 added rows had average density of 11.714286
Cbc0013I At root node, 7 cuts changed objective from -83.955457 to -64.568019 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 309 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 263 row cuts average 15.1 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 16 row cuts average 7.1 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0001I Search completed - best objective -53, took 934 iterations and 6 nodes (0.10 seconds)
Cbc0032I Strong branching done 42 times (173 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 2, 11 variables fixed on reduced cost
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.10

