Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 35 (-12) rows, 22 (-2) columns and 106 (-23) elements
Clp1000I sum of infeasibilities 5.04133e-07 - average 1.44038e-08, 2 fixed columns
Coin0506I Presolve 32 (-3) rows, 20 (-2) columns and 96 (-10) elements
Clp0029I End of values pass after 20 iterations
Clp0000I Optimal - objective value 67.257934
Clp0000I Optimal - objective value 67.257934
Coin0511I After Postsolve, objective 67.257934, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 67.257934
Clp0000I Optimal - objective value 67.257934
Clp0000I Optimal - objective value 67.257934
Coin0511I After Postsolve, objective 67.257934, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.25793436 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 35 rows, 22 columns (21 integer (21 of which binary)) and 107 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.040%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 12 integers unsatisfied sum - 3.76591
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -13.0809 iterations 12
Cbc0038I Solution found of -13.0809
Cbc0038I Relaxing continuous gives -13.0809
Cbc0038I Rounding solution of -19.9265 is better than previous of -13.0809

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 22 columns, reduced to 22 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -19.9265 to -29.0423 (0.01 seconds)
Cbc0038I Round again with cutoff of -32.639
Cbc0038I Pass   2: suminf.    0.60408 (2) obj. -32.639 iterations 2
Cbc0038I Pass   3: suminf.    0.39822 (2) obj. -32.639 iterations 2
Cbc0038I Pass   4: suminf.    1.13899 (4) obj. -32.639 iterations 7
Cbc0038I Pass   5: suminf.    0.68516 (3) obj. -32.639 iterations 3
Cbc0038I Pass   6: suminf.    0.60408 (2) obj. -32.639 iterations 5
Cbc0038I Pass   7: suminf.    0.57883 (3) obj. -32.639 iterations 4
Cbc0038I Pass   8: suminf.    1.06447 (3) obj. -32.639 iterations 3
Cbc0038I Pass   9: suminf.    1.21413 (3) obj. -32.639 iterations 4
Cbc0038I Pass  10: suminf.    0.88241 (2) obj. -32.639 iterations 2
Cbc0038I Pass  11: suminf.    0.16189 (2) obj. -32.639 iterations 2
Cbc0038I Pass  12: suminf.    0.62131 (2) obj. -32.639 iterations 3
Cbc0038I Pass  13: suminf.    0.57883 (3) obj. -32.639 iterations 3
Cbc0038I Pass  14: suminf.    1.06447 (3) obj. -32.639 iterations 3
Cbc0038I Pass  15: suminf.    0.60408 (2) obj. -32.639 iterations 3
Cbc0038I Pass  16: suminf.    1.19745 (5) obj. -32.639 iterations 1
Cbc0038I Pass  17: suminf.    0.60408 (2) obj. -32.639 iterations 2
Cbc0038I Pass  18: suminf.    1.17562 (4) obj. -32.639 iterations 7
Cbc0038I Pass  19: suminf.    0.68394 (3) obj. -32.639 iterations 2
Cbc0038I Pass  20: suminf.    0.99130 (3) obj. -32.639 iterations 4
Cbc0038I Pass  21: suminf.    0.84423 (3) obj. -32.639 iterations 7
Cbc0038I Pass  22: suminf.    0.62065 (3) obj. -32.639 iterations 1
Cbc0038I Pass  23: suminf.    0.62065 (3) obj. -32.639 iterations 0
Cbc0038I Pass  24: suminf.    0.39264 (2) obj. -32.639 iterations 4
Cbc0038I Pass  25: suminf.    0.99130 (3) obj. -32.639 iterations 3
Cbc0038I Pass  26: suminf.    0.84423 (3) obj. -32.639 iterations 7
Cbc0038I Pass  27: suminf.    0.62065 (3) obj. -32.639 iterations 1
Cbc0038I Pass  28: suminf.    0.62065 (3) obj. -32.639 iterations 0
Cbc0038I Pass  29: suminf.    0.39264 (2) obj. -32.639 iterations 4
Cbc0038I Pass  30: suminf.    0.99130 (3) obj. -32.639 iterations 3
Cbc0038I Pass  31: suminf.    0.84423 (3) obj. -32.639 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 22 columns, reduced to 24 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -29.0423 - took 0.01 seconds
Cbc0012I Integer solution of -29.0423 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 35 rows 22 columns, reduced to 22 rows 13 columns
Cbc0031I 6 added rows had average density of 16
Cbc0013I At root node, 6 cuts changed objective from -65.00828 to -39.310602 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1385 row cuts average 4.1 elements, 3 column cuts (3 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 701 row cuts average 18.4 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 9 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 159 row cuts average 15.8 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0001I Search completed - best objective -29.0423, took 1914 iterations and 2 nodes (0.14 seconds)
Cbc0032I Strong branching done 18 times (159 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.13   (Wallclock seconds):       0.14

