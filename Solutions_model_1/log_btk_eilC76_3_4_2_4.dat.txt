Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 140 (-15) rows, 76 (-2) columns and 424 (-29) elements
Clp1000I sum of infeasibilities 1.17743e-06 - average 8.41021e-09, 12 fixed columns
Coin0506I Presolve 116 (-24) rows, 64 (-12) columns and 352 (-72) elements
Clp0029I End of values pass after 64 iterations
Clp0014I Perturbing problem by 0.001% of 0.28824022 - largest nonzero change 0 ( 0%) - largest zero change 2.7926465e-05
Clp0000I Optimal - objective value 31.863207
Clp0000I Optimal - objective value 31.863207
Coin0511I After Postsolve, objective 31.863207, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 31.863207
Clp0000I Optimal - objective value 31.863207
Clp0000I Optimal - objective value 31.863207
Coin0511I After Postsolve, objective 31.863207, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 31.86320711 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 140 rows, 76 columns (75 integer (75 of which binary)) and 424 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.187%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 35 integers unsatisfied sum - 9.2212
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 14.8701 iterations 48
Cbc0038I Solution found of 14.8701
Cbc0038I Relaxing continuous gives 14.8701
Cbc0038I Rounding solution of -2.48557 is better than previous of 14.8701

Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 140 rows 76 columns, reduced to 64 rows 36 columns
Cbc0038I Mini branch and bound improved solution from -2.48557 to -8.09991 (0.03 seconds)
Cbc0038I Round again with cutoff of -10.4763
Cbc0038I Pass   2: suminf.    2.17727 (24) obj. -10.4763 iterations 36
Cbc0038I Pass   3: suminf.    2.17727 (24) obj. -10.4763 iterations 0
Cbc0038I Pass   4: suminf.    1.01534 (6) obj. -10.4763 iterations 35
Cbc0038I Pass   5: suminf.    0.71811 (5) obj. -10.4763 iterations 4
Cbc0038I Pass   6: suminf.    1.43882 (6) obj. -10.4763 iterations 8
Cbc0038I Pass   7: suminf.    1.38951 (6) obj. -10.4763 iterations 2
Cbc0038I Pass   8: suminf.    2.54790 (6) obj. -10.4763 iterations 7
Cbc0038I Pass   9: suminf.    1.47810 (6) obj. -10.4763 iterations 4
Cbc0038I Pass  10: suminf.    1.19910 (5) obj. -10.4763 iterations 2
Cbc0038I Pass  11: suminf.    1.78132 (6) obj. -10.4763 iterations 4
Cbc0038I Pass  12: suminf.    1.57981 (5) obj. -10.4763 iterations 3
Cbc0038I Pass  13: suminf.    1.47810 (6) obj. -10.4763 iterations 6
Cbc0038I Pass  14: suminf.    2.77490 (9) obj. -10.4763 iterations 17
Cbc0038I Pass  15: suminf.    2.39871 (8) obj. -10.4763 iterations 11
Cbc0038I Pass  16: suminf.    2.40622 (8) obj. -10.4763 iterations 8
Cbc0038I Pass  17: suminf.    2.14276 (6) obj. -10.4763 iterations 1
Cbc0038I Pass  18: suminf.    1.89590 (6) obj. -10.4763 iterations 6
Cbc0038I Pass  19: suminf.    1.88076 (6) obj. -10.4763 iterations 1
Cbc0038I Pass  20: suminf.    1.68473 (5) obj. -10.4763 iterations 9
Cbc0038I Pass  21: suminf.    1.58000 (5) obj. -10.4763 iterations 4
Cbc0038I Pass  22: suminf.    1.96115 (5) obj. -10.4763 iterations 2
Cbc0038I Pass  23: suminf.    1.96115 (5) obj. -10.4763 iterations 0
Cbc0038I Pass  24: suminf.    1.50021 (4) obj. -10.4763 iterations 3
Cbc0038I Pass  25: suminf.    1.10558 (3) obj. -10.4763 iterations 2
Cbc0038I Pass  26: suminf.    1.37574 (4) obj. -10.4763 iterations 4
Cbc0038I Pass  27: suminf.    1.14352 (4) obj. -10.4763 iterations 1
Cbc0038I Pass  28: suminf.    3.08915 (9) obj. -10.4763 iterations 19
Cbc0038I Pass  29: suminf.    1.81306 (6) obj. -10.4763 iterations 15
Cbc0038I Pass  30: suminf.    1.53463 (4) obj. -10.4763 iterations 1
Cbc0038I Pass  31: suminf.    1.66284 (4) obj. -10.4763 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 140 rows 76 columns, reduced to 76 rows 43 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -8.09991 - took 0.06 seconds
Cbc0012I Integer solution of -8.099913 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 140 rows 76 columns, reduced to 64 rows 36 columns
Cbc0031I 29 added rows had average density of 36.206897
Cbc0013I At root node, 29 cuts changed objective from -31.863207 to -24.99806 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13310 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.087 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1780 row cuts average 75.8 elements, 0 column cuts (0 active)  in 0.085 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.061 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 147 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -8.099913 best solution, best possible -24.99806 (0.87 seconds)
Cbc0012I Integer solution of -8.1007147 found by rounding after 9395 iterations and 39 nodes (1.09 seconds)
Cbc0038I Full problem 140 rows 76 columns, reduced to 2 rows 6 columns
Cbc0016I Integer solution of -8.1753147 found by strong branching after 9595 iterations and 50 nodes (1.11 seconds)
Cbc0012I Integer solution of -8.176363 found by rounding after 9696 iterations and 56 nodes (1.12 seconds)
Cbc0016I Integer solution of -8.372021 found by strong branching after 9955 iterations and 74 nodes (1.14 seconds)
Cbc0038I Full problem 140 rows 76 columns, reduced to 2 rows 5 columns
Cbc0001I Search completed - best objective -8.372020999999997, took 11111 iterations and 110 nodes (1.21 seconds)
Cbc0032I Strong branching done 908 times (14398 iterations), fathomed 17 nodes and fixed 31 variables
Cbc0035I Maximum depth 25, 317 variables fixed on reduced cost
Total time (CPU seconds):       1.18   (Wallclock seconds):       1.22

