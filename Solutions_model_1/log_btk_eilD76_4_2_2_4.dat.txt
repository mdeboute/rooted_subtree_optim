Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 131 (-24) rows, 76 (-2) columns and 406 (-47) elements
Clp1000I sum of infeasibilities 3.59598e-05 - average 2.74502e-07, 10 fixed columns
Coin0506I Presolve 113 (-18) rows, 66 (-10) columns and 350 (-56) elements
Clp0029I End of values pass after 66 iterations
Clp0000I Optimal - objective value 37.075118
Clp0000I Optimal - objective value 37.075118
Coin0511I After Postsolve, objective 37.075118, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 37.075118
Clp0000I Optimal - objective value 37.075118
Clp0000I Optimal - objective value 37.075118
Coin0511I After Postsolve, objective 37.075118, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 37.07511766 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 131 rows, 76 columns (75 integer (75 of which binary)) and 406 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.109%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 51 integers unsatisfied sum - 11.0034
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 10.2357 iterations 55
Cbc0038I Solution found of 10.2357
Cbc0038I Relaxing continuous gives 10.2357
Cbc0038I Rounding solution of 4.0391 is better than previous of 10.2357

Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 76 columns, reduced to 87 rows 52 columns
Cbc0038I Mini branch and bound improved solution from 4.0391 to -2.70093 (0.05 seconds)
Cbc0038I Round again with cutoff of -6.13844
Cbc0038I Pass   2: suminf.    0.57013 (26) obj. -6.13844 iterations 28
Cbc0038I Pass   3: suminf.    0.54906 (40) obj. -6.13844 iterations 14
Cbc0038I Pass   4: suminf.    1.34990 (8) obj. -6.13844 iterations 48
Cbc0038I Pass   5: suminf.    1.00678 (8) obj. -6.13844 iterations 4
Cbc0038I Pass   6: suminf.    3.02824 (9) obj. -6.13844 iterations 16
Cbc0038I Pass   7: suminf.    1.86623 (10) obj. -6.13844 iterations 10
Cbc0038I Pass   8: suminf.    1.40894 (9) obj. -6.13844 iterations 3
Cbc0038I Pass   9: suminf.    2.02891 (7) obj. -6.13844 iterations 12
Cbc0038I Pass  10: suminf.    1.95915 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  11: suminf.    1.95915 (6) obj. -6.13844 iterations 0
Cbc0038I Pass  12: suminf.    2.00624 (6) obj. -6.13844 iterations 5
Cbc0038I Pass  13: suminf.    1.94687 (5) obj. -6.13844 iterations 1
Cbc0038I Pass  14: suminf.    1.94687 (5) obj. -6.13844 iterations 0
Cbc0038I Pass  15: suminf.    2.26152 (7) obj. -6.13844 iterations 4
Cbc0038I Pass  16: suminf.    2.22757 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  17: suminf.    2.25255 (8) obj. -6.13844 iterations 5
Cbc0038I Pass  18: suminf.    2.17932 (7) obj. -6.13844 iterations 1
Cbc0038I Pass  19: suminf.    2.39948 (6) obj. -6.13844 iterations 5
Cbc0038I Pass  20: suminf.    1.64708 (5) obj. -6.13844 iterations 4
Cbc0038I Pass  21: suminf.    1.51611 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  22: suminf.    2.26152 (7) obj. -6.13844 iterations 9
Cbc0038I Pass  23: suminf.    2.22757 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  24: suminf.    2.25255 (8) obj. -6.13844 iterations 5
Cbc0038I Pass  25: suminf.    2.17932 (7) obj. -6.13844 iterations 1
Cbc0038I Pass  26: suminf.    2.39948 (6) obj. -6.13844 iterations 5
Cbc0038I Pass  27: suminf.    1.64708 (5) obj. -6.13844 iterations 4
Cbc0038I Pass  28: suminf.    1.51611 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  29: suminf.    2.26152 (7) obj. -6.13844 iterations 9
Cbc0038I Pass  30: suminf.    2.22757 (6) obj. -6.13844 iterations 1
Cbc0038I Pass  31: suminf.    2.25255 (8) obj. -6.13844 iterations 5
Cbc0038I Rounding solution of -3.79339 is better than previous of -2.70093

Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 76 columns, reduced to 90 rows 54 columns
Cbc0038I Mini branch and bound improved solution from -3.79339 to -4.41102 (0.13 seconds)
Cbc0038I Round again with cutoff of -12.3258
Cbc0038I Pass  31: suminf.    2.61227 (26) obj. -12.3258 iterations 0
Cbc0038I Pass  32: suminf.    2.51572 (40) obj. -12.3258 iterations 14
Cbc0038I Pass  33: suminf.    2.92224 (11) obj. -12.3258 iterations 33
Cbc0038I Pass  34: suminf.    2.19206 (10) obj. -12.3258 iterations 6
Cbc0038I Pass  35: suminf.    3.42017 (17) obj. -12.3258 iterations 23
Cbc0038I Pass  36: suminf.    3.30310 (11) obj. -12.3258 iterations 12
Cbc0038I Pass  37: suminf.    2.59097 (8) obj. -12.3258 iterations 3
Cbc0038I Pass  38: suminf.    3.30583 (11) obj. -12.3258 iterations 6
Cbc0038I Pass  39: suminf.    3.29988 (10) obj. -12.3258 iterations 1
Cbc0038I Pass  40: suminf.    3.06742 (9) obj. -12.3258 iterations 9
Cbc0038I Pass  41: suminf.    2.72931 (10) obj. -12.3258 iterations 1
Cbc0038I Pass  42: suminf.    2.72931 (10) obj. -12.3258 iterations 0
Cbc0038I Pass  43: suminf.    3.04827 (7) obj. -12.3258 iterations 8
Cbc0038I Pass  44: suminf.    2.31940 (7) obj. -12.3258 iterations 3
Cbc0038I Pass  45: suminf.    2.31940 (7) obj. -12.3258 iterations 0
Cbc0038I Pass  46: suminf.    2.60139 (7) obj. -12.3258 iterations 5
Cbc0038I Pass  47: suminf.    2.60020 (6) obj. -12.3258 iterations 1
Cbc0038I Pass  48: suminf.    2.60020 (6) obj. -12.3258 iterations 0
Cbc0038I Pass  49: suminf.    2.35157 (6) obj. -12.3258 iterations 2
Cbc0038I Pass  50: suminf.    2.19188 (6) obj. -12.3258 iterations 1
Cbc0038I Pass  51: suminf.    2.19188 (6) obj. -12.3258 iterations 0
Cbc0038I Pass  52: suminf.    2.60139 (7) obj. -12.3258 iterations 5
Cbc0038I Pass  53: suminf.    2.60020 (6) obj. -12.3258 iterations 1
Cbc0038I Pass  54: suminf.    2.60020 (6) obj. -12.3258 iterations 0
Cbc0038I Pass  55: suminf.    2.35157 (6) obj. -12.3258 iterations 2
Cbc0038I Pass  56: suminf.    2.19188 (6) obj. -12.3258 iterations 1
Cbc0038I Pass  57: suminf.    2.19188 (6) obj. -12.3258 iterations 0
Cbc0038I Pass  58: suminf.    2.60139 (7) obj. -12.3258 iterations 5
Cbc0038I Pass  59: suminf.    2.60020 (6) obj. -12.3258 iterations 1
Cbc0038I Pass  60: suminf.    2.60020 (6) obj. -12.3258 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 76 columns, reduced to 90 rows 54 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of -4.41102 - took 0.17 seconds
Cbc0012I Integer solution of -4.41102 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 131 rows 76 columns, reduced to 87 rows 52 columns
Cbc0031I 35 added rows had average density of 55.171429
Cbc0013I At root node, 35 cuts changed objective from -37.075118 to -27.140193 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14852 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.093 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1837 row cuts average 75.7 elements, 0 column cuts (0 active)  in 0.104 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 38 row cuts average 3.9 elements, 0 column cuts (0 active)  in 0.095 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 196 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -4.41102 best solution, best possible -27.140193 (1.17 seconds)
Cbc0012I Integer solution of -4.869196 found by rounding after 9673 iterations and 37 nodes (1.36 seconds)
Cbc0038I Full problem 131 rows 76 columns, reduced to 18 rows 15 columns
Cbc0038I Full problem 131 rows 76 columns, reduced to 14 rows 15 columns
Cbc0001I Search completed - best objective -4.869195999999995, took 12995 iterations and 130 nodes (1.70 seconds)
Cbc0032I Strong branching done 1482 times (19786 iterations), fathomed 9 nodes and fixed 113 variables
Cbc0035I Maximum depth 22, 439 variables fixed on reduced cost
Total time (CPU seconds):       1.63   (Wallclock seconds):       1.71

