Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 288 (-38) rows, 146 (-18) columns and 719 (-90) elements
Clp1000I sum of infeasibilities 0.242563 - average 0.000842233, 25 fixed columns
Coin0506I Presolve 237 (-51) rows, 121 (-25) columns and 592 (-127) elements
Clp0029I End of values pass after 121 iterations
Clp0000I Optimal - objective value 12626.32
Clp0000I Optimal - objective value 12626.32
Coin0511I After Postsolve, objective 12626.32, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.17312241 - largest nonzero change 0 ( 0%) - largest zero change 2.9723757e-05
Clp0000I Optimal - objective value 12626.32
Clp0000I Optimal - objective value 12626.32
Clp0000I Optimal - objective value 12626.32
Coin0511I After Postsolve, objective 12626.32, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 12626.31972 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 288 rows, 146 columns (145 integer (145 of which binary)) and 719 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.671%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 117 integers unsatisfied sum - 28.2975
Cbc0038I Solution found of 3110
Cbc0038I Relaxing continuous gives 2305.24
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 288 rows 146 columns, reduced to 231 rows 118 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 812.084
Cbc0038I Pass   1: suminf.    0.35228 (1) obj. 812.084 iterations 120
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. 812.084 iterations 3
Cbc0038I Solution found of 812.084
Cbc0038I Relaxing continuous gives 0
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 288 rows 146 columns, reduced to 234 rows 119 columns - 0 fixed gives 234, 119 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -2525.26
Cbc0038I Pass   3: suminf.    4.89034 (70) obj. -2525.26 iterations 54
Cbc0038I Pass   4: suminf.    4.80589 (72) obj. -2525.26 iterations 11
Cbc0038I Pass   5: suminf.    4.48400 (38) obj. -2525.26 iterations 60
Cbc0038I Pass   6: suminf.    4.32330 (38) obj. -2525.26 iterations 2
Cbc0038I Pass   7: suminf.    9.14059 (35) obj. -2525.26 iterations 32
Cbc0038I Pass   8: suminf.    6.32805 (32) obj. -2525.26 iterations 15
Cbc0038I Pass   9: suminf.    6.21942 (32) obj. -2525.26 iterations 2
Cbc0038I Pass  10: suminf.    6.58586 (32) obj. -2525.26 iterations 11
Cbc0038I Pass  11: suminf.    5.55679 (35) obj. -2525.26 iterations 12
Cbc0038I Pass  12: suminf.    7.62072 (28) obj. -2525.26 iterations 22
Cbc0038I Pass  13: suminf.    5.60847 (34) obj. -2525.26 iterations 16
Cbc0038I Pass  14: suminf.    5.43705 (33) obj. -2525.26 iterations 3
Cbc0038I Pass  15: suminf.    7.74966 (26) obj. -2525.26 iterations 26
Cbc0038I Pass  16: suminf.    5.37275 (36) obj. -2525.26 iterations 21
Cbc0038I Pass  17: suminf.    4.81965 (36) obj. -2525.26 iterations 4
Cbc0038I Pass  18: suminf.    7.76412 (36) obj. -2525.26 iterations 16
Cbc0038I Pass  19: suminf.    6.35740 (35) obj. -2525.26 iterations 9
Cbc0038I Pass  20: suminf.    5.25501 (36) obj. -2525.26 iterations 4
Cbc0038I Pass  21: suminf.    4.58009 (37) obj. -2525.26 iterations 6
Cbc0038I Pass  22: suminf.    8.09111 (29) obj. -2525.26 iterations 31
Cbc0038I Pass  23: suminf.    6.32805 (32) obj. -2525.26 iterations 15
Cbc0038I Pass  24: suminf.    6.21942 (32) obj. -2525.26 iterations 2
Cbc0038I Pass  25: suminf.    5.88840 (34) obj. -2525.26 iterations 19
Cbc0038I Pass  26: suminf.    4.81965 (36) obj. -2525.26 iterations 9
Cbc0038I Pass  27: suminf.    4.81965 (36) obj. -2525.26 iterations 0
Cbc0038I Pass  28: suminf.    5.02644 (36) obj. -2525.26 iterations 11
Cbc0038I Pass  29: suminf.    4.03870 (39) obj. -2525.26 iterations 12
Cbc0038I Pass  30: suminf.    7.93728 (37) obj. -2525.26 iterations 19
Cbc0038I Pass  31: suminf.    6.35740 (35) obj. -2525.26 iterations 10
Cbc0038I Pass  32: suminf.    5.25501 (36) obj. -2525.26 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 288 rows 146 columns, reduced to 234 rows 119 columns - 0 fixed gives 234, 119 - still too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 0 - took 0.02 seconds
Cbc0012I Integer solution of 0 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 25 added rows had average density of 93.2
Cbc0013I At root node, 25 cuts changed objective from -12626.32 to -7263.5779 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 33265 row cuts average 5.8 elements, 1 column cuts (1 active)  in 0.373 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2260 row cuts average 130.9 elements, 0 column cuts (0 active)  in 0.208 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.194 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.221 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 168 row cuts average 107.6 elements, 0 column cuts (0 active)  in 0.095 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 0 best solution, best possible -7263.5779 (2.53 seconds)
Cbc0012I Integer solution of -69.398961 found by DiveCoefficient after 10625 iterations and 13 nodes (2.86 seconds)
Cbc0012I Integer solution of -170.17062 found by rounding after 10714 iterations and 21 nodes (2.88 seconds)
Cbc0012I Integer solution of -183.34696 found by rounding after 10795 iterations and 29 nodes (2.89 seconds)
Cbc0004I Integer solution of -184.31196 found after 10874 iterations and 37 nodes (2.89 seconds)
Cbc0012I Integer solution of -198.04896 found by rounding after 10884 iterations and 38 nodes (2.89 seconds)
Cbc0038I Full problem 288 rows 146 columns, reduced to 8 rows 11 columns
Cbc0016I Integer solution of -213.7839 found by strong branching after 10989 iterations and 57 nodes (2.93 seconds)
Cbc0012I Integer solution of -436.2176 found by rounding after 11167 iterations and 81 nodes (2.95 seconds)
Cbc0016I Integer solution of -442.9662 found by strong branching after 11250 iterations and 85 nodes (2.97 seconds)
Cbc0012I Integer solution of -462.1087 found by rounding after 11302 iterations and 89 nodes (2.97 seconds)
Cbc0001I Search completed - best objective -462.108701000001, took 12542 iterations and 110 nodes (3.06 seconds)
Cbc0032I Strong branching done 816 times (19556 iterations), fathomed 22 nodes and fixed 9 variables
Cbc0035I Maximum depth 16, 292 variables fixed on reduced cost
Total time (CPU seconds):       3.02   (Wallclock seconds):       3.09

