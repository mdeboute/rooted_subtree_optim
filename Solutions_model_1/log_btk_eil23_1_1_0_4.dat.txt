Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 24 (-25) rows, 16 (-9) columns and 73 (-62) elements
Clp0000I Optimal - objective value 126.19555
Coin0511I After Postsolve, objective 126.19555, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 126.1955547 - 13 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 24 rows, 16 columns (15 integer (15 of which binary)) and 74 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.114%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 7 integers unsatisfied sum - 1.46967
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -67.2858 iterations 11
Cbc0038I Solution found of -67.2858
Cbc0038I Relaxing continuous gives -67.2858
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 24 rows 16 columns, reduced to 6 rows 6 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -73.1768
Cbc0038I Pass   2: suminf.    0.06694 (1) obj. -73.1768 iterations 1
Cbc0038I Pass   3: suminf.    0.29441 (2) obj. -73.1768 iterations 3
Cbc0038I Pass   4: suminf.    0.64117 (4) obj. -73.1768 iterations 5
Cbc0038I Pass   5: suminf.    0.62076 (3) obj. -73.1768 iterations 1
Cbc0038I Pass   6: suminf.    0.61503 (3) obj. -73.1768 iterations 1
Cbc0038I Pass   7: suminf.    0.53348 (3) obj. -73.1768 iterations 2
Cbc0038I Pass   8: suminf.    1.41928 (3) obj. -73.1768 iterations 1
Cbc0038I Pass   9: suminf.    0.53348 (3) obj. -73.1768 iterations 1
Cbc0038I Pass  10: suminf.    0.51656 (2) obj. -73.1768 iterations 8
Cbc0038I Pass  11: suminf.    0.51656 (2) obj. -73.1768 iterations 1
Cbc0038I Pass  12: suminf.    0.45878 (1) obj. -73.1768 iterations 2
Cbc0038I Pass  13: suminf.    0.28948 (2) obj. -73.1768 iterations 2
Cbc0038I Pass  14: suminf.    0.36624 (2) obj. -73.1768 iterations 2
Cbc0038I Pass  15: suminf.    0.36624 (2) obj. -73.1768 iterations 2
Cbc0038I Pass  16: suminf.    0.66256 (3) obj. -73.1768 iterations 3
Cbc0038I Pass  17: suminf.    1.30271 (3) obj. -73.1768 iterations 1
Cbc0038I Pass  18: suminf.    0.52533 (3) obj. -73.1768 iterations 6
Cbc0038I Pass  19: suminf.    0.38740 (2) obj. -73.1768 iterations 3
Cbc0038I Pass  20: suminf.    0.39631 (2) obj. -73.1768 iterations 2
Cbc0038I Pass  21: suminf.    0.35311 (2) obj. -73.1768 iterations 1
Cbc0038I Pass  22: suminf.    0.73628 (4) obj. -73.1768 iterations 3
Cbc0038I Pass  23: suminf.    0.71588 (3) obj. -73.1768 iterations 1
Cbc0038I Pass  24: suminf.    0.80586 (3) obj. -73.1768 iterations 1
Cbc0038I Pass  25: suminf.    0.60068 (3) obj. -73.1768 iterations 2
Cbc0038I Pass  26: suminf.    0.60068 (3) obj. -73.1768 iterations 0
Cbc0038I Pass  27: suminf.    1.31584 (3) obj. -73.1768 iterations 1
Cbc0038I Pass  28: suminf.    1.31584 (3) obj. -73.1768 iterations 0
Cbc0038I Pass  29: suminf.    1.18587 (5) obj. -73.1768 iterations 6
Cbc0038I Pass  30: suminf.    0.35311 (2) obj. -73.1768 iterations 6
Cbc0038I Pass  31: suminf.    0.73628 (4) obj. -73.1768 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 24 rows 16 columns, reduced to 6 rows 6 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -67.2858 - took 0.00 seconds
Cbc0012I Integer solution of -67.28576 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 24 rows 16 columns, reduced to 6 rows 6 columns
Cbc0031I 2 added rows had average density of 6.5
Cbc0013I At root node, 34 cuts changed objective from -126.19555 to -67.28576 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 28 row cuts average 2.7 elements, 3 column cuts (3 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 4 row cuts average 6.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -67.28575999999998, took 8 iterations and 0 nodes (0.01 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.01   (Wallclock seconds):       0.01

