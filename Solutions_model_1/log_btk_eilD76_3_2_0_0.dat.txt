Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 130 (-25) rows, 72 (-6) columns and 396 (-57) elements
Clp1000I sum of infeasibilities 7.18804e-05 - average 5.52926e-07, 11 fixed columns
Coin0506I Presolve 107 (-23) rows, 60 (-12) columns and 326 (-70) elements
Clp0029I End of values pass after 60 iterations
Clp0000I Optimal - objective value 78.103178
Clp0000I Optimal - objective value 78.103178
Coin0511I After Postsolve, objective 78.103178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 78.103178
Clp0000I Optimal - objective value 78.103178
Clp0000I Optimal - objective value 78.103178
Coin0511I After Postsolve, objective 78.103178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 78.10317751 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 130 rows, 72 columns (71 integer (71 of which binary)) and 396 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.226%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 45 integers unsatisfied sum - 10.6782
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -10.2437 iterations 55
Cbc0038I Solution found of -10.2437
Cbc0038I Relaxing continuous gives -10.2437
Cbc0038I Rounding solution of -20.3852 is better than previous of -10.2437

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 130 rows 72 columns, reduced to 81 rows 46 columns
Cbc0038I Mini branch and bound improved solution from -20.3852 to -51.9951 (0.06 seconds)
Cbc0038I Round again with cutoff of -54.606
Cbc0038I Pass   2: suminf.    2.08378 (7) obj. -54.606 iterations 7
Cbc0038I Pass   3: suminf.    0.36538 (2) obj. -54.606 iterations 6
Cbc0038I Pass   4: suminf.    1.01913 (4) obj. -54.606 iterations 3
Cbc0038I Pass   5: suminf.    1.01913 (4) obj. -54.606 iterations 1
Cbc0038I Pass   6: suminf.    0.94857 (3) obj. -54.606 iterations 5
Cbc0038I Pass   7: suminf.    0.94857 (3) obj. -54.606 iterations 0
Cbc0038I Pass   8: suminf.    1.01913 (4) obj. -54.606 iterations 5
Cbc0038I Pass   9: suminf.    2.98019 (11) obj. -54.606 iterations 15
Cbc0038I Pass  10: suminf.    1.17305 (5) obj. -54.606 iterations 12
Cbc0038I Pass  11: suminf.    0.61609 (2) obj. -54.606 iterations 4
Cbc0038I Pass  12: suminf.    0.48185 (3) obj. -54.606 iterations 2
Cbc0038I Pass  13: suminf.    1.08098 (3) obj. -54.606 iterations 2
Cbc0038I Pass  14: suminf.    1.08098 (3) obj. -54.606 iterations 0
Cbc0038I Pass  15: suminf.    0.48739 (3) obj. -54.606 iterations 3
Cbc0038I Pass  16: suminf.    4.05079 (12) obj. -54.606 iterations 15
Cbc0038I Pass  17: suminf.    1.58477 (7) obj. -54.606 iterations 16
Cbc0038I Pass  18: suminf.    1.58779 (7) obj. -54.606 iterations 1
Cbc0038I Pass  19: suminf.    1.12662 (6) obj. -54.606 iterations 7
Cbc0038I Pass  20: suminf.    0.74860 (6) obj. -54.606 iterations 4
Cbc0038I Pass  21: suminf.    0.32805 (3) obj. -54.606 iterations 3
Cbc0038I Pass  22: suminf.    0.82290 (5) obj. -54.606 iterations 5
Cbc0038I Pass  23: suminf.    0.65418 (4) obj. -54.606 iterations 2
Cbc0038I Pass  24: suminf.    1.39527 (4) obj. -54.606 iterations 5
Cbc0038I Pass  25: suminf.    1.25334 (4) obj. -54.606 iterations 2
Cbc0038I Pass  26: suminf.    0.75133 (4) obj. -54.606 iterations 5
Cbc0038I Pass  27: suminf.    6.03669 (18) obj. -54.606 iterations 32
Cbc0038I Pass  28: suminf.    1.93607 (8) obj. -54.606 iterations 23
Cbc0038I Pass  29: suminf.    1.29092 (5) obj. -54.606 iterations 21
Cbc0038I Pass  30: suminf.    1.18906 (6) obj. -54.606 iterations 4
Cbc0038I Pass  31: suminf.    1.92785 (6) obj. -54.606 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 130 rows 72 columns, reduced to 96 rows 54 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -51.9951 - took 0.09 seconds
Cbc0012I Integer solution of -51.99508 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 130 rows 72 columns, reduced to 81 rows 46 columns
Cbc0031I 25 added rows had average density of 53.24
Cbc0013I At root node, 25 cuts changed objective from -78.103178 to -65.388151 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 11050 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.078 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2114 row cuts average 71.9 elements, 0 column cuts (0 active)  in 0.075 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 102 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.073 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 196 row cuts average 71.4 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -51.99508 best solution, best possible -65.388151 (0.83 seconds)
Cbc0001I Search completed - best objective -51.99508, took 7865 iterations and 46 nodes (1.03 seconds)
Cbc0032I Strong branching done 620 times (11298 iterations), fathomed 8 nodes and fixed 23 variables
Cbc0035I Maximum depth 15, 125 variables fixed on reduced cost
Total time (CPU seconds):       1.00   (Wallclock seconds):       1.04

