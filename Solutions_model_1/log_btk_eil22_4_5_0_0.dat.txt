Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 32 (-15) rows, 20 (-4) columns and 96 (-33) elements
Clp1000I sum of infeasibilities 7.14839e-06 - average 2.23387e-07, 4 fixed columns
Coin0506I Presolve 24 (-8) rows, 16 (-4) columns and 72 (-24) elements
Clp0029I End of values pass after 16 iterations
Clp0000I Optimal - objective value 107.99323
Clp0000I Optimal - objective value 107.99323
Coin0511I After Postsolve, objective 107.99323, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 107.99323
Clp0000I Optimal - objective value 107.99323
Clp0000I Optimal - objective value 107.99323
Coin0511I After Postsolve, objective 107.99323, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 107.993233 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 32 rows, 20 columns (19 integer (19 of which binary)) and 97 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.902%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 11 integers unsatisfied sum - 3.85962
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -39.189 iterations 12
Cbc0038I Solution found of -39.189
Cbc0038I Relaxing continuous gives -39.189
Cbc0038I Rounding solution of -39.9668 is better than previous of -39.189

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 32 rows 20 columns, reduced to 17 rows 12 columns
Cbc0038I Mini branch and bound improved solution from -39.9668 to -71.8668 (0.01 seconds)
Cbc0038I Round again with cutoff of -75.3625
Cbc0038I Pass   2: suminf.    0.21331 (2) obj. -75.3625 iterations 2
Cbc0038I Pass   3: suminf.    0.10621 (2) obj. -75.3625 iterations 1
Cbc0038I Pass   4: suminf.    0.67718 (2) obj. -75.3625 iterations 1
Cbc0038I Pass   5: suminf.    0.57167 (3) obj. -75.3625 iterations 3
Cbc0038I Pass   6: suminf.    0.49668 (4) obj. -75.3625 iterations 3
Cbc0038I Pass   7: suminf.    0.54680 (2) obj. -75.3625 iterations 5
Cbc0038I Pass   8: suminf.    0.21331 (2) obj. -75.3625 iterations 4
Cbc0038I Pass   9: suminf.    0.10621 (2) obj. -75.3625 iterations 1
Cbc0038I Pass  10: suminf.    0.67718 (2) obj. -75.3625 iterations 1
Cbc0038I Pass  11: suminf.    0.35714 (1) obj. -75.3625 iterations 3
Cbc0038I Pass  12: suminf.    0.35714 (1) obj. -75.3625 iterations 1
Cbc0038I Pass  13: suminf.    0.30568 (1) obj. -75.3625 iterations 2
Cbc0038I Pass  14: suminf.    0.42857 (1) obj. -75.3625 iterations 1
Cbc0038I Pass  15: suminf.    0.69037 (2) obj. -75.3625 iterations 5
Cbc0038I Pass  16: suminf.    0.69037 (2) obj. -75.3625 iterations 1
Cbc0038I Pass  17: suminf.    0.14471 (2) obj. -75.3625 iterations 1
Cbc0038I Pass  18: suminf.    1.12621 (4) obj. -75.3625 iterations 3
Cbc0038I Pass  19: suminf.    0.30457 (1) obj. -75.3625 iterations 3
Cbc0038I Pass  20: suminf.    0.26992 (2) obj. -75.3625 iterations 2
Cbc0038I Pass  21: suminf.    0.58066 (3) obj. -75.3625 iterations 3
Cbc0038I Pass  22: suminf.    1.59455 (6) obj. -75.3625 iterations 8
Cbc0038I Pass  23: suminf.    1.28275 (4) obj. -75.3625 iterations 2
Cbc0038I Pass  24: suminf.    1.31318 (5) obj. -75.3625 iterations 4
Cbc0038I Pass  25: suminf.    0.71537 (4) obj. -75.3625 iterations 1
Cbc0038I Pass  26: suminf.    0.68328 (3) obj. -75.3625 iterations 2
Cbc0038I Pass  27: suminf.    0.30457 (1) obj. -75.3625 iterations 4
Cbc0038I Pass  28: suminf.    0.26992 (2) obj. -75.3625 iterations 2
Cbc0038I Pass  29: suminf.    0.58066 (3) obj. -75.3625 iterations 3
Cbc0038I Pass  30: suminf.    0.97756 (5) obj. -75.3625 iterations 5
Cbc0038I Pass  31: suminf.    0.69768 (3) obj. -75.3625 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 32 rows 20 columns, reduced to 21 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -71.8668 - took 0.01 seconds
Cbc0012I Integer solution of -71.8668 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 32 rows 20 columns, reduced to 17 rows 12 columns
Cbc0031I 7 added rows had average density of 16.142857
Cbc0013I At root node, 7 cuts changed objective from -106.82254 to -82.248274 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 722 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 465 row cuts average 18.3 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 27 row cuts average 6.3 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 152 row cuts average 14.8 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -71.86679999999998, took 1376 iterations and 4 nodes (0.12 seconds)
Cbc0032I Strong branching done 42 times (285 iterations), fathomed 0 nodes and fixed 5 variables
Cbc0035I Maximum depth 1, 19 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.12

