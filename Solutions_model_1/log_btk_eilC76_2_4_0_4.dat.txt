Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 100 (-55) rows, 56 (-22) columns and 305 (-148) elements
Clp1000I sum of infeasibilities 1.72144e-05 - average 1.72144e-07, 25 fixed columns
Coin0506I Presolve 47 (-53) rows, 27 (-29) columns and 141 (-164) elements
Clp0029I End of values pass after 26 iterations
Clp0000I Optimal - objective value 158.20322
Clp0000I Optimal - objective value 158.20322
Coin0511I After Postsolve, objective 158.20322, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 158.20322
Clp0000I Optimal - objective value 158.20322
Clp0000I Optimal - objective value 158.20322
Coin0511I After Postsolve, objective 158.20322, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 158.2032232 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 100 rows, 56 columns (55 integer (55 of which binary)) and 305 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.549%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 20 integers unsatisfied sum - 6.13063
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -120.732 iterations 24
Cbc0038I Solution found of -120.732
Cbc0038I Relaxing continuous gives -120.732
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 100 rows 56 columns, reduced to 37 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -120.732 to -126.395 (0.02 seconds)
Cbc0038I Round again with cutoff of -129.576
Cbc0038I Pass   2: suminf.    0.59597 (3) obj. -129.576 iterations 6
Cbc0038I Pass   3: suminf.    0.44511 (3) obj. -129.576 iterations 14
Cbc0038I Pass   4: suminf.    0.44307 (3) obj. -129.576 iterations 7
Cbc0038I Pass   5: suminf.    0.82950 (3) obj. -129.576 iterations 7
Cbc0038I Pass   6: suminf.    1.91312 (5) obj. -129.576 iterations 8
Cbc0038I Pass   7: suminf.    1.91312 (5) obj. -129.576 iterations 3
Cbc0038I Pass   8: suminf.    1.06563 (4) obj. -129.576 iterations 17
Cbc0038I Pass   9: suminf.    0.92107 (4) obj. -129.576 iterations 10
Cbc0038I Pass  10: suminf.    0.91096 (3) obj. -129.576 iterations 14
Cbc0038I Pass  11: suminf.    0.59597 (3) obj. -129.576 iterations 3
Cbc0038I Pass  12: suminf.    0.44511 (3) obj. -129.576 iterations 14
Cbc0038I Pass  13: suminf.    0.44307 (3) obj. -129.576 iterations 7
Cbc0038I Pass  14: suminf.    0.82950 (3) obj. -129.576 iterations 6
Cbc0038I Pass  15: suminf.    4.30051 (13) obj. -129.576 iterations 21
Cbc0038I Pass  16: suminf.    2.82417 (10) obj. -129.576 iterations 7
Cbc0038I Pass  17: suminf.    2.82417 (10) obj. -129.576 iterations 0
Cbc0038I Pass  18: suminf.    2.72133 (6) obj. -129.576 iterations 18
Cbc0038I Pass  19: suminf.    0.92107 (4) obj. -129.576 iterations 9
Cbc0038I Pass  20: suminf.    0.91096 (3) obj. -129.576 iterations 19
Cbc0038I Pass  21: suminf.    0.59597 (3) obj. -129.576 iterations 3
Cbc0038I Pass  22: suminf.    0.44511 (3) obj. -129.576 iterations 14
Cbc0038I Pass  23: suminf.    0.44307 (3) obj. -129.576 iterations 9
Cbc0038I Pass  24: suminf.    0.82950 (3) obj. -129.576 iterations 6
Cbc0038I Pass  25: suminf.    0.76440 (3) obj. -129.576 iterations 22
Cbc0038I Pass  26: suminf.    0.52478 (2) obj. -129.576 iterations 11
Cbc0038I Pass  27: suminf.    0.32353 (1) obj. -129.576 iterations 4
Cbc0038I Pass  28: suminf.    0.40586 (1) obj. -129.576 iterations 1
Cbc0038I Pass  29: suminf.    5.01710 (15) obj. -129.576 iterations 22
Cbc0038I Pass  30: suminf.    1.92974 (5) obj. -129.576 iterations 8
Cbc0038I Pass  31: suminf.    1.51995 (4) obj. -129.576 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 100 rows 56 columns, reduced to 43 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -126.395 - took 0.03 seconds
Cbc0012I Integer solution of -126.3951 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 100 rows 56 columns, reduced to 37 rows 21 columns
Cbc0031I 8 added rows had average density of 15.125
Cbc0013I At root node, 8 cuts changed objective from -158.20322 to -142.2639 in 7 passes
Cbc0014I Cut generator 0 (Probing) - 77 row cuts average 3.3 elements, 13 column cuts (13 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 8 row cuts average 47.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -126.3951, took 197 iterations and 16 nodes (0.07 seconds)
Cbc0032I Strong branching done 70 times (288 iterations), fathomed 2 nodes and fixed 6 variables
Cbc0035I Maximum depth 4, 60 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

