Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 43 (-22) rows, 25 (-8) columns and 129 (-54) elements
Clp1000I sum of infeasibilities 4.55677e-06 - average 1.05971e-07, 5 fixed columns
Coin0506I Presolve 35 (-8) rows, 20 (-5) columns and 103 (-26) elements
Clp0029I End of values pass after 20 iterations
Clp0000I Optimal - objective value 90.743084
Clp0000I Optimal - objective value 90.743084
Coin0511I After Postsolve, objective 90.743084, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 90.743084
Clp0000I Optimal - objective value 90.743084
Clp0000I Optimal - objective value 90.743084
Coin0511I After Postsolve, objective 90.743084, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 90.74308447 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0004I processed model has 42 rows, 25 columns (24 integer (24 of which binary)) and 134 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.333%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 15 integers unsatisfied sum - 4.72211
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -28.8918 iterations 18
Cbc0038I Solution found of -28.8918
Cbc0038I Relaxing continuous gives -28.8918
Cbc0038I Rounding solution of -33.3905 is better than previous of -28.8918

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 25 columns, reduced to 27 rows 16 columns
Cbc0038I Mini branch and bound improved solution from -33.3905 to -64.3352 (0.01 seconds)
Cbc0038I Round again with cutoff of -66.2819
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    1.35368 (4) obj. -66.2819 iterations 4
Cbc0038I Pass   3: suminf.    0.32353 (2) obj. -66.2819 iterations 5
Cbc0038I Pass   4: suminf.    0.69970 (2) obj. -66.2819 iterations 1
Cbc0038I Pass   5: suminf.    0.69970 (2) obj. -66.2819 iterations 0
Cbc0038I Pass   6: suminf.    0.58535 (2) obj. -66.2819 iterations 3
Cbc0038I Pass   7: suminf.    1.75158 (6) obj. -66.2819 iterations 6
Cbc0038I Pass   8: suminf.    0.63084 (3) obj. -66.2819 iterations 5
Cbc0038I Pass   9: suminf.    1.18198 (4) obj. -66.2819 iterations 5
Cbc0038I Pass  10: suminf.    1.18198 (4) obj. -66.2819 iterations 0
Cbc0038I Pass  11: suminf.    0.73146 (3) obj. -66.2819 iterations 2
Cbc0038I Pass  12: suminf.    0.41217 (3) obj. -66.2819 iterations 2
Cbc0038I Pass  13: suminf.    1.21794 (10) obj. -66.2819 iterations 8
Cbc0038I Pass  14: suminf.    1.10332 (7) obj. -66.2819 iterations 2
Cbc0038I Pass  15: suminf.    1.11888 (3) obj. -66.2819 iterations 7
Cbc0038I Pass  16: suminf.    1.11888 (3) obj. -66.2819 iterations 0
Cbc0038I Pass  17: suminf.    0.62042 (2) obj. -66.2819 iterations 3
Cbc0038I Pass  18: suminf.    0.62042 (2) obj. -66.2819 iterations 0
Cbc0038I Pass  19: suminf.    0.46476 (2) obj. -66.2819 iterations 3
Cbc0038I Pass  20: suminf.    0.12016 (2) obj. -66.2819 iterations 2
Cbc0038I Pass  21: suminf.    1.43446 (5) obj. -66.2819 iterations 8
Cbc0038I Pass  22: suminf.    1.55952 (6) obj. -66.2819 iterations 8
Cbc0038I Pass  23: suminf.    1.02797 (6) obj. -66.2819 iterations 4
Cbc0038I Pass  24: suminf.    0.53474 (5) obj. -66.2819 iterations 4
Cbc0038I Pass  25: suminf.    1.31331 (4) obj. -66.2819 iterations 11
Cbc0038I Pass  26: suminf.    0.63084 (3) obj. -66.2819 iterations 4
Cbc0038I Pass  27: suminf.    1.18198 (4) obj. -66.2819 iterations 5
Cbc0038I Pass  28: suminf.    1.18198 (4) obj. -66.2819 iterations 0
Cbc0038I Pass  29: suminf.    0.73146 (3) obj. -66.2819 iterations 2
Cbc0038I Pass  30: suminf.    0.41217 (3) obj. -66.2819 iterations 2
Cbc0038I Pass  31: suminf.    1.76639 (5) obj. -66.2819 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 25 columns, reduced to 32 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -64.3352 - took 0.02 seconds
Cbc0012I Integer solution of -64.335167 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 42 rows 25 columns, reduced to 27 rows 16 columns
Cbc0031I 9 added rows had average density of 16.222222
Cbc0013I At root node, 9 cuts changed objective from -83.801454 to -72.800058 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 556 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 591 row cuts average 22.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 19 row cuts average 5.6 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -64.3351675, took 1591 iterations and 10 nodes (0.17 seconds)
Cbc0032I Strong branching done 104 times (654 iterations), fathomed 1 nodes and fixed 2 variables
Cbc0035I Maximum depth 4, 21 variables fixed on reduced cost
Total time (CPU seconds):       0.16   (Wallclock seconds):       0.17

