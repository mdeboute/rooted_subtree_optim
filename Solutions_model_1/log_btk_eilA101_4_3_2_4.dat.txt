Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 181 (-24) rows, 101 (-2) columns and 556 (-47) elements
Clp1000I sum of infeasibilities 4.57658e-05 - average 2.5285e-07, 12 fixed columns
Coin0506I Presolve 151 (-30) rows, 86 (-15) columns and 466 (-90) elements
Clp0029I End of values pass after 86 iterations
Clp0014I Perturbing problem by 0.001% of 2.2308542 - largest nonzero change 0 ( 0%) - largest zero change 2.5950631e-05
Clp0000I Optimal - objective value 37.110667
Clp0000I Optimal - objective value 37.110667
Coin0511I After Postsolve, objective 37.110667, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 37.110667
Clp0000I Optimal - objective value 37.110667
Clp0000I Optimal - objective value 37.110667
Coin0511I After Postsolve, objective 37.110667, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 37.11066691 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 181 rows, 101 columns (100 integer (100 of which binary)) and 556 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.873%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 48 integers unsatisfied sum - 14.1275
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 14.3611 iterations 80
Cbc0038I Solution found of 14.3611
Cbc0038I Relaxing continuous gives 14.3611
Cbc0038I Rounding solution of -1.51687 is better than previous of 14.3611

Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous
Cbc0038I Full problem 181 rows 101 columns, reduced to 85 rows 49 columns
Cbc0038I Mini branch and bound improved solution from -1.51687 to -5.93875 (0.05 seconds)
Cbc0038I Round again with cutoff of -9.05603
Cbc0038I Pass   2: suminf.    2.31023 (32) obj. -9.05603 iterations 41
Cbc0038I Pass   3: suminf.    2.16938 (44) obj. -9.05603 iterations 17
Cbc0038I Pass   4: suminf.    1.52618 (6) obj. -9.05603 iterations 42
Cbc0038I Pass   5: suminf.    0.94264 (6) obj. -9.05603 iterations 7
Cbc0038I Pass   6: suminf.    2.08434 (8) obj. -9.05603 iterations 14
Cbc0038I Pass   7: suminf.    1.57512 (7) obj. -9.05603 iterations 4
Cbc0038I Pass   8: suminf.    2.50083 (6) obj. -9.05603 iterations 11
Cbc0038I Pass   9: suminf.    2.23586 (9) obj. -9.05603 iterations 10
Cbc0038I Pass  10: suminf.    2.47005 (8) obj. -9.05603 iterations 10
Cbc0038I Pass  11: suminf.    2.47005 (8) obj. -9.05603 iterations 0
Cbc0038I Pass  12: suminf.    1.97641 (6) obj. -9.05603 iterations 9
Cbc0038I Pass  13: suminf.    2.58002 (6) obj. -9.05603 iterations 5
Cbc0038I Pass  14: suminf.    2.11088 (6) obj. -9.05603 iterations 1
Cbc0038I Pass  15: suminf.    2.50369 (6) obj. -9.05603 iterations 4
Cbc0038I Pass  16: suminf.    2.08002 (7) obj. -9.05603 iterations 6
Cbc0038I Pass  17: suminf.    2.08002 (7) obj. -9.05603 iterations 0
Cbc0038I Pass  18: suminf.    2.76356 (7) obj. -9.05603 iterations 3
Cbc0038I Pass  19: suminf.    2.15715 (8) obj. -9.05603 iterations 8
Cbc0038I Pass  20: suminf.    2.91811 (8) obj. -9.05603 iterations 12
Cbc0038I Pass  21: suminf.    2.91811 (8) obj. -9.05603 iterations 0
Cbc0038I Pass  22: suminf.    2.33877 (6) obj. -9.05603 iterations 9
Cbc0038I Pass  23: suminf.    2.82740 (7) obj. -9.05603 iterations 9
Cbc0038I Pass  24: suminf.    2.34584 (10) obj. -9.05603 iterations 10
Cbc0038I Pass  25: suminf.    2.34584 (10) obj. -9.05603 iterations 0
Cbc0038I Pass  26: suminf.    3.05045 (10) obj. -9.05603 iterations 16
Cbc0038I Pass  27: suminf.    2.69581 (8) obj. -9.05603 iterations 2
Cbc0038I Pass  28: suminf.    2.19195 (11) obj. -9.05603 iterations 10
Cbc0038I Pass  29: suminf.    2.03977 (11) obj. -9.05603 iterations 3
Cbc0038I Pass  30: suminf.    1.83734 (8) obj. -9.05603 iterations 14
Cbc0038I Pass  31: suminf.    2.22031 (11) obj. -9.05603 iterations 14
Cbc0038I Rounding solution of -6.96871 is better than previous of -5.93875

Cbc0038I Before mini branch and bound, 42 integers at bound fixed and 0 continuous
Cbc0038I Full problem 181 rows 101 columns, reduced to 102 rows 59 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of -14.667
Cbc0038I Pass  31: suminf.    4.08641 (32) obj. -14.667 iterations 0
Cbc0038I Pass  32: suminf.    3.75602 (25) obj. -14.667 iterations 12
Cbc0038I Pass  33: suminf.    3.39503 (11) obj. -14.667 iterations 23
Cbc0038I Pass  34: suminf.    3.15250 (11) obj. -14.667 iterations 6
Cbc0038I Pass  35: suminf.    3.14145 (11) obj. -14.667 iterations 2
Cbc0038I Pass  36: suminf.    4.07298 (10) obj. -14.667 iterations 14
Cbc0038I Pass  37: suminf.    3.47653 (9) obj. -14.667 iterations 7
Cbc0038I Pass  38: suminf.    3.86229 (9) obj. -14.667 iterations 7
Cbc0038I Pass  39: suminf.    3.64355 (9) obj. -14.667 iterations 5
Cbc0038I Pass  40: suminf.    3.47653 (9) obj. -14.667 iterations 11
Cbc0038I Pass  41: suminf.    5.99529 (18) obj. -14.667 iterations 23
Cbc0038I Pass  42: suminf.    3.76973 (12) obj. -14.667 iterations 29
Cbc0038I Pass  43: suminf.    3.76973 (12) obj. -14.667 iterations 3
Cbc0038I Pass  44: suminf.    3.34105 (9) obj. -14.667 iterations 13
Cbc0038I Pass  45: suminf.    3.06180 (10) obj. -14.667 iterations 2
Cbc0038I Pass  46: suminf.    3.05035 (8) obj. -14.667 iterations 13
Cbc0038I Pass  47: suminf.    2.90707 (9) obj. -14.667 iterations 5
Cbc0038I Pass  48: suminf.    2.90707 (9) obj. -14.667 iterations 0
Cbc0038I Pass  49: suminf.    3.06180 (10) obj. -14.667 iterations 11
Cbc0038I Pass  50: suminf.    3.06180 (10) obj. -14.667 iterations 0
Cbc0038I Pass  51: suminf.    3.05035 (8) obj. -14.667 iterations 13
Cbc0038I Pass  52: suminf.    2.90707 (9) obj. -14.667 iterations 5
Cbc0038I Pass  53: suminf.    2.90707 (9) obj. -14.667 iterations 0
Cbc0038I Pass  54: suminf.    3.06180 (10) obj. -14.667 iterations 11
Cbc0038I Pass  55: suminf.    3.06180 (10) obj. -14.667 iterations 0
Cbc0038I Pass  56: suminf.    3.05035 (8) obj. -14.667 iterations 13
Cbc0038I Pass  57: suminf.    2.90707 (9) obj. -14.667 iterations 5
Cbc0038I Pass  58: suminf.    2.90707 (9) obj. -14.667 iterations 0
Cbc0038I Pass  59: suminf.    3.06180 (10) obj. -14.667 iterations 11
Cbc0038I Pass  60: suminf.    3.06180 (10) obj. -14.667 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 181 rows 101 columns, reduced to 101 rows 58 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I After 0.16 seconds - Feasibility pump exiting with objective of -6.96871 - took 0.15 seconds
Cbc0012I Integer solution of -7.060355 found by feasibility pump after 0 iterations and 0 nodes (0.16 seconds)
Cbc0038I Full problem 181 rows 101 columns, reduced to 91 rows 53 columns
Cbc0031I 27 added rows had average density of 61.555556
Cbc0013I At root node, 27 cuts changed objective from -37.110667 to -29.208092 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 20908 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.129 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2821 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.143 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 30 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.129 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -7.060355 best solution, best possible -29.208092 (1.54 seconds)
Cbc0038I Full problem 181 rows 101 columns, reduced to 66 rows 43 columns
Cbc0012I Integer solution of -7.443335 found by RINS after 11921 iterations and 41 nodes (1.89 seconds)
Cbc0038I Full problem 181 rows 101 columns, reduced to 3 rows 6 columns
Cbc0001I Search completed - best objective -7.443335000000005, took 13891 iterations and 102 nodes (2.03 seconds)
Cbc0032I Strong branching done 1158 times (21577 iterations), fathomed 16 nodes and fixed 64 variables
Cbc0035I Maximum depth 27, 419 variables fixed on reduced cost
Total time (CPU seconds):       1.99   (Wallclock seconds):       2.05

