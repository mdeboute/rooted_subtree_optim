Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 129 (-26) rows, 70 (-8) columns and 390 (-63) elements
Clp1000I sum of infeasibilities 1.59709e-05 - average 1.23805e-07, 15 fixed columns
Coin0506I Presolve 100 (-29) rows, 55 (-15) columns and 302 (-88) elements
Clp0029I End of values pass after 55 iterations
Clp0014I Perturbing problem by 0.001% of 2.1589796 - largest nonzero change 0 ( 0%) - largest zero change 2.7080466e-05
Clp0000I Optimal - objective value 53.70857
Clp0000I Optimal - objective value 53.70857
Coin0511I After Postsolve, objective 53.70857, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 53.70857
Clp0000I Optimal - objective value 53.70857
Clp0000I Optimal - objective value 53.70857
Coin0511I After Postsolve, objective 53.70857, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 53.7085703 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 31 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 14 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 127 rows, 70 columns (69 integer (69 of which binary)) and 435 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.229%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 30 integers unsatisfied sum - 5.29556
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 0.89348 iterations 36
Cbc0038I Solution found of 0.89348
Cbc0038I Relaxing continuous gives 0.89348
Cbc0038I Rounding solution of -21.7389 is better than previous of 0.89348

Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 70 columns, reduced to 57 rows 31 columns
Cbc0038I Mini branch and bound improved solution from -21.7389 to -27.8349 (0.04 seconds)
Cbc0038I Round again with cutoff of -30.2376
Cbc0038I Pass   2: suminf.    1.35135 (5) obj. -30.2376 iterations 11
Cbc0038I Pass   3: suminf.    1.13134 (4) obj. -30.2376 iterations 3
Cbc0038I Pass   4: suminf.    0.89808 (2) obj. -30.2376 iterations 10
Cbc0038I Pass   5: suminf.    0.81791 (2) obj. -30.2376 iterations 2
Cbc0038I Pass   6: suminf.    0.69253 (2) obj. -30.2376 iterations 3
Cbc0038I Pass   7: suminf.    0.87374 (2) obj. -30.2376 iterations 1
Cbc0038I Pass   8: suminf.    1.54355 (5) obj. -30.2376 iterations 13
Cbc0038I Pass   9: suminf.    0.89651 (4) obj. -30.2376 iterations 6
Cbc0038I Pass  10: suminf.    1.46894 (8) obj. -30.2376 iterations 13
Cbc0038I Pass  11: suminf.    1.46894 (8) obj. -30.2376 iterations 0
Cbc0038I Pass  12: suminf.    1.01356 (3) obj. -30.2376 iterations 16
Cbc0038I Pass  13: suminf.    0.97576 (3) obj. -30.2376 iterations 1
Cbc0038I Pass  14: suminf.    1.09946 (6) obj. -30.2376 iterations 10
Cbc0038I Pass  15: suminf.    1.07770 (6) obj. -30.2376 iterations 4
Cbc0038I Pass  16: suminf.    1.01356 (3) obj. -30.2376 iterations 14
Cbc0038I Pass  17: suminf.    1.53647 (7) obj. -30.2376 iterations 13
Cbc0038I Pass  18: suminf.    0.82509 (4) obj. -30.2376 iterations 13
Cbc0038I Pass  19: suminf.    0.82509 (4) obj. -30.2376 iterations 0
Cbc0038I Pass  20: suminf.    1.10142 (3) obj. -30.2376 iterations 5
Cbc0038I Pass  21: suminf.    0.83571 (3) obj. -30.2376 iterations 3
Cbc0038I Pass  22: suminf.    0.92426 (5) obj. -30.2376 iterations 9
Cbc0038I Pass  23: suminf.    0.90866 (3) obj. -30.2376 iterations 6
Cbc0038I Pass  24: suminf.    1.30467 (5) obj. -30.2376 iterations 9
Cbc0038I Pass  25: suminf.    0.98555 (3) obj. -30.2376 iterations 8
Cbc0038I Pass  26: suminf.    0.91333 (3) obj. -30.2376 iterations 1
Cbc0038I Pass  27: suminf.    2.84478 (9) obj. -30.2376 iterations 18
Cbc0038I Pass  28: suminf.    1.91746 (8) obj. -30.2376 iterations 12
Cbc0038I Pass  29: suminf.    1.09241 (5) obj. -30.2376 iterations 17
Cbc0038I Pass  30: suminf.    0.49877 (3) obj. -30.2376 iterations 3
Cbc0038I Pass  31: suminf.    0.91333 (3) obj. -30.2376 iterations 8
Cbc0038I Rounding solution of -28.3462 is better than previous of -27.8349

Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 70 columns, reduced to 67 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -34.5624
Cbc0038I Pass  31: suminf.    1.45297 (5) obj. -34.5624 iterations 4
Cbc0038I Pass  32: suminf.    1.45297 (5) obj. -34.5624 iterations 0
Cbc0038I Pass  33: suminf.    1.00000 (4) obj. -34.5624 iterations 10
Cbc0038I Pass  34: suminf.    0.96606 (3) obj. -34.5624 iterations 2
Cbc0038I Pass  35: suminf.    1.00000 (3) obj. -34.5624 iterations 4
Cbc0038I Pass  36: suminf.    3.56816 (10) obj. -34.5624 iterations 16
Cbc0038I Pass  37: suminf.    1.40609 (5) obj. -34.5624 iterations 15
Cbc0038I Pass  38: suminf.    0.84682 (4) obj. -34.5624 iterations 9
Cbc0038I Pass  39: suminf.    1.31758 (5) obj. -34.5624 iterations 3
Cbc0038I Pass  40: suminf.    2.44010 (11) obj. -34.5624 iterations 12
Cbc0038I Pass  41: suminf.    1.31758 (5) obj. -34.5624 iterations 16
Cbc0038I Pass  42: suminf.    1.53134 (8) obj. -34.5624 iterations 14
Cbc0038I Pass  43: suminf.    1.26873 (6) obj. -34.5624 iterations 13
Cbc0038I Pass  44: suminf.    1.50065 (7) obj. -34.5624 iterations 18
Cbc0038I Pass  45: suminf.    1.50065 (7) obj. -34.5624 iterations 0
Cbc0038I Pass  46: suminf.    1.94189 (8) obj. -34.5624 iterations 14
Cbc0038I Pass  47: suminf.    1.34777 (6) obj. -34.5624 iterations 15
Cbc0038I Pass  48: suminf.    2.13961 (7) obj. -34.5624 iterations 19
Cbc0038I Pass  49: suminf.    1.31758 (5) obj. -34.5624 iterations 26
Cbc0038I Pass  50: suminf.    0.84682 (4) obj. -34.5624 iterations 11
Cbc0038I Pass  51: suminf.    1.31758 (5) obj. -34.5624 iterations 3
Cbc0038I Pass  52: suminf.    2.43144 (9) obj. -34.5624 iterations 11
Cbc0038I Pass  53: suminf.    1.82156 (8) obj. -34.5624 iterations 14
Cbc0038I Pass  54: suminf.    1.45237 (6) obj. -34.5624 iterations 13
Cbc0038I Pass  55: suminf.    1.34777 (6) obj. -34.5624 iterations 12
Cbc0038I Pass  56: suminf.    1.50065 (7) obj. -34.5624 iterations 15
Cbc0038I Pass  57: suminf.    1.50065 (7) obj. -34.5624 iterations 0
Cbc0038I Pass  58: suminf.    1.94189 (8) obj. -34.5624 iterations 12
Cbc0038I Pass  59: suminf.    3.76446 (12) obj. -34.5624 iterations 16
Cbc0038I Pass  60: suminf.    1.95972 (8) obj. -34.5624 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 127 rows 70 columns, reduced to 83 rows 47 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -28.3462 - took 0.07 seconds
Cbc0012I Integer solution of -28.3462 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 127 rows 70 columns, reduced to 58 rows 32 columns
Cbc0031I 15 added rows had average density of 61.133333
Cbc0013I At root node, 15 cuts changed objective from -51.861546 to -43.995351 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4985 row cuts average 4.6 elements, 1 column cuts (1 active)  in 0.074 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1171 row cuts average 69.1 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 30 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 140 row cuts average 62.4 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0010I After 12 nodes, 8 on tree, -28.3462 best solution, best possible -43.995256 (0.67 seconds)
Cbc0001I Search completed - best objective -28.3462, took 6520 iterations and 40 nodes (0.73 seconds)
Cbc0032I Strong branching done 534 times (10092 iterations), fathomed 1 nodes and fixed 24 variables
Cbc0035I Maximum depth 17, 83 variables fixed on reduced cost
Total time (CPU seconds):       0.71   (Wallclock seconds):       0.73

