Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 337 (-7) rows, 171 (-2) columns and 842 (-12) elements
Clp1000I sum of infeasibilities 3.42457e-06 - average 1.01619e-08, 28 fixed columns
Coin0506I Presolve 275 (-62) rows, 143 (-28) columns and 690 (-152) elements
Clp0029I End of values pass after 143 iterations
Clp0014I Perturbing problem by 0.001% of 0.17108312 - largest nonzero change 0 ( 0%) - largest zero change 2.9700606e-05
Clp0000I Optimal - objective value 45728.89
Clp0000I Optimal - objective value 45728.89
Coin0511I After Postsolve, objective 45728.89, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 11.27077 - largest nonzero change 1.4255201e-05 ( 0.0014255201%) - largest zero change 2.9669812e-05
Clp0000I Optimal - objective value 45728.89
Clp0000I Optimal - objective value 45728.89
Clp0000I Optimal - objective value 45728.89
Coin0511I After Postsolve, objective 45728.89, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 45728.89015 - 0 iterations time 0.042, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 337 rows, 171 columns (170 integer (170 of which binary)) and 842 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.573%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 92 integers unsatisfied sum - 22.4045
Cbc0038I Solution found of 521.083
Cbc0038I Relaxing continuous gives -3542.19
Cbc0038I Before mini branch and bound, 78 integers at bound fixed and 0 continuous
Cbc0038I Full problem 337 rows 171 columns, reduced to 179 rows 93 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -7760.86
Cbc0038I Pass   1: suminf.    0.24566 (14) obj. -7760.86 iterations 95
Cbc0038I Pass   2: suminf.    0.17505 (13) obj. -7760.86 iterations 1
Cbc0038I Pass   3: suminf.    0.14151 (1) obj. -26925.1 iterations 30
Cbc0038I Solution found of -19795.2
Cbc0038I Relaxing continuous gives -19795.2
Cbc0038I Rounding solution of -23516.9 is better than previous of -19795.2

Cbc0038I Before mini branch and bound, 77 integers at bound fixed and 0 continuous
Cbc0038I Full problem 337 rows 171 columns, reduced to 181 rows 94 columns - 5 fixed gives 126, 85 - still too large
Cbc0038I Full problem 337 rows 171 columns, reduced to 124 rows 83 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -27959.3
Cbc0038I Pass   4: suminf.    7.89540 (52) obj. -27959.3 iterations 44
Cbc0038I Pass   5: suminf.    7.89540 (52) obj. -27959.3 iterations 0
Cbc0038I Pass   6: suminf.    0.91898 (5) obj. -27959.3 iterations 56
Cbc0038I Pass   7: suminf.    1.37831 (5) obj. -27959.3 iterations 6
Cbc0038I Pass   8: suminf.    0.80036 (4) obj. -27959.3 iterations 3
Cbc0038I Pass   9: suminf.    0.66569 (3) obj. -27959.3 iterations 1
Cbc0038I Pass  10: suminf.    0.67438 (3) obj. -27959.3 iterations 1
Cbc0038I Pass  11: suminf.    0.02732 (2) obj. -27959.3 iterations 3
Cbc0038I Pass  12: suminf.    1.20671 (3) obj. -27959.3 iterations 6
Cbc0038I Pass  13: suminf.    0.19811 (1) obj. -27959.3 iterations 3
Cbc0038I Pass  14: suminf.    0.49641 (2) obj. -27959.3 iterations 2
Cbc0038I Pass  15: suminf.    0.35000 (2) obj. -27959.3 iterations 2
Cbc0038I Pass  16: suminf.    0.38372 (1) obj. -27959.3 iterations 39
Cbc0038I Pass  17: suminf.    0.03209 (1) obj. -27959.3 iterations 26
Cbc0038I Pass  18: suminf.    0.67936 (3) obj. -27959.3 iterations 3
Cbc0038I Pass  19: suminf.    1.13179 (3) obj. -27959.3 iterations 2
Cbc0038I Pass  20: suminf.    0.54973 (2) obj. -27959.3 iterations 1
Cbc0038I Pass  21: suminf.    2.04391 (7) obj. -27959.3 iterations 26
Cbc0038I Pass  22: suminf.    1.35855 (5) obj. -27959.3 iterations 14
Cbc0038I Pass  23: suminf.    0.25907 (3) obj. -27959.3 iterations 6
Cbc0038I Pass  24: suminf.    0.08004 (2) obj. -27959.3 iterations 4
Cbc0038I Pass  25: suminf.    0.22804 (2) obj. -27959.3 iterations 3
Cbc0038I Pass  26: suminf.    1.46926 (6) obj. -27959.3 iterations 15
Cbc0038I Pass  27: suminf.    0.62088 (3) obj. -27959.3 iterations 15
Cbc0038I Pass  28: suminf.    0.50905 (3) obj. -27959.3 iterations 6
Cbc0038I Pass  29: suminf.    0.62088 (3) obj. -27959.3 iterations 3
Cbc0038I Pass  30: suminf.    4.89692 (19) obj. -27959.3 iterations 55
Cbc0038I Pass  31: suminf.    2.47119 (9) obj. -27959.3 iterations 30
Cbc0038I Pass  32: suminf.    2.47119 (9) obj. -27959.3 iterations 2
Cbc0038I Pass  33: suminf.    3.18655 (8) obj. -27959.3 iterations 17
Cbc0038I Rounding solution of -26304.1 is better than previous of -23516.9

Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 337 rows 171 columns, reduced to 218 rows 117 columns - 4 fixed gives 216, 113 - still too large
Cbc0038I Full problem 337 rows 171 columns, reduced to 216 rows 113 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -33290.2
Cbc0038I Pass  33: suminf.   10.53839 (52) obj. -33290.2 iterations 0
Cbc0038I Pass  34: suminf.   10.53839 (52) obj. -33290.2 iterations 0
Cbc0038I Pass  35: suminf.    3.27159 (9) obj. -33290.2 iterations 46
Cbc0038I Pass  36: suminf.    0.73481 (4) obj. -33290.2 iterations 12
Cbc0038I Pass  37: suminf.    0.73481 (4) obj. -33290.2 iterations 0
Cbc0038I Pass  38: suminf.    1.11492 (6) obj. -33290.2 iterations 4
Cbc0038I Pass  39: suminf.    4.82041 (14) obj. -33290.2 iterations 43
Cbc0038I Pass  40: suminf.    2.57987 (11) obj. -33290.2 iterations 22
Cbc0038I Pass  41: suminf.    2.48979 (11) obj. -33290.2 iterations 5
Cbc0038I Pass  42: suminf.    5.43363 (13) obj. -33290.2 iterations 19
Cbc0038I Pass  43: suminf.    5.43363 (13) obj. -33290.2 iterations 0
Cbc0038I Pass  44: suminf.    3.16701 (12) obj. -33290.2 iterations 17
Cbc0038I Pass  45: suminf.    2.51492 (11) obj. -33290.2 iterations 11
Cbc0038I Pass  46: suminf.    4.35131 (12) obj. -33290.2 iterations 13
Cbc0038I Pass  47: suminf.    1.98239 (10) obj. -33290.2 iterations 21
Cbc0038I Pass  48: suminf.    1.98239 (10) obj. -33290.2 iterations 0
Cbc0038I Pass  49: suminf.    4.66761 (11) obj. -33290.2 iterations 17
Cbc0038I Pass  50: suminf.    3.74506 (11) obj. -33290.2 iterations 12
Cbc0038I Pass  51: suminf.    3.69969 (12) obj. -33290.2 iterations 6
Cbc0038I Pass  52: suminf.    4.47315 (12) obj. -33290.2 iterations 30
Cbc0038I Pass  53: suminf.    1.48277 (9) obj. -33290.2 iterations 21
Cbc0038I Pass  54: suminf.    1.47028 (11) obj. -33290.2 iterations 8
Cbc0038I Pass  55: suminf.    4.99880 (12) obj. -33290.2 iterations 20
Cbc0038I Pass  56: suminf.    3.96776 (10) obj. -33290.2 iterations 12
Cbc0038I Pass  57: suminf.    3.92712 (10) obj. -33290.2 iterations 3
Cbc0038I Pass  58: suminf.    3.76872 (11) obj. -33290.2 iterations 3
Cbc0038I Pass  59: suminf.    5.33963 (13) obj. -33290.2 iterations 20
Cbc0038I Pass  60: suminf.    4.47775 (12) obj. -33290.2 iterations 9
Cbc0038I Pass  61: suminf.    1.48277 (9) obj. -33290.2 iterations 21
Cbc0038I Pass  62: suminf.    1.47028 (11) obj. -33290.2 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 72 integers at bound fixed and 0 continuous
Cbc0038I Full problem 337 rows 171 columns, reduced to 188 rows 99 columns - 4 fixed gives 170, 93 - still too large
Cbc0038I Full problem 337 rows 171 columns, reduced to 170 rows 93 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -26304.1 - took 0.07 seconds
Cbc0012I Integer solution of -27247.794 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 337 rows 171 columns, reduced to 185 rows 98 columns - 12 fixed gives 125, 86 - ok now
Cbc0038I Full problem 337 rows 171 columns, reduced to 123 rows 85 columns
Cbc0012I Integer solution of -30988.021 found by RINS after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 12 added rows had average density of 84.25
Cbc0013I At root node, 12 cuts changed objective from -45728.89 to -39761.865 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 38459 row cuts average 3.6 elements, 1 column cuts (1 active)  in 0.311 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1336 row cuts average 146.9 elements, 0 column cuts (0 active)  in 0.181 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.168 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 57 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.127 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 142 row cuts average 120.7 elements, 0 column cuts (0 active)  in 0.137 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -30988.021 best solution, best possible -39761.865 (2.07 seconds)
Cbc0010I After 20 nodes, 9 on tree, -30988.021 best solution, best possible -39761.865 (2.78 seconds)
Cbc0012I Integer solution of -31202.139 found by rounding after 9213 iterations and 33 nodes (2.84 seconds)
Cbc0001I Search completed - best objective -31202.138912, took 9319 iterations and 40 nodes (2.87 seconds)
Cbc0032I Strong branching done 636 times (19588 iterations), fathomed 4 nodes and fixed 10 variables
Cbc0035I Maximum depth 15, 75 variables fixed on reduced cost
Total time (CPU seconds):       2.83   (Wallclock seconds):       2.89

