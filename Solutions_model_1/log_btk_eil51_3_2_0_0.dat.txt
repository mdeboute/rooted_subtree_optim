Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 83 (-22) rows, 46 (-7) columns and 251 (-52) elements
Clp1000I sum of infeasibilities 3.52621e-05 - average 4.24844e-07, 4 fixed columns
Coin0506I Presolve 75 (-8) rows, 42 (-4) columns and 227 (-24) elements
Clp0029I End of values pass after 42 iterations
Clp0000I Optimal - objective value 47.956315
Clp0000I Optimal - objective value 47.956315
Coin0511I After Postsolve, objective 47.956315, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 47.956315
Clp0000I Optimal - objective value 47.956315
Clp0000I Optimal - objective value 47.956315
Coin0511I After Postsolve, objective 47.956315, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 47.95631525 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 83 rows, 46 columns (45 integer (45 of which binary)) and 251 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.893%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 33 integers unsatisfied sum - 8.94767
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 2.87935 iterations 30
Cbc0038I Solution found of 2.87935
Cbc0038I Relaxing continuous gives 2.87935
Cbc0038I Rounding solution of -10.5585 is better than previous of 2.87935

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 46 columns, reduced to 60 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -14.2983
Cbc0038I Pass   2: suminf.    1.61592 (4) obj. -14.2983 iterations 10
Cbc0038I Pass   3: suminf.    1.61592 (4) obj. -14.2983 iterations 1
Cbc0038I Pass   4: suminf.    0.99116 (3) obj. -14.2983 iterations 7
Cbc0038I Pass   5: suminf.    0.93597 (2) obj. -14.2983 iterations 2
Cbc0038I Pass   6: suminf.    0.83982 (2) obj. -14.2983 iterations 3
Cbc0038I Pass   7: suminf.    1.70079 (7) obj. -14.2983 iterations 15
Cbc0038I Pass   8: suminf.    1.33871 (5) obj. -14.2983 iterations 16
Cbc0038I Pass   9: suminf.    1.33871 (5) obj. -14.2983 iterations 0
Cbc0038I Pass  10: suminf.    0.81868 (3) obj. -14.2983 iterations 9
Cbc0038I Pass  11: suminf.    0.81868 (3) obj. -14.2983 iterations 0
Cbc0038I Pass  12: suminf.    0.93597 (2) obj. -14.2983 iterations 9
Cbc0038I Pass  13: suminf.    0.83982 (2) obj. -14.2983 iterations 3
Cbc0038I Pass  14: suminf.    2.40782 (8) obj. -14.2983 iterations 13
Cbc0038I Pass  15: suminf.    1.34891 (4) obj. -14.2983 iterations 11
Cbc0038I Pass  16: suminf.    1.36952 (4) obj. -14.2983 iterations 7
Cbc0038I Pass  17: suminf.    1.14945 (4) obj. -14.2983 iterations 3
Cbc0038I Pass  18: suminf.    1.14945 (4) obj. -14.2983 iterations 0
Cbc0038I Pass  19: suminf.    1.34553 (4) obj. -14.2983 iterations 4
Cbc0038I Pass  20: suminf.    1.34553 (4) obj. -14.2983 iterations 0
Cbc0038I Pass  21: suminf.    0.95760 (2) obj. -14.2983 iterations 7
Cbc0038I Pass  22: suminf.    0.74098 (2) obj. -14.2983 iterations 5
Cbc0038I Pass  23: suminf.    0.74098 (2) obj. -14.2983 iterations 1
Cbc0038I Pass  24: suminf.    0.70642 (2) obj. -14.2983 iterations 3
Cbc0038I Pass  25: suminf.    1.76960 (7) obj. -14.2983 iterations 7
Cbc0038I Pass  26: suminf.    1.21003 (5) obj. -14.2983 iterations 12
Cbc0038I Pass  27: suminf.    1.00791 (6) obj. -14.2983 iterations 3
Cbc0038I Pass  28: suminf.    2.03535 (6) obj. -14.2983 iterations 11
Cbc0038I Pass  29: suminf.    1.52825 (4) obj. -14.2983 iterations 11
Cbc0038I Pass  30: suminf.    1.34553 (4) obj. -14.2983 iterations 4
Cbc0038I Pass  31: suminf.    1.34553 (4) obj. -14.2983 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 46 columns, reduced to 71 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -10.5585 - took 0.06 seconds
Cbc0012I Integer solution of -10.55847 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 83 rows 46 columns, reduced to 61 rows 35 columns
Cbc0031I 18 added rows had average density of 22.888889
Cbc0013I At root node, 18 cuts changed objective from -47.956315 to -34.629741 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6534 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1674 row cuts average 46.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 42 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0016I Integer solution of -14.66795 found by strong branching after 6627 iterations and 14 nodes (0.59 seconds)
Cbc0001I Search completed - best objective -14.66795, took 7075 iterations and 24 nodes (0.61 seconds)
Cbc0032I Strong branching done 378 times (7413 iterations), fathomed 2 nodes and fixed 12 variables
Cbc0035I Maximum depth 10, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.59   (Wallclock seconds):       0.61

