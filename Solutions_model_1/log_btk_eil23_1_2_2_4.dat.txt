Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 34 (-15) rows, 20 (-5) columns and 100 (-35) elements
Clp1000I sum of infeasibilities 1.18215e-05 - average 3.47691e-07, 1 fixed columns
Coin0506I Presolve 31 (-3) rows, 19 (-1) columns and 92 (-8) elements
Clp0029I End of values pass after 19 iterations
Clp0000I Optimal - objective value 113.20551
Clp0000I Optimal - objective value 113.20551
Coin0511I After Postsolve, objective 113.20551, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 113.20551
Clp0000I Optimal - objective value 113.20551
Clp0000I Optimal - objective value 113.20551
Coin0511I After Postsolve, objective 113.20551, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 113.2055129 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 34 rows, 20 columns (19 integer (19 of which binary)) and 100 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.902%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 3.48789
Cbc0038I Pass   1: suminf.    0.77549 (2) obj. -22.9081 iterations 15
Cbc0038I Pass   2: suminf.    0.77549 (2) obj. -22.9081 iterations 0
Cbc0038I Solution found of -1.25398
Cbc0038I Relaxing continuous gives -1.25398
Cbc0038I Rounding solution of -3.73969 is better than previous of -1.25398

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 34 rows 20 columns, reduced to 18 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -3.73969 to -54.6868 (0.01 seconds)
Cbc0038I Round again with cutoff of -60.3309
Cbc0038I Pass   3: suminf.    0.90660 (4) obj. -60.3309 iterations 3
Cbc0038I Pass   4: suminf.    0.90660 (4) obj. -60.3309 iterations 0
Cbc0038I Pass   5: suminf.    0.85939 (3) obj. -60.3309 iterations 6
Cbc0038I Pass   6: suminf.    0.48074 (2) obj. -60.3309 iterations 3
Cbc0038I Pass   7: suminf.    0.59555 (3) obj. -60.3309 iterations 3
Cbc0038I Pass   8: suminf.    0.28307 (2) obj. -60.3309 iterations 2
Cbc0038I Pass   9: suminf.    1.02485 (4) obj. -60.3309 iterations 4
Cbc0038I Pass  10: suminf.    0.97112 (3) obj. -60.3309 iterations 4
Cbc0038I Pass  11: suminf.    0.86894 (3) obj. -60.3309 iterations 3
Cbc0038I Pass  12: suminf.    0.92469 (4) obj. -60.3309 iterations 3
Cbc0038I Pass  13: suminf.    0.60622 (3) obj. -60.3309 iterations 1
Cbc0038I Pass  14: suminf.    1.14457 (4) obj. -60.3309 iterations 5
Cbc0038I Pass  15: suminf.    0.97112 (3) obj. -60.3309 iterations 2
Cbc0038I Pass  16: suminf.    0.86894 (3) obj. -60.3309 iterations 3
Cbc0038I Pass  17: suminf.    0.92469 (4) obj. -60.3309 iterations 3
Cbc0038I Pass  18: suminf.    0.60622 (3) obj. -60.3309 iterations 1
Cbc0038I Pass  19: suminf.    1.14457 (4) obj. -60.3309 iterations 5
Cbc0038I Pass  20: suminf.    0.97112 (3) obj. -60.3309 iterations 2
Cbc0038I Pass  21: suminf.    0.86894 (3) obj. -60.3309 iterations 3
Cbc0038I Pass  22: suminf.    0.92469 (4) obj. -60.3309 iterations 3
Cbc0038I Pass  23: suminf.    0.60622 (3) obj. -60.3309 iterations 1
Cbc0038I Pass  24: suminf.    1.14457 (4) obj. -60.3309 iterations 5
Cbc0038I Pass  25: suminf.    0.97112 (3) obj. -60.3309 iterations 2
Cbc0038I Pass  26: suminf.    0.86894 (3) obj. -60.3309 iterations 3
Cbc0038I Pass  27: suminf.    0.92469 (4) obj. -60.3309 iterations 3
Cbc0038I Pass  28: suminf.    0.60622 (3) obj. -60.3309 iterations 1
Cbc0038I Pass  29: suminf.    1.14457 (4) obj. -60.3309 iterations 5
Cbc0038I Pass  30: suminf.    0.97112 (3) obj. -60.3309 iterations 2
Cbc0038I Pass  31: suminf.    0.86894 (3) obj. -60.3309 iterations 3
Cbc0038I Pass  32: suminf.    0.92469 (4) obj. -60.3309 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 34 rows 20 columns, reduced to 18 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -54.6868 - took 0.03 seconds
Cbc0012I Integer solution of -54.68681 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 34 rows 20 columns, reduced to 18 rows 14 columns
Cbc0031I 11 added rows had average density of 10.727273
Cbc0013I At root node, 11 cuts changed objective from -111.12679 to -58.831798 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 173 row cuts average 3.0 elements, 3 column cuts (3 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 470 row cuts average 17.8 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 58 row cuts average 9.6 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 213 row cuts average 15.1 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -54.68681000000001, took 1966 iterations and 24 nodes (0.17 seconds)
Cbc0032I Strong branching done 174 times (802 iterations), fathomed 0 nodes and fixed 5 variables
Cbc0035I Maximum depth 4, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.19   (Wallclock seconds):       0.18

