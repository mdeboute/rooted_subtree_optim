Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 112 (-43) rows, 63 (-15) columns and 342 (-111) elements
Clp1000I sum of infeasibilities 4.66829e-06 - average 4.16811e-08, 10 fixed columns
Coin0506I Presolve 93 (-19) rows, 52 (-11) columns and 282 (-60) elements
Clp0029I End of values pass after 52 iterations
Clp0014I Perturbing problem by 0.001% of 3.1214026 - largest nonzero change 0 ( 0%) - largest zero change 2.2273756e-05
Clp0000I Optimal - objective value 44.400814
Clp0000I Optimal - objective value 44.400814
Coin0511I After Postsolve, objective 44.400814, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 44.400814
Clp0000I Optimal - objective value 44.400814
Clp0000I Optimal - objective value 44.400814
Coin0511I After Postsolve, objective 44.400814, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 44.40081421 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 112 rows, 63 columns (62 integer (62 of which binary)) and 342 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.375%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 36 integers unsatisfied sum - 8.58207
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.78462 iterations 47
Cbc0038I Solution found of 6.78462
Cbc0038I Relaxing continuous gives 6.78462
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 112 rows 63 columns, reduced to 63 rows 37 columns
Cbc0038I Mini branch and bound improved solution from 6.78462 to -1.10903 (0.05 seconds)
Cbc0038I Round again with cutoff of -5.4383
Cbc0038I Pass   2: suminf.    0.83404 (5) obj. -5.4383 iterations 6
Cbc0038I Pass   3: suminf.    1.57567 (7) obj. -5.4383 iterations 15
Cbc0038I Pass   4: suminf.    0.54681 (4) obj. -5.4383 iterations 14
Cbc0038I Pass   5: suminf.    0.48188 (3) obj. -5.4383 iterations 2
Cbc0038I Pass   6: suminf.    1.22514 (4) obj. -5.4383 iterations 4
Cbc0038I Pass   7: suminf.    1.66969 (4) obj. -5.4383 iterations 5
Cbc0038I Pass   8: suminf.    1.59218 (4) obj. -5.4383 iterations 1
Cbc0038I Pass   9: suminf.    0.99336 (4) obj. -5.4383 iterations 3
Cbc0038I Pass  10: suminf.    0.99336 (4) obj. -5.4383 iterations 0
Cbc0038I Pass  11: suminf.    1.61280 (4) obj. -5.4383 iterations 7
Cbc0038I Pass  12: suminf.    0.92536 (3) obj. -5.4383 iterations 1
Cbc0038I Pass  13: suminf.    1.21838 (8) obj. -5.4383 iterations 15
Cbc0038I Pass  14: suminf.    0.79737 (4) obj. -5.4383 iterations 3
Cbc0038I Pass  15: suminf.    1.18918 (4) obj. -5.4383 iterations 4
Cbc0038I Pass  16: suminf.    1.00544 (3) obj. -5.4383 iterations 4
Cbc0038I Pass  17: suminf.    0.95538 (5) obj. -5.4383 iterations 12
Cbc0038I Pass  18: suminf.    0.40417 (1) obj. -5.4383 iterations 7
Cbc0038I Pass  19: suminf.    0.45109 (1) obj. -5.4383 iterations 1
Cbc0038I Pass  20: suminf.    1.73461 (8) obj. -5.4383 iterations 6
Cbc0038I Pass  21: suminf.    0.98669 (4) obj. -5.4383 iterations 5
Cbc0038I Pass  22: suminf.    0.34643 (1) obj. -5.4383 iterations 4
Cbc0038I Pass  23: suminf.    0.43222 (1) obj. -5.4383 iterations 1
Cbc0038I Pass  24: suminf.    2.64516 (12) obj. -5.4383 iterations 16
Cbc0038I Pass  25: suminf.    1.21423 (5) obj. -5.4383 iterations 9
Cbc0038I Pass  26: suminf.    0.61528 (2) obj. -5.4383 iterations 3
Cbc0038I Pass  27: suminf.    0.46979 (1) obj. -5.4383 iterations 2
Cbc0038I Pass  28: suminf.    0.46155 (1) obj. -5.4383 iterations 1
Cbc0038I Pass  29: suminf.    4.16923 (20) obj. -5.4383 iterations 25
Cbc0038I Pass  30: suminf.    1.25888 (4) obj. -5.4383 iterations 15
Cbc0038I Pass  31: suminf.    0.41905 (1) obj. -5.4383 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 112 rows 63 columns, reduced to 86 rows 49 columns
Cbc0038I Mini branch and bound improved solution from -1.10903 to -8.8961 (0.10 seconds)
Cbc0038I Round again with cutoff of -15.9971
Cbc0038I Pass  31: suminf.    2.50576 (12) obj. -15.9971 iterations 11
Cbc0038I Pass  32: suminf.    2.04315 (6) obj. -15.9971 iterations 16
Cbc0038I Pass  33: suminf.    1.04764 (3) obj. -15.9971 iterations 3
Cbc0038I Pass  34: suminf.    1.26869 (3) obj. -15.9971 iterations 2
Cbc0038I Pass  35: suminf.    1.12050 (3) obj. -15.9971 iterations 2
Cbc0038I Pass  36: suminf.    1.03604 (4) obj. -15.9971 iterations 1
Cbc0038I Pass  37: suminf.    1.52142 (4) obj. -15.9971 iterations 8
Cbc0038I Pass  38: suminf.    1.06319 (3) obj. -15.9971 iterations 5
Cbc0038I Pass  39: suminf.    1.06319 (3) obj. -15.9971 iterations 0
Cbc0038I Pass  40: suminf.    0.82705 (3) obj. -15.9971 iterations 4
Cbc0038I Pass  41: suminf.    0.82705 (3) obj. -15.9971 iterations 0
Cbc0038I Pass  42: suminf.    2.10364 (9) obj. -15.9971 iterations 10
Cbc0038I Pass  43: suminf.    1.87075 (7) obj. -15.9971 iterations 1
Cbc0038I Pass  44: suminf.    0.92979 (4) obj. -15.9971 iterations 22
Cbc0038I Pass  45: suminf.    0.89826 (3) obj. -15.9971 iterations 1
Cbc0038I Pass  46: suminf.    1.08358 (3) obj. -15.9971 iterations 4
Cbc0038I Pass  47: suminf.    1.08358 (3) obj. -15.9971 iterations 0
Cbc0038I Pass  48: suminf.    0.89826 (3) obj. -15.9971 iterations 4
Cbc0038I Pass  49: suminf.    5.23091 (15) obj. -15.9971 iterations 24
Cbc0038I Pass  50: suminf.    3.35175 (10) obj. -15.9971 iterations 14
Cbc0038I Pass  51: suminf.    2.63949 (6) obj. -15.9971 iterations 18
Cbc0038I Pass  52: suminf.    1.97944 (5) obj. -15.9971 iterations 13
Cbc0038I Pass  53: suminf.    1.47554 (4) obj. -15.9971 iterations 8
Cbc0038I Pass  54: suminf.    1.08358 (3) obj. -15.9971 iterations 6
Cbc0038I Pass  55: suminf.    1.08358 (3) obj. -15.9971 iterations 0
Cbc0038I Pass  56: suminf.    0.89826 (3) obj. -15.9971 iterations 6
Cbc0038I Pass  57: suminf.    0.89826 (3) obj. -15.9971 iterations 0
Cbc0038I Pass  58: suminf.    3.70882 (12) obj. -15.9971 iterations 18
Cbc0038I Pass  59: suminf.    1.28592 (6) obj. -15.9971 iterations 10
Cbc0038I Pass  60: suminf.    0.87519 (3) obj. -15.9971 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 112 rows 63 columns, reduced to 81 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of -8.8961 - took 0.12 seconds
Cbc0012I Integer solution of -8.8961 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 112 rows 63 columns, reduced to 63 rows 37 columns
Cbc0031I 12 added rows had average density of 38.166667
Cbc0013I At root node, 12 cuts changed objective from -44.400814 to -31.285018 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5205 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 981 row cuts average 63.0 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 143 row cuts average 62.7 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0001I Search completed - best objective -8.89609999999999, took 4570 iterations and 18 nodes (0.60 seconds)
Cbc0032I Strong branching done 356 times (6080 iterations), fathomed 1 nodes and fixed 9 variables
Cbc0035I Maximum depth 8, 57 variables fixed on reduced cost
Total time (CPU seconds):       0.58   (Wallclock seconds):       0.60

