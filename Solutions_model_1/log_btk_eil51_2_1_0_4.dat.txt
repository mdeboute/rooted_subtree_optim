Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 69 (-36) rows, 39 (-14) columns and 209 (-94) elements
Clp1000I sum of infeasibilities 0.000159863 - average 2.31686e-06, 18 fixed columns
Coin0506I Presolve 24 (-45) rows, 19 (-20) columns and 80 (-129) elements
Clp0029I End of values pass after 18 iterations
Clp0000I Optimal - objective value 163.45475
Clp0000I Optimal - objective value 163.45475
Coin0511I After Postsolve, objective 163.45475, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 163.45475
Clp0000I Optimal - objective value 163.45475
Clp0000I Optimal - objective value 163.45475
Coin0511I After Postsolve, objective 163.45475, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 163.4547505 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 69 rows, 39 columns (38 integer (38 of which binary)) and 209 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.175%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 10 integers unsatisfied sum - 2.73366
Cbc0038I Pass   1: suminf.    0.61017 (2) obj. -145.399 iterations 13
Cbc0038I Pass   2: suminf.    0.39130 (1) obj. -137.565 iterations 2
Cbc0038I Solution found of -112
Cbc0038I Relaxing continuous gives -112
Cbc0038I Rounding solution of -130.667 is better than previous of -112

Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 69 rows 39 columns, reduced to 13 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -130.667 to -145.333 (0.01 seconds)
Cbc0038I Round again with cutoff of -147.146
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   3: suminf.    0.66458 (4) obj. -147.146 iterations 1
Cbc0038I Pass   4: suminf.    0.42423 (3) obj. -147.146 iterations 3
Cbc0038I Pass   5: suminf.    0.45438 (2) obj. -147.146 iterations 4
Cbc0038I Pass   6: suminf.    0.29418 (2) obj. -147.146 iterations 1
Cbc0038I Pass   7: suminf.    0.47217 (2) obj. -147.146 iterations 5
Cbc0038I Pass   8: suminf.    0.96986 (8) obj. -147.146 iterations 12
Cbc0038I Pass   9: suminf.    0.73482 (6) obj. -147.146 iterations 6
Cbc0038I Pass  10: suminf.    1.51844 (8) obj. -147.146 iterations 8
Cbc0038I Pass  11: suminf.    1.17440 (4) obj. -147.146 iterations 2
Cbc0038I Pass  12: suminf.    0.77802 (3) obj. -147.146 iterations 2
Cbc0038I Pass  13: suminf.    0.32776 (3) obj. -147.146 iterations 8
Cbc0038I Pass  14: suminf.    0.29235 (2) obj. -147.146 iterations 1
Cbc0038I Pass  15: suminf.    0.90129 (6) obj. -147.146 iterations 7
Cbc0038I Pass  16: suminf.    0.53260 (3) obj. -147.146 iterations 8
Cbc0038I Pass  17: suminf.    0.29418 (2) obj. -147.146 iterations 7
Cbc0038I Pass  18: suminf.    0.47217 (2) obj. -147.146 iterations 5
Cbc0038I Pass  19: suminf.    2.12053 (8) obj. -147.146 iterations 10
Cbc0038I Pass  20: suminf.    1.67053 (6) obj. -147.146 iterations 4
Cbc0038I Pass  21: suminf.    1.13679 (5) obj. -147.146 iterations 1
Cbc0038I Pass  22: suminf.    0.57366 (3) obj. -147.146 iterations 2
Cbc0038I Pass  23: suminf.    0.62325 (3) obj. -147.146 iterations 5
Cbc0038I Pass  24: suminf.    0.32182 (3) obj. -147.146 iterations 3
Cbc0038I Pass  25: suminf.    0.62964 (3) obj. -147.146 iterations 7
Cbc0038I Pass  26: suminf.    0.59424 (2) obj. -147.146 iterations 1
Cbc0038I Pass  27: suminf.    0.84189 (6) obj. -147.146 iterations 6
Cbc0038I Pass  28: suminf.    0.45438 (2) obj. -147.146 iterations 7
Cbc0038I Pass  29: suminf.    0.29418 (2) obj. -147.146 iterations 2
Cbc0038I Pass  30: suminf.    0.47217 (2) obj. -147.146 iterations 5
Cbc0038I Pass  31: suminf.    1.67327 (5) obj. -147.146 iterations 8
Cbc0038I Pass  32: suminf.    1.54153 (6) obj. -147.146 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 69 rows 39 columns, reduced to 19 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -145.333 - took 0.01 seconds
Cbc0012I Integer solution of -145.3333 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 69 rows 39 columns, reduced to 13 rows 11 columns
Cbc0031I 6 added rows had average density of 19.666667
Cbc0013I At root node, 6 cuts changed objective from -163.45475 to -150.01831 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 70 row cuts average 3.1 elements, 8 column cuts (8 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 7 row cuts average 13.6 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 9.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 56 row cuts average 19.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0001I Search completed - best objective -145.3333, took 203 iterations and 4 nodes (0.04 seconds)
Cbc0032I Strong branching done 24 times (114 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 26 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.05

