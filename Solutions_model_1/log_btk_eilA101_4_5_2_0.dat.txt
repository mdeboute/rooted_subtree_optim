Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 180 (-25) rows, 99 (-4) columns and 550 (-53) elements
Clp1000I sum of infeasibilities 1.18371e-05 - average 6.57617e-08, 13 fixed columns
Coin0506I Presolve 155 (-25) rows, 86 (-13) columns and 474 (-76) elements
Clp0029I End of values pass after 86 iterations
Clp0014I Perturbing problem by 0.001% of 2.4349491 - largest nonzero change 0 ( 0%) - largest zero change 2.6625829e-05
Clp0000I Optimal - objective value 32.208136
Clp0000I Optimal - objective value 32.208136
Coin0511I After Postsolve, objective 32.208136, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 32.208136
Clp0000I Optimal - objective value 32.208136
Clp0000I Optimal - objective value 32.208136
Coin0511I After Postsolve, objective 32.208136, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 32.20813567 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 180 rows, 99 columns (98 integer (98 of which binary)) and 550 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.904%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 40 integers unsatisfied sum - 13.3873
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 10.9081 iterations 51
Cbc0038I Solution found of 10.9081
Cbc0038I Relaxing continuous gives 10.9081
Cbc0038I Rounding solution of -2.0627 is better than previous of 10.9081

Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 180 rows 99 columns, reduced to 72 rows 41 columns
Cbc0038I Mini branch and bound improved solution from -2.0627 to -3.2383 (0.03 seconds)
Cbc0038I Round again with cutoff of -6.13537
Cbc0038I Pass   2: suminf.    2.33628 (8) obj. -6.13537 iterations 10
Cbc0038I Pass   3: suminf.    2.90637 (10) obj. -6.13537 iterations 14
Cbc0038I Pass   4: suminf.    2.87099 (10) obj. -6.13537 iterations 3
Cbc0038I Pass   5: suminf.    0.63895 (6) obj. -6.13537 iterations 10
Cbc0038I Pass   6: suminf.    0.63895 (6) obj. -6.13537 iterations 0
Cbc0038I Pass   7: suminf.    1.92369 (5) obj. -6.13537 iterations 7
Cbc0038I Pass   8: suminf.    1.73137 (5) obj. -6.13537 iterations 3
Cbc0038I Pass   9: suminf.    1.96014 (6) obj. -6.13537 iterations 5
Cbc0038I Pass  10: suminf.    1.94366 (6) obj. -6.13537 iterations 2
Cbc0038I Pass  11: suminf.    2.56701 (6) obj. -6.13537 iterations 3
Cbc0038I Pass  12: suminf.    1.98118 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  13: suminf.    1.98118 (7) obj. -6.13537 iterations 1
Cbc0038I Pass  14: suminf.    1.22055 (7) obj. -6.13537 iterations 8
Cbc0038I Pass  15: suminf.    1.22055 (7) obj. -6.13537 iterations 0
Cbc0038I Pass  16: suminf.    2.29843 (6) obj. -6.13537 iterations 9
Cbc0038I Pass  17: suminf.    2.29843 (6) obj. -6.13537 iterations 0
Cbc0038I Pass  18: suminf.    2.28318 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  19: suminf.    1.98118 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  20: suminf.    1.22055 (7) obj. -6.13537 iterations 8
Cbc0038I Pass  21: suminf.    1.22055 (7) obj. -6.13537 iterations 0
Cbc0038I Pass  22: suminf.    2.29843 (6) obj. -6.13537 iterations 9
Cbc0038I Pass  23: suminf.    2.29843 (6) obj. -6.13537 iterations 0
Cbc0038I Pass  24: suminf.    2.28318 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  25: suminf.    1.98118 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  26: suminf.    1.22055 (7) obj. -6.13537 iterations 8
Cbc0038I Pass  27: suminf.    1.22055 (7) obj. -6.13537 iterations 0
Cbc0038I Pass  28: suminf.    2.29843 (6) obj. -6.13537 iterations 9
Cbc0038I Pass  29: suminf.    2.29843 (6) obj. -6.13537 iterations 0
Cbc0038I Pass  30: suminf.    2.28318 (7) obj. -6.13537 iterations 6
Cbc0038I Pass  31: suminf.    1.98118 (7) obj. -6.13537 iterations 6
Cbc0038I Rounding solution of -3.82407 is better than previous of -3.2383

Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 180 rows 99 columns, reduced to 72 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -11.3499
Cbc0038I Pass  31: suminf.    3.39782 (13) obj. -11.3499 iterations 2
Cbc0038I Pass  32: suminf.    1.74348 (7) obj. -11.3499 iterations 12
Cbc0038I Pass  33: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  34: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  35: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I Pass  36: suminf.    2.16803 (9) obj. -11.3499 iterations 5
Cbc0038I Pass  37: suminf.    1.74348 (7) obj. -11.3499 iterations 2
Cbc0038I Pass  38: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  39: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  40: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I Pass  41: suminf.    2.16803 (9) obj. -11.3499 iterations 5
Cbc0038I Pass  42: suminf.    1.74348 (7) obj. -11.3499 iterations 2
Cbc0038I Pass  43: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  44: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  45: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I Pass  46: suminf.    2.16803 (9) obj. -11.3499 iterations 5
Cbc0038I Pass  47: suminf.    1.74348 (7) obj. -11.3499 iterations 2
Cbc0038I Pass  48: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  49: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  50: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I Pass  51: suminf.    2.16803 (9) obj. -11.3499 iterations 5
Cbc0038I Pass  52: suminf.    1.74348 (7) obj. -11.3499 iterations 2
Cbc0038I Pass  53: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  54: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  55: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I Pass  56: suminf.    2.16803 (9) obj. -11.3499 iterations 5
Cbc0038I Pass  57: suminf.    1.74348 (7) obj. -11.3499 iterations 2
Cbc0038I Pass  58: suminf.    1.74348 (7) obj. -11.3499 iterations 0
Cbc0038I Pass  59: suminf.    2.72365 (9) obj. -11.3499 iterations 7
Cbc0038I Pass  60: suminf.    2.72365 (9) obj. -11.3499 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 58 integers at bound fixed and 0 continuous
Cbc0038I Full problem 180 rows 99 columns, reduced to 72 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -3.82407 - took 0.07 seconds
Cbc0012I Integer solution of -3.824074 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 180 rows 99 columns, reduced to 76 rows 44 columns
Cbc0012I Integer solution of -4.869134 found by RINS after 0 iterations and 0 nodes (0.13 seconds)
Cbc0031I 28 added rows had average density of 68.5
Cbc0013I At root node, 28 cuts changed objective from -32.208136 to -24.642327 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 17780 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.126 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2863 row cuts average 99.0 elements, 0 column cuts (0 active)  in 0.142 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 34 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.120 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -4.869134 best solution, best possible -24.642327 (1.37 seconds)
Cbc0012I Integer solution of -4.992374 found by rounding after 10111 iterations and 9 nodes (1.45 seconds)
Cbc0038I Full problem 180 rows 99 columns, reduced to 6 rows 8 columns
Cbc0038I Full problem 180 rows 99 columns, reduced to 53 rows 35 columns
Cbc0001I Search completed - best objective -4.992374000000005, took 13662 iterations and 162 nodes (1.83 seconds)
Cbc0032I Strong branching done 1406 times (22986 iterations), fathomed 16 nodes and fixed 106 variables
Cbc0035I Maximum depth 23, 469 variables fixed on reduced cost
Total time (CPU seconds):       1.79   (Wallclock seconds):       1.85

