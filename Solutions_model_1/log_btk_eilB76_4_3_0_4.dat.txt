Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 132 (-23) rows, 73 (-5) columns and 404 (-49) elements
Clp1000I sum of infeasibilities 0.000204698 - average 1.55074e-06, 58 fixed columns
Coin0506I Presolve 25 (-107) rows, 15 (-58) columns and 74 (-330) elements
Clp0029I End of values pass after 15 iterations
Clp0014I Perturbing problem by 0.001% of 2.0139743 - largest nonzero change 0 ( 0%) - largest zero change 2.9394864e-05
Clp0000I Optimal - objective value 13872.558
Clp0000I Optimal - objective value 13872.558
Coin0511I After Postsolve, objective 13872.558, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.22715946 - largest nonzero change 0 ( 0%) - largest zero change 2.8965652e-05
Clp0000I Optimal - objective value 13872.558
Clp0000I Optimal - objective value 13872.558
Clp0000I Optimal - objective value 13872.558
Coin0511I After Postsolve, objective 13872.558, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 13872.5582 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 16 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 132 rows, 73 columns (72 integer (72 of which binary)) and 426 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.556%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.232422
Cbc0038I Pass   1: suminf.    0.16000 (2) obj. -13810.7 iterations 13
Cbc0038I Solution found of -8903.74
Cbc0038I Relaxing continuous gives -8933.5
Cbc0038I Rounding solution of -11276.7 is better than previous of -8933.5

Cbc0038I Before mini branch and bound, 68 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 73 columns, reduced to 8 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -11276.7 to -11289.5 (0.01 seconds)
Cbc0038I Round again with cutoff of -11547.8
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.16000 (2) obj. -13810.7 iterations 0
Cbc0038I Pass   3: suminf.    0.97893 (2) obj. -11547.8 iterations 26
Cbc0038I Pass   4: suminf.    0.68211 (3) obj. -11547.8 iterations 26
Cbc0038I Pass   5: suminf.    0.13793 (1) obj. -11912.9 iterations 13
Cbc0038I Pass   6: suminf.    0.49061 (2) obj. -11547.8 iterations 17
Cbc0038I Pass   7: suminf.    1.08039 (3) obj. -12501.9 iterations 11
Cbc0038I Pass   8: suminf.    0.49061 (2) obj. -11547.8 iterations 17
Cbc0038I Pass   9: suminf.    1.02968 (3) obj. -11547.8 iterations 13
Cbc0038I Pass  10: suminf.    0.54182 (2) obj. -11547.8 iterations 6
Cbc0038I Pass  11: suminf.    0.08889 (2) obj. -11644.8 iterations 12
Cbc0038I Pass  12: suminf.    1.01810 (5) obj. -11547.8 iterations 19
Cbc0038I Pass  13: suminf.    0.37023 (2) obj. -11547.8 iterations 29
Cbc0038I Pass  14: suminf.    0.81846 (2) obj. -13031.5 iterations 10
Cbc0038I Pass  15: suminf.    0.34483 (1) obj. -12110.2 iterations 3
Cbc0038I Pass  16: suminf.    0.85828 (3) obj. -11547.8 iterations 34
Cbc0038I Pass  17: suminf.    0.85828 (3) obj. -11547.8 iterations 11
Cbc0038I Pass  18: suminf.    0.97893 (2) obj. -11547.8 iterations 23
Cbc0038I Pass  19: suminf.    0.16000 (2) obj. -13810.7 iterations 9
Cbc0038I Pass  20: suminf.    0.91466 (5) obj. -11547.8 iterations 11
Cbc0038I Pass  21: suminf.    0.88430 (5) obj. -11547.8 iterations 6
Cbc0038I Pass  22: suminf.    0.10000 (1) obj. -12981.7 iterations 11
Cbc0038I Pass  23: suminf.    0.10000 (1) obj. -12981.7 iterations 1
Cbc0038I Pass  24: suminf.    0.47084 (1) obj. -11547.8 iterations 3
Cbc0038I Pass  25: suminf.    0.77484 (8) obj. -11547.8 iterations 17
Cbc0038I Pass  26: suminf.    0.62775 (2) obj. -11547.8 iterations 17
Cbc0038I Pass  27: suminf.    0.26471 (2) obj. -12086.4 iterations 11
Cbc0038I Pass  28: suminf.    0.26471 (2) obj. -12086.4 iterations 0
Cbc0038I Pass  29: suminf.    0.97893 (2) obj. -11547.8 iterations 19
Cbc0038I Pass  30: suminf.    0.16000 (2) obj. -13810.7 iterations 9
Cbc0038I Pass  31: suminf.    1.02346 (4) obj. -11547.8 iterations 10
Cbc0038I Rounding solution of -11291.9 is better than previous of -11289.5

Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 73 columns, reduced to 38 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -11291.9 to -12750.7 (0.02 seconds)
Cbc0038I Round again with cutoff of -12975.1
Cbc0038I Reduced cost fixing fixed 28 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.16000 (2) obj. -13810.7 iterations 0
Cbc0038I Pass  32: suminf.    0.48331 (2) obj. -12975.1 iterations 16
Cbc0038I Pass  33: suminf.    0.91304 (2) obj. -13002.6 iterations 12
Cbc0038I Pass  34: suminf.    0.90276 (2) obj. -12975.1 iterations 9
Cbc0038I Pass  35: suminf.    0.81846 (2) obj. -13031.5 iterations 11
Cbc0038I Pass  36: suminf.    0.78946 (2) obj. -12975.1 iterations 3
Cbc0038I Pass  37: suminf.    0.91304 (2) obj. -13002.6 iterations 2
Cbc0038I Pass  38: suminf.    0.39999 (5) obj. -12975.1 iterations 16
Cbc0038I Pass  39: suminf.    0.31082 (3) obj. -12975.1 iterations 8
Cbc0038I Pass  40: suminf.    0.77988 (3) obj. -12975.1 iterations 9
Cbc0038I Pass  41: suminf.    0.46256 (1) obj. -12975.1 iterations 13
Cbc0038I Pass  42: suminf.    0.16000 (2) obj. -13810.7 iterations 11
Cbc0038I Pass  43: suminf.    0.48331 (2) obj. -12975.1 iterations 15
Cbc0038I Pass  44: suminf.    1.04546 (5) obj. -12975.1 iterations 15
Cbc0038I Pass  45: suminf.    0.90276 (2) obj. -12975.1 iterations 12
Cbc0038I Pass  46: suminf.    0.81846 (2) obj. -13031.5 iterations 10
Cbc0038I Pass  47: suminf.    0.78946 (2) obj. -12975.1 iterations 2
Cbc0038I Pass  48: suminf.    0.91304 (2) obj. -13002.6 iterations 3
Cbc0038I Pass  49: suminf.    0.81846 (2) obj. -13031.5 iterations 5
Cbc0038I Pass  50: suminf.    1.83808 (5) obj. -12975.1 iterations 21
Cbc0038I Pass  51: suminf.    0.48331 (2) obj. -12975.1 iterations 14
Cbc0038I Pass  52: suminf.    0.16000 (2) obj. -13810.7 iterations 10
Cbc0038I Pass  53: suminf.    0.16000 (2) obj. -13810.7 iterations 2
Cbc0038I Pass  54: suminf.    0.16000 (2) obj. -13810.7 iterations 2
Cbc0038I Pass  55: suminf.    0.16000 (2) obj. -13810.7 iterations 2
Cbc0038I Pass  56: suminf.    1.30177 (7) obj. -12975.1 iterations 15
Cbc0038I Pass  57: suminf.    0.38500 (2) obj. -12975.1 iterations 24
Cbc0038I Pass  58: suminf.    0.56500 (7) obj. -12975.1 iterations 19
Cbc0038I Pass  59: suminf.    1.59808 (7) obj. -12975.1 iterations 15
Cbc0038I Pass  60: suminf.    1.16351 (7) obj. -12975.1 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 73 columns, reduced to 36 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -12750.7 - took 0.03 seconds
Cbc0012I Integer solution of -12750.72 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 132 rows 73 columns, reduced to 10 rows 7 columns
Cbc0031I 10 added rows had average density of 21.2
Cbc0013I At root node, 10 cuts changed objective from -13872.558 to -12933.602 in 43 passes
Cbc0014I Cut generator 0 (Probing) - 168 row cuts average 2.9 elements, 4 column cuts (4 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 143 row cuts average 23.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 25 row cuts average 8.4 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 112 row cuts average 22.1 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 98 row cuts average 21.6 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -12750.72, took 564 iterations and 4 nodes (0.11 seconds)
Cbc0032I Strong branching done 28 times (286 iterations), fathomed 0 nodes and fixed 4 variables
Cbc0035I Maximum depth 1, 30 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.11

