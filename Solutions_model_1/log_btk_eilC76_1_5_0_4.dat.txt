Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 104 (-51) rows, 58 (-20) columns and 317 (-136) elements
Clp1000I sum of infeasibilities 3.09924e-05 - average 2.98003e-07, 34 fixed columns
Coin0506I Presolve 23 (-81) rows, 19 (-39) columns and 77 (-240) elements
Clp0029I End of values pass after 18 iterations
Clp0000I Optimal - objective value 305.64749
Clp0000I Optimal - objective value 305.64749
Coin0511I After Postsolve, objective 305.64749, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 2.5563815 - largest nonzero change 2.7322304e-05 ( 0.001262127%) - largest zero change 2.9394864e-05
Clp0000I Optimal - objective value 305.64749
Clp0000I Optimal - objective value 305.64749
Clp0000I Optimal - objective value 305.64749
Coin0511I After Postsolve, objective 305.64749, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 305.647485 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 104 rows, 58 columns (57 integer (57 of which binary)) and 317 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.503%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.835303
Cbc0038I Pass   1: suminf.    0.27273 (1) obj. -283.842 iterations 8
Cbc0038I Solution found of -250.08
Cbc0038I Relaxing continuous gives -250.08
Cbc0038I Rounding solution of -256.08 is better than previous of -250.08

Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 104 rows 58 columns, reduced to 5 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -256.08 to -281.767 (0.01 seconds)
Cbc0038I Round again with cutoff of -284.155
Cbc0038I Reduced cost fixing fixed 9 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.27386 (2) obj. -284.155 iterations 1
Cbc0038I Pass   3: suminf.    0.05685 (1) obj. -284.155 iterations 3
Cbc0038I Pass   4: suminf.    0.05685 (1) obj. -284.155 iterations 0
Cbc0038I Pass   5: suminf.    0.45946 (1) obj. -284.155 iterations 1
Cbc0038I Pass   6: suminf.    1.61051 (6) obj. -284.155 iterations 4
Cbc0038I Pass   7: suminf.    0.31979 (1) obj. -284.155 iterations 5
Cbc0038I Pass   8: suminf.    1.02734 (4) obj. -284.155 iterations 10
Cbc0038I Pass   9: suminf.    0.82020 (3) obj. -284.155 iterations 8
Cbc0038I Pass  10: suminf.    0.05685 (1) obj. -284.155 iterations 4
Cbc0038I Pass  11: suminf.    0.05685 (1) obj. -284.155 iterations 0
Cbc0038I Pass  12: suminf.    0.45946 (1) obj. -284.155 iterations 1
Cbc0038I Pass  13: suminf.    0.71603 (5) obj. -284.155 iterations 14
Cbc0038I Pass  14: suminf.    0.52422 (3) obj. -284.155 iterations 5
Cbc0038I Pass  15: suminf.    0.20881 (2) obj. -284.155 iterations 6
Cbc0038I Pass  16: suminf.    0.43243 (1) obj. -284.155 iterations 3
Cbc0038I Pass  17: suminf.    0.05685 (1) obj. -284.155 iterations 2
Cbc0038I Pass  18: suminf.    0.45946 (1) obj. -284.155 iterations 1
Cbc0038I Pass  19: suminf.    1.95903 (8) obj. -284.155 iterations 16
Cbc0038I Pass  20: suminf.    1.63662 (4) obj. -284.155 iterations 7
Cbc0038I Pass  21: suminf.    0.45289 (1) obj. -284.155 iterations 8
Cbc0038I Pass  22: suminf.    0.03030 (1) obj. -284.155 iterations 1
Cbc0038I Pass  23: suminf.    0.90434 (3) obj. -284.155 iterations 7
Cbc0038I Pass  24: suminf.    0.03030 (1) obj. -284.155 iterations 11
Cbc0038I Pass  25: suminf.    0.66152 (2) obj. -284.155 iterations 5
Cbc0038I Pass  26: suminf.    0.66152 (2) obj. -284.155 iterations 2
Cbc0038I Pass  27: suminf.    0.74625 (4) obj. -284.155 iterations 10
Cbc0038I Pass  28: suminf.    0.10811 (1) obj. -284.155 iterations 4
Cbc0038I Pass  29: suminf.    0.73001 (3) obj. -284.155 iterations 3
Cbc0038I Pass  30: suminf.    0.67268 (2) obj. -284.155 iterations 6
Cbc0038I Pass  31: suminf.    0.00759 (1) obj. -284.155 iterations 2
Cbc0038I Rounding solution of -283.836 is better than previous of -281.767

Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 104 rows 58 columns, reduced to 17 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -288.453
Cbc0038I Reduced cost fixing fixed 16 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.28935 (2) obj. -288.453 iterations 0
Cbc0038I Pass  32: suminf.    0.15918 (1) obj. -288.453 iterations 3
Cbc0038I Pass  33: suminf.    0.15918 (1) obj. -288.453 iterations 0
Cbc0038I Pass  34: suminf.    0.45946 (1) obj. -288.453 iterations 1
Cbc0038I Pass  35: suminf.    0.43809 (2) obj. -288.453 iterations 4
Cbc0038I Pass  36: suminf.    0.41555 (2) obj. -288.453 iterations 4
Cbc0038I Pass  37: suminf.    0.96392 (4) obj. -288.453 iterations 8
Cbc0038I Pass  38: suminf.    0.41555 (2) obj. -288.453 iterations 7
Cbc0038I Pass  39: suminf.    0.94820 (4) obj. -288.453 iterations 5
Cbc0038I Pass  40: suminf.    0.50859 (2) obj. -288.453 iterations 9
Cbc0038I Pass  41: suminf.    0.36364 (1) obj. -288.453 iterations 5
Cbc0038I Pass  42: suminf.    0.40487 (1) obj. -288.453 iterations 1
Cbc0038I Pass  43: suminf.    0.62218 (5) obj. -288.453 iterations 13
Cbc0038I Pass  44: suminf.    0.49899 (3) obj. -288.453 iterations 6
Cbc0038I Pass  45: suminf.    0.55538 (2) obj. -288.453 iterations 8
Cbc0038I Pass  46: suminf.    0.94915 (2) obj. -288.453 iterations 5
Cbc0038I Pass  47: suminf.    0.28935 (2) obj. -288.453 iterations 2
Cbc0038I Pass  48: suminf.    0.28935 (2) obj. -288.453 iterations 0
Cbc0038I Pass  49: suminf.    0.15918 (1) obj. -288.453 iterations 3
Cbc0038I Pass  50: suminf.    0.15918 (1) obj. -288.453 iterations 0
Cbc0038I Pass  51: suminf.    0.45946 (1) obj. -288.453 iterations 1
Cbc0038I Pass  52: suminf.    0.84777 (3) obj. -288.453 iterations 3
Cbc0038I Pass  53: suminf.    0.45946 (1) obj. -288.453 iterations 3
Cbc0038I Pass  54: suminf.    0.63835 (2) obj. -288.453 iterations 8
Cbc0038I Pass  55: suminf.    0.43806 (2) obj. -288.453 iterations 4
Cbc0038I Pass  56: suminf.    0.31569 (2) obj. -288.453 iterations 5
Cbc0038I Pass  57: suminf.    0.22449 (2) obj. -288.453 iterations 2
Cbc0038I Pass  58: suminf.    0.15918 (1) obj. -288.453 iterations 1
Cbc0038I Pass  59: suminf.    0.45946 (1) obj. -288.453 iterations 1
Cbc0038I Pass  60: suminf.    1.11756 (5) obj. -288.453 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 104 rows 58 columns, reduced to 14 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -283.836 - took 0.02 seconds
Cbc0012I Integer solution of -283.83595 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 9 added rows had average density of 28.111111
Cbc0013I At root node, 9 cuts changed objective from -305.64749 to -293.06945 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 32 row cuts average 2.7 elements, 5 column cuts (5 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4 row cuts average 31.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 7 row cuts average 10.9 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 51 row cuts average 27.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 5 row cuts average 55.8 elements, 0 column cuts (0 active)  in 0.071 seconds - new frequency is 1
Cbc0001I Search completed - best objective -283.835951, took 244 iterations and 4 nodes (0.43 seconds)
Cbc0032I Strong branching done 30 times (190 iterations), fathomed 0 nodes and fixed 7 variables
Cbc0035I Maximum depth 1, 26 variables fixed on reduced cost
Total time (CPU seconds):       0.25   (Wallclock seconds):       0.43

