Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 115 (-40) rows, 63 (-15) columns and 349 (-104) elements
Clp1000I sum of infeasibilities 2.28403e-06 - average 1.98612e-08, 57 fixed columns
Coin0506I Presolve 10 (-105) rows, 6 (-57) columns and 23 (-326) elements
Clp0029I End of values pass after 6 iterations
Clp0000I Optimal - objective value 6854.0104
Clp0000I Optimal - objective value 6854.0104
Coin0511I After Postsolve, objective 6854.0104, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 6854.0104
Clp0000I Optimal - objective value 6854.0104
Clp0000I Optimal - objective value 6854.0104
Coin0511I After Postsolve, objective 6854.0104, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 6854.010379 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 114 rows, 63 columns (62 integer (62 of which binary)) and 353 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.525%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.454545
Cbc0038I Pass   1: suminf.    0.32258 (1) obj. -6031.41 iterations 5
Cbc0038I Solution found of -3577.51
Cbc0038I Relaxing continuous gives -3577.51
Cbc0038I Rounding solution of -3607.44 is better than previous of -3577.51

Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 0 continuous
Cbc0038I Full problem 114 rows 63 columns, reduced to 11 rows 6 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -3932.1
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.32258 (1) obj. -6031.41 iterations 0
Cbc0038I Pass   3: suminf.    0.09789 (1) obj. -3932.1 iterations 1
Cbc0038I Pass   4: suminf.    0.27423 (3) obj. -3932.1 iterations 20
Cbc0038I Pass   5: suminf.    0.18875 (2) obj. -3932.1 iterations 8
Cbc0038I Pass   6: suminf.    0.64560 (3) obj. -3932.1 iterations 3
Cbc0038I Pass   7: suminf.    0.64560 (3) obj. -3932.1 iterations 0
Cbc0038I Pass   8: suminf.    0.28474 (3) obj. -3932.1 iterations 1
Cbc0038I Pass   9: suminf.    0.28474 (3) obj. -3932.1 iterations 0
Cbc0038I Pass  10: suminf.    0.81970 (5) obj. -3932.1 iterations 18
Cbc0038I Pass  11: suminf.    0.81970 (5) obj. -3932.1 iterations 2
Cbc0038I Pass  12: suminf.    0.27749 (3) obj. -3932.1 iterations 4
Cbc0038I Pass  13: suminf.    0.27749 (3) obj. -3932.1 iterations 0
Cbc0038I Pass  14: suminf.    0.29135 (3) obj. -3932.1 iterations 1
Cbc0038I Pass  15: suminf.    0.29135 (3) obj. -3932.1 iterations 0
Cbc0038I Pass  16: suminf.    0.90349 (8) obj. -3932.1 iterations 15
Cbc0038I Pass  17: suminf.    0.80049 (8) obj. -3932.1 iterations 8
Cbc0038I Pass  18: suminf.    0.59530 (3) obj. -3932.1 iterations 11
Cbc0038I Pass  19: suminf.    0.59530 (3) obj. -3932.1 iterations 0
Cbc0038I Pass  20: suminf.    0.28033 (3) obj. -3932.1 iterations 1
Cbc0038I Pass  21: suminf.    0.28033 (3) obj. -3932.1 iterations 0
Cbc0038I Pass  22: suminf.    0.66704 (7) obj. -3932.1 iterations 24
Cbc0038I Pass  23: suminf.    0.39982 (4) obj. -3932.1 iterations 8
Cbc0038I Pass  24: suminf.    0.59120 (4) obj. -3932.1 iterations 3
Cbc0038I Pass  25: suminf.    0.93363 (6) obj. -3932.1 iterations 12
Cbc0038I Pass  26: suminf.    0.39507 (4) obj. -3932.1 iterations 5
Cbc0038I Pass  27: suminf.    0.59672 (4) obj. -3932.1 iterations 2
Cbc0038I Pass  28: suminf.    0.63155 (7) obj. -3932.1 iterations 7
Cbc0038I Pass  29: suminf.    0.39685 (4) obj. -3932.1 iterations 4
Cbc0038I Pass  30: suminf.    0.49059 (4) obj. -3932.1 iterations 2
Cbc0038I Pass  31: suminf.    0.85686 (6) obj. -3932.1 iterations 12
Cbc0038I Rounding solution of -3617.14 is better than previous of -3607.44

Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 114 rows 63 columns, reduced to 42 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -3617.14 to -3660.45 (0.02 seconds)
Cbc0038I Round again with cutoff of -4516.48
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.32258 (1) obj. -6031.41 iterations 0
Cbc0038I Pass  32: suminf.    0.25921 (1) obj. -4516.48 iterations 1
Cbc0038I Pass  33: suminf.    1.40049 (8) obj. -4516.48 iterations 16
Cbc0038I Pass  34: suminf.    1.11510 (5) obj. -4516.48 iterations 12
Cbc0038I Pass  35: suminf.    0.32258 (1) obj. -4775.96 iterations 9
Cbc0038I Pass  36: suminf.    0.25095 (1) obj. -4516.48 iterations 1
Cbc0038I Pass  37: suminf.    1.75314 (6) obj. -4516.48 iterations 12
Cbc0038I Pass  38: suminf.    1.01881 (4) obj. -4516.48 iterations 5
Cbc0038I Pass  39: suminf.    1.65578 (4) obj. -4516.48 iterations 3
Cbc0038I Pass  40: suminf.    1.02073 (4) obj. -4516.48 iterations 3
Cbc0038I Pass  41: suminf.    1.03031 (3) obj. -4516.48 iterations 3
Cbc0038I Pass  42: suminf.    1.03031 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  43: suminf.    0.75486 (3) obj. -4516.48 iterations 1
Cbc0038I Pass  44: suminf.    0.75486 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  45: suminf.    1.75772 (7) obj. -4516.48 iterations 15
Cbc0038I Pass  46: suminf.    1.39971 (6) obj. -4516.48 iterations 5
Cbc0038I Pass  47: suminf.    1.33333 (4) obj. -6028.17 iterations 11
Cbc0038I Pass  48: suminf.    0.59964 (3) obj. -4516.48 iterations 4
Cbc0038I Pass  49: suminf.    0.59964 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  50: suminf.    0.73972 (3) obj. -4516.48 iterations 5
Cbc0038I Pass  51: suminf.    0.73972 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  52: suminf.    1.61634 (8) obj. -4516.48 iterations 16
Cbc0038I Pass  53: suminf.    1.61634 (8) obj. -4516.48 iterations 0
Cbc0038I Pass  54: suminf.    1.95455 (5) obj. -5813.95 iterations 11
Cbc0038I Pass  55: suminf.    1.16676 (3) obj. -4516.48 iterations 3
Cbc0038I Pass  56: suminf.    1.16676 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  57: suminf.    0.75045 (3) obj. -4516.48 iterations 1
Cbc0038I Pass  58: suminf.    0.75045 (3) obj. -4516.48 iterations 0
Cbc0038I Pass  59: suminf.    1.29219 (6) obj. -4516.48 iterations 8
Cbc0038I Pass  60: suminf.    1.08716 (5) obj. -4516.48 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 38 integers at bound fixed and 0 continuous
Cbc0038I Full problem 114 rows 63 columns, reduced to 35 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -3660.45 - took 0.02 seconds
Cbc0012I Integer solution of -3660.4531 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 114 rows 63 columns, reduced to 19 rows 12 columns
Cbc0012I Integer solution of -3668.8263 found by DiveCoefficient after 114 iterations and 0 nodes (0.05 seconds)
Cbc0031I 10 added rows had average density of 14.4
Cbc0013I At root node, 10 cuts changed objective from -6854.0104 to -3674.3372 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 132 row cuts average 3.9 elements, 10 column cuts (10 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 31 row cuts average 30.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 50 row cuts average 26.7 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0001I Search completed - best objective -3668.82631, took 232 iterations and 4 nodes (0.06 seconds)
Cbc0032I Strong branching done 24 times (176 iterations), fathomed 1 nodes and fixed 3 variables
Cbc0035I Maximum depth 1, 54 variables fixed on reduced cost
Total time (CPU seconds):       0.06   (Wallclock seconds):       0.06

