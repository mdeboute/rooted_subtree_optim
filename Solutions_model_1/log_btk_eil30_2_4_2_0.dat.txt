Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 31 (-32) rows, 18 (-14) columns and 91 (-86) elements
Clp0000I Optimal - objective value 97.883877
Coin0511I After Postsolve, objective 97.883877, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 97.88387716 - 21 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 31 rows, 18 columns (17 integer (17 of which binary)) and 91 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.505%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 12 integers unsatisfied sum - 3.26666
Cbc0038I Pass   1: suminf.    0.04839 (1) obj. -48.0054 iterations 11
Cbc0038I Solution found of 4.3333
Cbc0038I Relaxing continuous gives 4.3333
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 18 columns, reduced to 20 rows 13 columns
Cbc0038I Mini branch and bound improved solution from 4.3333 to -70.3334 (0.01 seconds)
Cbc0038I Round again with cutoff of -73.0885
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.64639 (3) obj. -73.0885 iterations 3
Cbc0038I Pass   3: suminf.    0.84434 (3) obj. -73.0885 iterations 7
Cbc0038I Pass   4: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass   5: suminf.    0.79500 (3) obj. -73.0885 iterations 4
Cbc0038I Pass   6: suminf.    0.54236 (2) obj. -73.0885 iterations 2
Cbc0038I Pass   7: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass   8: suminf.    1.43399 (5) obj. -73.0885 iterations 5
Cbc0038I Pass   9: suminf.    0.85303 (4) obj. -73.0885 iterations 3
Cbc0038I Pass  10: suminf.    0.84434 (3) obj. -73.0885 iterations 7
Cbc0038I Pass  11: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass  12: suminf.    0.79500 (3) obj. -73.0885 iterations 4
Cbc0038I Pass  13: suminf.    0.54236 (2) obj. -73.0885 iterations 2
Cbc0038I Pass  14: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass  15: suminf.    0.50313 (2) obj. -73.0885 iterations 5
Cbc0038I Pass  16: suminf.    0.40858 (1) obj. -73.0885 iterations 1
Cbc0038I Pass  17: suminf.    0.16367 (2) obj. -73.0885 iterations 3
Cbc0038I Pass  18: suminf.    0.79500 (3) obj. -73.0885 iterations 4
Cbc0038I Pass  19: suminf.    0.54236 (2) obj. -73.0885 iterations 2
Cbc0038I Pass  20: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass  21: suminf.    1.23781 (5) obj. -73.0885 iterations 5
Cbc0038I Pass  22: suminf.    0.83333 (3) obj. -73.0885 iterations 5
Cbc0038I Pass  23: suminf.    1.96716 (6) obj. -73.0885 iterations 7
Cbc0038I Pass  24: suminf.    0.85303 (4) obj. -73.0885 iterations 3
Cbc0038I Pass  25: suminf.    0.84434 (3) obj. -73.0885 iterations 7
Cbc0038I Pass  26: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass  27: suminf.    0.79500 (3) obj. -73.0885 iterations 4
Cbc0038I Pass  28: suminf.    0.54236 (2) obj. -73.0885 iterations 2
Cbc0038I Pass  29: suminf.    0.16367 (2) obj. -73.0885 iterations 1
Cbc0038I Pass  30: suminf.    0.91461 (5) obj. -73.0885 iterations 7
Cbc0038I Pass  31: suminf.    0.16367 (2) obj. -73.0885 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 18 columns, reduced to 20 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -70.3334 - took 0.01 seconds
Cbc0012I Integer solution of -70.33337 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 31 rows 18 columns, reduced to 20 rows 13 columns
Cbc0031I 1 added rows had average density of 2
Cbc0013I At root node, 47 cuts changed objective from -97.883877 to -70.33337 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 45 row cuts average 2.4 elements, 5 column cuts (5 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -70.33337, took 8 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

