Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 40 (-29) rows, 21 (-14) columns and 116 (-79) elements
Clp0000I Optimal - objective value 106.83352
Coin0511I After Postsolve, objective 106.83352, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 106.8335163 - 24 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 40 rows, 21 columns (20 integer (20 of which binary)) and 117 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.873%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 4.34937
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -23.7223 iterations 20
Cbc0038I Solution found of -23.7223
Cbc0038I Relaxing continuous gives -23.7223
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 21 columns, reduced to 28 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -23.7223 to -41.2778 (0.01 seconds)
Cbc0038I Round again with cutoff of -46.9593
Cbc0038I Pass   2: suminf.    0.93648 (3) obj. -46.9593 iterations 3
Cbc0038I Pass   3: suminf.    1.06024 (3) obj. -46.9593 iterations 5
Cbc0038I Pass   4: suminf.    0.74922 (2) obj. -46.9593 iterations 1
Cbc0038I Pass   5: suminf.    1.68449 (5) obj. -46.9593 iterations 3
Cbc0038I Pass   6: suminf.    0.99906 (3) obj. -46.9593 iterations 3
Cbc0038I Pass   7: suminf.    0.96110 (5) obj. -46.9593 iterations 4
Cbc0038I Pass   8: suminf.    0.96110 (5) obj. -46.9593 iterations 1
Cbc0038I Pass   9: suminf.    0.50749 (10) obj. -46.9593 iterations 8
Cbc0038I Pass  10: suminf.    0.47370 (14) obj. -46.9593 iterations 4
Cbc0038I Pass  11: suminf.    1.67314 (9) obj. -46.9593 iterations 12
Cbc0038I Pass  12: suminf.    1.59536 (8) obj. -46.9593 iterations 2
Cbc0038I Pass  13: suminf.    0.90899 (5) obj. -46.9593 iterations 12
Cbc0038I Pass  14: suminf.    0.90899 (5) obj. -46.9593 iterations 0
Cbc0038I Pass  15: suminf.    1.06024 (3) obj. -46.9593 iterations 6
Cbc0038I Pass  16: suminf.    0.74922 (2) obj. -46.9593 iterations 1
Cbc0038I Pass  17: suminf.    0.93648 (3) obj. -46.9593 iterations 4
Cbc0038I Pass  18: suminf.    1.31929 (4) obj. -46.9593 iterations 1
Cbc0038I Pass  19: suminf.    2.74947 (8) obj. -46.9593 iterations 4
Cbc0038I Pass  20: suminf.    1.92001 (6) obj. -46.9593 iterations 3
Cbc0038I Pass  21: suminf.    4.10845 (10) obj. -46.9593 iterations 7
Cbc0038I Pass  22: suminf.    1.63233 (5) obj. -46.9593 iterations 8
Cbc0038I Pass  23: suminf.    1.06024 (3) obj. -46.9593 iterations 7
Cbc0038I Pass  24: suminf.    0.74922 (2) obj. -46.9593 iterations 1
Cbc0038I Pass  25: suminf.    0.93648 (3) obj. -46.9593 iterations 4
Cbc0038I Pass  26: suminf.    1.49782 (4) obj. -46.9593 iterations 4
Cbc0038I Pass  27: suminf.    0.93648 (3) obj. -46.9593 iterations 3
Cbc0038I Pass  28: suminf.    0.69486 (9) obj. -46.9593 iterations 7
Cbc0038I Pass  29: suminf.    0.47370 (14) obj. -46.9593 iterations 8
Cbc0038I Pass  30: suminf.    1.67314 (9) obj. -46.9593 iterations 12
Cbc0038I Pass  31: suminf.    1.59536 (8) obj. -46.9593 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 40 rows 21 columns, reduced to 38 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -41.2778 - took 0.03 seconds
Cbc0012I Integer solution of -41.2778 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 40 rows 21 columns, reduced to 28 rows 15 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 9 added rows had average density of 11.777778
Cbc0013I At root node, 9 cuts changed objective from -98.091525 to -56.311092 in 3 passes
Cbc0014I Cut generator 0 (Probing) - 32 row cuts average 3.3 elements, 11 column cuts (11 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 17 row cuts average 14.1 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 4 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 17 row cuts average 14.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 20.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -41.2778, took 36 iterations and 0 nodes (0.05 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.05

