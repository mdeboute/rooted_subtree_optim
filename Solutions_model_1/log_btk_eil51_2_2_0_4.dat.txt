Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 65 (-40) rows, 37 (-16) columns and 197 (-106) elements
Clp0000I Optimal - objective value 77.278988
Coin0511I After Postsolve, objective 77.278988, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 77.27898795 - 25 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 65 rows, 37 columns (36 integer (36 of which binary)) and 197 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.270%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 6.85323
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -16.2712 iterations 16
Cbc0038I Solution found of -16.2712
Cbc0038I Relaxing continuous gives -16.2712
Cbc0038I Rounding solution of -26.6272 is better than previous of -16.2712

Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 65 rows 37 columns, reduced to 28 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -26.6272 to -49.0593 (0.02 seconds)
Cbc0038I Round again with cutoff of -51.8813
Cbc0038I Pass   2: suminf.    2.41195 (7) obj. -51.8813 iterations 9
Cbc0038I Pass   3: suminf.    0.49833 (6) obj. -51.8813 iterations 5
Cbc0038I Pass   4: suminf.    0.49833 (6) obj. -51.8813 iterations 0
Cbc0038I Pass   5: suminf.    0.54466 (3) obj. -51.8813 iterations 13
Cbc0038I Pass   6: suminf.    0.79480 (2) obj. -51.8813 iterations 3
Cbc0038I Pass   7: suminf.    0.46350 (2) obj. -51.8813 iterations 2
Cbc0038I Pass   8: suminf.    0.79480 (2) obj. -51.8813 iterations 2
Cbc0038I Pass   9: suminf.    0.15568 (3) obj. -51.8813 iterations 14
Cbc0038I Pass  10: suminf.    0.15568 (3) obj. -51.8813 iterations 2
Cbc0038I Pass  11: suminf.    0.96254 (4) obj. -51.8813 iterations 7
Cbc0038I Pass  12: suminf.    0.65096 (3) obj. -51.8813 iterations 1
Cbc0038I Pass  13: suminf.    0.46350 (2) obj. -51.8813 iterations 4
Cbc0038I Pass  14: suminf.    0.79480 (2) obj. -51.8813 iterations 2
Cbc0038I Pass  15: suminf.    3.97451 (10) obj. -51.8813 iterations 9
Cbc0038I Pass  16: suminf.    1.72146 (5) obj. -51.8813 iterations 13
Cbc0038I Pass  17: suminf.    1.45098 (6) obj. -51.8813 iterations 2
Cbc0038I Pass  18: suminf.    2.26051 (6) obj. -51.8813 iterations 10
Cbc0038I Pass  19: suminf.    1.34458 (6) obj. -51.8813 iterations 2
Cbc0038I Pass  20: suminf.    0.42956 (3) obj. -51.8813 iterations 8
Cbc0038I Pass  21: suminf.    0.79480 (2) obj. -51.8813 iterations 3
Cbc0038I Pass  22: suminf.    0.46350 (2) obj. -51.8813 iterations 2
Cbc0038I Pass  23: suminf.    0.79480 (2) obj. -51.8813 iterations 2
Cbc0038I Pass  24: suminf.    3.04517 (11) obj. -51.8813 iterations 14
Cbc0038I Pass  25: suminf.    3.04517 (11) obj. -51.8813 iterations 0
Cbc0038I Pass  26: suminf.    2.95024 (8) obj. -51.8813 iterations 18
Cbc0038I Pass  27: suminf.    1.56709 (5) obj. -51.8813 iterations 3
Cbc0038I Pass  28: suminf.    1.08736 (5) obj. -51.8813 iterations 3
Cbc0038I Pass  29: suminf.    2.17878 (6) obj. -51.8813 iterations 5
Cbc0038I Pass  30: suminf.    0.29009 (5) obj. -51.8813 iterations 3
Cbc0038I Pass  31: suminf.    0.29009 (5) obj. -51.8813 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 65 rows 37 columns, reduced to 38 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -49.0593 - took 0.04 seconds
Cbc0012I Integer solution of -49.05928 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 65 rows 37 columns, reduced to 28 rows 19 columns
Cbc0031I 10 added rows had average density of 29.1
Cbc0013I At root node, 10 cuts changed objective from -77.278988 to -60.293029 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1686 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 685 row cuts average 35.1 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 12 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective -49.05928, took 2115 iterations and 16 nodes (0.22 seconds)
Cbc0032I Strong branching done 132 times (906 iterations), fathomed 3 nodes and fixed 6 variables
Cbc0035I Maximum depth 4, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.23

