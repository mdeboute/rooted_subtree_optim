Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 91 (-8) rows, 48 (-2) columns and 270 (-15) elements
Clp1000I sum of infeasibilities 6.92547e-06 - average 7.61041e-08, 1 fixed columns
Coin0506I Presolve 82 (-9) rows, 47 (-1) columns and 250 (-20) elements
Clp0029I End of values pass after 47 iterations
Clp0000I Optimal - objective value 1636.8492
Clp0000I Optimal - objective value 1636.8492
Coin0511I After Postsolve, objective 1636.8492, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1636.8492
Clp0000I Optimal - objective value 1636.8492
Clp0000I Optimal - objective value 1636.8492
Coin0511I After Postsolve, objective 1636.8492, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1636.849224 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 91 rows, 48 columns (47 integer (47 of which binary)) and 270 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.912%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 41 integers unsatisfied sum - 10.3059
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 405.244 iterations 42
Cbc0038I Solution found of 405.244
Cbc0038I Relaxing continuous gives 405.244
Cbc0038I Rounding solution of 275.664 is better than previous of 405.244

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 48 columns, reduced to 73 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 275.664 to -118.525 (0.03 seconds)
Cbc0038I Round again with cutoff of -270.357
Cbc0038I Pass   2: suminf.    1.46086 (6) obj. -270.357 iterations 6
Cbc0038I Pass   3: suminf.    1.14124 (8) obj. -270.357 iterations 5
Cbc0038I Pass   4: suminf.    0.99533 (6) obj. -270.357 iterations 2
Cbc0038I Pass   5: suminf.    3.22172 (11) obj. -270.357 iterations 5
Cbc0038I Pass   6: suminf.    1.14124 (8) obj. -270.357 iterations 5
Cbc0038I Pass   7: suminf.    3.36232 (14) obj. -270.357 iterations 15
Cbc0038I Pass   8: suminf.    1.14006 (8) obj. -270.357 iterations 16
Cbc0038I Pass   9: suminf.    3.61168 (9) obj. -270.357 iterations 6
Cbc0038I Pass  10: suminf.    3.15756 (9) obj. -270.357 iterations 3
Cbc0038I Pass  11: suminf.    1.27679 (7) obj. -270.357 iterations 3
Cbc0038I Pass  12: suminf.    3.04543 (9) obj. -270.357 iterations 20
Cbc0038I Pass  13: suminf.    1.76897 (7) obj. -270.357 iterations 8
Cbc0038I Pass  14: suminf.    1.76897 (7) obj. -270.357 iterations 0
Cbc0038I Pass  15: suminf.    2.06804 (7) obj. -270.357 iterations 6
Cbc0038I Pass  16: suminf.    2.04049 (8) obj. -270.357 iterations 2
Cbc0038I Pass  17: suminf.    2.75544 (8) obj. -270.357 iterations 4
Cbc0038I Pass  18: suminf.    2.54945 (9) obj. -270.357 iterations 2
Cbc0038I Pass  19: suminf.    2.14319 (9) obj. -270.357 iterations 3
Cbc0038I Pass  20: suminf.    1.75537 (9) obj. -270.357 iterations 2
Cbc0038I Pass  21: suminf.    2.01234 (7) obj. -270.357 iterations 10
Cbc0038I Pass  22: suminf.    2.00965 (7) obj. -270.357 iterations 2
Cbc0038I Pass  23: suminf.    2.63425 (8) obj. -270.357 iterations 3
Cbc0038I Pass  24: suminf.    1.60354 (7) obj. -270.357 iterations 4
Cbc0038I Pass  25: suminf.    1.36624 (8) obj. -270.357 iterations 3
Cbc0038I Pass  26: suminf.    2.01234 (7) obj. -270.357 iterations 8
Cbc0038I Pass  27: suminf.    2.00965 (7) obj. -270.357 iterations 2
Cbc0038I Pass  28: suminf.    2.63425 (8) obj. -270.357 iterations 3
Cbc0038I Pass  29: suminf.    1.60354 (7) obj. -270.357 iterations 4
Cbc0038I Pass  30: suminf.    1.36624 (8) obj. -270.357 iterations 3
Cbc0038I Pass  31: suminf.    2.01234 (7) obj. -270.357 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 48 columns, reduced to 84 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -118.525 - took 0.08 seconds
Cbc0012I Integer solution of -118.5248 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0031I 22 added rows had average density of 34.409091
Cbc0013I At root node, 22 cuts changed objective from -1636.8492 to -961.58707 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10140 row cuts average 3.5 elements, 1 column cuts (1 active)  in 0.058 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2385 row cuts average 47.8 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 154 row cuts average 5.5 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 174 row cuts average 43.9 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0010I After 1 nodes, 2 on tree, -118.5248 best solution, best possible -961.58707 (0.68 seconds)
Cbc0001I Search completed - best objective -118.5248000000001, took 8327 iterations and 18 nodes (0.80 seconds)
Cbc0032I Strong branching done 348 times (7397 iterations), fathomed 0 nodes and fixed 17 variables
Cbc0035I Maximum depth 5, 13 variables fixed on reduced cost
Total time (CPU seconds):       0.78   (Wallclock seconds):       0.81

