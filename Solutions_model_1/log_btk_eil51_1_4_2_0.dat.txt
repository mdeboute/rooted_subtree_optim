Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 93 (-12) rows, 51 (-2) columns and 280 (-23) elements
Clp1000I sum of infeasibilities 2.83955e-05 - average 3.05328e-07, 10 fixed columns
Coin0506I Presolve 74 (-19) rows, 41 (-10) columns and 222 (-58) elements
Clp0029I End of values pass after 41 iterations
Clp0000I Optimal - objective value 41.810654
Clp0000I Optimal - objective value 41.810654
Coin0511I After Postsolve, objective 41.810654, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 41.810654
Clp0000I Optimal - objective value 41.810654
Clp0000I Optimal - objective value 41.810654
Coin0511I After Postsolve, objective 41.810654, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 41.81065389 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 93 rows, 51 columns (50 integer (50 of which binary)) and 280 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.732%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 35 integers unsatisfied sum - 9.43694
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 11.2219 iterations 28
Cbc0038I Solution found of 11.2219
Cbc0038I Relaxing continuous gives 11.2219
Cbc0038I Rounding solution of 2.96414 is better than previous of 11.2219

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 65 rows 36 columns
Cbc0038I Mini branch and bound improved solution from 2.96414 to -8.0482 (0.04 seconds)
Cbc0038I Round again with cutoff of -11.4245
Cbc0038I Pass   2: suminf.    1.95547 (21) obj. -11.4245 iterations 26
Cbc0038I Pass   3: suminf.    1.80241 (31) obj. -11.4245 iterations 11
Cbc0038I Pass   4: suminf.    1.27078 (8) obj. -11.4245 iterations 48
Cbc0038I Pass   5: suminf.    1.04977 (8) obj. -11.4245 iterations 4
Cbc0038I Pass   6: suminf.    1.09130 (7) obj. -11.4245 iterations 9
Cbc0038I Pass   7: suminf.    1.08122 (7) obj. -11.4245 iterations 1
Cbc0038I Pass   8: suminf.    1.36697 (4) obj. -11.4245 iterations 10
Cbc0038I Pass   9: suminf.    1.36697 (4) obj. -11.4245 iterations 0
Cbc0038I Pass  10: suminf.    1.55759 (5) obj. -11.4245 iterations 5
Cbc0038I Pass  11: suminf.    0.65955 (4) obj. -11.4245 iterations 2
Cbc0038I Pass  12: suminf.    0.65052 (5) obj. -11.4245 iterations 2
Cbc0038I Pass  13: suminf.    1.49166 (4) obj. -11.4245 iterations 6
Cbc0038I Pass  14: suminf.    1.49166 (4) obj. -11.4245 iterations 0
Cbc0038I Pass  15: suminf.    1.28022 (4) obj. -11.4245 iterations 2
Cbc0038I Pass  16: suminf.    0.97142 (4) obj. -11.4245 iterations 3
Cbc0038I Pass  17: suminf.    0.94608 (3) obj. -11.4245 iterations 1
Cbc0038I Pass  18: suminf.    1.15015 (4) obj. -11.4245 iterations 2
Cbc0038I Pass  19: suminf.    0.88621 (3) obj. -11.4245 iterations 2
Cbc0038I Pass  20: suminf.    1.56367 (5) obj. -11.4245 iterations 4
Cbc0038I Pass  21: suminf.    0.97142 (4) obj. -11.4245 iterations 1
Cbc0038I Pass  22: suminf.    0.94608 (3) obj. -11.4245 iterations 1
Cbc0038I Pass  23: suminf.    1.15015 (4) obj. -11.4245 iterations 2
Cbc0038I Pass  24: suminf.    0.88621 (3) obj. -11.4245 iterations 2
Cbc0038I Pass  25: suminf.    1.56367 (5) obj. -11.4245 iterations 4
Cbc0038I Pass  26: suminf.    0.97142 (4) obj. -11.4245 iterations 1
Cbc0038I Pass  27: suminf.    0.94608 (3) obj. -11.4245 iterations 1
Cbc0038I Pass  28: suminf.    1.15015 (4) obj. -11.4245 iterations 2
Cbc0038I Pass  29: suminf.    0.88621 (3) obj. -11.4245 iterations 2
Cbc0038I Pass  30: suminf.    1.56367 (5) obj. -11.4245 iterations 4
Cbc0038I Pass  31: suminf.    0.97142 (4) obj. -11.4245 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 67 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -8.0482 - took 0.06 seconds
Cbc0012I Integer solution of -8.0482 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 93 rows 51 columns, reduced to 65 rows 36 columns
Cbc0031I 17 added rows had average density of 37.294118
Cbc0013I At root node, 17 cuts changed objective from -41.810654 to -31.183724 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6246 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1907 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 76 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 144 row cuts average 50.7 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0001I Search completed - best objective -8.048199999999994, took 6141 iterations and 36 nodes (0.64 seconds)
Cbc0032I Strong branching done 586 times (7864 iterations), fathomed 1 nodes and fixed 36 variables
Cbc0035I Maximum depth 9, 122 variables fixed on reduced cost
Total time (CPU seconds):       0.62   (Wallclock seconds):       0.65

