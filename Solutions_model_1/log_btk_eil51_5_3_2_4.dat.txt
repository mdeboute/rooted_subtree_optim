Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 79 (-26) rows, 43 (-10) columns and 238 (-65) elements
Clp1000I sum of infeasibilities 3.08844e-05 - average 3.90941e-07, 8 fixed columns
Coin0506I Presolve 63 (-16) rows, 34 (-9) columns and 188 (-50) elements
Clp0029I End of values pass after 34 iterations
Clp0014I Perturbing problem by 0.001% of 5.4014697 - largest nonzero change 0 ( 0%) - largest zero change 2.0584863e-05
Clp0000I Optimal - objective value 117.78056
Clp0000I Optimal - objective value 117.78056
Coin0511I After Postsolve, objective 117.78056, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 117.78056
Clp0000I Optimal - objective value 117.78056
Clp0000I Optimal - objective value 117.78056
Coin0511I After Postsolve, objective 117.78056, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 117.78056 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 79 rows, 43 columns (42 integer (42 of which binary)) and 238 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.058%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 6.80114
Cbc0038I Pass   1: suminf.    0.12994 (2) obj. -92.3417 iterations 18
Cbc0038I Pass   2: suminf.    0.06667 (1) obj. -92.2015 iterations 1
Cbc0038I Solution found of -72.2336
Cbc0038I Relaxing continuous gives -72.2336
Cbc0038I Rounding solution of -75.6204 is better than previous of -72.2336

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 79 rows 43 columns, reduced to 27 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -75.6204 to -100.584 (0.02 seconds)
Cbc0038I Round again with cutoff of -102.304
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    0.55136 (5) obj. -102.304 iterations 7
Cbc0038I Pass   4: suminf.    0.52896 (4) obj. -102.304 iterations 2
Cbc0038I Pass   5: suminf.    0.68781 (2) obj. -102.304 iterations 5
Cbc0038I Pass   6: suminf.    0.24032 (1) obj. -102.304 iterations 3
Cbc0038I Pass   7: suminf.    0.37889 (1) obj. -102.304 iterations 1
Cbc0038I Pass   8: suminf.    0.78951 (5) obj. -102.304 iterations 7
Cbc0038I Pass   9: suminf.    0.78951 (5) obj. -102.304 iterations 3
Cbc0038I Pass  10: suminf.    0.41595 (2) obj. -102.304 iterations 5
Cbc0038I Pass  11: suminf.    0.42321 (5) obj. -102.304 iterations 10
Cbc0038I Pass  12: suminf.    0.29317 (1) obj. -102.304 iterations 7
Cbc0038I Pass  13: suminf.    0.33028 (1) obj. -102.304 iterations 1
Cbc0038I Pass  14: suminf.    0.48926 (3) obj. -102.304 iterations 11
Cbc0038I Pass  15: suminf.    0.31575 (2) obj. -102.304 iterations 7
Cbc0038I Pass  16: suminf.    1.11002 (8) obj. -102.304 iterations 8
Cbc0038I Pass  17: suminf.    0.31575 (2) obj. -102.304 iterations 9
Cbc0038I Pass  18: suminf.    4.56435 (14) obj. -102.304 iterations 20
Cbc0038I Pass  19: suminf.    1.89879 (11) obj. -102.304 iterations 4
Cbc0038I Pass  20: suminf.    1.53932 (8) obj. -102.304 iterations 3
Cbc0038I Pass  21: suminf.    1.13578 (5) obj. -102.304 iterations 5
Cbc0038I Pass  22: suminf.    0.48561 (2) obj. -102.304 iterations 5
Cbc0038I Pass  23: suminf.    0.31575 (2) obj. -102.304 iterations 5
Cbc0038I Pass  24: suminf.    1.11002 (8) obj. -102.304 iterations 8
Cbc0038I Pass  25: suminf.    0.31575 (2) obj. -102.304 iterations 9
Cbc0038I Pass  26: suminf.    1.65139 (7) obj. -102.304 iterations 10
Cbc0038I Pass  27: suminf.    0.77047 (2) obj. -102.304 iterations 8
Cbc0038I Pass  28: suminf.    0.44412 (2) obj. -102.304 iterations 4
Cbc0038I Pass  29: suminf.    0.98681 (8) obj. -102.304 iterations 11
Cbc0038I Pass  30: suminf.    0.72278 (4) obj. -102.304 iterations 10
Cbc0038I Pass  31: suminf.    0.24032 (1) obj. -102.304 iterations 9
Cbc0038I Pass  32: suminf.    0.37889 (1) obj. -102.304 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 79 rows 43 columns, reduced to 45 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -100.584 - took 0.03 seconds
Cbc0012I Integer solution of -100.584 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 79 rows 43 columns, reduced to 27 rows 17 columns
Cbc0031I 8 added rows had average density of 28.5
Cbc0013I At root node, 8 cuts changed objective from -117.78056 to -103.50687 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 594 row cuts average 3.0 elements, 2 column cuts (2 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 372 row cuts average 37.2 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -100.584, took 1580 iterations and 4 nodes (0.18 seconds)
Cbc0032I Strong branching done 44 times (384 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 21 variables fixed on reduced cost
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.18

