Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 51 (-14) rows, 29 (-4) columns and 153 (-30) elements
Clp1000I sum of infeasibilities 4.5363e-06 - average 8.89471e-08, 2 fixed columns
Coin0506I Presolve 47 (-4) rows, 27 (-2) columns and 141 (-12) elements
Clp0029I End of values pass after 27 iterations
Clp0000I Optimal - objective value 91.385786
Clp0000I Optimal - objective value 91.385786
Coin0511I After Postsolve, objective 91.385786, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 91.385786
Clp0000I Optimal - objective value 91.385786
Clp0000I Optimal - objective value 91.385786
Coin0511I After Postsolve, objective 91.385786, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 91.38578638 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0004I processed model has 50 rows, 29 columns (28 integer (28 of which binary)) and 160 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.202%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 19 integers unsatisfied sum - 4.85821
Cbc0038I Solution found of -11.6364
Cbc0038I Relaxing continuous gives -11.6364
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 29 columns, reduced to 34 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -11.6364 to -55.1818 (0.02 seconds)
Cbc0038I Round again with cutoff of -58.0953
Cbc0038I Pass   1: suminf.    0.62670 (3) obj. -58.0953 iterations 19
Cbc0038I Pass   2: suminf.    0.56790 (3) obj. -58.0953 iterations 4
Cbc0038I Pass   3: suminf.    1.28959 (4) obj. -58.0953 iterations 6
Cbc0038I Pass   4: suminf.    0.87382 (5) obj. -58.0953 iterations 3
Cbc0038I Pass   5: suminf.    1.02849 (4) obj. -58.0953 iterations 6
Cbc0038I Pass   6: suminf.    0.23816 (3) obj. -58.0953 iterations 9
Cbc0038I Pass   7: suminf.    0.69604 (4) obj. -58.0953 iterations 10
Cbc0038I Pass   8: suminf.    0.12085 (2) obj. -58.532 iterations 6
Cbc0038I Pass   9: suminf.    0.85581 (4) obj. -58.0953 iterations 5
Cbc0038I Pass  10: suminf.    0.51910 (2) obj. -61.1611 iterations 4
Cbc0038I Pass  11: suminf.    0.23462 (2) obj. -60.7564 iterations 4
Cbc0038I Pass  12: suminf.    0.23462 (2) obj. -60.7564 iterations 0
Cbc0038I Pass  13: suminf.    0.74566 (3) obj. -58.0953 iterations 3
Cbc0038I Pass  14: suminf.    0.66807 (3) obj. -58.0953 iterations 1
Cbc0038I Pass  15: suminf.    0.53283 (4) obj. -58.0953 iterations 4
Cbc0038I Pass  16: suminf.    0.39920 (2) obj. -58.0953 iterations 1
Cbc0038I Pass  17: suminf.    0.89539 (3) obj. -58.0953 iterations 3
Cbc0038I Pass  18: suminf.    0.77776 (7) obj. -58.0953 iterations 8
Cbc0038I Pass  19: suminf.    0.48004 (2) obj. -58.0953 iterations 4
Cbc0038I Pass  20: suminf.    0.53299 (2) obj. -59.0999 iterations 1
Cbc0038I Pass  21: suminf.    0.70776 (4) obj. -58.0953 iterations 7
Cbc0038I Pass  22: suminf.    0.39701 (3) obj. -58.0953 iterations 2
Cbc0038I Pass  23: suminf.    0.79677 (3) obj. -58.0953 iterations 4
Cbc0038I Pass  24: suminf.    0.79677 (3) obj. -58.0953 iterations 0
Cbc0038I Pass  25: suminf.    0.50681 (2) obj. -58.0953 iterations 2
Cbc0038I Pass  26: suminf.    0.50681 (2) obj. -58.0953 iterations 0
Cbc0038I Pass  27: suminf.    0.93204 (2) obj. -58.0953 iterations 1
Cbc0038I Pass  28: suminf.    0.69785 (2) obj. -58.0953 iterations 1
Cbc0038I Pass  29: suminf.    1.36160 (6) obj. -58.0953 iterations 3
Cbc0038I Pass  30: suminf.    0.69785 (2) obj. -58.0953 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 29 columns, reduced to 48 rows 28 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -55.1818 - took 0.05 seconds
Cbc0012I Integer solution of -55.1818 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 50 rows 29 columns, reduced to 34 rows 20 columns
Cbc0031I 7 added rows had average density of 24.571429
Cbc0013I At root node, 7 cuts changed objective from -84.316335 to -72.487429 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 834 row cuts average 3.6 elements, 2 column cuts (2 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 539 row cuts average 28.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 68 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0038I Full problem 50 rows 29 columns, reduced to 30 rows 18 columns
Cbc0001I Search completed - best objective -55.18180000000001, took 3182 iterations and 56 nodes (0.38 seconds)
Cbc0032I Strong branching done 472 times (2878 iterations), fathomed 3 nodes and fixed 10 variables
Cbc0035I Maximum depth 13, 84 variables fixed on reduced cost
Total time (CPU seconds):       0.35   (Wallclock seconds):       0.38

