Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 72 (-33) rows, 40 (-13) columns and 217 (-86) elements
Clp1000I sum of infeasibilities 3.23566e-05 - average 4.49397e-07, 13 fixed columns
Coin0506I Presolve 44 (-28) rows, 25 (-15) columns and 131 (-86) elements
Clp0029I End of values pass after 25 iterations
Clp0014I Perturbing problem by 0.001% of 3.2395892 - largest nonzero change 0 ( 0%) - largest zero change 2.2273756e-05
Clp0000I Optimal - objective value 183.69566
Clp0000I Optimal - objective value 183.69566
Coin0511I After Postsolve, objective 183.69566, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 183.69566
Clp0000I Optimal - objective value 183.69566
Clp0000I Optimal - objective value 183.69566
Coin0511I After Postsolve, objective 183.69566, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 183.6956633 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 72 rows, 40 columns (39 integer (39 of which binary)) and 217 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.160%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 6.65314
Cbc0038I Pass   1: suminf.    0.34426 (3) obj. -137.939 iterations 22
Cbc0038I Pass   2: suminf.    0.34426 (3) obj. -137.939 iterations 0
Cbc0038I Solution found of -84.2879
Cbc0038I Relaxing continuous gives -84.2879
Cbc0038I Rounding solution of -123.849 is better than previous of -84.2879

Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 72 rows 40 columns, reduced to 34 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -123.849 to -146.265 (0.02 seconds)
Cbc0038I Round again with cutoff of -150.008
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    1.86399 (6) obj. -150.008 iterations 4
Cbc0038I Pass   4: suminf.    0.35098 (4) obj. -150.008 iterations 9
Cbc0038I Pass   5: suminf.    0.35098 (4) obj. -150.008 iterations 0
Cbc0038I Pass   6: suminf.    0.50204 (3) obj. -150.008 iterations 7
Cbc0038I Pass   7: suminf.    0.31836 (3) obj. -150.008 iterations 5
Cbc0038I Pass   8: suminf.    0.69470 (4) obj. -150.008 iterations 5
Cbc0038I Pass   9: suminf.    0.50511 (3) obj. -150.008 iterations 4
Cbc0038I Pass  10: suminf.    0.35098 (4) obj. -150.008 iterations 6
Cbc0038I Pass  11: suminf.    0.35098 (4) obj. -150.008 iterations 0
Cbc0038I Pass  12: suminf.    0.50204 (3) obj. -150.008 iterations 7
Cbc0038I Pass  13: suminf.    0.31836 (3) obj. -150.008 iterations 5
Cbc0038I Pass  14: suminf.    0.69470 (4) obj. -150.008 iterations 5
Cbc0038I Pass  15: suminf.    0.50511 (3) obj. -150.008 iterations 4
Cbc0038I Pass  16: suminf.    0.35098 (4) obj. -150.008 iterations 6
Cbc0038I Pass  17: suminf.    0.35098 (4) obj. -150.008 iterations 0
Cbc0038I Pass  18: suminf.    0.50204 (3) obj. -150.008 iterations 7
Cbc0038I Pass  19: suminf.    0.31836 (3) obj. -150.008 iterations 5
Cbc0038I Pass  20: suminf.    0.69470 (4) obj. -150.008 iterations 5
Cbc0038I Pass  21: suminf.    0.50511 (3) obj. -150.008 iterations 4
Cbc0038I Pass  22: suminf.    0.35098 (4) obj. -150.008 iterations 6
Cbc0038I Pass  23: suminf.    0.35098 (4) obj. -150.008 iterations 0
Cbc0038I Pass  24: suminf.    0.50204 (3) obj. -150.008 iterations 7
Cbc0038I Pass  25: suminf.    0.31836 (3) obj. -150.008 iterations 5
Cbc0038I Pass  26: suminf.    0.69470 (4) obj. -150.008 iterations 5
Cbc0038I Pass  27: suminf.    0.50511 (3) obj. -150.008 iterations 4
Cbc0038I Pass  28: suminf.    0.35098 (4) obj. -150.008 iterations 6
Cbc0038I Pass  29: suminf.    0.35098 (4) obj. -150.008 iterations 0
Cbc0038I Pass  30: suminf.    0.50204 (3) obj. -150.008 iterations 7
Cbc0038I Pass  31: suminf.    0.31836 (3) obj. -150.008 iterations 5
Cbc0038I Pass  32: suminf.    0.69470 (4) obj. -150.008 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 21 integers at bound fixed and 0 continuous
Cbc0038I Full problem 72 rows 40 columns, reduced to 34 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -146.265 - took 0.03 seconds
Cbc0012I Integer solution of -146.2653 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 72 rows 40 columns, reduced to 34 rows 19 columns
Cbc0031I 8 added rows had average density of 32.25
Cbc0013I At root node, 8 cuts changed objective from -183.69566 to -162.74749 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 432 row cuts average 3.0 elements, 3 column cuts (3 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 446 row cuts average 32.6 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 12.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -146.2653, took 1275 iterations and 24 nodes (0.18 seconds)
Cbc0032I Strong branching done 142 times (618 iterations), fathomed 5 nodes and fixed 6 variables
Cbc0035I Maximum depth 4, 52 variables fixed on reduced cost
Total time (CPU seconds):       0.17   (Wallclock seconds):       0.18

