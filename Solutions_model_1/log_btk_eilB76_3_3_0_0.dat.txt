Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 102 (-53) rows, 57 (-21) columns and 310 (-143) elements
Clp1000I sum of infeasibilities 2.59949e-06 - average 2.54852e-08, 46 fixed columns
Coin0506I Presolve 15 (-87) rows, 9 (-48) columns and 42 (-268) elements
Clp0029I End of values pass after 9 iterations
Clp0000I Optimal - objective value 4741.4864
Clp0000I Optimal - objective value 4741.4864
Coin0511I After Postsolve, objective 4741.4864, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 5.92375 - largest nonzero change 0 ( 0%) - largest zero change 2.9394864e-05
Clp0000I Optimal - objective value 4741.4864
Clp0000I Optimal - objective value 4741.4864
Clp0000I Optimal - objective value 4741.4864
Coin0511I After Postsolve, objective 4741.4864, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4741.486411 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 19 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 13 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 99 rows, 57 columns (56 integer (56 of which binary)) and 342 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.502%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 7 integers unsatisfied sum - 2.26128
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -2714.9 iterations 9
Cbc0038I Solution found of -2714.9
Cbc0038I Relaxing continuous gives -2714.9
Cbc0038I Rounding solution of -3738.68 is better than previous of -2714.9

Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 99 rows 57 columns, reduced to 15 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -3738.68 to -3900.25 (0.02 seconds)
Cbc0038I Round again with cutoff of -3984.37
Cbc0038I Reduced cost fixing fixed 9 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.84676 (2) obj. -3984.37 iterations 4
Cbc0038I Pass   3: suminf.    0.41935 (1) obj. -4230.31 iterations 3
Cbc0038I Pass   4: suminf.    0.21124 (1) obj. -3984.37 iterations 2
Cbc0038I Pass   5: suminf.    0.11753 (5) obj. -3984.37 iterations 10
Cbc0038I Pass   6: suminf.    0.05920 (3) obj. -3984.37 iterations 11
Cbc0038I Pass   7: suminf.    0.36601 (2) obj. -4174.44 iterations 4
Cbc0038I Pass   8: suminf.    0.40671 (2) obj. -3984.37 iterations 10
Cbc0038I Pass   9: suminf.    0.06170 (2) obj. -3984.37 iterations 7
Cbc0038I Pass  10: suminf.    0.30769 (1) obj. -4230.26 iterations 3
Cbc0038I Pass  11: suminf.    1.48181 (4) obj. -4073.42 iterations 11
Cbc0038I Pass  12: suminf.    1.48181 (4) obj. -4073.42 iterations 2
Cbc0038I Pass  13: suminf.    1.32323 (5) obj. -3984.37 iterations 6
Cbc0038I Pass  14: suminf.    0.43079 (4) obj. -3984.37 iterations 2
Cbc0038I Pass  15: suminf.    0.42707 (4) obj. -3984.37 iterations 2
Cbc0038I Pass  16: suminf.    1.02361 (3) obj. -4251.53 iterations 8
Cbc0038I Pass  17: suminf.    0.69096 (4) obj. -3984.37 iterations 2
Cbc0038I Pass  18: suminf.    1.02361 (3) obj. -4251.53 iterations 3
Cbc0038I Pass  19: suminf.    0.82788 (3) obj. -3984.37 iterations 8
Cbc0038I Pass  20: suminf.    0.51541 (4) obj. -3984.37 iterations 12
Cbc0038I Pass  21: suminf.    0.70307 (3) obj. -4120.63 iterations 3
Cbc0038I Pass  22: suminf.    1.03452 (4) obj. -3984.37 iterations 21
Cbc0038I Pass  23: suminf.    1.01163 (4) obj. -3984.37 iterations 7
Cbc0038I Pass  24: suminf.    0.51900 (3) obj. -4210.69 iterations 6
Cbc0038I Pass  25: suminf.    0.14479 (4) obj. -3984.37 iterations 4
Cbc0038I Pass  26: suminf.    0.51900 (3) obj. -4210.69 iterations 5
Cbc0038I Pass  27: suminf.    0.42261 (3) obj. -3984.37 iterations 5
Cbc0038I Pass  28: suminf.    0.05194 (2) obj. -3984.37 iterations 7
Cbc0038I Pass  29: suminf.    0.23077 (1) obj. -4162.54 iterations 3
Cbc0038I Pass  30: suminf.    0.98126 (4) obj. -3984.37 iterations 9
Cbc0038I Pass  31: suminf.    0.34181 (5) obj. -3984.37 iterations 8
Cbc0038I Rounding solution of -3927.19 is better than previous of -3900.25

Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 99 rows 57 columns, reduced to 34 rows 23 columns
Cbc0038I Mini branch and bound improved solution from -3927.19 to -4232.4 (0.03 seconds)
Cbc0038I Round again with cutoff of -4334.22
Cbc0038I Reduced cost fixing fixed 15 variables on major pass 3
Cbc0038I Pass  31: suminf.    1.11887 (5) obj. -4334.22 iterations 2
Cbc0038I Pass  32: suminf.    0.58539 (4) obj. -4334.22 iterations 2
Cbc0038I Pass  33: suminf.    0.57659 (4) obj. -4334.22 iterations 2
Cbc0038I Pass  34: suminf.    1.31995 (3) obj. -4704.95 iterations 7
Cbc0038I Pass  35: suminf.    0.85856 (4) obj. -4334.22 iterations 2
Cbc0038I Pass  36: suminf.    1.31995 (3) obj. -4704.95 iterations 5
Cbc0038I Pass  37: suminf.    1.07367 (3) obj. -4334.22 iterations 4
Cbc0038I Pass  38: suminf.    0.91835 (4) obj. -4334.22 iterations 3
Cbc0038I Pass  39: suminf.    1.04309 (3) obj. -4428.59 iterations 3
Cbc0038I Pass  40: suminf.    1.55413 (6) obj. -4334.22 iterations 8
Cbc0038I Pass  41: suminf.    1.09665 (7) obj. -4334.22 iterations 4
Cbc0038I Pass  42: suminf.    1.31995 (3) obj. -4704.95 iterations 9
Cbc0038I Pass  43: suminf.    0.85856 (4) obj. -4334.22 iterations 2
Cbc0038I Pass  44: suminf.    1.31995 (3) obj. -4704.95 iterations 5
Cbc0038I Pass  45: suminf.    1.70614 (6) obj. -4334.22 iterations 6
Cbc0038I Pass  46: suminf.    1.09405 (5) obj. -4334.22 iterations 4
Cbc0038I Pass  47: suminf.    2.26274 (5) obj. -4334.22 iterations 4
Cbc0038I Pass  48: suminf.    0.24324 (2) obj. -4334.22 iterations 5
Cbc0038I Pass  49: suminf.    1.54199 (4) obj. -4334.22 iterations 4
Cbc0038I Pass  50: suminf.    0.78689 (3) obj. -4727.94 iterations 8
Cbc0038I Pass  51: suminf.    1.15166 (4) obj. -4483.85 iterations 4
Cbc0038I Pass  52: suminf.    0.67470 (3) obj. -4429.31 iterations 4
Cbc0038I Pass  53: suminf.    1.33025 (6) obj. -4334.22 iterations 5
Cbc0038I Pass  54: suminf.    1.62047 (7) obj. -4334.22 iterations 18
Cbc0038I Pass  55: suminf.    1.62047 (7) obj. -4334.22 iterations 2
Cbc0038I Pass  56: suminf.    0.93202 (2) obj. -4334.22 iterations 10
Cbc0038I Pass  57: suminf.    0.93202 (2) obj. -4334.22 iterations 0
Cbc0038I Pass  58: suminf.    0.95904 (2) obj. -4334.22 iterations 1
Cbc0038I Pass  59: suminf.    0.85856 (4) obj. -4334.22 iterations 2
Cbc0038I Pass  60: suminf.    1.31995 (3) obj. -4704.95 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 37 integers at bound fixed and 0 continuous
Cbc0038I Full problem 99 rows 57 columns, reduced to 32 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -4232.4 - took 0.02 seconds
Cbc0012I Integer solution of -4232.4025 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 99 rows 57 columns, reduced to 16 rows 9 columns
Cbc0031I 8 added rows had average density of 9.875
Cbc0013I At root node, 8 cuts changed objective from -4741.4864 to -4299.9229 in 19 passes
Cbc0014I Cut generator 0 (Probing) - 41 row cuts average 7.1 elements, 18 column cuts (18 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 2.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 8 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 23 row cuts average 12.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 37 row cuts average 15.1 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 54.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -4232.40252, took 167 iterations and 2 nodes (0.06 seconds)
Cbc0032I Strong branching done 12 times (71 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.06   (Wallclock seconds):       0.07

