Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 59 (-10) rows, 32 (-3) columns and 174 (-21) elements
Clp1000I sum of infeasibilities 0.00941064 - average 0.000159502, 5 fixed columns
Coin0506I Presolve 50 (-9) rows, 27 (-5) columns and 146 (-28) elements
Clp0029I End of values pass after 27 iterations
Clp0000I Optimal - objective value 117.13453
Clp0000I Optimal - objective value 117.13453
Coin0511I After Postsolve, objective 117.13453, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 117.13453
Clp0000I Optimal - objective value 117.13453
Clp0000I Optimal - objective value 117.13453
Coin0511I After Postsolve, objective 117.13453, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 117.1345298 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0004I processed model has 59 rows, 32 columns (31 integer (31 of which binary)) and 178 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.125%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 19 integers unsatisfied sum - 7.4224
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -1.25902 iterations 22
Cbc0038I Solution found of -1.25902
Cbc0038I Relaxing continuous gives -1.25902
Cbc0038I Rounding solution of -39.2541 is better than previous of -1.25902

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 59 rows 32 columns, reduced to 39 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -39.2541 to -59.8884 (0.02 seconds)
Cbc0038I Round again with cutoff of -65.6066
Cbc0038I Pass   2: suminf.    1.77342 (8) obj. -65.6066 iterations 6
Cbc0038I Pass   3: suminf.    1.08853 (7) obj. -65.6066 iterations 1
Cbc0038I Pass   4: suminf.    1.72482 (4) obj. -65.6066 iterations 8
Cbc0038I Pass   5: suminf.    0.65866 (4) obj. -65.6066 iterations 3
Cbc0038I Pass   6: suminf.    0.49504 (3) obj. -65.6066 iterations 2
Cbc0038I Pass   7: suminf.    0.72036 (3) obj. -65.6066 iterations 3
Cbc0038I Pass   8: suminf.    0.44288 (4) obj. -65.6066 iterations 2
Cbc0038I Pass   9: suminf.    0.65866 (4) obj. -65.6066 iterations 4
Cbc0038I Pass  10: suminf.    3.50823 (9) obj. -65.6066 iterations 8
Cbc0038I Pass  11: suminf.    1.24349 (6) obj. -65.6066 iterations 9
Cbc0038I Pass  12: suminf.    0.51433 (4) obj. -65.6066 iterations 2
Cbc0038I Pass  13: suminf.    0.72767 (5) obj. -65.6066 iterations 5
Cbc0038I Pass  14: suminf.    0.72653 (6) obj. -65.6066 iterations 1
Cbc0038I Pass  15: suminf.    1.84387 (5) obj. -65.6066 iterations 5
Cbc0038I Pass  16: suminf.    0.91257 (3) obj. -65.6066 iterations 4
Cbc0038I Pass  17: suminf.    0.51433 (4) obj. -65.6066 iterations 3
Cbc0038I Pass  18: suminf.    0.72767 (5) obj. -65.6066 iterations 6
Cbc0038I Pass  19: suminf.    0.72653 (6) obj. -65.6066 iterations 1
Cbc0038I Pass  20: suminf.    1.84387 (5) obj. -65.6066 iterations 5
Cbc0038I Pass  21: suminf.    0.91257 (3) obj. -65.6066 iterations 4
Cbc0038I Pass  22: suminf.    0.51433 (4) obj. -65.6066 iterations 3
Cbc0038I Pass  23: suminf.    0.72767 (5) obj. -65.6066 iterations 6
Cbc0038I Pass  24: suminf.    0.72653 (6) obj. -65.6066 iterations 1
Cbc0038I Pass  25: suminf.    1.84387 (5) obj. -65.6066 iterations 5
Cbc0038I Pass  26: suminf.    0.91257 (3) obj. -65.6066 iterations 4
Cbc0038I Pass  27: suminf.    0.51433 (4) obj. -65.6066 iterations 3
Cbc0038I Pass  28: suminf.    0.72767 (5) obj. -65.6066 iterations 6
Cbc0038I Pass  29: suminf.    0.72653 (6) obj. -65.6066 iterations 1
Cbc0038I Pass  30: suminf.    1.84387 (5) obj. -65.6066 iterations 5
Cbc0038I Pass  31: suminf.    0.91257 (3) obj. -65.6066 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 59 rows 32 columns, reduced to 48 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -59.8884 to -64.7127 (0.03 seconds)
Cbc0038I Round again with cutoff of -75.8991
Cbc0038I Pass  31: suminf.    2.08898 (8) obj. -75.8991 iterations 0
Cbc0038I Pass  32: suminf.    1.42994 (7) obj. -75.8991 iterations 1
Cbc0038I Pass  33: suminf.    1.48172 (6) obj. -75.8991 iterations 7
Cbc0038I Pass  34: suminf.    0.81329 (5) obj. -75.8991 iterations 3
Cbc0038I Pass  35: suminf.    1.52757 (4) obj. -75.8991 iterations 7
Cbc0038I Pass  36: suminf.    0.46088 (4) obj. -75.8991 iterations 7
Cbc0038I Pass  37: suminf.    1.33521 (9) obj. -75.8991 iterations 5
Cbc0038I Pass  38: suminf.    1.33553 (6) obj. -75.8991 iterations 1
Cbc0038I Pass  39: suminf.    1.89082 (5) obj. -75.8991 iterations 9
Cbc0038I Pass  40: suminf.    1.49173 (5) obj. -75.8991 iterations 3
Cbc0038I Pass  41: suminf.    1.33553 (6) obj. -75.8991 iterations 6
Cbc0038I Pass  42: suminf.    2.93856 (13) obj. -75.8991 iterations 13
Cbc0038I Pass  43: suminf.    1.65736 (7) obj. -75.8991 iterations 8
Cbc0038I Pass  44: suminf.    1.20230 (5) obj. -75.8991 iterations 11
Cbc0038I Pass  45: suminf.    1.13319 (5) obj. -75.8991 iterations 5
Cbc0038I Pass  46: suminf.    1.42467 (6) obj. -75.8991 iterations 5
Cbc0038I Pass  47: suminf.    1.80311 (8) obj. -75.8991 iterations 6
Cbc0038I Pass  48: suminf.    1.88647 (6) obj. -75.8991 iterations 9
Cbc0038I Pass  49: suminf.    1.58033 (5) obj. -75.8991 iterations 2
Cbc0038I Pass  50: suminf.    1.47979 (8) obj. -75.8991 iterations 4
Cbc0038I Pass  51: suminf.    0.80735 (4) obj. -75.8991 iterations 11
Cbc0038I Pass  52: suminf.    0.76520 (4) obj. -75.8991 iterations 3
Cbc0038I Pass  53: suminf.    0.68630 (3) obj. -75.8991 iterations 7
Cbc0038I Pass  54: suminf.    0.66648 (2) obj. -75.8991 iterations 2
Cbc0038I Pass  55: suminf.    0.72239 (3) obj. -75.8991 iterations 2
Cbc0038I Pass  56: suminf.    2.21906 (9) obj. -75.8991 iterations 8
Cbc0038I Pass  57: suminf.    1.76753 (8) obj. -75.8991 iterations 5
Cbc0038I Pass  58: suminf.    1.43756 (5) obj. -75.8991 iterations 12
Cbc0038I Pass  59: suminf.    1.43756 (5) obj. -75.8991 iterations 0
Cbc0038I Pass  60: suminf.    1.19723 (4) obj. -75.8991 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 59 rows 32 columns, reduced to 51 rows 27 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -64.7127 - took 0.04 seconds
Cbc0012I Integer solution of -64.71271 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 59 rows 32 columns, reduced to 40 rows 21 columns
Cbc0031I 11 added rows had average density of 26.181818
Cbc0013I At root node, 11 cuts changed objective from -117.06907 to -85.690519 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1217 row cuts average 3.2 elements, 2 column cuts (2 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 734 row cuts average 30.9 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 25 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 34 row cuts average 30.0 elements, 0 column cuts (0 active)  in 0.826 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -64.71271 best solution, best possible -85.690519 (1.68 seconds)
Cbc0001I Search completed - best objective -64.71270999999999, took 2335 iterations and 6 nodes (1.72 seconds)
Cbc0032I Strong branching done 102 times (1333 iterations), fathomed 0 nodes and fixed 8 variables
Cbc0035I Maximum depth 2, 7 variables fixed on reduced cost
Total time (CPU seconds):       1.10   (Wallclock seconds):       1.73

