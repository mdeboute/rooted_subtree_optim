Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 69 (-30) rows, 39 (-11) columns and 209 (-76) elements
Clp1000I sum of infeasibilities 0 - average 0, 9 fixed columns
Coin0506I Presolve 38 (-31) rows, 30 (-9) columns and 129 (-80) elements
Clp0029I End of values pass after 30 iterations
Clp0014I Perturbing problem by 0.001% of 1.4997566 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 167642.56
Clp0000I Optimal - objective value 167642.56
Coin0511I After Postsolve, objective 167642.56, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 21.972438 - largest nonzero change 0 ( 0%) - largest zero change 2.8981471e-05
Clp0000I Optimal - objective value 167642.56
Clp0000I Optimal - objective value 167642.56
Clp0000I Optimal - objective value 167642.56
Coin0511I After Postsolve, objective 167642.56, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 167642.5627 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 69 rows, 39 columns (38 integer (38 of which binary)) and 209 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.175%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 5.93789
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -165543 iterations 25
Cbc0038I Solution found of -165543
Cbc0038I Relaxing continuous gives -165543
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 69 rows 39 columns, reduced to 23 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -165543 to -165813 (0.01 seconds)
Cbc0038I Round again with cutoff of -165996
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.80353 (5) obj. -165996 iterations 7
Cbc0038I Pass   3: suminf.    0.54429 (3) obj. -165996 iterations 2
Cbc0038I Pass   4: suminf.    0.49979 (4) obj. -165996 iterations 15
Cbc0038I Pass   5: suminf.    0.49979 (4) obj. -165996 iterations 0
Cbc0038I Pass   6: suminf.    0.85944 (2) obj. -165996 iterations 4
Cbc0038I Pass   7: suminf.    0.51270 (2) obj. -165996 iterations 3
Cbc0038I Pass   8: suminf.    1.00000 (3) obj. -165996 iterations 8
Cbc0038I Pass   9: suminf.    1.00000 (4) obj. -165996 iterations 3
Cbc0038I Pass  10: suminf.    0.82551 (3) obj. -165996 iterations 18
Cbc0038I Pass  11: suminf.    0.00108 (2) obj. -165996 iterations 12
Cbc0038I Pass  12: suminf.    0.00108 (2) obj. -165996 iterations 0
Cbc0038I Pass  13: suminf.    0.42358 (2) obj. -165996 iterations 21
Cbc0038I Pass  14: suminf.    0.33275 (2) obj. -165996 iterations 2
Cbc0038I Pass  15: suminf.    0.87843 (2) obj. -165996 iterations 9
Cbc0038I Pass  16: suminf.    0.30264 (2) obj. -165996 iterations 9
Cbc0038I Pass  17: suminf.    0.65808 (4) obj. -165996 iterations 8
Cbc0038I Pass  18: suminf.    0.46574 (2) obj. -165996 iterations 5
Cbc0038I Pass  19: suminf.    0.99742 (2) obj. -165996 iterations 9
Cbc0038I Pass  20: suminf.    1.00000 (2) obj. -165996 iterations 14
Cbc0038I Pass  21: suminf.    0.31440 (2) obj. -165996 iterations 9
Cbc0038I Pass  22: suminf.    0.26555 (3) obj. -165996 iterations 3
Cbc0038I Pass  23: suminf.    0.03220 (3) obj. -165996 iterations 21
Cbc0038I Pass  24: suminf.    0.02924 (3) obj. -165996 iterations 1
Cbc0038I Pass  25: suminf.    1.00000 (3) obj. -165996 iterations 25
Cbc0038I Pass  26: suminf.    0.20132 (2) obj. -165996 iterations 6
Cbc0038I Pass  27: suminf.    0.20132 (2) obj. -165996 iterations 0
Cbc0038I Pass  28: suminf.    0.98256 (2) obj. -165996 iterations 16
Cbc0038I Pass  29: suminf.    0.45296 (2) obj. -165996 iterations 7
Cbc0038I Pass  30: suminf.    0.45296 (2) obj. -165996 iterations 2
Cbc0038I Pass  31: suminf.    1.51719 (6) obj. -165996 iterations 9
Cbc0038I Rounding solution of -165988 is better than previous of -165813

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 69 rows 39 columns, reduced to 36 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -165988 to -166234 (0.03 seconds)
Cbc0038I Round again with cutoff of -166516
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 3
Cbc0038I Pass  31: suminf.    1.00179 (6) obj. -166516 iterations 4
Cbc0038I Pass  32: suminf.    2.22248 (8) obj. -166516 iterations 10
Cbc0038I Pass  33: suminf.    1.87785 (6) obj. -166516 iterations 9
Cbc0038I Pass  34: suminf.    1.32676 (5) obj. -166516 iterations 18
Cbc0038I Pass  35: suminf.    1.32676 (5) obj. -166516 iterations 0
Cbc0038I Pass  36: suminf.    1.72968 (5) obj. -166516 iterations 5
Cbc0038I Pass  37: suminf.    1.33358 (6) obj. -166516 iterations 3
Cbc0038I Pass  38: suminf.    1.42092 (5) obj. -166516 iterations 16
Cbc0038I Pass  39: suminf.    0.97952 (4) obj. -166516 iterations 2
Cbc0038I Pass  40: suminf.    0.86020 (4) obj. -166516 iterations 2
Cbc0038I Pass  41: suminf.    1.42092 (5) obj. -166516 iterations 6
Cbc0038I Pass  42: suminf.    3.24669 (11) obj. -166516 iterations 15
Cbc0038I Pass  43: suminf.    1.45604 (7) obj. -166516 iterations 5
Cbc0038I Pass  44: suminf.    1.45604 (7) obj. -166516 iterations 0
Cbc0038I Pass  45: suminf.    2.44802 (8) obj. -166516 iterations 24
Cbc0038I Pass  46: suminf.    2.44802 (8) obj. -166516 iterations 0
Cbc0038I Pass  47: suminf.    2.38631 (7) obj. -166516 iterations 6
Cbc0038I Pass  48: suminf.    2.00000 (6) obj. -166516 iterations 2
Cbc0038I Pass  49: suminf.    3.00000 (9) obj. -166516 iterations 17
Cbc0038I Pass  50: suminf.    3.00000 (9) obj. -166516 iterations 0
Cbc0038I Pass  51: suminf.    2.30765 (7) obj. -166516 iterations 12
Cbc0038I Pass  52: suminf.    1.97650 (6) obj. -166516 iterations 2
Cbc0038I Pass  53: suminf.    1.61380 (5) obj. -166516 iterations 3
Cbc0038I Pass  54: suminf.    1.41742 (5) obj. -166516 iterations 3
Cbc0038I Pass  55: suminf.    1.41742 (5) obj. -166516 iterations 1
Cbc0038I Pass  56: suminf.    1.73323 (5) obj. -166516 iterations 11
Cbc0038I Pass  57: suminf.    1.43372 (5) obj. -166516 iterations 3
Cbc0038I Pass  58: suminf.    1.45200 (6) obj. -166516 iterations 15
Cbc0038I Pass  59: suminf.    3.38221 (11) obj. -166516 iterations 9
Cbc0038I Pass  60: suminf.    2.94589 (10) obj. -166516 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 69 rows 39 columns, reduced to 27 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -166234 - took 0.03 seconds
Cbc0012I Integer solution of -166233.7 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 69 rows 39 columns, reduced to 25 rows 20 columns
Cbc0031I 8 added rows had average density of 22.125
Cbc0013I At root node, 8 cuts changed objective from -167642.56 to -166313.01 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 658 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 419 row cuts average 25.8 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 59 row cuts average 10.3 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 130 row cuts average 10.8 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0001I Search completed - best objective -166233.7, took 1312 iterations and 2 nodes (0.17 seconds)
Cbc0032I Strong branching done 32 times (263 iterations), fathomed 1 nodes and fixed 3 variables
Cbc0035I Maximum depth 0, 8 variables fixed on reduced cost
Total time (CPU seconds):       0.17   (Wallclock seconds):       0.18

