Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 35 (-14) rows, 21 (-4) columns and 104 (-31) elements
Clp1000I sum of infeasibilities 2.321e-05 - average 6.63143e-07, 9 fixed columns
Coin0506I Presolve 14 (-21) rows, 12 (-9) columns and 46 (-58) elements
Clp0029I End of values pass after 12 iterations
Clp0000I Optimal - objective value 8670.4575
Clp0000I Optimal - objective value 8670.4575
Coin0511I After Postsolve, objective 8670.4575, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 2.7775665 - largest nonzero change 2.3376943e-05 ( 0.0013165956%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 8670.4575
Clp0000I Optimal - objective value 8670.4575
Clp0000I Optimal - objective value 8670.4575
Coin0511I After Postsolve, objective 8670.4575, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 8670.457513 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 35 rows, 21 columns (20 integer (20 of which binary)) and 105 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.762%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.729804
Cbc0038I Solution found of -6972.29
Cbc0038I Relaxing continuous gives -6972.29
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 21 columns, reduced to 1 rows 2 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -7115.14
Cbc0038I Pass   1: suminf.    0.05107 (2) obj. -7115.14 iterations 9
Cbc0038I Pass   2: suminf.    0.30146 (1) obj. -8196.94 iterations 2
Cbc0038I Pass   3: suminf.    0.12854 (1) obj. -7115.14 iterations 1
Cbc0038I Pass   4: suminf.    0.05107 (2) obj. -7115.14 iterations 3
Cbc0038I Pass   5: suminf.    0.90605 (2) obj. -7115.14 iterations 5
Cbc0038I Pass   6: suminf.    0.13864 (2) obj. -7115.14 iterations 3
Cbc0038I Pass   7: suminf.    0.25878 (1) obj. -7684.96 iterations 2
Cbc0038I Pass   8: suminf.    0.16769 (1) obj. -7115.14 iterations 1
Cbc0038I Pass   9: suminf.    0.00000 (0) obj. -7269.24 iterations 7
Cbc0038I Solution found of -7269.24
Cbc0038I Relaxing continuous gives -7269.24
Cbc0038I Rounding solution of -7566.54 is better than previous of -7269.24

Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 21 columns, reduced to 4 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -7566.54 to -7810.35 (0.01 seconds)
Cbc0038I Round again with cutoff of -7928.45
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  10: suminf.    0.34182 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  11: suminf.    0.30146 (1) obj. -8196.94 iterations 2
Cbc0038I Pass  12: suminf.    0.25854 (1) obj. -7928.45 iterations 1
Cbc0038I Pass  13: suminf.    0.58790 (2) obj. -7928.45 iterations 6
Cbc0038I Pass  14: suminf.    0.35403 (2) obj. -7928.45 iterations 3
Cbc0038I Pass  15: suminf.    0.58790 (2) obj. -7928.45 iterations 4
Cbc0038I Pass  16: suminf.    0.37078 (2) obj. -7928.45 iterations 7
Cbc0038I Pass  17: suminf.    0.37078 (2) obj. -7928.45 iterations 2
Cbc0038I Pass  18: suminf.    0.31366 (1) obj. -8192.21 iterations 2
Cbc0038I Pass  19: suminf.    0.27149 (1) obj. -7928.45 iterations 1
Cbc0038I Pass  20: suminf.    0.49313 (3) obj. -7928.45 iterations 3
Cbc0038I Pass  21: suminf.    0.24263 (2) obj. -7928.45 iterations 3
Cbc0038I Pass  22: suminf.    0.30841 (2) obj. -7928.45 iterations 3
Cbc0038I Pass  23: suminf.    0.46677 (2) obj. -7928.45 iterations 5
Cbc0038I Pass  24: suminf.    0.53150 (2) obj. -7928.45 iterations 3
Cbc0038I Pass  25: suminf.    0.53150 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  26: suminf.    0.52526 (2) obj. -7928.45 iterations 2
Cbc0038I Pass  27: suminf.    0.52526 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  28: suminf.    0.52526 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  29: suminf.    0.68170 (3) obj. -7928.45 iterations 6
Cbc0038I Pass  30: suminf.    0.24551 (1) obj. -7928.45 iterations 5
Cbc0038I Pass  31: suminf.    0.24659 (1) obj. -7935.14 iterations 1
Cbc0038I Pass  32: suminf.    0.24659 (1) obj. -7935.14 iterations 0
Cbc0038I Pass  33: suminf.    0.93166 (5) obj. -7928.45 iterations 10
Cbc0038I Pass  34: suminf.    0.93166 (5) obj. -7928.45 iterations 1
Cbc0038I Pass  35: suminf.    0.73613 (2) obj. -7928.45 iterations 4
Cbc0038I Pass  36: suminf.    0.73613 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  37: suminf.    0.63354 (2) obj. -7928.45 iterations 2
Cbc0038I Pass  38: suminf.    0.63354 (2) obj. -7928.45 iterations 0
Cbc0038I Pass  39: suminf.    1.30875 (4) obj. -7928.45 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 35 rows 21 columns, reduced to 7 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -7810.35 to -7827.08 (0.02 seconds)
Cbc0038I Round again with cutoff of -8070.16
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 4
Cbc0038I Pass  39: suminf.    0.39248 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  40: suminf.    0.30146 (1) obj. -8196.94 iterations 2
Cbc0038I Pass  41: suminf.    0.28120 (1) obj. -8070.16 iterations 1
Cbc0038I Pass  42: suminf.    1.23212 (3) obj. -8070.16 iterations 6
Cbc0038I Pass  43: suminf.    1.23212 (3) obj. -8070.16 iterations 2
Cbc0038I Pass  44: suminf.    0.73244 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  45: suminf.    0.73244 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  46: suminf.    0.37043 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  47: suminf.    0.37043 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  48: suminf.    0.50898 (3) obj. -8070.16 iterations 4
Cbc0038I Pass  49: suminf.    0.50898 (3) obj. -8070.16 iterations 2
Cbc0038I Pass  50: suminf.    0.64223 (2) obj. -8070.16 iterations 3
Cbc0038I Pass  51: suminf.    0.64223 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  52: suminf.    0.57291 (2) obj. -8070.16 iterations 3
Cbc0038I Pass  53: suminf.    0.57291 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  54: suminf.    0.57291 (2) obj. -8070.16 iterations 1
Cbc0038I Pass  55: suminf.    0.57291 (2) obj. -8070.16 iterations 1
Cbc0038I Pass  56: suminf.    0.64223 (2) obj. -8070.16 iterations 3
Cbc0038I Pass  57: suminf.    0.64223 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  58: suminf.    0.57291 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  59: suminf.    0.89616 (3) obj. -8070.16 iterations 2
Cbc0038I Pass  60: suminf.    0.73430 (2) obj. -8070.16 iterations 1
Cbc0038I Pass  61: suminf.    0.80964 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  62: suminf.    0.80964 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  63: suminf.    0.75444 (2) obj. -8070.16 iterations 4
Cbc0038I Pass  64: suminf.    0.75444 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  65: suminf.    0.85542 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  66: suminf.    0.85542 (2) obj. -8070.16 iterations 0
Cbc0038I Pass  67: suminf.    0.75444 (2) obj. -8070.16 iterations 2
Cbc0038I Pass  68: suminf.    1.21171 (3) obj. -8070.16 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -7827.08 - took 0.02 seconds
Cbc0012I Integer solution of -7827.0833 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 35 rows 21 columns, reduced to 5 rows 8 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 5 added rows had average density of 5
Cbc0013I At root node, 6 cuts changed objective from -8070.0857 to -7827.0833 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 16 row cuts average 2.3 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 5 row cuts average 8.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 11.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 17 row cuts average 8.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -7827.0833, took 46 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.03

