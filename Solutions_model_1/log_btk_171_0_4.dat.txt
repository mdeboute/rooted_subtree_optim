Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 231 (-113) rows, 118 (-55) columns and 577 (-277) elements
Clp0000I Optimal - objective value 43559419
Coin0511I After Postsolve, objective 43559419, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 43559418.83 - 77 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 231 rows, 118 columns (117 integer (117 of which binary)) and 577 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.822%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 6.02208
Cbc0038I Solution found of -3.44876e+07
Cbc0038I Relaxing continuous gives -3.44876e+07
Cbc0038I Before mini branch and bound, 94 integers at bound fixed and 0 continuous
Cbc0038I Full problem 231 rows 118 columns, reduced to 32 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -3.44876e+07 to -3.44876e+07 (0.02 seconds)
Cbc0038I Round again with cutoff of -3.53948e+07
Cbc0038I Pass   1: suminf.    0.58293 (20) obj. -3.53948e+07 iterations 34
Cbc0038I Pass   2: suminf.    5.50510 (13) obj. -3.88406e+07 iterations 9
Cbc0038I Pass   3: suminf.    4.13549 (17) obj. -3.53948e+07 iterations 9
Cbc0038I Pass   4: suminf.    0.52463 (18) obj. -3.53948e+07 iterations 18
Cbc0038I Pass   5: suminf.    0.52463 (18) obj. -3.53948e+07 iterations 0
Cbc0038I Pass   6: suminf.    4.82039 (17) obj. -3.53948e+07 iterations 15
Cbc0038I Pass   7: suminf.    1.59466 (14) obj. -3.53948e+07 iterations 5
Cbc0038I Pass   8: suminf.    1.59466 (14) obj. -3.53948e+07 iterations 0
Cbc0038I Pass   9: suminf.    0.58293 (20) obj. -3.53948e+07 iterations 39
Cbc0038I Pass  10: suminf.    0.58293 (20) obj. -3.53948e+07 iterations 1
Cbc0038I Pass  11: suminf.    5.50510 (13) obj. -3.88406e+07 iterations 8
Cbc0038I Pass  12: suminf.    2.94845 (17) obj. -3.53948e+07 iterations 37
Cbc0038I Pass  13: suminf.    0.58418 (20) obj. -3.53948e+07 iterations 20
Cbc0038I Pass  14: suminf.    0.58418 (20) obj. -3.53948e+07 iterations 0
Cbc0038I Pass  15: suminf.    3.16552 (17) obj. -3.83673e+07 iterations 4
Cbc0038I Pass  16: suminf.    2.32384 (13) obj. -3.53948e+07 iterations 21
Cbc0038I Pass  17: suminf.    0.26246 (1) obj. -3.53948e+07 iterations 20
Cbc0038I Pass  18: suminf.    0.00000 (0) obj. -3.79449e+07 iterations 4
Cbc0038I Solution found of -3.79449e+07
Cbc0038I Relaxing continuous gives -3.79449e+07
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Full problem 231 rows 118 columns, reduced to 43 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -3.90678e+07
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  19: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  20: suminf.    6.14581 (17) obj. -3.90678e+07 iterations 15
Cbc0038I Pass  21: suminf.    6.14581 (17) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  22: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 11
Cbc0038I Pass  23: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 11
Cbc0038I Pass  24: suminf.    1.83786 (20) obj. -3.90678e+07 iterations 8
Cbc0038I Pass  25: suminf.    1.83786 (20) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  26: suminf.    2.23876 (17) obj. -3.90678e+07 iterations 9
Cbc0038I Pass  27: suminf.    1.74596 (19) obj. -3.90678e+07 iterations 6
Cbc0038I Pass  28: suminf.    2.23876 (17) obj. -3.90678e+07 iterations 5
Cbc0038I Pass  29: suminf.    2.93153 (15) obj. -3.90678e+07 iterations 11
Cbc0038I Pass  30: suminf.    3.51341 (24) obj. -3.90678e+07 iterations 20
Cbc0038I Pass  31: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 11
Cbc0038I Pass  32: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 15
Cbc0038I Pass  33: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 1
Cbc0038I Pass  34: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 9
Cbc0038I Pass  35: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  36: suminf.    4.76000 (15) obj. -4.11027e+07 iterations 10
Cbc0038I Pass  37: suminf.    2.79595 (19) obj. -3.90678e+07 iterations 6
Cbc0038I Pass  38: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 15
Cbc0038I Pass  39: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  40: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 6
Cbc0038I Pass  41: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 1
Cbc0038I Pass  42: suminf.    4.78392 (16) obj. -4.07204e+07 iterations 13
Cbc0038I Pass  43: suminf.    2.79595 (19) obj. -3.90678e+07 iterations 6
Cbc0038I Pass  44: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 15
Cbc0038I Pass  45: suminf.    6.56645 (17) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  46: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 9
Cbc0038I Pass  47: suminf.    2.94310 (20) obj. -3.90678e+07 iterations 0
Cbc0038I Pass  48: suminf.    6.09655 (17) obj. -4.19634e+07 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 83 integers at bound fixed and 0 continuous
Cbc0038I Full problem 231 rows 118 columns, reduced to 41 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -3.79449e+07 - took 0.04 seconds
Cbc0012I Integer solution of -37944930 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 231 rows 118 columns, reduced to 39 rows 29 columns
Cbc0012I Integer solution of -41389930 found by DiveCoefficient after 36 iterations and 0 nodes (0.07 seconds)
Cbc0031I 5 added rows had average density of 66.4
Cbc0013I At root node, 5 cuts changed objective from -43559419 to -41389930 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 21 row cuts average 3.0 elements, 9 column cuts (9 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 77.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 17 row cuts average 82.2 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0001I Search completed - best objective -41389930, took 36 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.08

