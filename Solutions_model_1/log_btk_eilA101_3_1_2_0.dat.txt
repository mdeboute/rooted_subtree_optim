Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 176 (-29) rows, 100 (-3) columns and 544 (-59) elements
Clp1000I sum of infeasibilities 0.000319273 - average 1.81405e-06, 11 fixed columns
Coin0506I Presolve 153 (-23) rows, 88 (-12) columns and 474 (-70) elements
Clp0029I End of values pass after 88 iterations
Clp0014I Perturbing problem by 0.001% of 0.26242907 - largest nonzero change 0 ( 0%) - largest zero change 2.9994168e-05
Clp0000I Optimal - objective value 34.330083
Clp0000I Optimal - objective value 34.330083
Coin0511I After Postsolve, objective 34.330083, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 34.330083
Clp0000I Optimal - objective value 34.330083
Clp0000I Optimal - objective value 34.330083
Coin0511I After Postsolve, objective 34.330083, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 34.33008301 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 176 rows, 100 columns (99 integer (99 of which binary)) and 544 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.866%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 48 integers unsatisfied sum - 13.6425
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 12.3769 iterations 65
Cbc0038I Solution found of 12.3769
Cbc0038I Relaxing continuous gives 12.3769
Cbc0038I Rounding solution of 6.12819 is better than previous of 12.3769

Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 176 rows 100 columns, reduced to 83 rows 49 columns
Cbc0038I Mini branch and bound improved solution from 6.12819 to -1.5671 (0.06 seconds)
Cbc0038I Round again with cutoff of -4.84349
Cbc0038I Pass   2: suminf.    2.38145 (8) obj. -4.84349 iterations 13
Cbc0038I Pass   3: suminf.    1.35255 (4) obj. -4.84349 iterations 17
Cbc0038I Pass   4: suminf.    0.92883 (4) obj. -4.84349 iterations 8
Cbc0038I Pass   5: suminf.    1.82940 (5) obj. -4.84349 iterations 11
Cbc0038I Pass   6: suminf.    1.63731 (5) obj. -4.84349 iterations 6
Cbc0038I Pass   7: suminf.    1.65416 (6) obj. -4.84349 iterations 9
Cbc0038I Pass   8: suminf.    1.99698 (7) obj. -4.84349 iterations 30
Cbc0038I Pass   9: suminf.    1.20976 (5) obj. -4.84349 iterations 12
Cbc0038I Pass  10: suminf.    1.06074 (6) obj. -4.84349 iterations 12
Cbc0038I Pass  11: suminf.    0.99516 (4) obj. -4.84349 iterations 1
Cbc0038I Pass  12: suminf.    0.66778 (4) obj. -4.84349 iterations 7
Cbc0038I Pass  13: suminf.    0.66778 (4) obj. -4.84349 iterations 0
Cbc0038I Pass  14: suminf.    1.62220 (6) obj. -4.84349 iterations 5
Cbc0038I Pass  15: suminf.    1.18201 (4) obj. -4.84349 iterations 2
Cbc0038I Pass  16: suminf.    3.35743 (11) obj. -4.84349 iterations 37
Cbc0038I Pass  17: suminf.    2.42347 (9) obj. -4.84349 iterations 7
Cbc0038I Pass  18: suminf.    1.76982 (7) obj. -4.84349 iterations 17
Cbc0038I Pass  19: suminf.    1.44092 (5) obj. -4.84349 iterations 2
Cbc0038I Pass  20: suminf.    1.21802 (4) obj. -4.84349 iterations 6
Cbc0038I Pass  21: suminf.    0.92981 (4) obj. -4.84349 iterations 5
Cbc0038I Pass  22: suminf.    1.49266 (5) obj. -4.84349 iterations 4
Cbc0038I Pass  23: suminf.    1.21802 (4) obj. -4.84349 iterations 1
Cbc0038I Pass  24: suminf.    3.99816 (14) obj. -4.84349 iterations 25
Cbc0038I Pass  25: suminf.    1.42744 (7) obj. -4.84349 iterations 11
Cbc0038I Pass  26: suminf.    1.37036 (7) obj. -4.84349 iterations 1
Cbc0038I Pass  27: suminf.    0.55975 (4) obj. -4.84349 iterations 13
Cbc0038I Pass  28: suminf.    0.55975 (4) obj. -4.84349 iterations 1
Cbc0038I Pass  29: suminf.    0.91775 (4) obj. -4.84349 iterations 7
Cbc0038I Pass  30: suminf.    0.86537 (3) obj. -4.84349 iterations 2
Cbc0038I Pass  31: suminf.    0.50228 (3) obj. -4.84349 iterations 5
Cbc0038I Rounding solution of -5.38219 is better than previous of -1.5671

Cbc0038I Before mini branch and bound, 38 integers at bound fixed and 0 continuous
Cbc0038I Full problem 176 rows 100 columns, reduced to 103 rows 62 columns
Cbc0038I Mini branch and bound improved solution from -5.38219 to -7.99599 (0.12 seconds)
Cbc0038I Round again with cutoff of -13.2629
Cbc0038I Pass  31: suminf.    3.30388 (15) obj. -13.2629 iterations 10
Cbc0038I Pass  32: suminf.    3.30388 (15) obj. -13.2629 iterations 0
Cbc0038I Pass  33: suminf.    1.39590 (7) obj. -13.2629 iterations 17
Cbc0038I Pass  34: suminf.    1.35055 (9) obj. -13.2629 iterations 6
Cbc0038I Pass  35: suminf.    2.85454 (7) obj. -13.2629 iterations 17
Cbc0038I Pass  36: suminf.    2.51973 (7) obj. -13.2629 iterations 7
Cbc0038I Pass  37: suminf.    2.46697 (8) obj. -13.2629 iterations 3
Cbc0038I Pass  38: suminf.    2.44438 (10) obj. -13.2629 iterations 10
Cbc0038I Pass  39: suminf.    2.03559 (8) obj. -13.2629 iterations 2
Cbc0038I Pass  40: suminf.    2.85454 (7) obj. -13.2629 iterations 12
Cbc0038I Pass  41: suminf.    2.51973 (7) obj. -13.2629 iterations 7
Cbc0038I Pass  42: suminf.    2.46697 (8) obj. -13.2629 iterations 3
Cbc0038I Pass  43: suminf.    2.44438 (10) obj. -13.2629 iterations 10
Cbc0038I Pass  44: suminf.    2.03559 (8) obj. -13.2629 iterations 2
Cbc0038I Pass  45: suminf.    2.85454 (7) obj. -13.2629 iterations 12
Cbc0038I Pass  46: suminf.    2.51973 (7) obj. -13.2629 iterations 7
Cbc0038I Pass  47: suminf.    2.46697 (8) obj. -13.2629 iterations 3
Cbc0038I Pass  48: suminf.    2.44438 (10) obj. -13.2629 iterations 10
Cbc0038I Pass  49: suminf.    2.03559 (8) obj. -13.2629 iterations 2
Cbc0038I Pass  50: suminf.    2.85454 (7) obj. -13.2629 iterations 12
Cbc0038I Pass  51: suminf.    2.51973 (7) obj. -13.2629 iterations 7
Cbc0038I Pass  52: suminf.    2.46697 (8) obj. -13.2629 iterations 3
Cbc0038I Pass  53: suminf.    2.44438 (10) obj. -13.2629 iterations 10
Cbc0038I Pass  54: suminf.    2.03559 (8) obj. -13.2629 iterations 2
Cbc0038I Pass  55: suminf.    2.85454 (7) obj. -13.2629 iterations 12
Cbc0038I Pass  56: suminf.    2.51973 (7) obj. -13.2629 iterations 7
Cbc0038I Pass  57: suminf.    2.46697 (8) obj. -13.2629 iterations 3
Cbc0038I Pass  58: suminf.    2.44438 (10) obj. -13.2629 iterations 10
Cbc0038I Pass  59: suminf.    2.03559 (8) obj. -13.2629 iterations 2
Cbc0038I Pass  60: suminf.    2.85454 (7) obj. -13.2629 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous
Cbc0038I Full problem 176 rows 100 columns, reduced to 84 rows 50 columns
Cbc0038I Mini branch and bound improved solution from -7.99599 to -9.64965 (0.18 seconds)
Cbc0038I Round again with cutoff of -19.583
Cbc0038I Pass  60: suminf.    4.95361 (19) obj. -19.583 iterations 3
Cbc0038I Pass  61: suminf.    4.95361 (19) obj. -19.583 iterations 0
Cbc0038I Pass  62: suminf.    2.43837 (9) obj. -19.583 iterations 24
Cbc0038I Pass  63: suminf.    1.80480 (8) obj. -19.583 iterations 5
Cbc0038I Pass  64: suminf.    2.57844 (13) obj. -19.583 iterations 11
Cbc0038I Pass  65: suminf.    1.75420 (8) obj. -19.583 iterations 7
Cbc0038I Pass  66: suminf.    3.72825 (10) obj. -19.583 iterations 9
Cbc0038I Pass  67: suminf.    2.26198 (8) obj. -19.583 iterations 2
Cbc0038I Pass  68: suminf.    1.67783 (7) obj. -19.583 iterations 4
Cbc0038I Pass  69: suminf.    1.80944 (7) obj. -19.583 iterations 8
Cbc0038I Pass  70: suminf.    1.75420 (8) obj. -19.583 iterations 5
Cbc0038I Pass  71: suminf.    3.72825 (10) obj. -19.583 iterations 9
Cbc0038I Pass  72: suminf.    2.26198 (8) obj. -19.583 iterations 2
Cbc0038I Pass  73: suminf.    1.67783 (7) obj. -19.583 iterations 4
Cbc0038I Pass  74: suminf.    1.80944 (7) obj. -19.583 iterations 8
Cbc0038I Pass  75: suminf.    1.75420 (8) obj. -19.583 iterations 5
Cbc0038I Pass  76: suminf.    3.72825 (10) obj. -19.583 iterations 9
Cbc0038I Pass  77: suminf.    2.26198 (8) obj. -19.583 iterations 2
Cbc0038I Pass  78: suminf.    1.67783 (7) obj. -19.583 iterations 4
Cbc0038I Pass  79: suminf.    1.80944 (7) obj. -19.583 iterations 8
Cbc0038I Pass  80: suminf.    1.75420 (8) obj. -19.583 iterations 5
Cbc0038I Pass  81: suminf.    3.72825 (10) obj. -19.583 iterations 9
Cbc0038I Pass  82: suminf.    2.26198 (8) obj. -19.583 iterations 2
Cbc0038I Pass  83: suminf.    1.67783 (7) obj. -19.583 iterations 4
Cbc0038I Pass  84: suminf.    1.80944 (7) obj. -19.583 iterations 8
Cbc0038I Pass  85: suminf.    1.75420 (8) obj. -19.583 iterations 5
Cbc0038I Pass  86: suminf.    3.72825 (10) obj. -19.583 iterations 9
Cbc0038I Pass  87: suminf.    2.26198 (8) obj. -19.583 iterations 2
Cbc0038I Pass  88: suminf.    1.67783 (7) obj. -19.583 iterations 4
Cbc0038I Pass  89: suminf.    1.80944 (7) obj. -19.583 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 0 continuous
Cbc0038I Full problem 176 rows 100 columns, reduced to 84 rows 50 columns
Cbc0038I Mini branch and bound did not improve solution (0.21 seconds)
Cbc0038I After 0.21 seconds - Feasibility pump exiting with objective of -9.64965 - took 0.19 seconds
Cbc0012I Integer solution of -9.64965 found by feasibility pump after 0 iterations and 0 nodes (0.21 seconds)
Cbc0038I Full problem 176 rows 100 columns, reduced to 84 rows 50 columns
Cbc0012I Integer solution of -9.67425 found by RINS after 0 iterations and 0 nodes (0.30 seconds)
Cbc0031I 32 added rows had average density of 58.15625
Cbc0013I At root node, 32 cuts changed objective from -34.330083 to -25.600271 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 24985 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.153 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3073 row cuts average 100.0 elements, 0 column cuts (0 active)  in 0.156 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.143 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 169 row cuts average 99.7 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -9.67425 best solution, best possible -25.600271 (1.89 seconds)
Cbc0038I Full problem 176 rows 100 columns, reduced to 98 rows 60 columns
Cbc0012I Integer solution of -10.280019 found by RINS after 13451 iterations and 41 nodes (2.41 seconds)
Cbc0038I Full problem 176 rows 100 columns, reduced to 3 rows 7 columns
Cbc0012I Integer solution of -10.478459 found by RINS after 15101 iterations and 91 nodes (2.54 seconds)
Cbc0012I Integer solution of -10.6816 found by rounding after 15274 iterations and 112 nodes (2.57 seconds)
Cbc0010I After 119 nodes, 2 on tree, -10.6816 best solution, best possible -12.240523 (2.59 seconds)
Cbc0001I Search completed - best objective -10.6816, took 15493 iterations and 128 nodes (2.61 seconds)
Cbc0032I Strong branching done 1202 times (22486 iterations), fathomed 16 nodes and fixed 65 variables
Cbc0035I Maximum depth 26, 281 variables fixed on reduced cost
Total time (CPU seconds):       2.48   (Wallclock seconds):       2.64

