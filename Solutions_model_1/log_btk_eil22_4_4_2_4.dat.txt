Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 21 (-26) rows, 15 (-9) columns and 65 (-64) elements
Clp1000I sum of infeasibilities 3.89099e-06 - average 1.85285e-07, 2 fixed columns
Coin0506I Presolve 17 (-4) rows, 13 (-2) columns and 53 (-12) elements
Clp0029I End of values pass after 13 iterations
Clp0000I Optimal - objective value 95.835349
Clp0000I Optimal - objective value 95.835349
Coin0511I After Postsolve, objective 95.835349, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 95.835349
Clp0000I Optimal - objective value 95.835349
Clp0000I Optimal - objective value 95.835349
Coin0511I After Postsolve, objective 95.835349, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 95.83534886 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 21 rows, 15 columns (14 integer (14 of which binary)) and 65 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.086%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.69728
Cbc0038I Pass   1: suminf.    0.66995 (2) obj. -64.7635 iterations 4
Cbc0038I Solution found of -45
Cbc0038I Relaxing continuous gives -45
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 21 rows 15 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -45 to -67.5 (0.01 seconds)
Cbc0038I Round again with cutoff of -70.7834
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.91625 (4) obj. -70.7834 iterations 2
Cbc0038I Pass   3: suminf.    0.79659 (4) obj. -70.7834 iterations 1
Cbc0038I Pass   4: suminf.    0.08209 (1) obj. -70.7834 iterations 8
Cbc0038I Pass   5: suminf.    0.71429 (3) obj. -70.7834 iterations 3
Cbc0038I Pass   6: suminf.    1.17612 (3) obj. -70.7834 iterations 6
Cbc0038I Pass   7: suminf.    1.17612 (3) obj. -70.7834 iterations 0
Cbc0038I Pass   8: suminf.    1.17612 (3) obj. -70.7834 iterations 0
Cbc0038I Pass   9: suminf.    1.26219 (5) obj. -70.7834 iterations 2
Cbc0038I Pass  10: suminf.    0.80847 (3) obj. -70.7834 iterations 1
Cbc0038I Pass  11: suminf.    0.64286 (2) obj. -72.1429 iterations 3
Cbc0038I Pass  12: suminf.    0.80847 (3) obj. -70.7834 iterations 2
Cbc0038I Pass  13: suminf.    1.13359 (5) obj. -70.7834 iterations 3
Cbc0038I Pass  14: suminf.    1.13359 (5) obj. -70.7834 iterations 0
Cbc0038I Pass  15: suminf.    0.94798 (3) obj. -70.7834 iterations 5
Cbc0038I Pass  16: suminf.    0.97696 (2) obj. -70.7834 iterations 3
Cbc0038I Pass  17: suminf.    0.81416 (3) obj. -70.7834 iterations 2
Cbc0038I Pass  18: suminf.    1.19083 (3) obj. -70.7834 iterations 3
Cbc0038I Pass  19: suminf.    2.10988 (5) obj. -70.7834 iterations 7
Cbc0038I Pass  20: suminf.    1.65356 (4) obj. -70.7834 iterations 3
Cbc0038I Pass  21: suminf.    1.32940 (5) obj. -70.7834 iterations 3
Cbc0038I Pass  22: suminf.    1.19258 (5) obj. -70.7834 iterations 1
Cbc0038I Pass  23: suminf.    1.48572 (5) obj. -70.7834 iterations 4
Cbc0038I Pass  24: suminf.    0.94798 (3) obj. -70.7834 iterations 1
Cbc0038I Pass  25: suminf.    0.97696 (2) obj. -70.7834 iterations 3
Cbc0038I Pass  26: suminf.    0.81416 (3) obj. -70.7834 iterations 2
Cbc0038I Pass  27: suminf.    1.19083 (3) obj. -70.7834 iterations 3
Cbc0038I Pass  28: suminf.    1.87474 (7) obj. -70.7834 iterations 8
Cbc0038I Pass  29: suminf.    1.30692 (6) obj. -70.7834 iterations 2
Cbc0038I Pass  30: suminf.    0.46528 (3) obj. -70.7834 iterations 8
Cbc0038I Pass  31: suminf.    0.16144 (3) obj. -70.7834 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 21 rows 15 columns, reduced to 15 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -67.5 - took 0.01 seconds
Cbc0012I Integer solution of -67.5 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 21 rows 15 columns, reduced to 7 rows 6 columns
Cbc0031I 8 added rows had average density of 11.125
Cbc0013I At root node, 8 cuts changed objective from -95.835349 to -71.98545 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 261 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 339 row cuts average 12.9 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 28 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 183 row cuts average 10.7 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -67.5, took 1053 iterations and 0 nodes (0.07 seconds)
Cbc0032I Strong branching done 2 times (4 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.08

