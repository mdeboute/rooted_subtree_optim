Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 81 (-18) rows, 45 (-5) columns and 244 (-41) elements
Clp1000I sum of infeasibilities 0.00481936 - average 5.94982e-05, 16 fixed columns
Coin0506I Presolve 42 (-39) rows, 27 (-18) columns and 130 (-114) elements
Clp0029I End of values pass after 26 iterations
Clp0000I Optimal - objective value 4175.4286
Clp0000I Optimal - objective value 4175.4286
Coin0511I After Postsolve, objective 4175.4286, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 4175.4286
Clp0000I Optimal - objective value 4175.4286
Clp0000I Optimal - objective value 4175.4286
Coin0511I After Postsolve, objective 4175.4286, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4175.42863 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 81 rows, 45 columns (44 integer (44 of which binary)) and 244 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.929%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 26 integers unsatisfied sum - 10.2085
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -19.369 iterations 23
Cbc0038I Solution found of -19.369
Cbc0038I Relaxing continuous gives -19.369
Cbc0038I Rounding solution of -1032.05 is better than previous of -19.369

Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 45 columns, reduced to 42 rows 27 columns
Cbc0038I Mini branch and bound improved solution from -1032.05 to -2459.75 (0.03 seconds)
Cbc0038I Round again with cutoff of -2631.32
Cbc0038I Pass   2: suminf.    3.31802 (9) obj. -2631.32 iterations 12
Cbc0038I Pass   3: suminf.    1.37767 (7) obj. -2631.32 iterations 2
Cbc0038I Pass   4: suminf.    0.47690 (2) obj. -2631.32 iterations 10
Cbc0038I Pass   5: suminf.    0.75353 (3) obj. -2631.32 iterations 2
Cbc0038I Pass   6: suminf.    2.12482 (7) obj. -2631.32 iterations 10
Cbc0038I Pass   7: suminf.    0.89151 (4) obj. -2631.32 iterations 5
Cbc0038I Pass   8: suminf.    2.09554 (5) obj. -2631.32 iterations 4
Cbc0038I Pass   9: suminf.    1.24285 (4) obj. -2631.32 iterations 2
Cbc0038I Pass  10: suminf.    0.63912 (3) obj. -2631.32 iterations 3
Cbc0038I Pass  11: suminf.    0.31956 (2) obj. -2631.32 iterations 1
Cbc0038I Pass  12: suminf.    0.86819 (3) obj. -2631.32 iterations 2
Cbc0038I Pass  13: suminf.    0.86497 (2) obj. -2631.32 iterations 1
Cbc0038I Pass  14: suminf.    0.68783 (2) obj. -2631.32 iterations 1
Cbc0038I Pass  15: suminf.    4.95640 (15) obj. -2631.32 iterations 20
Cbc0038I Pass  16: suminf.    3.86070 (10) obj. -2631.32 iterations 6
Cbc0038I Pass  17: suminf.    1.64296 (5) obj. -2631.32 iterations 10
Cbc0038I Pass  18: suminf.    1.62534 (4) obj. -2631.32 iterations 1
Cbc0038I Pass  19: suminf.    0.71630 (3) obj. -2631.32 iterations 3
Cbc0038I Pass  20: suminf.    0.50464 (2) obj. -2631.32 iterations 1
Cbc0038I Pass  21: suminf.    0.71982 (3) obj. -2631.32 iterations 2
Cbc0038I Pass  22: suminf.    0.86497 (2) obj. -2631.32 iterations 9
Cbc0038I Pass  23: suminf.    0.86497 (2) obj. -2631.32 iterations 3
Cbc0038I Pass  24: suminf.    0.68783 (2) obj. -2631.32 iterations 1
Cbc0038I Pass  25: suminf.    3.71817 (13) obj. -2631.32 iterations 13
Cbc0038I Pass  26: suminf.    2.46071 (10) obj. -2631.32 iterations 10
Cbc0038I Pass  27: suminf.    2.21580 (10) obj. -2631.32 iterations 2
Cbc0038I Pass  28: suminf.    3.16988 (8) obj. -2631.32 iterations 17
Cbc0038I Pass  29: suminf.    3.16988 (8) obj. -2631.32 iterations 0
Cbc0038I Pass  30: suminf.    0.98315 (4) obj. -2631.32 iterations 11
Cbc0038I Pass  31: suminf.    0.80626 (4) obj. -2631.32 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 81 rows 45 columns, reduced to 60 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -2459.75 - took 0.05 seconds
Cbc0012I Integer solution of -2459.75 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 81 rows 45 columns, reduced to 42 rows 27 columns
Cbc0031I 11 added rows had average density of 33.090909
Cbc0013I At root node, 11 cuts changed objective from -4175.4286 to -2912.2306 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2329 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 745 row cuts average 43.9 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 36 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 88 row cuts average 38.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0001I Search completed - best objective -2459.749999999999, took 2357 iterations and 4 nodes (0.34 seconds)
Cbc0032I Strong branching done 86 times (927 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 1, 32 variables fixed on reduced cost
Total time (CPU seconds):       0.33   (Wallclock seconds):       0.34

