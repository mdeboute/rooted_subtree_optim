Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 89 (-16) rows, 51 (-2) columns and 272 (-31) elements
Clp1000I sum of infeasibilities 2.02615e-05 - average 2.27657e-07, 3 fixed columns
Coin0506I Presolve 83 (-6) rows, 48 (-3) columns and 254 (-18) elements
Clp0029I End of values pass after 48 iterations
Clp0000I Optimal - objective value 33.066952
Clp0000I Optimal - objective value 33.066952
Coin0511I After Postsolve, objective 33.066952, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 33.066952
Clp0000I Optimal - objective value 33.066952
Clp0000I Optimal - objective value 33.066952
Coin0511I After Postsolve, objective 33.066952, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 33.06695229 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 89 rows, 51 columns (50 integer (50 of which binary)) and 272 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.656%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 41 integers unsatisfied sum - 9.62544
Cbc0038I Solution found of 8.2659
Cbc0038I Relaxing continuous gives -1.9243
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 51 columns, reduced to 72 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I Round again with cutoff of -5.03866
Cbc0038I Pass   1: suminf.    0.92026 (35) obj. -5.03866 iterations 14
Cbc0038I Pass   2: suminf.    1.41071 (10) obj. -5.03866 iterations 32
Cbc0038I Pass   3: suminf.    0.81100 (6) obj. -5.03866 iterations 4
Cbc0038I Pass   4: suminf.    1.88909 (5) obj. -5.03866 iterations 14
Cbc0038I Pass   5: suminf.    1.88909 (5) obj. -5.03866 iterations 0
Cbc0038I Pass   6: suminf.    2.04406 (8) obj. -5.03866 iterations 4
Cbc0038I Pass   7: suminf.    2.04406 (8) obj. -5.03866 iterations 0
Cbc0038I Pass   8: suminf.    2.92638 (7) obj. -5.03866 iterations 5
Cbc0038I Pass   9: suminf.    2.21804 (7) obj. -5.03866 iterations 2
Cbc0038I Pass  10: suminf.    2.21804 (7) obj. -5.03866 iterations 1
Cbc0038I Pass  11: suminf.    1.97568 (7) obj. -5.03866 iterations 7
Cbc0038I Pass  12: suminf.    1.91272 (8) obj. -5.03866 iterations 4
Cbc0038I Pass  13: suminf.    3.09073 (8) obj. -5.03866 iterations 10
Cbc0038I Pass  14: suminf.    2.28316 (7) obj. -5.03866 iterations 4
Cbc0038I Pass  15: suminf.    2.28316 (7) obj. -5.03866 iterations 0
Cbc0038I Pass  16: suminf.    1.90687 (6) obj. -5.03866 iterations 8
Cbc0038I Pass  17: suminf.    1.91272 (8) obj. -5.03866 iterations 4
Cbc0038I Pass  18: suminf.    3.09073 (8) obj. -5.03866 iterations 10
Cbc0038I Pass  19: suminf.    2.28316 (7) obj. -5.03866 iterations 4
Cbc0038I Pass  20: suminf.    2.28316 (7) obj. -5.03866 iterations 0
Cbc0038I Pass  21: suminf.    1.90687 (6) obj. -5.03866 iterations 8
Cbc0038I Pass  22: suminf.    1.91272 (8) obj. -5.03866 iterations 4
Cbc0038I Pass  23: suminf.    3.09073 (8) obj. -5.03866 iterations 10
Cbc0038I Pass  24: suminf.    2.28316 (7) obj. -5.03866 iterations 4
Cbc0038I Pass  25: suminf.    2.28316 (7) obj. -5.03866 iterations 0
Cbc0038I Pass  26: suminf.    1.90687 (6) obj. -5.03866 iterations 8
Cbc0038I Pass  27: suminf.    1.91272 (8) obj. -5.03866 iterations 4
Cbc0038I Pass  28: suminf.    3.09073 (8) obj. -5.03866 iterations 10
Cbc0038I Pass  29: suminf.    2.28316 (7) obj. -5.03866 iterations 4
Cbc0038I Pass  30: suminf.    2.28316 (7) obj. -5.03866 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 51 columns, reduced to 72 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -1.9243 - took 0.09 seconds
Cbc0012I Integer solution of -1.9243 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 27 added rows had average density of 35.555556
Cbc0013I At root node, 27 cuts changed objective from -33.066952 to -22.9516 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 9361 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.050 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1715 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 58 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0010I After 35 nodes, 4 on tree, -1.9243 best solution, best possible -22.951412 (0.68 seconds)
Cbc0038I Full problem 89 rows 51 columns, reduced to 26 rows 15 columns
Cbc0001I Search completed - best objective -1.9243, took 7337 iterations and 62 nodes (0.73 seconds)
Cbc0032I Strong branching done 888 times (12065 iterations), fathomed 8 nodes and fixed 69 variables
Cbc0035I Maximum depth 9, 84 variables fixed on reduced cost
Total time (CPU seconds):       0.71   (Wallclock seconds):       0.74

