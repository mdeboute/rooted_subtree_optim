Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 93 (-12) rows, 51 (-2) columns and 281 (-22) elements
Clp1000I sum of infeasibilities 1.8918e-05 - average 2.03419e-07, 0 fixed columns
Coin0506I Presolve 93 (0) rows, 51 (0) columns and 281 (0) elements
Clp0029I End of values pass after 51 iterations
Clp0000I Optimal - objective value 34.943605
Clp0000I Optimal - objective value 34.943605
Coin0511I After Postsolve, objective 34.943605, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 34.943605
Clp0000I Optimal - objective value 34.943605
Clp0000I Optimal - objective value 34.943605
Coin0511I After Postsolve, objective 34.943605, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 34.94360471 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 93 rows, 51 columns (50 integer (50 of which binary)) and 281 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.732%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 40 integers unsatisfied sum - 10.1734
Cbc0038I Solution found of 7.58666
Cbc0038I Relaxing continuous gives -3.01438
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 74 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I Round again with cutoff of -6.20739
Cbc0038I Pass   1: suminf.    0.78580 (25) obj. -6.20739 iterations 30
Cbc0038I Pass   2: suminf.    1.45396 (9) obj. -6.20739 iterations 34
Cbc0038I Pass   3: suminf.    1.27004 (7) obj. -6.20739 iterations 3
Cbc0038I Pass   4: suminf.    2.26210 (6) obj. -6.20739 iterations 14
Cbc0038I Pass   5: suminf.    2.04220 (9) obj. -6.20739 iterations 3
Cbc0038I Pass   6: suminf.    0.47867 (4) obj. -6.20739 iterations 12
Cbc0038I Pass   7: suminf.    0.47867 (4) obj. -6.20739 iterations 0
Cbc0038I Pass   8: suminf.    1.28616 (4) obj. -6.20739 iterations 7
Cbc0038I Pass   9: suminf.    0.94732 (4) obj. -6.20739 iterations 2
Cbc0038I Pass  10: suminf.    2.01361 (7) obj. -6.20739 iterations 5
Cbc0038I Pass  11: suminf.    1.60407 (6) obj. -6.20739 iterations 1
Cbc0038I Pass  12: suminf.    1.16202 (4) obj. -6.20739 iterations 7
Cbc0038I Pass  13: suminf.    0.86178 (3) obj. -6.20739 iterations 5
Cbc0038I Pass  14: suminf.    0.86178 (3) obj. -6.20739 iterations 1
Cbc0038I Pass  15: suminf.    0.99408 (3) obj. -6.20739 iterations 3
Cbc0038I Pass  16: suminf.    0.99408 (3) obj. -6.20739 iterations 1
Cbc0038I Pass  17: suminf.    0.86178 (3) obj. -6.20739 iterations 2
Cbc0038I Pass  18: suminf.    1.77916 (7) obj. -6.20739 iterations 10
Cbc0038I Pass  19: suminf.    0.99005 (5) obj. -6.20739 iterations 4
Cbc0038I Pass  20: suminf.    1.48622 (4) obj. -6.20739 iterations 8
Cbc0038I Pass  21: suminf.    1.17937 (3) obj. -6.20739 iterations 1
Cbc0038I Pass  22: suminf.    0.74830 (3) obj. -6.20739 iterations 2
Cbc0038I Pass  23: suminf.    0.70786 (3) obj. -6.20739 iterations 3
Cbc0038I Pass  24: suminf.    1.02998 (4) obj. -6.20739 iterations 3
Cbc0038I Pass  25: suminf.    0.86011 (7) obj. -6.20739 iterations 4
Cbc0038I Pass  26: suminf.    0.68253 (4) obj. -6.20739 iterations 9
Cbc0038I Pass  27: suminf.    1.04554 (6) obj. -6.20739 iterations 5
Cbc0038I Pass  28: suminf.    0.99795 (6) obj. -6.20739 iterations 2
Cbc0038I Pass  29: suminf.    2.19321 (6) obj. -6.20739 iterations 14
Cbc0038I Pass  30: suminf.    1.00540 (4) obj. -6.20739 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 51 columns, reduced to 84 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -3.01438 - took 0.10 seconds
Cbc0012I Integer solution of -3.01438 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0031I 20 added rows had average density of 32.5
Cbc0013I At root node, 20 cuts changed objective from -34.943605 to -27.514895 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 9417 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.051 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1729 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 94 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0010I After 41 nodes, 3 on tree, -3.01438 best solution, best possible -27.514895 (0.69 seconds)
Cbc0001I Search completed - best objective -3.01438, took 7226 iterations and 44 nodes (0.69 seconds)
Cbc0032I Strong branching done 528 times (9771 iterations), fathomed 6 nodes and fixed 23 variables
Cbc0035I Maximum depth 14, 90 variables fixed on reduced cost
Total time (CPU seconds):       0.67   (Wallclock seconds):       0.69

