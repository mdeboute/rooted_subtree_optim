Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 500 (-27) rows, 259 (-5) columns and 1486 (-59) elements
Clp1000I sum of infeasibilities 5.37672e-05 - average 1.07534e-07, 83 fixed columns
Coin0506I Presolve 337 (-163) rows, 176 (-83) columns and 1001 (-485) elements
Clp0029I End of values pass after 176 iterations
Clp0014I Perturbing problem by 0.001% of 0.14875763 - largest nonzero change 0 ( 0%) - largest zero change 2.9975962e-05
Clp0000I Optimal - objective value 151.43743
Clp0000I Optimal - objective value 151.43743
Coin0511I After Postsolve, objective 151.43743, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13319269 - largest nonzero change 0 ( 0%) - largest zero change 2.9975962e-05
Clp0000I Optimal - objective value 151.43743
Clp0000I Optimal - objective value 151.43743
Clp0000I Optimal - objective value 151.43743
Coin0511I After Postsolve, objective 151.43743, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 151.4374261 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 500 rows, 259 columns (258 integer (258 of which binary)) and 1486 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 95 integers unsatisfied sum - 10.9625
Cbc0038I Solution found of -1.91562
Cbc0038I Relaxing continuous gives -15.5094
Cbc0038I Before mini branch and bound, 163 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 180 rows 96 columns
Cbc0038I Mini branch and bound improved solution from -15.5094 to -75.5386 (0.09 seconds)
Cbc0038I Round again with cutoff of -83.1286
Cbc0038I Pass   1: suminf.    4.05191 (69) obj. -83.1286 iterations 209
Cbc0038I Pass   2: suminf.    4.34127 (11) obj. -83.1286 iterations 87
Cbc0038I Pass   3: suminf.    2.16721 (9) obj. -83.1286 iterations 39
Cbc0038I Pass   4: suminf.    2.27675 (8) obj. -83.1286 iterations 26
Cbc0038I Pass   5: suminf.    0.56626 (4) obj. -83.1286 iterations 21
Cbc0038I Pass   6: suminf.    0.50961 (5) obj. -83.1286 iterations 4
Cbc0038I Pass   7: suminf.    1.23074 (5) obj. -83.1286 iterations 18
Cbc0038I Pass   8: suminf.    1.05942 (5) obj. -83.1286 iterations 17
Cbc0038I Pass   9: suminf.    0.99687 (4) obj. -83.1286 iterations 22
Cbc0038I Pass  10: suminf.    1.91442 (7) obj. -83.1286 iterations 40
Cbc0038I Pass  11: suminf.    1.76006 (6) obj. -83.1286 iterations 30
Cbc0038I Pass  12: suminf.    1.41161 (4) obj. -83.1286 iterations 3
Cbc0038I Pass  13: suminf.    0.39784 (4) obj. -83.1286 iterations 25
Cbc0038I Pass  14: suminf.    0.39068 (4) obj. -83.1286 iterations 11
Cbc0038I Pass  15: suminf.    1.88502 (6) obj. -83.1286 iterations 34
Cbc0038I Pass  16: suminf.    1.84166 (5) obj. -83.1286 iterations 6
Cbc0038I Pass  17: suminf.    1.22228 (4) obj. -83.1286 iterations 18
Cbc0038I Pass  18: suminf.    1.04330 (4) obj. -83.1286 iterations 21
Cbc0038I Pass  19: suminf.    1.15338 (4) obj. -83.1286 iterations 14
Cbc0038I Pass  20: suminf.    0.39068 (4) obj. -83.1286 iterations 20
Cbc0038I Pass  21: suminf.    1.88502 (6) obj. -83.1286 iterations 34
Cbc0038I Pass  22: suminf.    1.84166 (5) obj. -83.1286 iterations 6
Cbc0038I Pass  23: suminf.    1.22228 (4) obj. -83.1286 iterations 18
Cbc0038I Pass  24: suminf.    1.04330 (4) obj. -83.1286 iterations 21
Cbc0038I Pass  25: suminf.    1.15338 (4) obj. -83.1286 iterations 14
Cbc0038I Pass  26: suminf.    0.39068 (4) obj. -83.1286 iterations 20
Cbc0038I Pass  27: suminf.    1.88502 (6) obj. -83.1286 iterations 34
Cbc0038I Pass  28: suminf.    1.84166 (5) obj. -83.1286 iterations 6
Cbc0038I Pass  29: suminf.    1.22228 (4) obj. -83.1286 iterations 18
Cbc0038I Pass  30: suminf.    1.04330 (4) obj. -83.1286 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 126 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 250 rows 133 columns - 4 fixed gives 203, 129 - ok now
Cbc0038I Full problem 500 rows 259 columns, reduced to 203 rows 129 columns
Cbc0038I Mini branch and bound improved solution from -75.5386 to -80.7105 (0.17 seconds)
Cbc0038I Round again with cutoff of -96.7904
Cbc0038I Pass  30: suminf.    4.87056 (69) obj. -96.7904 iterations 0
Cbc0038I Pass  31: suminf.    4.10834 (12) obj. -96.7904 iterations 84
Cbc0038I Pass  32: suminf.    3.20443 (14) obj. -96.7904 iterations 35
Cbc0038I Pass  33: suminf.    3.20737 (13) obj. -96.7904 iterations 5
Cbc0038I Pass  34: suminf.    3.76212 (17) obj. -96.7904 iterations 28
Cbc0038I Pass  35: suminf.    3.26365 (11) obj. -96.7904 iterations 17
Cbc0038I Pass  36: suminf.    2.59025 (10) obj. -96.7904 iterations 37
Cbc0038I Pass  37: suminf.    2.58772 (12) obj. -96.7904 iterations 1
Cbc0038I Pass  38: suminf.    4.62633 (12) obj. -96.7904 iterations 43
Cbc0038I Pass  39: suminf.    2.21459 (9) obj. -96.7904 iterations 34
Cbc0038I Pass  40: suminf.    1.92784 (10) obj. -96.7904 iterations 19
Cbc0038I Pass  41: suminf.    3.89772 (12) obj. -96.7904 iterations 33
Cbc0038I Pass  42: suminf.    2.06716 (11) obj. -96.7904 iterations 32
Cbc0038I Pass  43: suminf.    1.99404 (8) obj. -96.7904 iterations 14
Cbc0038I Pass  44: suminf.    2.75378 (10) obj. -96.7904 iterations 40
Cbc0038I Pass  45: suminf.    2.27421 (9) obj. -96.7904 iterations 18
Cbc0038I Pass  46: suminf.    3.16740 (9) obj. -96.7904 iterations 28
Cbc0038I Pass  47: suminf.    2.58772 (12) obj. -96.7904 iterations 20
Cbc0038I Pass  48: suminf.    4.62633 (12) obj. -96.7904 iterations 43
Cbc0038I Pass  49: suminf.    2.21459 (9) obj. -96.7904 iterations 33
Cbc0038I Pass  50: suminf.    1.92784 (10) obj. -96.7904 iterations 18
Cbc0038I Pass  51: suminf.    3.89772 (12) obj. -96.7904 iterations 34
Cbc0038I Pass  52: suminf.    2.06716 (11) obj. -96.7904 iterations 33
Cbc0038I Pass  53: suminf.    1.99404 (8) obj. -96.7904 iterations 15
Cbc0038I Pass  54: suminf.    2.75378 (10) obj. -96.7904 iterations 41
Cbc0038I Pass  55: suminf.    2.27421 (9) obj. -96.7904 iterations 18
Cbc0038I Pass  56: suminf.    3.16740 (9) obj. -96.7904 iterations 28
Cbc0038I Pass  57: suminf.    2.58772 (12) obj. -96.7904 iterations 20
Cbc0038I Pass  58: suminf.    4.05861 (13) obj. -96.7904 iterations 37
Cbc0038I Pass  59: suminf.    1.99401 (7) obj. -96.7904 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 129 integers at bound fixed and 0 continuous
Cbc0038I Full problem 500 rows 259 columns, reduced to 246 rows 130 columns
Cbc0038I Mini branch and bound did not improve solution (0.29 seconds)
Cbc0038I After 0.29 seconds - Feasibility pump exiting with objective of -80.7105 - took 0.26 seconds
Cbc0012I Integer solution of -80.71051 found by feasibility pump after 0 iterations and 0 nodes (0.29 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 182 rows 97 columns
Cbc0012I Integer solution of -81.16411 found by RINS after 0 iterations and 0 nodes (0.38 seconds)
Cbc0031I 46 added rows had average density of 146.36957
Cbc0013I At root node, 46 cuts changed objective from -151.43743 to -140.89605 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 57268 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.632 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4105 row cuts average 254.6 elements, 0 column cuts (0 active)  in 0.725 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.177 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.907 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 220 row cuts average 250.7 elements, 0 column cuts (0 active)  in 0.265 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -81.16411 best solution, best possible -140.89605 (8.60 seconds)
Cbc0010I After 6 nodes, 7 on tree, -81.16411 best solution, best possible -140.89605 (9.39 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 198 rows 106 columns
Cbc0010I After 41 nodes, 14 on tree, -81.16411 best solution, best possible -140.89605 (10.16 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 7 rows 9 columns
Cbc0012I Integer solution of -81.97477 found by RINS after 32064 iterations and 94 nodes (10.43 seconds)
Cbc0010I After 190 nodes, 19 on tree, -81.97477 best solution, best possible -140.89605 (10.86 seconds)
Cbc0038I Full problem 500 rows 259 columns, reduced to 16 rows 16 columns
Cbc0012I Integer solution of -82.44367 found by rounding after 40305 iterations and 313 nodes (11.41 seconds)
Cbc0012I Integer solution of -83.97183 found by rounding after 40834 iterations and 331 nodes (11.48 seconds)
Cbc0010I After 365 nodes, 14 on tree, -83.97183 best solution, best possible -140.89605 (11.57 seconds)
Cbc0001I Search completed - best objective -83.97183000000001, took 43928 iterations and 404 nodes (11.79 seconds)
Cbc0032I Strong branching done 3302 times (72842 iterations), fathomed 80 nodes and fixed 281 variables
Cbc0035I Maximum depth 57, 1805 variables fixed on reduced cost
Total time (CPU seconds):       11.44   (Wallclock seconds):       11.88

