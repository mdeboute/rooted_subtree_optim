Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 55 (-14) rows, 32 (-3) columns and 166 (-29) elements
Clp1000I sum of infeasibilities 8.46604e-06 - average 1.53928e-07, 3 fixed columns
Coin0506I Presolve 50 (-5) rows, 29 (-3) columns and 150 (-16) elements
Clp0029I End of values pass after 29 iterations
Clp0000I Optimal - objective value 79.963301
Clp0000I Optimal - objective value 79.963301
Coin0511I After Postsolve, objective 79.963301, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 79.963301
Clp0000I Optimal - objective value 79.963301
Clp0000I Optimal - objective value 79.963301
Coin0511I After Postsolve, objective 79.963301, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 79.96330121 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 55 rows, 32 columns (31 integer (31 of which binary)) and 166 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.548%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 25 integers unsatisfied sum - 8.19797
Cbc0038I Solution found of 13.6681
Cbc0038I Relaxing continuous gives -8.02123
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 32 columns, reduced to 44 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -8.02123 to -27.4946 (0.02 seconds)
Cbc0038I Round again with cutoff of -32.7416
Cbc0038I Pass   1: suminf.    2.63459 (24) obj. -32.7416 iterations 13
Cbc0038I Pass   2: suminf.    3.22661 (11) obj. -32.7416 iterations 25
Cbc0038I Pass   3: suminf.    2.45770 (7) obj. -32.7416 iterations 6
Cbc0038I Pass   4: suminf.    2.33669 (10) obj. -32.7416 iterations 2
Cbc0038I Pass   5: suminf.    1.11541 (7) obj. -32.7416 iterations 10
Cbc0038I Pass   6: suminf.    0.65486 (3) obj. -32.7416 iterations 5
Cbc0038I Pass   7: suminf.    1.13538 (3) obj. -32.7416 iterations 2
Cbc0038I Pass   8: suminf.    0.65197 (3) obj. -32.7416 iterations 2
Cbc0038I Pass   9: suminf.    1.29178 (3) obj. -32.7416 iterations 4
Cbc0038I Pass  10: suminf.    1.61302 (7) obj. -32.7416 iterations 9
Cbc0038I Pass  11: suminf.    1.13623 (5) obj. -32.7416 iterations 3
Cbc0038I Pass  12: suminf.    1.09305 (4) obj. -32.7416 iterations 2
Cbc0038I Pass  13: suminf.    1.05715 (3) obj. -32.7416 iterations 4
Cbc0038I Pass  14: suminf.    0.93204 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  15: suminf.    0.89392 (4) obj. -32.7416 iterations 1
Cbc0038I Pass  16: suminf.    1.40592 (4) obj. -32.7416 iterations 5
Cbc0038I Pass  17: suminf.    0.79276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  18: suminf.    0.50402 (3) obj. -32.7416 iterations 3
Cbc0038I Pass  19: suminf.    1.29753 (3) obj. -32.7416 iterations 2
Cbc0038I Pass  20: suminf.    0.96276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  21: suminf.    0.96276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  22: suminf.    1.40592 (4) obj. -32.7416 iterations 5
Cbc0038I Pass  23: suminf.    0.79276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  24: suminf.    0.50402 (3) obj. -32.7416 iterations 3
Cbc0038I Pass  25: suminf.    1.29753 (3) obj. -32.7416 iterations 2
Cbc0038I Pass  26: suminf.    0.96276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  27: suminf.    0.96276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  28: suminf.    1.40592 (4) obj. -32.7416 iterations 5
Cbc0038I Pass  29: suminf.    0.79276 (3) obj. -32.7416 iterations 1
Cbc0038I Pass  30: suminf.    0.50402 (3) obj. -32.7416 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 32 columns, reduced to 46 rows 27 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -27.4946 - took 0.03 seconds
Cbc0012I Integer solution of -27.49459 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 14 added rows had average density of 23.928571
Cbc0013I At root node, 14 cuts changed objective from -79.963301 to -56.904449 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2147 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1172 row cuts average 31.7 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 76 row cuts average 4.8 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 96 row cuts average 31.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0012I Integer solution of -29.47957 found by DiveCoefficient after 2927 iterations and 5 nodes (0.26 seconds)
Cbc0001I Search completed - best objective -29.47957, took 3299 iterations and 14 nodes (0.28 seconds)
Cbc0032I Strong branching done 216 times (2239 iterations), fathomed 1 nodes and fixed 7 variables
Cbc0035I Maximum depth 5, 14 variables fixed on reduced cost
Total time (CPU seconds):       0.27   (Wallclock seconds):       0.29

