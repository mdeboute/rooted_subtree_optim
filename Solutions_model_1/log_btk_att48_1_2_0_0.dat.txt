Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 89 (-10) rows, 48 (-2) columns and 266 (-19) elements
Clp1000I sum of infeasibilities 0.00145169 - average 1.63111e-05, 8 fixed columns
Coin0506I Presolve 73 (-16) rows, 40 (-8) columns and 218 (-48) elements
Clp0029I End of values pass after 40 iterations
Clp0000I Optimal - objective value 152558.11
Clp0000I Optimal - objective value 152558.11
Coin0511I After Postsolve, objective 152558.11, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 152558.11
Clp0000I Optimal - objective value 152558.11
Clp0000I Optimal - objective value 152558.11
Coin0511I After Postsolve, objective 152558.11, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 152558.1088 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 89 rows, 48 columns (47 integer (47 of which binary)) and 266 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.869%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 10.7199
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -150870 iterations 34
Cbc0038I Solution found of -150870
Cbc0038I Relaxing continuous gives -150870
Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 48 columns, reduced to 49 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -150870 to -150936 (0.03 seconds)
Cbc0038I Round again with cutoff of -151098
Cbc0038I Pass   2: suminf.    0.65927 (5) obj. -151098 iterations 4
Cbc0038I Pass   3: suminf.    0.32644 (4) obj. -151098 iterations 3
Cbc0038I Pass   4: suminf.    0.54231 (3) obj. -151098 iterations 12
Cbc0038I Pass   5: suminf.    0.54231 (3) obj. -151098 iterations 0
Cbc0038I Pass   6: suminf.    0.66225 (2) obj. -151098 iterations 4
Cbc0038I Pass   7: suminf.    0.56194 (2) obj. -151098 iterations 1
Cbc0038I Pass   8: suminf.    0.19813 (2) obj. -151098 iterations 1
Cbc0038I Pass   9: suminf.    1.51643 (10) obj. -151098 iterations 12
Cbc0038I Pass  10: suminf.    1.30097 (9) obj. -151098 iterations 2
Cbc0038I Pass  11: suminf.    1.00000 (7) obj. -151098 iterations 15
Cbc0038I Pass  12: suminf.    0.89706 (4) obj. -151098 iterations 6
Cbc0038I Pass  13: suminf.    0.89706 (4) obj. -151098 iterations 0
Cbc0038I Pass  14: suminf.    1.00000 (4) obj. -151098 iterations 2
Cbc0038I Pass  15: suminf.    3.00000 (10) obj. -151098 iterations 16
Cbc0038I Pass  16: suminf.    3.00000 (10) obj. -151098 iterations 3
Cbc0038I Pass  17: suminf.    3.84925 (11) obj. -151098 iterations 13
Cbc0038I Pass  18: suminf.    1.40465 (5) obj. -151098 iterations 8
Cbc0038I Pass  19: suminf.    1.00000 (3) obj. -151098 iterations 4
Cbc0038I Pass  20: suminf.    1.00000 (4) obj. -151098 iterations 2
Cbc0038I Pass  21: suminf.    1.14515 (5) obj. -151098 iterations 2
Cbc0038I Pass  22: suminf.    2.48473 (9) obj. -151098 iterations 10
Cbc0038I Pass  23: suminf.    2.28820 (10) obj. -151098 iterations 5
Cbc0038I Pass  24: suminf.    2.28820 (10) obj. -151098 iterations 0
Cbc0038I Pass  25: suminf.    1.00000 (7) obj. -151098 iterations 16
Cbc0038I Pass  26: suminf.    0.89706 (4) obj. -151098 iterations 6
Cbc0038I Pass  27: suminf.    0.89706 (4) obj. -151098 iterations 0
Cbc0038I Pass  28: suminf.    1.00000 (4) obj. -151098 iterations 2
Cbc0038I Pass  29: suminf.    1.00000 (6) obj. -151098 iterations 14
Cbc0038I Pass  30: suminf.    0.86674 (4) obj. -151098 iterations 7
Cbc0038I Pass  31: suminf.    0.86674 (4) obj. -151098 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 89 rows 48 columns, reduced to 58 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -150936 - took 0.04 seconds
Cbc0012I Integer solution of -150935.77 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 89 rows 48 columns, reduced to 49 rows 28 columns
Cbc0031I 15 added rows had average density of 36.333333
Cbc0013I At root node, 15 cuts changed objective from -152558.11 to -151630.36 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4576 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1364 row cuts average 45.6 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 74 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 105 row cuts average 37.3 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0001I Search completed - best objective -150935.77, took 4524 iterations and 12 nodes (0.48 seconds)
Cbc0032I Strong branching done 230 times (4411 iterations), fathomed 1 nodes and fixed 3 variables
Cbc0035I Maximum depth 4, 55 variables fixed on reduced cost
Total time (CPU seconds):       0.47   (Wallclock seconds):       0.49

