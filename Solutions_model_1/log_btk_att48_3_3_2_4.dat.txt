Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 86 (-13) rows, 48 (-2) columns and 260 (-25) elements
Clp1000I sum of infeasibilities 0.00194415 - average 2.26064e-05, 15 fixed columns
Coin0506I Presolve 51 (-35) rows, 32 (-16) columns and 158 (-102) elements
Clp0029I End of values pass after 32 iterations
Clp0000I Optimal - objective value 2354.6734
Clp0000I Optimal - objective value 2354.6734
Coin0511I After Postsolve, objective 2354.6734, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5306143 - largest nonzero change 0 ( 0%) - largest zero change 2.5115664e-05
Clp0000I Optimal - objective value 2354.6734
Clp0000I Optimal - objective value 2354.6734
Clp0000I Optimal - objective value 2354.6734
Coin0511I After Postsolve, objective 2354.6734, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2354.673369 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 86 rows, 48 columns (47 integer (47 of which binary)) and 260 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.804%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 30 integers unsatisfied sum - 10.7777
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 635.146 iterations 29
Cbc0038I Solution found of 635.146
Cbc0038I Relaxing continuous gives 635.146
Cbc0038I Rounding solution of 267.903 is better than previous of 635.146

Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 86 rows 48 columns, reduced to 50 rows 31 columns
Cbc0038I Mini branch and bound improved solution from 267.903 to -351.885 (0.03 seconds)
Cbc0038I Round again with cutoff of -552.164
Cbc0038I Pass   2: suminf.    2.07711 (8) obj. -552.164 iterations 7
Cbc0038I Pass   3: suminf.    2.03616 (7) obj. -552.164 iterations 10
Cbc0038I Pass   4: suminf.    1.99484 (9) obj. -552.164 iterations 2
Cbc0038I Pass   5: suminf.    2.07723 (6) obj. -552.164 iterations 12
Cbc0038I Pass   6: suminf.    2.07723 (6) obj. -552.164 iterations 0
Cbc0038I Pass   7: suminf.    2.24334 (7) obj. -552.164 iterations 9
Cbc0038I Pass   8: suminf.    2.53152 (7) obj. -552.164 iterations 6
Cbc0038I Pass   9: suminf.    2.12771 (8) obj. -552.164 iterations 4
Cbc0038I Pass  10: suminf.    2.12488 (9) obj. -552.164 iterations 1
Cbc0038I Pass  11: suminf.    2.32332 (8) obj. -552.164 iterations 13
Cbc0038I Pass  12: suminf.    2.32332 (8) obj. -552.164 iterations 0
Cbc0038I Pass  13: suminf.    2.21265 (7) obj. -552.164 iterations 9
Cbc0038I Pass  14: suminf.    1.14965 (5) obj. -552.164 iterations 3
Cbc0038I Pass  15: suminf.    0.96563 (5) obj. -552.164 iterations 2
Cbc0038I Pass  16: suminf.    1.66851 (7) obj. -552.164 iterations 6
Cbc0038I Pass  17: suminf.    1.41834 (5) obj. -552.164 iterations 2
Cbc0038I Pass  18: suminf.    1.77626 (6) obj. -552.164 iterations 5
Cbc0038I Pass  19: suminf.    1.01168 (5) obj. -552.164 iterations 2
Cbc0038I Pass  20: suminf.    0.96563 (5) obj. -552.164 iterations 1
Cbc0038I Pass  21: suminf.    1.66851 (7) obj. -552.164 iterations 6
Cbc0038I Pass  22: suminf.    1.41834 (5) obj. -552.164 iterations 2
Cbc0038I Pass  23: suminf.    1.77626 (6) obj. -552.164 iterations 5
Cbc0038I Pass  24: suminf.    1.01168 (5) obj. -552.164 iterations 2
Cbc0038I Pass  25: suminf.    0.96563 (5) obj. -552.164 iterations 1
Cbc0038I Pass  26: suminf.    1.66851 (7) obj. -552.164 iterations 6
Cbc0038I Pass  27: suminf.    1.41834 (5) obj. -552.164 iterations 2
Cbc0038I Pass  28: suminf.    1.77626 (6) obj. -552.164 iterations 5
Cbc0038I Pass  29: suminf.    1.01168 (5) obj. -552.164 iterations 2
Cbc0038I Pass  30: suminf.    0.96563 (5) obj. -552.164 iterations 1
Cbc0038I Pass  31: suminf.    1.66851 (7) obj. -552.164 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 86 rows 48 columns, reduced to 50 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -351.885 - took 0.04 seconds
Cbc0012I Integer solution of -351.8849 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 86 rows 48 columns, reduced to 50 rows 31 columns
Cbc0031I 20 added rows had average density of 25
Cbc0013I At root node, 20 cuts changed objective from -2354.6734 to -1319.7252 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4999 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1747 row cuts average 39.9 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 55 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 142 row cuts average 33.7 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0001I Search completed - best objective -351.8849, took 5360 iterations and 10 nodes (0.50 seconds)
Cbc0032I Strong branching done 246 times (4949 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 4, 19 variables fixed on reduced cost
Total time (CPU seconds):       0.48   (Wallclock seconds):       0.50

