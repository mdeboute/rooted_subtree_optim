Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 262 (-2) columns and 1500 (-45) elements
Clp1000I sum of infeasibilities 1.02991e-05 - average 2.04347e-08, 104 fixed columns
Coin0506I Presolve 297 (-207) rows, 158 (-104) columns and 882 (-618) elements
Clp0029I End of values pass after 158 iterations
Clp0014I Perturbing problem by 0.001% of 0.1566044 - largest nonzero change 0 ( 0%) - largest zero change 2.9365872e-05
Clp0000I Optimal - objective value 130.57965
Clp0000I Optimal - objective value 130.57965
Coin0511I After Postsolve, objective 130.57965, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13422091 - largest nonzero change 0 ( 0%) - largest zero change 2.971144e-05
Clp0000I Optimal - objective value 130.57965
Clp0000I Optimal - objective value 130.57965
Clp0000I Optimal - objective value 130.57965
Coin0511I After Postsolve, objective 130.57965, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 130.5796497 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 262 columns (261 integer (261 of which binary)) and 1500 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.365%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 93 integers unsatisfied sum - 11.4555
Cbc0038I Solution found of -0.138275
Cbc0038I Relaxing continuous gives -13.425
Cbc0038I Before mini branch and bound, 168 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 172 rows 94 columns
Cbc0038I Mini branch and bound improved solution from -13.425 to -59.5405 (0.09 seconds)
Cbc0038I Round again with cutoff of -66.6445
Cbc0038I Pass   1: suminf.    3.79120 (49) obj. -66.6445 iterations 197
Cbc0038I Pass   2: suminf.    1.54269 (6) obj. -66.6445 iterations 84
Cbc0038I Pass   3: suminf.    0.76581 (4) obj. -66.6445 iterations 9
Cbc0038I Pass   4: suminf.    0.75371 (2) obj. -66.6445 iterations 22
Cbc0038I Pass   5: suminf.    0.37631 (2) obj. -66.6445 iterations 7
Cbc0038I Pass   6: suminf.    0.25963 (2) obj. -66.6445 iterations 3
Cbc0038I Pass   7: suminf.    3.24645 (14) obj. -66.6445 iterations 41
Cbc0038I Pass   8: suminf.    2.22506 (9) obj. -66.6445 iterations 31
Cbc0038I Pass   9: suminf.    0.23348 (2) obj. -66.6445 iterations 27
Cbc0038I Pass  10: suminf.    0.90084 (5) obj. -66.6445 iterations 15
Cbc0038I Pass  11: suminf.    0.89089 (5) obj. -66.6445 iterations 2
Cbc0038I Pass  12: suminf.    1.41449 (3) obj. -66.6445 iterations 13
Cbc0038I Pass  13: suminf.    0.78851 (3) obj. -66.6445 iterations 3
Cbc0038I Pass  14: suminf.    0.23348 (2) obj. -66.6445 iterations 2
Cbc0038I Pass  15: suminf.    0.90084 (5) obj. -66.6445 iterations 15
Cbc0038I Pass  16: suminf.    0.89089 (5) obj. -66.6445 iterations 2
Cbc0038I Pass  17: suminf.    1.41449 (3) obj. -66.6445 iterations 13
Cbc0038I Pass  18: suminf.    0.78851 (3) obj. -66.6445 iterations 3
Cbc0038I Pass  19: suminf.    0.23348 (2) obj. -66.6445 iterations 2
Cbc0038I Pass  20: suminf.    0.90084 (5) obj. -66.6445 iterations 15
Cbc0038I Pass  21: suminf.    0.89089 (5) obj. -66.6445 iterations 2
Cbc0038I Pass  22: suminf.    1.41449 (3) obj. -66.6445 iterations 13
Cbc0038I Pass  23: suminf.    0.78851 (3) obj. -66.6445 iterations 3
Cbc0038I Pass  24: suminf.    0.23348 (2) obj. -66.6445 iterations 2
Cbc0038I Pass  25: suminf.    0.90084 (5) obj. -66.6445 iterations 15
Cbc0038I Pass  26: suminf.    0.89089 (5) obj. -66.6445 iterations 2
Cbc0038I Pass  27: suminf.    1.41449 (3) obj. -66.6445 iterations 13
Cbc0038I Pass  28: suminf.    0.78851 (3) obj. -66.6445 iterations 3
Cbc0038I Pass  29: suminf.    0.23348 (2) obj. -66.6445 iterations 2
Cbc0038I Pass  30: suminf.    0.90084 (5) obj. -66.6445 iterations 15
Cbc0038I Rounding solution of -69.6525 is better than previous of -59.5405

Cbc0038I Before mini branch and bound, 148 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 211 rows 114 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I Round again with cutoff of -81.838
Cbc0038I Pass  30: suminf.    4.87354 (49) obj. -81.838 iterations 0
Cbc0038I Pass  31: suminf.    2.43529 (8) obj. -81.838 iterations 87
Cbc0038I Pass  32: suminf.    1.85016 (8) obj. -81.838 iterations 2
Cbc0038I Pass  33: suminf.    4.46338 (13) obj. -81.838 iterations 48
Cbc0038I Pass  34: suminf.    4.46338 (13) obj. -81.838 iterations 0
Cbc0038I Pass  35: suminf.    3.14452 (9) obj. -81.838 iterations 33
Cbc0038I Pass  36: suminf.    2.01543 (7) obj. -81.838 iterations 8
Cbc0038I Pass  37: suminf.    2.01543 (7) obj. -81.838 iterations 2
Cbc0038I Pass  38: suminf.    2.96509 (9) obj. -81.838 iterations 14
Cbc0038I Pass  39: suminf.    2.87904 (8) obj. -81.838 iterations 5
Cbc0038I Pass  40: suminf.    3.19803 (9) obj. -81.838 iterations 13
Cbc0038I Pass  41: suminf.    2.01543 (7) obj. -81.838 iterations 7
Cbc0038I Pass  42: suminf.    2.01543 (7) obj. -81.838 iterations 2
Cbc0038I Pass  43: suminf.    2.96509 (9) obj. -81.838 iterations 15
Cbc0038I Pass  44: suminf.    2.87904 (8) obj. -81.838 iterations 6
Cbc0038I Pass  45: suminf.    3.19803 (9) obj. -81.838 iterations 13
Cbc0038I Pass  46: suminf.    2.01543 (7) obj. -81.838 iterations 7
Cbc0038I Pass  47: suminf.    2.01543 (7) obj. -81.838 iterations 2
Cbc0038I Pass  48: suminf.    2.96509 (9) obj. -81.838 iterations 15
Cbc0038I Pass  49: suminf.    2.87904 (8) obj. -81.838 iterations 6
Cbc0038I Pass  50: suminf.    3.19803 (9) obj. -81.838 iterations 13
Cbc0038I Pass  51: suminf.    2.01543 (7) obj. -81.838 iterations 7
Cbc0038I Pass  52: suminf.    2.01543 (7) obj. -81.838 iterations 2
Cbc0038I Pass  53: suminf.    2.96509 (9) obj. -81.838 iterations 14
Cbc0038I Pass  54: suminf.    2.87904 (8) obj. -81.838 iterations 5
Cbc0038I Pass  55: suminf.    3.19803 (9) obj. -81.838 iterations 13
Cbc0038I Pass  56: suminf.    2.01543 (7) obj. -81.838 iterations 7
Cbc0038I Pass  57: suminf.    2.01543 (7) obj. -81.838 iterations 2
Cbc0038I Pass  58: suminf.    2.96509 (9) obj. -81.838 iterations 14
Cbc0038I Pass  59: suminf.    2.87904 (8) obj. -81.838 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 152 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 203 rows 110 columns
Cbc0038I Mini branch and bound did not improve solution (0.29 seconds)
Cbc0038I After 0.29 seconds - Feasibility pump exiting with objective of -69.6525 - took 0.26 seconds
Cbc0012I Integer solution of -69.6525 found by feasibility pump after 0 iterations and 0 nodes (0.29 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 176 rows 96 columns
Cbc0031I 44 added rows had average density of 189.56818
Cbc0013I At root node, 44 cuts changed objective from -130.57965 to -120.55228 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 57411 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.593 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3791 row cuts average 258.8 elements, 0 column cuts (0 active)  in 0.634 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.121 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.762 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 222 row cuts average 252.1 elements, 0 column cuts (0 active)  in 0.252 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -69.6525 best solution, best possible -120.55228 (7.46 seconds)
Cbc0010I After 6 nodes, 7 on tree, -69.6525 best solution, best possible -120.55228 (8.18 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 13 rows 11 columns
Cbc0010I After 49 nodes, 11 on tree, -69.6525 best solution, best possible -120.55228 (8.88 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 185 rows 99 columns
Cbc0010I After 129 nodes, 13 on tree, -69.6525 best solution, best possible -120.55228 (9.59 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 4 rows 5 columns
Cbc0010I After 271 nodes, 8 on tree, -69.6525 best solution, best possible -91.199854 (10.29 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 7 rows 8 columns
Cbc0001I Search completed - best objective -69.65249999999997, took 41831 iterations and 382 nodes (10.72 seconds)
Cbc0032I Strong branching done 2822 times (74969 iterations), fathomed 50 nodes and fixed 158 variables
Cbc0035I Maximum depth 82, 1946 variables fixed on reduced cost
Total time (CPU seconds):       10.49   (Wallclock seconds):       10.79

