Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 38 (-9) rows, 22 (-2) columns and 113 (-16) elements
Clp1000I sum of infeasibilities 9.17121e-05 - average 2.41348e-06, 1 fixed columns
Coin0506I Presolve 36 (-2) rows, 21 (-1) columns and 107 (-6) elements
Clp0029I End of values pass after 21 iterations
Clp0000I Optimal - objective value 61.306662
Clp0000I Optimal - objective value 61.306662
Coin0511I After Postsolve, objective 61.306662, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 61.306662
Clp0000I Optimal - objective value 61.306662
Clp0000I Optimal - objective value 61.306662
Coin0511I After Postsolve, objective 61.306662, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 61.30666169 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 38 rows, 22 columns (21 integer (21 of which binary)) and 115 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.040%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 4.19541
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -13.4305 iterations 19
Cbc0038I Solution found of -13.4305
Cbc0038I Relaxing continuous gives -13.4305
Cbc0038I Rounding solution of -17.5977 is better than previous of -13.4305

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 38 rows 22 columns, reduced to 33 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -17.5977 to -20.7214 (0.02 seconds)
Cbc0038I Round again with cutoff of -24.6473
Cbc0038I Pass   2: suminf.    0.58211 (3) obj. -24.6473 iterations 4
Cbc0038I Pass   3: suminf.    0.65923 (3) obj. -24.6473 iterations 3
Cbc0038I Pass   4: suminf.    0.62696 (6) obj. -24.6473 iterations 3
Cbc0038I Pass   5: suminf.    0.88408 (5) obj. -24.6473 iterations 9
Cbc0038I Pass   6: suminf.    0.88408 (5) obj. -24.6473 iterations 0
Cbc0038I Pass   7: suminf.    0.62636 (5) obj. -24.6473 iterations 6
Cbc0038I Pass   8: suminf.    0.32474 (2) obj. -24.6473 iterations 3
Cbc0038I Pass   9: suminf.    1.05907 (4) obj. -24.6473 iterations 3
Cbc0038I Pass  10: suminf.    0.62706 (2) obj. -24.6473 iterations 2
Cbc0038I Pass  11: suminf.    0.39967 (2) obj. -24.6473 iterations 3
Cbc0038I Pass  12: suminf.    1.37220 (7) obj. -24.6473 iterations 8
Cbc0038I Pass  13: suminf.    0.67884 (2) obj. -24.6473 iterations 6
Cbc0038I Pass  14: suminf.    0.71097 (3) obj. -24.6473 iterations 4
Cbc0038I Pass  15: suminf.    0.61617 (3) obj. -24.6473 iterations 6
Cbc0038I Pass  16: suminf.    0.42284 (2) obj. -24.6473 iterations 4
Cbc0038I Pass  17: suminf.    0.68936 (4) obj. -24.6473 iterations 8
Cbc0038I Pass  18: suminf.    0.23310 (1) obj. -24.6473 iterations 4
Cbc0038I Pass  19: suminf.    0.47468 (2) obj. -24.6473 iterations 3
Cbc0038I Pass  20: suminf.    0.90911 (2) obj. -24.6473 iterations 1
Cbc0038I Pass  21: suminf.    0.48563 (1) obj. -24.6473 iterations 2
Cbc0038I Pass  22: suminf.    0.86048 (2) obj. -24.6473 iterations 3
Cbc0038I Pass  23: suminf.    0.70009 (2) obj. -24.6473 iterations 2
Cbc0038I Pass  24: suminf.    0.47468 (2) obj. -24.6473 iterations 3
Cbc0038I Pass  25: suminf.    0.47468 (2) obj. -24.6473 iterations 0
Cbc0038I Pass  26: suminf.    0.90911 (2) obj. -24.6473 iterations 1
Cbc0038I Pass  27: suminf.    0.48563 (1) obj. -24.6473 iterations 2
Cbc0038I Pass  28: suminf.    1.41694 (5) obj. -24.6473 iterations 6
Cbc0038I Pass  29: suminf.    1.11226 (6) obj. -24.6473 iterations 1
Cbc0038I Pass  30: suminf.    2.40561 (7) obj. -24.6473 iterations 6
Cbc0038I Pass  31: suminf.    2.40561 (7) obj. -24.6473 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 38 rows 22 columns, reduced to 38 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -20.7214 - took 0.02 seconds
Cbc0012I Integer solution of -20.72143 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 9 added rows had average density of 13.666667
Cbc0013I At root node, 9 cuts changed objective from -59.979041 to -41.28756 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1187 row cuts average 3.2 elements, 3 column cuts (3 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 807 row cuts average 20.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 95 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -20.72143, took 2329 iterations and 6 nodes (0.15 seconds)
Cbc0032I Strong branching done 66 times (698 iterations), fathomed 0 nodes and fixed 10 variables
Cbc0035I Maximum depth 2, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.16

