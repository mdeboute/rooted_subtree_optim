Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 55 (-14) rows, 31 (-4) columns and 164 (-31) elements
Clp1000I sum of infeasibilities 8.70214e-06 - average 1.58221e-07, 6 fixed columns
Coin0506I Presolve 42 (-13) rows, 24 (-7) columns and 124 (-40) elements
Clp0029I End of values pass after 24 iterations
Clp0000I Optimal - objective value 131.44034
Clp0000I Optimal - objective value 131.44034
Coin0511I After Postsolve, objective 131.44034, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 131.44034
Clp0000I Optimal - objective value 131.44034
Clp0000I Optimal - objective value 131.44034
Coin0511I After Postsolve, objective 131.44034, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 131.4403382 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 55 rows, 31 columns (30 integer (30 of which binary)) and 165 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.816%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 5.12823
Cbc0038I Pass   1: suminf.    0.28750 (1) obj. -86.8763 iterations 13
Cbc0038I Solution found of -70.0165
Cbc0038I Relaxing continuous gives -70.0165
Cbc0038I Rounding solution of -75.1537 is better than previous of -70.0165

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 31 columns, reduced to 23 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -75.1537 to -78.4154 (0.01 seconds)
Cbc0038I Round again with cutoff of -83.718
Cbc0038I Pass   2: suminf.    0.28750 (1) obj. -86.8763 iterations 0
Cbc0038I Pass   3: suminf.    0.23364 (1) obj. -83.718 iterations 1
Cbc0038I Pass   4: suminf.    1.10791 (11) obj. -83.718 iterations 15
Cbc0038I Pass   5: suminf.    1.10011 (10) obj. -83.718 iterations 2
Cbc0038I Pass   6: suminf.    2.09489 (6) obj. -83.718 iterations 15
Cbc0038I Pass   7: suminf.    1.30826 (5) obj. -83.718 iterations 3
Cbc0038I Pass   8: suminf.    1.16476 (5) obj. -83.718 iterations 1
Cbc0038I Pass   9: suminf.    1.24826 (6) obj. -83.718 iterations 7
Cbc0038I Pass  10: suminf.    1.07533 (4) obj. -83.718 iterations 2
Cbc0038I Pass  11: suminf.    0.79839 (3) obj. -83.718 iterations 4
Cbc0038I Pass  12: suminf.    0.79839 (3) obj. -83.718 iterations 1
Cbc0038I Pass  13: suminf.    0.86777 (4) obj. -83.718 iterations 5
Cbc0038I Pass  14: suminf.    0.86777 (4) obj. -83.718 iterations 0
Cbc0038I Pass  15: suminf.    1.12344 (4) obj. -83.718 iterations 6
Cbc0038I Pass  16: suminf.    1.07533 (4) obj. -83.718 iterations 1
Cbc0038I Pass  17: suminf.    0.79839 (3) obj. -83.718 iterations 4
Cbc0038I Pass  18: suminf.    0.79839 (3) obj. -83.718 iterations 1
Cbc0038I Pass  19: suminf.    0.86777 (4) obj. -83.718 iterations 5
Cbc0038I Pass  20: suminf.    0.86777 (4) obj. -83.718 iterations 0
Cbc0038I Pass  21: suminf.    1.12344 (4) obj. -83.718 iterations 6
Cbc0038I Pass  22: suminf.    1.07533 (4) obj. -83.718 iterations 1
Cbc0038I Pass  23: suminf.    0.79839 (3) obj. -83.718 iterations 4
Cbc0038I Pass  24: suminf.    0.79839 (3) obj. -83.718 iterations 1
Cbc0038I Pass  25: suminf.    0.86777 (4) obj. -83.718 iterations 5
Cbc0038I Pass  26: suminf.    0.86777 (4) obj. -83.718 iterations 0
Cbc0038I Pass  27: suminf.    1.12344 (4) obj. -83.718 iterations 6
Cbc0038I Pass  28: suminf.    1.07533 (4) obj. -83.718 iterations 1
Cbc0038I Pass  29: suminf.    0.79839 (3) obj. -83.718 iterations 4
Cbc0038I Pass  30: suminf.    0.79839 (3) obj. -83.718 iterations 1
Cbc0038I Pass  31: suminf.    0.86777 (4) obj. -83.718 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 55 rows 31 columns, reduced to 25 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -78.4154 - took 0.02 seconds
Cbc0012I Integer solution of -78.41538 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 55 rows 31 columns, reduced to 23 rows 15 columns
Cbc0031I 9 added rows had average density of 25.111111
Cbc0013I At root node, 9 cuts changed objective from -131.44034 to -94.563455 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1085 row cuts average 3.7 elements, 1 column cuts (1 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 602 row cuts average 30.9 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 9 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 29 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -78.41538, took 1615 iterations and 2 nodes (0.16 seconds)
Cbc0032I Strong branching done 24 times (251 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 18 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.17

