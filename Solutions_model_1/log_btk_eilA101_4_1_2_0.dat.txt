Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 184 (-21) rows, 101 (-2) columns and 562 (-41) elements
Clp1000I sum of infeasibilities 4.65978e-05 - average 2.53249e-07, 15 fixed columns
Coin0506I Presolve 150 (-34) rows, 86 (-15) columns and 464 (-98) elements
Clp0029I End of values pass after 86 iterations
Clp0014I Perturbing problem by 0.001% of 2.240634 - largest nonzero change 0 ( 0%) - largest zero change 2.7506567e-05
Clp0000I Optimal - objective value 39.69814
Clp0000I Optimal - objective value 39.69814
Coin0511I After Postsolve, objective 39.69814, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 39.69814
Clp0000I Optimal - objective value 39.69814
Clp0000I Optimal - objective value 39.69814
Coin0511I After Postsolve, objective 39.69814, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 39.69813973 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 184 rows, 101 columns (100 integer (100 of which binary)) and 562 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.888%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 43 integers unsatisfied sum - 13.1276
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 8.09157 iterations 72
Cbc0038I Solution found of 8.09157
Cbc0038I Relaxing continuous gives 8.09157
Cbc0038I Rounding solution of -8.36962 is better than previous of 8.09157

Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 0 continuous
Cbc0038I Full problem 184 rows 101 columns, reduced to 74 rows 44 columns
Cbc0038I Mini branch and bound improved solution from -8.36962 to -8.55021 (0.05 seconds)
Cbc0038I Round again with cutoff of -11.6651
Cbc0038I Pass   2: suminf.    2.72313 (8) obj. -11.6651 iterations 13
Cbc0038I Pass   3: suminf.    1.82947 (7) obj. -11.6651 iterations 14
Cbc0038I Pass   4: suminf.    1.12264 (4) obj. -11.6651 iterations 6
Cbc0038I Pass   5: suminf.    0.99315 (4) obj. -11.6651 iterations 3
Cbc0038I Pass   6: suminf.    1.19208 (5) obj. -11.6651 iterations 8
Cbc0038I Pass   7: suminf.    0.87023 (4) obj. -11.6651 iterations 2
Cbc0038I Pass   8: suminf.    1.15580 (5) obj. -11.6651 iterations 3
Cbc0038I Pass   9: suminf.    2.42562 (9) obj. -11.6651 iterations 21
Cbc0038I Pass  10: suminf.    0.99645 (7) obj. -11.6651 iterations 19
Cbc0038I Pass  11: suminf.    1.33961 (6) obj. -11.6651 iterations 11
Cbc0038I Pass  12: suminf.    0.89210 (5) obj. -11.6651 iterations 3
Cbc0038I Pass  13: suminf.    1.41068 (4) obj. -11.6651 iterations 6
Cbc0038I Pass  14: suminf.    1.34609 (5) obj. -11.6651 iterations 1
Cbc0038I Pass  15: suminf.    1.75856 (4) obj. -11.6651 iterations 3
Cbc0038I Pass  16: suminf.    1.34211 (4) obj. -11.6651 iterations 2
Cbc0038I Pass  17: suminf.    1.64139 (5) obj. -11.6651 iterations 8
Cbc0038I Pass  18: suminf.    1.52975 (7) obj. -11.6651 iterations 1
Cbc0038I Pass  19: suminf.    2.15105 (8) obj. -11.6651 iterations 11
Cbc0038I Pass  20: suminf.    0.94696 (4) obj. -11.6651 iterations 7
Cbc0038I Pass  21: suminf.    0.82284 (3) obj. -11.6651 iterations 1
Cbc0038I Pass  22: suminf.    1.57705 (4) obj. -11.6651 iterations 4
Cbc0038I Pass  23: suminf.    1.37846 (4) obj. -11.6651 iterations 2
Cbc0038I Pass  24: suminf.    1.37310 (4) obj. -11.6651 iterations 1
Cbc0038I Pass  25: suminf.    1.51604 (6) obj. -11.6651 iterations 8
Cbc0038I Pass  26: suminf.    1.51604 (6) obj. -11.6651 iterations 1
Cbc0038I Pass  27: suminf.    2.15105 (8) obj. -11.6651 iterations 11
Cbc0038I Pass  28: suminf.    0.94696 (4) obj. -11.6651 iterations 7
Cbc0038I Pass  29: suminf.    0.82284 (3) obj. -11.6651 iterations 1
Cbc0038I Pass  30: suminf.    1.57705 (4) obj. -11.6651 iterations 4
Cbc0038I Pass  31: suminf.    1.37846 (4) obj. -11.6651 iterations 2
Cbc0038I Rounding solution of -9.25245 is better than previous of -8.55021

Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 184 rows 101 columns, reduced to 90 rows 53 columns
Cbc0038I Mini branch and bound did not improve solution (0.12 seconds)
Cbc0038I Round again with cutoff of -17.2717
Cbc0038I Pass  31: suminf.    3.94247 (13) obj. -17.2717 iterations 5
Cbc0038I Pass  32: suminf.    1.16100 (7) obj. -17.2717 iterations 15
Cbc0038I Pass  33: suminf.    1.00009 (6) obj. -17.2717 iterations 4
Cbc0038I Pass  34: suminf.    1.89751 (7) obj. -17.2717 iterations 7
Cbc0038I Pass  35: suminf.    1.89751 (7) obj. -17.2717 iterations 0
Cbc0038I Pass  36: suminf.    2.18045 (8) obj. -17.2717 iterations 6
Cbc0038I Pass  37: suminf.    1.86110 (6) obj. -17.2717 iterations 2
Cbc0038I Pass  38: suminf.    1.86110 (6) obj. -17.2717 iterations 0
Cbc0038I Pass  39: suminf.    2.08195 (6) obj. -17.2717 iterations 6
Cbc0038I Pass  40: suminf.    2.00259 (6) obj. -17.2717 iterations 1
Cbc0038I Pass  41: suminf.    1.98278 (5) obj. -17.2717 iterations 1
Cbc0038I Pass  42: suminf.    2.04574 (5) obj. -17.2717 iterations 2
Cbc0038I Pass  43: suminf.    1.92149 (6) obj. -17.2717 iterations 1
Cbc0038I Pass  44: suminf.    2.34850 (7) obj. -17.2717 iterations 5
Cbc0038I Pass  45: suminf.    2.19609 (8) obj. -17.2717 iterations 1
Cbc0038I Pass  46: suminf.    2.19609 (8) obj. -17.2717 iterations 1
Cbc0038I Pass  47: suminf.    3.12148 (8) obj. -17.2717 iterations 6
Cbc0038I Pass  48: suminf.    2.27895 (7) obj. -17.2717 iterations 3
Cbc0038I Pass  49: suminf.    2.19609 (8) obj. -17.2717 iterations 9
Cbc0038I Pass  50: suminf.    9.88814 (23) obj. -17.2717 iterations 40
Cbc0038I Pass  51: suminf.    3.58600 (12) obj. -17.2717 iterations 27
Cbc0038I Pass  52: suminf.    3.35457 (11) obj. -17.2717 iterations 4
Cbc0038I Pass  53: suminf.    3.66965 (10) obj. -17.2717 iterations 19
Cbc0038I Pass  54: suminf.    3.02780 (9) obj. -17.2717 iterations 6
Cbc0038I Pass  55: suminf.    2.64568 (8) obj. -17.2717 iterations 1
Cbc0038I Pass  56: suminf.    2.01612 (7) obj. -17.2717 iterations 2
Cbc0038I Pass  57: suminf.    1.82156 (8) obj. -17.2717 iterations 3
Cbc0038I Pass  58: suminf.    3.89811 (11) obj. -17.2717 iterations 6
Cbc0038I Pass  59: suminf.    2.90741 (9) obj. -17.2717 iterations 8
Cbc0038I Pass  60: suminf.    2.15473 (9) obj. -17.2717 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 44 integers at bound fixed and 0 continuous
Cbc0038I Full problem 184 rows 101 columns, reduced to 100 rows 57 columns
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I After 0.20 seconds - Feasibility pump exiting with objective of -9.25245 - took 0.18 seconds
Cbc0012I Integer solution of -9.252447 found by feasibility pump after 0 iterations and 0 nodes (0.20 seconds)
Cbc0038I Full problem 184 rows 101 columns, reduced to 80 rows 49 columns
Cbc0012I Integer solution of -9.580537 found by RINS after 0 iterations and 0 nodes (0.28 seconds)
Cbc0031I 34 added rows had average density of 47.147059
Cbc0013I At root node, 34 cuts changed objective from -39.69814 to -30.204955 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 22876 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.152 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2835 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.164 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.142 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 161 row cuts average 100.7 elements, 0 column cuts (0 active)  in 0.061 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -9.580537 best solution, best possible -30.204955 (1.79 seconds)
Cbc0038I Full problem 184 rows 101 columns, reduced to 97 rows 56 columns
Cbc0038I Full problem 184 rows 101 columns, reduced to 22 rows 24 columns
Cbc0012I Integer solution of -10.87118 found by RINS after 13814 iterations and 91 nodes (2.37 seconds)
Cbc0010I After 112 nodes, 7 on tree, -10.87118 best solution, best possible -30.114141 (2.49 seconds)
Cbc0001I Search completed - best objective -10.87118, took 16080 iterations and 176 nodes (2.64 seconds)
Cbc0032I Strong branching done 1990 times (28443 iterations), fathomed 17 nodes and fixed 87 variables
Cbc0035I Maximum depth 36, 606 variables fixed on reduced cost
Total time (CPU seconds):       2.53   (Wallclock seconds):       2.66

