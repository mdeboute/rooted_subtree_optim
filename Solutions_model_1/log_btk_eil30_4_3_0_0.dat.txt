Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 41 (-22) rows, 23 (-9) columns and 122 (-55) elements
Clp0000I Optimal - objective value 94.290777
Coin0511I After Postsolve, objective 94.290777, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 94.29077672 - 19 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 41 rows, 23 columns (22 integer (22 of which binary)) and 124 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.625%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 4.87212
Cbc0038I Pass   1: suminf.    0.01613 (1) obj. -58.1782 iterations 12
Cbc0038I Solution found of 6.21613
Cbc0038I Relaxing continuous gives -8.8
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 41 rows 23 columns, reduced to 31 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -8.8 to -47.9 (0.02 seconds)
Cbc0038I Round again with cutoff of -52.4
Cbc0038I Pass   2: suminf.    0.01613 (1) obj. -58.1782 iterations 0
Cbc0038I Pass   3: suminf.    0.33384 (1) obj. -52.4 iterations 2
Cbc0038I Pass   4: suminf.    1.46279 (6) obj. -52.4 iterations 6
Cbc0038I Pass   5: suminf.    0.59688 (2) obj. -52.4 iterations 3
Cbc0038I Pass   6: suminf.    0.33384 (1) obj. -52.4 iterations 2
Cbc0038I Pass   7: suminf.    0.20769 (1) obj. -52.4 iterations 1
Cbc0038I Pass   8: suminf.    1.38990 (3) obj. -52.4 iterations 4
Cbc0038I Pass   9: suminf.    0.82807 (2) obj. -52.4 iterations 3
Cbc0038I Pass  10: suminf.    0.48241 (2) obj. -52.4 iterations 2
Cbc0038I Pass  11: suminf.    0.48241 (2) obj. -52.4 iterations 0
Cbc0038I Pass  12: suminf.    0.25964 (2) obj. -52.4 iterations 3
Cbc0038I Pass  13: suminf.    0.91313 (2) obj. -52.4 iterations 3
Cbc0038I Pass  14: suminf.    0.41538 (1) obj. -52.4 iterations 1
Cbc0038I Pass  15: suminf.    0.41538 (1) obj. -52.4 iterations 0
Cbc0038I Pass  16: suminf.    0.41538 (1) obj. -52.4 iterations 0
Cbc0038I Pass  17: suminf.    1.47232 (4) obj. -52.4 iterations 5
Cbc0038I Pass  18: suminf.    0.89365 (3) obj. -52.4 iterations 3
Cbc0038I Pass  19: suminf.    0.91743 (2) obj. -52.4 iterations 3
Cbc0038I Pass  20: suminf.    0.46218 (1) obj. -52.4 iterations 2
Cbc0038I Pass  21: suminf.    0.46154 (1) obj. -52.4 iterations 1
Cbc0038I Pass  22: suminf.    2.07444 (7) obj. -52.4 iterations 8
Cbc0038I Pass  23: suminf.    1.39034 (4) obj. -52.4 iterations 5
Cbc0038I Pass  24: suminf.    1.67509 (5) obj. -52.4 iterations 1
Cbc0038I Pass  25: suminf.    1.39034 (4) obj. -52.4 iterations 1
Cbc0038I Pass  26: suminf.    0.91743 (2) obj. -52.4 iterations 4
Cbc0038I Pass  27: suminf.    0.46218 (1) obj. -52.4 iterations 2
Cbc0038I Pass  28: suminf.    0.46154 (1) obj. -52.4 iterations 1
Cbc0038I Pass  29: suminf.    1.47135 (4) obj. -52.4 iterations 5
Cbc0038I Pass  30: suminf.    2.80037 (7) obj. -52.4 iterations 12
Cbc0038I Pass  31: suminf.    0.52754 (2) obj. -52.4 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 41 rows 23 columns, reduced to 35 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -47.9 - took 0.01 seconds
Cbc0012I Integer solution of -47.9 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 41 rows 23 columns, reduced to 31 rows 18 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from -92.557146 to -92.557146 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 15 column cuts (15 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -47.90000000000001, took 0 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.03

