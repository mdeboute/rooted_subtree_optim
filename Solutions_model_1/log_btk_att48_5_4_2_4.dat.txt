Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 87 (-12) rows, 48 (-2) columns and 262 (-23) elements
Clp1000I sum of infeasibilities 3.41518e-06 - average 3.9255e-08, 12 fixed columns
Coin0506I Presolve 62 (-25) rows, 35 (-13) columns and 186 (-76) elements
Clp0029I End of values pass after 35 iterations
Clp0000I Optimal - objective value 2053.4201
Clp0000I Optimal - objective value 2053.4201
Coin0511I After Postsolve, objective 2053.4201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2053.4201
Clp0000I Optimal - objective value 2053.4201
Clp0000I Optimal - objective value 2053.4201
Coin0511I After Postsolve, objective 2053.4201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2053.420052 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 87 rows, 48 columns (47 integer (47 of which binary)) and 262 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.826%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 33 integers unsatisfied sum - 12.4264
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 606.503 iterations 35
Cbc0038I Solution found of 606.503
Cbc0038I Relaxing continuous gives 606.503
Cbc0038I Rounding solution of 525.788 is better than previous of 606.503

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 87 rows 48 columns, reduced to 60 rows 34 columns
Cbc0038I Mini branch and bound improved solution from 525.788 to -391.347 (0.02 seconds)
Cbc0038I Round again with cutoff of -557.554
Cbc0038I Pass   2: suminf.    2.17013 (10) obj. -557.554 iterations 8
Cbc0038I Pass   3: suminf.    2.16650 (9) obj. -557.554 iterations 1
Cbc0038I Pass   4: suminf.    2.03717 (6) obj. -557.554 iterations 10
Cbc0038I Pass   5: suminf.    1.21988 (4) obj. -557.554 iterations 5
Cbc0038I Pass   6: suminf.    1.76767 (6) obj. -557.554 iterations 6
Cbc0038I Pass   7: suminf.    1.47162 (5) obj. -557.554 iterations 2
Cbc0038I Pass   8: suminf.    1.23969 (5) obj. -557.554 iterations 2
Cbc0038I Pass   9: suminf.    2.80040 (11) obj. -557.554 iterations 11
Cbc0038I Pass  10: suminf.    1.88747 (8) obj. -557.554 iterations 4
Cbc0038I Pass  11: suminf.    1.88747 (8) obj. -557.554 iterations 0
Cbc0038I Pass  12: suminf.    1.47523 (5) obj. -557.554 iterations 11
Cbc0038I Pass  13: suminf.    1.25047 (5) obj. -557.554 iterations 2
Cbc0038I Pass  14: suminf.    1.23066 (4) obj. -557.554 iterations 1
Cbc0038I Pass  15: suminf.    1.96245 (6) obj. -557.554 iterations 5
Cbc0038I Pass  16: suminf.    1.65654 (6) obj. -557.554 iterations 3
Cbc0038I Pass  17: suminf.    2.69238 (14) obj. -557.554 iterations 11
Cbc0038I Pass  18: suminf.    1.65387 (7) obj. -557.554 iterations 10
Cbc0038I Pass  19: suminf.    1.90937 (8) obj. -557.554 iterations 12
Cbc0038I Pass  20: suminf.    1.13299 (7) obj. -557.554 iterations 6
Cbc0038I Pass  21: suminf.    1.13299 (7) obj. -557.554 iterations 0
Cbc0038I Pass  22: suminf.    2.24084 (6) obj. -557.554 iterations 6
Cbc0038I Pass  23: suminf.    1.93097 (7) obj. -557.554 iterations 2
Cbc0038I Pass  24: suminf.    1.92428 (6) obj. -557.554 iterations 1
Cbc0038I Pass  25: suminf.    2.03757 (6) obj. -557.554 iterations 5
Cbc0038I Pass  26: suminf.    1.54924 (7) obj. -557.554 iterations 4
Cbc0038I Pass  27: suminf.    1.53070 (6) obj. -557.554 iterations 1
Cbc0038I Pass  28: suminf.    2.24084 (6) obj. -557.554 iterations 5
Cbc0038I Pass  29: suminf.    1.93097 (7) obj. -557.554 iterations 2
Cbc0038I Pass  30: suminf.    1.92428 (6) obj. -557.554 iterations 1
Cbc0038I Pass  31: suminf.    2.03757 (6) obj. -557.554 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 87 rows 48 columns, reduced to 68 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -391.347 - took 0.05 seconds
Cbc0012I Integer solution of -391.34669 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 87 rows 48 columns, reduced to 60 rows 34 columns
Cbc0031I 25 added rows had average density of 30.84
Cbc0013I At root node, 25 cuts changed objective from -2053.4201 to -1181.2183 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7516 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1663 row cuts average 47.3 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 287 row cuts average 5.2 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 134 row cuts average 42.4 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0001I Search completed - best objective -391.3466899999999, took 7067 iterations and 16 nodes (0.67 seconds)
Cbc0032I Strong branching done 344 times (8389 iterations), fathomed 1 nodes and fixed 2 variables
Cbc0035I Maximum depth 7, 16 variables fixed on reduced cost
Total time (CPU seconds):       0.65   (Wallclock seconds):       0.67

