Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 123 (-32) rows, 70 (-8) columns and 378 (-75) elements
Clp1000I sum of infeasibilities 9.58036e-06 - average 7.78891e-08, 15 fixed columns
Coin0506I Presolve 91 (-32) rows, 53 (-17) columns and 280 (-98) elements
Clp0029I End of values pass after 53 iterations
Clp0014I Perturbing problem by 0.001% of 2.9287417 - largest nonzero change 0 ( 0%) - largest zero change 2.398299e-05
Clp0000I Optimal - objective value 84.120368
Clp0000I Optimal - objective value 84.120368
Coin0511I After Postsolve, objective 84.120368, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 2.6020779 - largest nonzero change 0 ( 0%) - largest zero change 2.9576128e-05
Clp0000I Optimal - objective value 84.120368
Clp0000I Optimal - objective value 84.120368
Clp0000I Optimal - objective value 84.120368
Coin0511I After Postsolve, objective 84.120368, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 84.12036838 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 123 rows, 70 columns (69 integer (69 of which binary)) and 378 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.226%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 7.15664
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -30.3495 iterations 35
Cbc0038I Solution found of -30.3495
Cbc0038I Relaxing continuous gives -30.3495
Cbc0038I Rounding solution of -37.0848 is better than previous of -30.3495

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 70 columns, reduced to 38 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -37.0848 to -54.9531 (0.04 seconds)
Cbc0038I Round again with cutoff of -57.8699
Cbc0038I Pass   2: suminf.    1.63195 (5) obj. -57.8699 iterations 14
Cbc0038I Pass   3: suminf.    0.84131 (3) obj. -57.8699 iterations 12
Cbc0038I Pass   4: suminf.    0.78167 (2) obj. -57.8699 iterations 3
Cbc0038I Pass   5: suminf.    0.47610 (3) obj. -57.8699 iterations 4
Cbc0038I Pass   6: suminf.    1.34713 (3) obj. -57.8699 iterations 5
Cbc0038I Pass   7: suminf.    1.06701 (4) obj. -57.8699 iterations 5
Cbc0038I Pass   8: suminf.    1.06701 (4) obj. -57.8699 iterations 0
Cbc0038I Pass   9: suminf.    1.00350 (4) obj. -57.8699 iterations 10
Cbc0038I Pass  10: suminf.    0.94968 (3) obj. -57.8699 iterations 6
Cbc0038I Pass  11: suminf.    0.43098 (3) obj. -57.8699 iterations 5
Cbc0038I Pass  12: suminf.    1.28983 (4) obj. -57.8699 iterations 24
Cbc0038I Pass  13: suminf.    0.64238 (2) obj. -57.8699 iterations 10
Cbc0038I Pass  14: suminf.    0.32488 (2) obj. -57.8699 iterations 3
Cbc0038I Pass  15: suminf.    0.64238 (2) obj. -57.8699 iterations 3
Cbc0038I Pass  16: suminf.    1.64960 (7) obj. -57.8699 iterations 17
Cbc0038I Pass  17: suminf.    1.54726 (8) obj. -57.8699 iterations 9
Cbc0038I Pass  18: suminf.    1.93720 (6) obj. -57.8699 iterations 13
Cbc0038I Pass  19: suminf.    0.80280 (5) obj. -57.8699 iterations 1
Cbc0038I Pass  20: suminf.    0.37888 (4) obj. -57.8699 iterations 6
Cbc0038I Pass  21: suminf.    1.20628 (6) obj. -57.8699 iterations 11
Cbc0038I Pass  22: suminf.    1.02927 (5) obj. -57.8699 iterations 2
Cbc0038I Pass  23: suminf.    1.91375 (7) obj. -57.8699 iterations 8
Cbc0038I Pass  24: suminf.    3.64079 (15) obj. -57.8699 iterations 18
Cbc0038I Pass  25: suminf.    2.13597 (7) obj. -57.8699 iterations 15
Cbc0038I Pass  26: suminf.    1.85375 (7) obj. -57.8699 iterations 3
Cbc0038I Pass  27: suminf.    1.40669 (8) obj. -57.8699 iterations 4
Cbc0038I Pass  28: suminf.    1.08648 (5) obj. -57.8699 iterations 11
Cbc0038I Pass  29: suminf.    1.34792 (6) obj. -57.8699 iterations 7
Cbc0038I Pass  30: suminf.    0.78386 (4) obj. -57.8699 iterations 8
Cbc0038I Pass  31: suminf.    2.30767 (7) obj. -57.8699 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 70 columns, reduced to 65 rows 39 columns
Cbc0038I Mini branch and bound improved solution from -54.9531 to -58.3247 (0.08 seconds)
Cbc0038I Round again with cutoff of -63.484
Cbc0038I Pass  31: suminf.    2.00982 (5) obj. -63.484 iterations 0
Cbc0038I Pass  32: suminf.    0.90079 (4) obj. -63.484 iterations 14
Cbc0038I Pass  33: suminf.    0.86089 (3) obj. -63.484 iterations 1
Cbc0038I Pass  34: suminf.    1.38226 (4) obj. -63.484 iterations 8
Cbc0038I Pass  35: suminf.    1.38226 (4) obj. -63.484 iterations 0
Cbc0038I Pass  36: suminf.    1.37989 (5) obj. -63.484 iterations 8
Cbc0038I Pass  37: suminf.    1.76913 (5) obj. -63.484 iterations 10
Cbc0038I Pass  38: suminf.    2.50844 (8) obj. -63.484 iterations 22
Cbc0038I Pass  39: suminf.    1.68769 (7) obj. -63.484 iterations 12
Cbc0038I Pass  40: suminf.    1.69090 (4) obj. -63.484 iterations 13
Cbc0038I Pass  41: suminf.    1.69090 (4) obj. -63.484 iterations 2
Cbc0038I Pass  42: suminf.    1.51734 (4) obj. -63.484 iterations 7
Cbc0038I Pass  43: suminf.    1.26223 (4) obj. -63.484 iterations 2
Cbc0038I Pass  44: suminf.    1.24936 (4) obj. -63.484 iterations 1
Cbc0038I Pass  45: suminf.    1.89492 (4) obj. -63.484 iterations 5
Cbc0038I Pass  46: suminf.    1.69090 (4) obj. -63.484 iterations 4
Cbc0038I Pass  47: suminf.    1.51734 (4) obj. -63.484 iterations 7
Cbc0038I Pass  48: suminf.    1.26223 (4) obj. -63.484 iterations 2
Cbc0038I Pass  49: suminf.    1.24936 (4) obj. -63.484 iterations 1
Cbc0038I Pass  50: suminf.    1.89492 (4) obj. -63.484 iterations 5
Cbc0038I Pass  51: suminf.    1.69090 (4) obj. -63.484 iterations 4
Cbc0038I Pass  52: suminf.    1.51734 (4) obj. -63.484 iterations 7
Cbc0038I Pass  53: suminf.    1.26223 (4) obj. -63.484 iterations 2
Cbc0038I Pass  54: suminf.    1.24936 (4) obj. -63.484 iterations 1
Cbc0038I Pass  55: suminf.    1.89492 (4) obj. -63.484 iterations 5
Cbc0038I Pass  56: suminf.    1.69090 (4) obj. -63.484 iterations 4
Cbc0038I Pass  57: suminf.    1.51734 (4) obj. -63.484 iterations 7
Cbc0038I Pass  58: suminf.    1.26223 (4) obj. -63.484 iterations 2
Cbc0038I Pass  59: suminf.    1.24936 (4) obj. -63.484 iterations 1
Cbc0038I Pass  60: suminf.    1.89492 (4) obj. -63.484 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 70 columns, reduced to 41 rows 27 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -58.3247 - took 0.09 seconds
Cbc0012I Integer solution of -58.32475 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 123 rows 70 columns, reduced to 41 rows 25 columns
Cbc0031I 13 added rows had average density of 69.384615
Cbc0013I At root node, 13 cuts changed objective from -84.120368 to -70.028122 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2788 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 669 row cuts average 69.6 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 114 row cuts average 68.4 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0001I Search completed - best objective -58.32474999999999, took 2925 iterations and 14 nodes (0.49 seconds)
Cbc0032I Strong branching done 246 times (3951 iterations), fathomed 2 nodes and fixed 14 variables
Cbc0035I Maximum depth 4, 97 variables fixed on reduced cost
Total time (CPU seconds):       0.47   (Wallclock seconds):       0.49

