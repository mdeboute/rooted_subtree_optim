Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 80 (-19) rows, 43 (-7) columns and 238 (-47) elements
Clp1000I sum of infeasibilities 0.00849711 - average 0.000106214, 9 fixed columns
Coin0506I Presolve 57 (-23) rows, 33 (-10) columns and 173 (-65) elements
Clp0029I End of values pass after 33 iterations
Clp0000I Optimal - objective value 2386.0931
Clp0000I Optimal - objective value 2386.0931
Coin0511I After Postsolve, objective 2386.0931, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5909114 - largest nonzero change 0 ( 0%) - largest zero change 2.4494631e-05
Clp0000I Optimal - objective value 2386.0931
Clp0000I Optimal - objective value 2386.0931
Clp0000I Optimal - objective value 2386.0931
Coin0511I After Postsolve, objective 2386.0931, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2386.093063 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 80 rows, 43 columns (42 integer (42 of which binary)) and 238 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.085%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 31 integers unsatisfied sum - 11.6264
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1539.11 iterations 32
Cbc0038I Solution found of 1539.11
Cbc0038I Relaxing continuous gives 1539.11
Cbc0038I Rounding solution of 1404.84 is better than previous of 1539.11

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 43 columns, reduced to 55 rows 32 columns
Cbc0038I Mini branch and bound improved solution from 1404.84 to 665.57 (0.04 seconds)
Cbc0038I Round again with cutoff of 360.404
Cbc0038I Pass   2: suminf.    1.40572 (6) obj. 360.404 iterations 5
Cbc0038I Pass   3: suminf.    0.75273 (4) obj. 360.404 iterations 11
Cbc0038I Pass   4: suminf.    0.66148 (3) obj. 360.404 iterations 2
Cbc0038I Pass   5: suminf.    1.04091 (4) obj. 360.404 iterations 4
Cbc0038I Pass   6: suminf.    0.86801 (4) obj. 360.404 iterations 5
Cbc0038I Pass   7: suminf.    1.02320 (5) obj. 360.404 iterations 6
Cbc0038I Pass   8: suminf.    1.02320 (5) obj. 360.404 iterations 0
Cbc0038I Pass   9: suminf.    1.50538 (5) obj. 360.404 iterations 7
Cbc0038I Pass  10: suminf.    1.11876 (4) obj. 360.404 iterations 8
Cbc0038I Pass  11: suminf.    0.86005 (3) obj. 360.404 iterations 6
Cbc0038I Pass  12: suminf.    0.35246 (1) obj. 360.404 iterations 7
Cbc0038I Pass  13: suminf.    0.00000 (0) obj. 360.404 iterations 2
Cbc0038I Solution found of 360.404
Cbc0038I Relaxing continuous gives -38.3367
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 43 columns, reduced to 60 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I Round again with cutoff of -507.888
Cbc0038I Pass  14: suminf.    3.16979 (9) obj. -507.888 iterations 3
Cbc0038I Pass  15: suminf.    2.51315 (6) obj. -507.888 iterations 9
Cbc0038I Pass  16: suminf.    1.34520 (4) obj. -507.888 iterations 5
Cbc0038I Pass  17: suminf.    1.21734 (4) obj. -507.888 iterations 2
Cbc0038I Pass  18: suminf.    1.67681 (6) obj. -507.888 iterations 3
Cbc0038I Pass  19: suminf.    1.67681 (6) obj. -507.888 iterations 0
Cbc0038I Pass  20: suminf.    2.67537 (6) obj. -507.888 iterations 5
Cbc0038I Pass  21: suminf.    1.95493 (6) obj. -507.888 iterations 4
Cbc0038I Pass  22: suminf.    1.84731 (6) obj. -507.888 iterations 3
Cbc0038I Pass  23: suminf.    2.37895 (7) obj. -507.888 iterations 10
Cbc0038I Pass  24: suminf.    1.43510 (5) obj. -507.888 iterations 4
Cbc0038I Pass  25: suminf.    1.43510 (5) obj. -507.888 iterations 1
Cbc0038I Pass  26: suminf.    2.11936 (7) obj. -507.888 iterations 8
Cbc0038I Pass  27: suminf.    1.85365 (6) obj. -507.888 iterations 1
Cbc0038I Pass  28: suminf.    1.85365 (6) obj. -507.888 iterations 0
Cbc0038I Pass  29: suminf.    2.43966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  30: suminf.    2.43966 (7) obj. -507.888 iterations 0
Cbc0038I Pass  31: suminf.    2.30966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  32: suminf.    1.85365 (6) obj. -507.888 iterations 2
Cbc0038I Pass  33: suminf.    1.85365 (6) obj. -507.888 iterations 0
Cbc0038I Pass  34: suminf.    2.43966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  35: suminf.    2.43966 (7) obj. -507.888 iterations 0
Cbc0038I Pass  36: suminf.    2.30966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  37: suminf.    1.85365 (6) obj. -507.888 iterations 2
Cbc0038I Pass  38: suminf.    1.85365 (6) obj. -507.888 iterations 0
Cbc0038I Pass  39: suminf.    2.43966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  40: suminf.    2.43966 (7) obj. -507.888 iterations 0
Cbc0038I Pass  41: suminf.    2.30966 (7) obj. -507.888 iterations 3
Cbc0038I Pass  42: suminf.    1.85365 (6) obj. -507.888 iterations 2
Cbc0038I Pass  43: suminf.    1.85365 (6) obj. -507.888 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 80 rows 43 columns, reduced to 60 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -38.3367 - took 0.07 seconds
Cbc0012I Integer solution of -38.3367 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 80 rows 43 columns, reduced to 60 rows 33 columns
Cbc0031I 18 added rows had average density of 34.5
Cbc0013I At root node, 18 cuts changed objective from -2386.0931 to -730.55286 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4771 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1006 row cuts average 42.5 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 43 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 123 row cuts average 38.8 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0001I Search completed - best objective -38.3367, took 4014 iterations and 6 nodes (0.43 seconds)
Cbc0032I Strong branching done 150 times (3063 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 2, 7 variables fixed on reduced cost
Total time (CPU seconds):       0.42   (Wallclock seconds):       0.44

