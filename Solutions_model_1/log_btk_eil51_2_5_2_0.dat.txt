Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 91 (-14) rows, 51 (-2) columns and 276 (-27) elements
Clp1000I sum of infeasibilities 4.45923e-05 - average 4.90025e-07, 1 fixed columns
Coin0506I Presolve 89 (-2) rows, 50 (-1) columns and 270 (-6) elements
Clp0029I End of values pass after 50 iterations
Clp0000I Optimal - objective value 34.824885
Clp0000I Optimal - objective value 34.824885
Coin0511I After Postsolve, objective 34.824885, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 34.824885
Clp0000I Optimal - objective value 34.824885
Clp0000I Optimal - objective value 34.824885
Coin0511I After Postsolve, objective 34.824885, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 34.82488462 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 91 rows, 51 columns (50 integer (50 of which binary)) and 276 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.694%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 41 integers unsatisfied sum - 8.84443
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 3.9327 iterations 44
Cbc0038I Solution found of 3.9327
Cbc0038I Relaxing continuous gives 3.9327
Cbc0038I Rounding solution of 1.33688 is better than previous of 3.9327

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 51 columns, reduced to 72 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 1.33688 to -6.47378 (0.06 seconds)
Cbc0038I Round again with cutoff of -9.30898
Cbc0038I Pass   2: suminf.    1.77101 (10) obj. -9.30898 iterations 17
Cbc0038I Pass   3: suminf.    1.54658 (5) obj. -9.30898 iterations 16
Cbc0038I Pass   4: suminf.    1.54658 (5) obj. -9.30898 iterations 1
Cbc0038I Pass   5: suminf.    2.53158 (7) obj. -9.30898 iterations 7
Cbc0038I Pass   6: suminf.    1.57965 (6) obj. -9.30898 iterations 6
Cbc0038I Pass   7: suminf.    3.18316 (15) obj. -9.30898 iterations 18
Cbc0038I Pass   8: suminf.    2.25194 (6) obj. -9.30898 iterations 7
Cbc0038I Pass   9: suminf.    2.20962 (7) obj. -9.30898 iterations 11
Cbc0038I Pass  10: suminf.    2.03157 (6) obj. -9.30898 iterations 16
Cbc0038I Pass  11: suminf.    1.58852 (5) obj. -9.30898 iterations 7
Cbc0038I Pass  12: suminf.    2.33965 (7) obj. -9.30898 iterations 9
Cbc0038I Pass  13: suminf.    1.55434 (5) obj. -9.30898 iterations 6
Cbc0038I Pass  14: suminf.    1.20972 (4) obj. -9.30898 iterations 1
Cbc0038I Pass  15: suminf.    1.63122 (5) obj. -9.30898 iterations 5
Cbc0038I Pass  16: suminf.    1.24085 (5) obj. -9.30898 iterations 6
Cbc0038I Pass  17: suminf.    1.22146 (4) obj. -9.30898 iterations 1
Cbc0038I Pass  18: suminf.    1.30969 (5) obj. -9.30898 iterations 7
Cbc0038I Pass  19: suminf.    1.21264 (4) obj. -9.30898 iterations 4
Cbc0038I Pass  20: suminf.    1.12317 (5) obj. -9.30898 iterations 4
Cbc0038I Pass  21: suminf.    1.10011 (4) obj. -9.30898 iterations 1
Cbc0038I Pass  22: suminf.    2.48473 (8) obj. -9.30898 iterations 13
Cbc0038I Pass  23: suminf.    1.09839 (5) obj. -9.30898 iterations 4
Cbc0038I Pass  24: suminf.    1.09839 (5) obj. -9.30898 iterations 0
Cbc0038I Pass  25: suminf.    2.50762 (7) obj. -9.30898 iterations 14
Cbc0038I Pass  26: suminf.    2.25863 (6) obj. -9.30898 iterations 7
Cbc0038I Pass  27: suminf.    1.72772 (9) obj. -9.30898 iterations 6
Cbc0038I Pass  28: suminf.    1.72772 (9) obj. -9.30898 iterations 0
Cbc0038I Pass  29: suminf.    1.93176 (7) obj. -9.30898 iterations 7
Cbc0038I Pass  30: suminf.    1.92020 (7) obj. -9.30898 iterations 4
Cbc0038I Pass  31: suminf.    2.10395 (7) obj. -9.30898 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 91 rows 51 columns, reduced to 76 rows 44 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -6.47378 - took 0.08 seconds
Cbc0012I Integer solution of -6.473779 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0031I 32 added rows had average density of 30.65625
Cbc0013I At root node, 32 cuts changed objective from -34.824885 to -25.913106 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 11415 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.062 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1851 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 95 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 124 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0010I After 2 nodes, 3 on tree, -6.473779 best solution, best possible -25.913106 (0.69 seconds)
Cbc0038I Full problem 91 rows 51 columns, reduced to 4 rows 6 columns
Cbc0001I Search completed - best objective -6.473779, took 9572 iterations and 74 nodes (0.87 seconds)
Cbc0032I Strong branching done 792 times (12335 iterations), fathomed 10 nodes and fixed 46 variables
Cbc0035I Maximum depth 17, 98 variables fixed on reduced cost
Total time (CPU seconds):       0.85   (Wallclock seconds):       0.88

