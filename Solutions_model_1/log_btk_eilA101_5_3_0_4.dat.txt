Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 148 (-57) rows, 81 (-22) columns and 452 (-151) elements
Clp1000I sum of infeasibilities 1.3716e-08 - average 9.26758e-11, 76 fixed columns
Coin0506I Presolve 5 (-143) rows, 5 (-76) columns and 14 (-438) elements
Clp0029I End of values pass after 5 iterations
Clp0000I Optimal - objective value 27303.142
Clp0000I Optimal - objective value 27303.142
Coin0511I After Postsolve, objective 27303.142, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.27752285 - largest nonzero change 0 ( 0%) - largest zero change 2.8770255e-05
Clp0000I Optimal - objective value 27303.142
Clp0000I Optimal - objective value 27303.142
Clp0000I Optimal - objective value 27303.142
Coin0511I After Postsolve, objective 27303.142, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 27303.14209 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 148 rows, 81 columns (80 integer (80 of which binary)) and 452 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.106%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 3 integers unsatisfied sum - 1.14927
Cbc0038I Pass   1: suminf.    0.27778 (1) obj. -26274.5 iterations 28
Cbc0038I Solution found of -22081.6
Cbc0038I Relaxing continuous gives -22081.6
Cbc0038I Rounding solution of -22354.7 is better than previous of -22081.6

Cbc0038I Before mini branch and bound, 76 integers at bound fixed and 0 continuous
Cbc0038I Full problem 148 rows 81 columns, reduced to 4 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -22354.7 to -25018.5 (0.01 seconds)
Cbc0038I Round again with cutoff of -25247
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.34483 (1) obj. -26901.2 iterations 11
Cbc0038I Pass   3: suminf.    0.07950 (1) obj. -25247 iterations 1
Cbc0038I Pass   4: suminf.    0.71678 (3) obj. -25247 iterations 14
Cbc0038I Pass   5: suminf.    0.49061 (2) obj. -25247 iterations 13
Cbc0038I Pass   6: suminf.    0.37931 (1) obj. -26810.3 iterations 2
Cbc0038I Pass   7: suminf.    0.07668 (1) obj. -25247 iterations 1
Cbc0038I Pass   8: suminf.    1.03343 (5) obj. -25247 iterations 13
Cbc0038I Pass   9: suminf.    0.09066 (2) obj. -25247 iterations 14
Cbc0038I Pass  10: suminf.    0.75943 (3) obj. -25247 iterations 15
Cbc0038I Pass  11: suminf.    0.33588 (2) obj. -25247 iterations 10
Cbc0038I Pass  12: suminf.    0.39374 (2) obj. -25247 iterations 3
Cbc0038I Pass  13: suminf.    0.39374 (2) obj. -25247 iterations 3
Cbc0038I Pass  14: suminf.    0.10345 (1) obj. -26782.2 iterations 6
Cbc0038I Pass  15: suminf.    0.36222 (1) obj. -25247 iterations 2
Cbc0038I Pass  16: suminf.    1.65662 (6) obj. -25247 iterations 16
Cbc0038I Pass  17: suminf.    0.86842 (2) obj. -26126.9 iterations 14
Cbc0038I Pass  18: suminf.    0.16758 (1) obj. -25247 iterations 2
Cbc0038I Pass  19: suminf.    0.44828 (1) obj. -25981.3 iterations 3
Cbc0038I Pass  20: suminf.    0.29619 (1) obj. -25247 iterations 1
Cbc0038I Pass  21: suminf.    0.67260 (3) obj. -25247 iterations 9
Cbc0038I Pass  22: suminf.    0.03448 (1) obj. -25639.1 iterations 7
Cbc0038I Pass  23: suminf.    0.17213 (1) obj. -25247 iterations 2
Cbc0038I Pass  24: suminf.    0.54315 (4) obj. -25247 iterations 14
Cbc0038I Pass  25: suminf.    0.13318 (1) obj. -25247 iterations 12
Cbc0038I Pass  26: suminf.    0.33824 (2) obj. -25373.3 iterations 3
Cbc0038I Pass  27: suminf.    0.26718 (1) obj. -25247 iterations 2
Cbc0038I Pass  28: suminf.    0.45707 (5) obj. -25247 iterations 11
Cbc0038I Pass  29: suminf.    0.26718 (1) obj. -25247 iterations 9
Cbc0038I Pass  30: suminf.    0.44768 (2) obj. -25247 iterations 10
Cbc0038I Pass  31: suminf.    0.14015 (1) obj. -25247 iterations 10
Cbc0038I Rounding solution of -25839.1 is better than previous of -25018.5

Cbc0038I Before mini branch and bound, 55 integers at bound fixed and 0 continuous
Cbc0038I Full problem 148 rows 81 columns, reduced to 15 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -25839.1 to -26288 (0.03 seconds)
Cbc0038I Round again with cutoff of -26491.1
Cbc0038I Reduced cost fixing fixed 23 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.34483 (1) obj. -26901.2 iterations 0
Cbc0038I Pass  32: suminf.    0.48757 (1) obj. -26491.1 iterations 1
Cbc0038I Pass  33: suminf.    1.24192 (3) obj. -26491.1 iterations 15
Cbc0038I Pass  34: suminf.    0.36253 (1) obj. -26491.1 iterations 11
Cbc0038I Pass  35: suminf.    0.17241 (1) obj. -26875.2 iterations 3
Cbc0038I Pass  36: suminf.    0.30611 (1) obj. -26491.1 iterations 1
Cbc0038I Pass  37: suminf.    1.63130 (5) obj. -26491.1 iterations 18
Cbc0038I Pass  38: suminf.    0.30611 (1) obj. -26491.1 iterations 13
Cbc0038I Pass  39: suminf.    1.57071 (4) obj. -26491.1 iterations 12
Cbc0038I Pass  40: suminf.    1.48090 (5) obj. -26491.1 iterations 7
Cbc0038I Pass  41: suminf.    1.30526 (5) obj. -26491.1 iterations 14
Cbc0038I Pass  42: suminf.    1.30526 (5) obj. -26491.1 iterations 0
Cbc0038I Pass  43: suminf.    1.02407 (4) obj. -26491.1 iterations 10
Cbc0038I Pass  44: suminf.    0.30611 (1) obj. -26491.1 iterations 2
Cbc0038I Pass  45: suminf.    0.17241 (1) obj. -26875.2 iterations 1
Cbc0038I Pass  46: suminf.    0.46842 (2) obj. -26535.4 iterations 9
Cbc0038I Pass  47: suminf.    0.20640 (2) obj. -26491.1 iterations 14
Cbc0038I Pass  48: suminf.    0.49567 (2) obj. -26585.2 iterations 10
Cbc0038I Pass  49: suminf.    0.24127 (3) obj. -26491.1 iterations 23
Cbc0038I Pass  50: suminf.    0.11579 (3) obj. -26491.1 iterations 10
Cbc0038I Pass  51: suminf.    0.99385 (5) obj. -26491.1 iterations 14
Cbc0038I Pass  52: suminf.    0.99385 (5) obj. -26491.1 iterations 0
Cbc0038I Pass  53: suminf.    1.03765 (4) obj. -26491.1 iterations 11
Cbc0038I Pass  54: suminf.    0.49039 (1) obj. -26491.1 iterations 2
Cbc0038I Pass  55: suminf.    0.37931 (1) obj. -26810.3 iterations 1
Cbc0038I Pass  56: suminf.    0.61118 (3) obj. -26491.1 iterations 13
Cbc0038I Pass  57: suminf.    0.46959 (2) obj. -26491.1 iterations 3
Cbc0038I Pass  58: suminf.    0.99490 (3) obj. -26491.1 iterations 5
Cbc0038I Pass  59: suminf.    0.87495 (3) obj. -26491.1 iterations 6
Cbc0038I Pass  60: suminf.    0.46959 (2) obj. -26491.1 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 60 integers at bound fixed and 0 continuous
Cbc0038I Full problem 148 rows 81 columns, reduced to 13 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -26288 to -26808.9 (0.04 seconds)
Cbc0038I Round again with cutoff of -26957.2
Cbc0038I Reduced cost fixing fixed 40 variables on major pass 4
Cbc0038I Pass  60: suminf.    0.38808 (2) obj. -26957.2 iterations 2
Cbc0038I Pass  61: suminf.    1.27989 (5) obj. -26957.2 iterations 13
Cbc0038I Pass  62: suminf.    0.38808 (2) obj. -26957.2 iterations 9
Cbc0038I Pass  63: suminf.    0.38808 (2) obj. -26957.2 iterations 6
Cbc0038I Pass  64: suminf.    0.62565 (4) obj. -26957.2 iterations 17
Cbc0038I Pass  65: suminf.    0.49292 (2) obj. -26957.2 iterations 9
Cbc0038I Pass  66: suminf.    0.92720 (5) obj. -26957.2 iterations 10
Cbc0038I Pass  67: suminf.    1.64905 (4) obj. -26957.2 iterations 16
Cbc0038I Pass  68: suminf.    0.74293 (3) obj. -26957.2 iterations 7
Cbc0038I Pass  69: suminf.    0.49292 (2) obj. -26957.2 iterations 8
Cbc0038I Pass  70: suminf.    2.50298 (10) obj. -26957.2 iterations 16
Cbc0038I Pass  71: suminf.    0.59086 (4) obj. -26957.2 iterations 6
Cbc0038I Pass  72: suminf.    0.58717 (4) obj. -26957.2 iterations 7
Cbc0038I Pass  73: suminf.    1.92466 (7) obj. -26957.2 iterations 17
Cbc0038I Pass  74: suminf.    1.92466 (7) obj. -26957.2 iterations 0
Cbc0038I Pass  75: suminf.    2.00360 (7) obj. -26957.2 iterations 13
Cbc0038I Pass  76: suminf.    1.44076 (5) obj. -26957.2 iterations 13
Cbc0038I Pass  77: suminf.    0.54650 (3) obj. -26957.2 iterations 7
Cbc0038I Pass  78: suminf.    0.92534 (3) obj. -26957.2 iterations 11
Cbc0038I Pass  79: suminf.    0.63436 (2) obj. -26969.6 iterations 10
Cbc0038I Pass  80: suminf.    0.66857 (2) obj. -26957.2 iterations 10
Cbc0038I Pass  81: suminf.    0.82617 (5) obj. -26957.2 iterations 16
Cbc0038I Pass  82: suminf.    0.73847 (4) obj. -26957.2 iterations 9
Cbc0038I Pass  83: suminf.    1.92466 (7) obj. -26957.2 iterations 18
Cbc0038I Pass  84: suminf.    1.92466 (7) obj. -26957.2 iterations 0
Cbc0038I Pass  85: suminf.    2.00360 (7) obj. -26957.2 iterations 13
Cbc0038I Pass  86: suminf.    0.67751 (8) obj. -26957.2 iterations 8
Cbc0038I Pass  87: suminf.    0.49292 (2) obj. -26957.2 iterations 6
Cbc0038I Pass  88: suminf.    0.92720 (5) obj. -26957.2 iterations 11
Cbc0038I Pass  89: suminf.    1.06936 (4) obj. -26957.2 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 63 integers at bound fixed and 0 continuous
Cbc0038I Full problem 148 rows 81 columns, reduced to 13 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -26808.9 - took 0.04 seconds
Cbc0012I Integer solution of -26808.905 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 148 rows 81 columns, reduced to 4 rows 6 columns
Cbc0031I 9 added rows had average density of 14.666667
Cbc0013I At root node, 9 cuts changed objective from -27303.142 to -26936.09 in 13 passes
Cbc0014I Cut generator 0 (Probing) - 15 row cuts average 2.3 elements, 2 column cuts (2 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 7.6 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 20 row cuts average 16.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 54 row cuts average 18.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 4 row cuts average 80.0 elements, 0 column cuts (0 active)  in 0.095 seconds - new frequency is -100
Cbc0001I Search completed - best objective -26808.905, took 197 iterations and 4 nodes (0.27 seconds)
Cbc0032I Strong branching done 28 times (130 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 1, 46 variables fixed on reduced cost
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.27

