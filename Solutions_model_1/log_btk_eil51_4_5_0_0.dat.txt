Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 83 (-22) rows, 49 (-4) columns and 257 (-46) elements
Clp1000I sum of infeasibilities 1.2216e-05 - average 1.47181e-07, 9 fixed columns
Coin0506I Presolve 64 (-19) rows, 39 (-10) columns and 199 (-58) elements
Clp0029I End of values pass after 39 iterations
Clp0000I Optimal - objective value 38.53745
Clp0000I Optimal - objective value 38.53745
Coin0511I After Postsolve, objective 38.53745, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 38.53745
Clp0000I Optimal - objective value 38.53745
Clp0000I Optimal - objective value 38.53745
Coin0511I After Postsolve, objective 38.53745, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 38.5374504 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 83 rows, 49 columns (48 integer (48 of which binary)) and 257 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.670%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 28 integers unsatisfied sum - 9.50221
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 13.87 iterations 30
Cbc0038I Solution found of 13.87
Cbc0038I Relaxing continuous gives 13.87
Cbc0038I Rounding solution of 0.474143 is better than previous of 13.87

Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 49 columns, reduced to 47 rows 29 columns
Cbc0038I Mini branch and bound improved solution from 0.474143 to -9.38083 (0.04 seconds)
Cbc0038I Round again with cutoff of -12.2966
Cbc0038I Pass   2: suminf.    2.32958 (6) obj. -12.2966 iterations 6
Cbc0038I Pass   3: suminf.    2.32958 (6) obj. -12.2966 iterations 1
Cbc0038I Pass   4: suminf.    1.43568 (5) obj. -12.2966 iterations 6
Cbc0038I Pass   5: suminf.    1.08830 (4) obj. -12.2966 iterations 1
Cbc0038I Pass   6: suminf.    0.81312 (3) obj. -12.2966 iterations 2
Cbc0038I Pass   7: suminf.    1.43568 (5) obj. -12.2966 iterations 3
Cbc0038I Pass   8: suminf.    1.87875 (6) obj. -12.2966 iterations 8
Cbc0038I Pass   9: suminf.    1.87875 (6) obj. -12.2966 iterations 3
Cbc0038I Pass  10: suminf.    2.01197 (6) obj. -12.2966 iterations 7
Cbc0038I Pass  11: suminf.    2.01197 (6) obj. -12.2966 iterations 1
Cbc0038I Pass  12: suminf.    1.22214 (6) obj. -12.2966 iterations 7
Cbc0038I Pass  13: suminf.    1.22214 (6) obj. -12.2966 iterations 2
Cbc0038I Pass  14: suminf.    2.01197 (6) obj. -12.2966 iterations 8
Cbc0038I Pass  15: suminf.    1.03319 (9) obj. -12.2966 iterations 13
Cbc0038I Pass  16: suminf.    0.76385 (6) obj. -12.2966 iterations 8
Cbc0038I Pass  17: suminf.    0.73859 (6) obj. -12.2966 iterations 6
Cbc0038I Pass  18: suminf.    0.53500 (4) obj. -12.2966 iterations 2
Cbc0038I Pass  19: suminf.    0.76083 (4) obj. -12.2966 iterations 4
Cbc0038I Pass  20: suminf.    0.76083 (4) obj. -12.2966 iterations 0
Cbc0038I Pass  21: suminf.    0.54554 (5) obj. -12.2966 iterations 4
Cbc0038I Pass  22: suminf.    0.65384 (3) obj. -12.2966 iterations 13
Cbc0038I Pass  23: suminf.    0.65384 (3) obj. -12.2966 iterations 2
Cbc0038I Pass  24: suminf.    0.71790 (4) obj. -12.2966 iterations 6
Cbc0038I Pass  25: suminf.    0.46531 (3) obj. -12.2966 iterations 1
Cbc0038I Pass  26: suminf.    0.18965 (1) obj. -12.2966 iterations 3
Cbc0038I Pass  27: suminf.    1.77391 (9) obj. -12.2966 iterations 15
Cbc0038I Pass  28: suminf.    1.51360 (6) obj. -12.2966 iterations 4
Cbc0038I Pass  29: suminf.    1.78261 (7) obj. -12.2966 iterations 9
Cbc0038I Pass  30: suminf.    1.78261 (7) obj. -12.2966 iterations 0
Cbc0038I Pass  31: suminf.    2.46202 (6) obj. -12.2966 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 49 columns, reduced to 54 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -9.38083 - took 0.06 seconds
Cbc0012I Integer solution of -9.38083 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 83 rows 49 columns, reduced to 47 rows 29 columns
Cbc0031I 18 added rows had average density of 33.888889
Cbc0013I At root node, 18 cuts changed objective from -38.53745 to -24.16928 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4877 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1272 row cuts average 48.8 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 86 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 144 row cuts average 48.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0001I Search completed - best objective -9.380830000000003, took 5092 iterations and 26 nodes (0.54 seconds)
Cbc0032I Strong branching done 358 times (5689 iterations), fathomed 1 nodes and fixed 17 variables
Cbc0035I Maximum depth 9, 71 variables fixed on reduced cost
Total time (CPU seconds):       0.52   (Wallclock seconds):       0.54

