Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 45 (-20) rows, 26 (-7) columns and 135 (-48) elements
Clp1000I sum of infeasibilities 3.04772e-05 - average 6.77271e-07, 3 fixed columns
Coin0506I Presolve 39 (-6) rows, 23 (-3) columns and 117 (-18) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 85.685588
Clp0000I Optimal - objective value 85.685588
Coin0511I After Postsolve, objective 85.685588, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 85.685588
Clp0000I Optimal - objective value 85.685588
Clp0000I Optimal - objective value 85.685588
Coin0511I After Postsolve, objective 85.685588, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 85.68558834 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 26 columns (25 integer (25 of which binary)) and 140 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.588%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 11 integers unsatisfied sum - 3.78656
Cbc0038I Pass   1: suminf.    0.13333 (1) obj. -58.6383 iterations 11
Cbc0038I Solution found of -14.6539
Cbc0038I Relaxing continuous gives -14.6539
Cbc0038I Rounding solution of -29.3334 is better than previous of -14.6539

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 26 columns, reduced to 21 rows 12 columns
Cbc0038I Mini branch and bound improved solution from -29.3334 to -43.2103 (0.01 seconds)
Cbc0038I Round again with cutoff of -46.6187
Cbc0038I Pass   2: suminf.    0.13333 (1) obj. -58.6383 iterations 0
Cbc0038I Pass   3: suminf.    0.37017 (1) obj. -46.6187 iterations 1
Cbc0038I Pass   4: suminf.    0.87427 (5) obj. -46.6187 iterations 7
Cbc0038I Pass   5: suminf.    0.87427 (5) obj. -46.6187 iterations 1
Cbc0038I Pass   6: suminf.    0.74565 (3) obj. -46.6187 iterations 6
Cbc0038I Pass   7: suminf.    0.42196 (2) obj. -46.6187 iterations 2
Cbc0038I Pass   8: suminf.    0.78030 (2) obj. -46.6187 iterations 5
Cbc0038I Pass   9: suminf.    0.19160 (2) obj. -46.6187 iterations 4
Cbc0038I Pass  10: suminf.    0.29938 (3) obj. -46.6187 iterations 6
Cbc0038I Pass  11: suminf.    0.29619 (2) obj. -46.6187 iterations 1
Cbc0038I Pass  12: suminf.    0.13333 (1) obj. -58.6383 iterations 3
Cbc0038I Pass  13: suminf.    0.37017 (1) obj. -46.6187 iterations 1
Cbc0038I Pass  14: suminf.    1.33161 (3) obj. -46.6187 iterations 6
Cbc0038I Pass  15: suminf.    1.02476 (3) obj. -46.6187 iterations 6
Cbc0038I Pass  16: suminf.    0.62353 (2) obj. -46.6187 iterations 1
Cbc0038I Pass  17: suminf.    0.46909 (2) obj. -46.6187 iterations 1
Cbc0038I Pass  18: suminf.    0.26667 (1) obj. -46.6407 iterations 4
Cbc0038I Pass  19: suminf.    0.66336 (3) obj. -46.6187 iterations 4
Cbc0038I Pass  20: suminf.    0.62353 (2) obj. -51.4343 iterations 3
Cbc0038I Pass  21: suminf.    1.02142 (4) obj. -46.6187 iterations 7
Cbc0038I Pass  22: suminf.    0.43249 (2) obj. -46.6187 iterations 5
Cbc0038I Pass  23: suminf.    0.20000 (1) obj. -46.6187 iterations 2
Cbc0038I Pass  24: suminf.    0.16120 (1) obj. -46.6187 iterations 1
Cbc0038I Pass  25: suminf.    1.22805 (3) obj. -46.6187 iterations 10
Cbc0038I Pass  26: suminf.    0.58080 (2) obj. -46.6187 iterations 6
Cbc0038I Pass  27: suminf.    0.43333 (1) obj. -46.6187 iterations 1
Cbc0038I Pass  28: suminf.    0.43264 (1) obj. -46.6187 iterations 1
Cbc0038I Pass  29: suminf.    1.25446 (7) obj. -46.6187 iterations 11
Cbc0038I Pass  30: suminf.    0.89420 (5) obj. -46.6187 iterations 5
Cbc0038I Pass  31: suminf.    0.32513 (2) obj. -46.6187 iterations 4
Cbc0038I Rounding solution of -48.4513 is better than previous of -43.2103

Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 26 columns, reduced to 38 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -48.4513 to -50.2846 (0.03 seconds)
Cbc0038I Round again with cutoff of -55.6866
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.13333 (1) obj. -58.6383 iterations 0
Cbc0038I Pass  32: suminf.    0.19149 (1) obj. -55.6866 iterations 1
Cbc0038I Pass  33: suminf.    0.30380 (2) obj. -57.9084 iterations 4
Cbc0038I Pass  34: suminf.    1.71861 (5) obj. -55.6866 iterations 15
Cbc0038I Pass  35: suminf.    0.75429 (4) obj. -55.6866 iterations 3
Cbc0038I Pass  36: suminf.    0.53319 (3) obj. -55.6866 iterations 1
Cbc0038I Pass  37: suminf.    0.90620 (3) obj. -55.6866 iterations 7
Cbc0038I Pass  38: suminf.    0.64084 (3) obj. -55.6866 iterations 4
Cbc0038I Pass  39: suminf.    0.52944 (2) obj. -55.6866 iterations 3
Cbc0038I Pass  40: suminf.    0.47483 (3) obj. -55.6866 iterations 2
Cbc0038I Pass  41: suminf.    0.42473 (2) obj. -55.6866 iterations 1
Cbc0038I Pass  42: suminf.    0.52944 (2) obj. -55.6866 iterations 2
Cbc0038I Pass  43: suminf.    1.85084 (5) obj. -55.6866 iterations 6
Cbc0038I Pass  44: suminf.    1.15708 (4) obj. -55.6866 iterations 3
Cbc0038I Pass  45: suminf.    0.94274 (3) obj. -55.6866 iterations 4
Cbc0038I Pass  46: suminf.    0.78710 (4) obj. -55.6866 iterations 1
Cbc0038I Pass  47: suminf.    1.70270 (8) obj. -55.6866 iterations 6
Cbc0038I Pass  48: suminf.    1.03766 (3) obj. -55.6866 iterations 3
Cbc0038I Pass  49: suminf.    0.72965 (3) obj. -55.6866 iterations 1
Cbc0038I Pass  50: suminf.    0.94274 (3) obj. -55.6866 iterations 3
Cbc0038I Pass  51: suminf.    0.78710 (4) obj. -55.6866 iterations 1
Cbc0038I Pass  52: suminf.    1.70270 (8) obj. -55.6866 iterations 5
Cbc0038I Pass  53: suminf.    1.03766 (3) obj. -55.6866 iterations 3
Cbc0038I Pass  54: suminf.    0.72965 (3) obj. -55.6866 iterations 1
Cbc0038I Pass  55: suminf.    0.94274 (3) obj. -55.6866 iterations 3
Cbc0038I Pass  56: suminf.    0.78710 (4) obj. -55.6866 iterations 1
Cbc0038I Pass  57: suminf.    1.70270 (8) obj. -55.6866 iterations 5
Cbc0038I Pass  58: suminf.    1.03766 (3) obj. -55.6866 iterations 3
Cbc0038I Pass  59: suminf.    0.72965 (3) obj. -55.6866 iterations 1
Cbc0038I Pass  60: suminf.    0.94274 (3) obj. -55.6866 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 26 columns, reduced to 26 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -50.2846 - took 0.03 seconds
Cbc0012I Integer solution of -50.284623 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 43 rows 26 columns, reduced to 25 rows 14 columns
Cbc0031I 7 added rows had average density of 18.714286
Cbc0013I At root node, 7 cuts changed objective from -77.293951 to -61.598617 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 316 row cuts average 3.2 elements, 3 column cuts (3 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 371 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 12 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0012I Integer solution of -50.351303 found by rounding after 1129 iterations and 1 nodes (0.13 seconds)
Cbc0012I Integer solution of -51.661603 found by DiveCoefficient after 1539 iterations and 5 nodes (0.16 seconds)
Cbc0001I Search completed - best objective -51.661603, took 1696 iterations and 12 nodes (0.17 seconds)
Cbc0032I Strong branching done 88 times (500 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 4, 17 variables fixed on reduced cost
Total time (CPU seconds):       0.16   (Wallclock seconds):       0.17

