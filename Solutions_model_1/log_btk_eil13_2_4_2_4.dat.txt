Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 19 (-10) rows, 13 (-2) columns and 56 (-19) elements
Clp1000I sum of infeasibilities 0 - average 0, 1 fixed columns
Coin0506I Presolve 18 (-1) rows, 12 (-1) columns and 52 (-4) elements
Clp0029I End of values pass after 12 iterations
Clp0000I Optimal - objective value 58.683051
Clp0000I Optimal - objective value 58.683051
Coin0511I After Postsolve, objective 58.683051, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 58.683051
Clp0000I Optimal - objective value 58.683051
Clp0000I Optimal - objective value 58.683051
Coin0511I After Postsolve, objective 58.683051, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 58.68305052 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 19 rows, 13 columns (12 integer (12 of which binary)) and 56 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.553%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 7 integers unsatisfied sum - 2.55435
Cbc0038I Pass   1: suminf.    0.05882 (1) obj. -35.0644 iterations 6
Cbc0038I Solution found of -15.0811
Cbc0038I Relaxing continuous gives -15.0811
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 19 rows 13 columns, reduced to 12 rows 8 columns
Cbc0038I Mini branch and bound improved solution from -15.0811 to -25.7772 (0.00 seconds)
Cbc0038I Round again with cutoff of -28.906
Cbc0038I Pass   2: suminf.    0.05882 (1) obj. -35.0644 iterations 0
Cbc0038I Pass   3: suminf.    0.49073 (1) obj. -28.906 iterations 2
Cbc0038I Pass   4: suminf.    0.15789 (1) obj. -29.6995 iterations 2
Cbc0038I Pass   5: suminf.    0.16524 (3) obj. -28.906 iterations 2
Cbc0038I Pass   6: suminf.    0.15789 (1) obj. -28.906 iterations 2
Cbc0038I Pass   7: suminf.    0.05882 (1) obj. -28.906 iterations 2
Cbc0038I Pass   8: suminf.    1.11479 (3) obj. -28.906 iterations 5
Cbc0038I Pass   9: suminf.    0.38858 (1) obj. -28.906 iterations 5
Cbc0038I Pass  10: suminf.    0.26605 (1) obj. -28.906 iterations 4
Cbc0038I Pass  11: suminf.    0.29418 (3) obj. -28.906 iterations 4
Cbc0038I Pass  12: suminf.    0.20018 (1) obj. -28.906 iterations 2
Cbc0038I Pass  13: suminf.    0.21053 (1) obj. -29.1975 iterations 1
Cbc0038I Pass  14: suminf.    0.50672 (2) obj. -28.906 iterations 4
Cbc0038I Pass  15: suminf.    0.38858 (1) obj. -28.906 iterations 3
Cbc0038I Pass  16: suminf.    0.92035 (4) obj. -28.906 iterations 2
Cbc0038I Pass  17: suminf.    0.83249 (3) obj. -28.906 iterations 2
Cbc0038I Pass  18: suminf.    0.35206 (3) obj. -28.906 iterations 3
Cbc0038I Pass  19: suminf.    0.26605 (1) obj. -28.906 iterations 1
Cbc0038I Pass  20: suminf.    0.38858 (1) obj. -28.906 iterations 1
Cbc0038I Pass  21: suminf.    0.94291 (4) obj. -28.906 iterations 3
Cbc0038I Pass  22: suminf.    0.49073 (1) obj. -28.906 iterations 2
Cbc0038I Pass  23: suminf.    0.15789 (1) obj. -29.6995 iterations 2
Cbc0038I Pass  24: suminf.    0.95959 (3) obj. -28.906 iterations 6
Cbc0038I Pass  25: suminf.    0.05882 (1) obj. -35.0644 iterations 2
Cbc0038I Pass  26: suminf.    0.98579 (3) obj. -28.906 iterations 3
Cbc0038I Pass  27: suminf.    0.05882 (1) obj. -35.0644 iterations 2
Cbc0038I Pass  28: suminf.    0.05882 (1) obj. -35.0644 iterations 0
Cbc0038I Pass  29: suminf.    0.05882 (1) obj. -35.0644 iterations 2
Cbc0038I Pass  30: suminf.    0.45854 (1) obj. -28.906 iterations 5
Cbc0038I Pass  31: suminf.    0.27496 (2) obj. -28.906 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 19 rows 13 columns, reduced to 19 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -25.7772 - took 0.02 seconds
Cbc0012I Integer solution of -25.7772 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 19 rows 13 columns, reduced to 12 rows 8 columns
Cbc0031I 5 added rows had average density of 7.4
Cbc0013I At root node, 26 cuts changed objective from -57.064584 to -25.61494 in 41 passes
Cbc0014I Cut generator 0 (Probing) - 80 row cuts average 3.0 elements, 5 column cuts (5 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 224 row cuts average 8.7 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 16 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 133 row cuts average 7.5 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 111 row cuts average 7.1 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 12 row cuts average 11.0 elements, 0 column cuts (0 active)  in 0.328 seconds - new frequency is -100
Cbc0001I Search completed - best objective -25.77720000000001, took 395 iterations and 0 nodes (0.61 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Total time (CPU seconds):       0.39   (Wallclock seconds):       0.61

