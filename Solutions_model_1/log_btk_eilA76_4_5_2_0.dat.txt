Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 121 (-34) rows, 71 (-7) columns and 376 (-77) elements
Clp1000I sum of infeasibilities 8.28071e-05 - average 6.84356e-07, 11 fixed columns
Coin0506I Presolve 100 (-21) rows, 60 (-11) columns and 312 (-64) elements
Clp0029I End of values pass after 60 iterations
Clp0014I Perturbing problem by 0.001% of 0.3844073 - largest nonzero change 0 ( 0%) - largest zero change 2.564405e-05
Clp0000I Optimal - objective value 76.347178
Clp0000I Optimal - objective value 76.347178
Coin0511I After Postsolve, objective 76.347178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 76.347178
Clp0000I Optimal - objective value 76.347178
Clp0000I Optimal - objective value 76.347178
Coin0511I After Postsolve, objective 76.347178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 76.34717775 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 120 rows, 71 columns (70 integer (70 of which binary)) and 376 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.202%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 7.24772
Cbc0038I Solution found of -5.86841
Cbc0038I Relaxing continuous gives -13.9151
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 120 rows 71 columns, reduced to 61 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -13.9151 to -41.894 (0.05 seconds)
Cbc0038I Round again with cutoff of -45.3394
Cbc0038I Pass   1: suminf.    3.11157 (21) obj. -45.3394 iterations 42
Cbc0038I Pass   2: suminf.    0.55094 (6) obj. -45.3394 iterations 24
Cbc0038I Pass   3: suminf.    0.44971 (2) obj. -45.3394 iterations 2
Cbc0038I Pass   4: suminf.    0.86645 (4) obj. -45.3394 iterations 4
Cbc0038I Pass   5: suminf.    1.01679 (4) obj. -45.3394 iterations 2
Cbc0038I Pass   6: suminf.    0.99409 (4) obj. -45.3394 iterations 1
Cbc0038I Pass   7: suminf.    0.61066 (5) obj. -45.3394 iterations 4
Cbc0038I Pass   8: suminf.    0.52263 (4) obj. -45.3394 iterations 2
Cbc0038I Pass   9: suminf.    0.85917 (3) obj. -45.3394 iterations 4
Cbc0038I Pass  10: suminf.    0.67888 (3) obj. -45.3394 iterations 2
Cbc0038I Pass  11: suminf.    1.08727 (5) obj. -45.3394 iterations 4
Cbc0038I Pass  12: suminf.    0.99573 (4) obj. -45.3394 iterations 2
Cbc0038I Pass  13: suminf.    1.13311 (3) obj. -45.3394 iterations 4
Cbc0038I Pass  14: suminf.    1.33339 (4) obj. -45.3394 iterations 3
Cbc0038I Pass  15: suminf.    2.27140 (8) obj. -45.3394 iterations 14
Cbc0038I Pass  16: suminf.    1.16149 (6) obj. -45.3394 iterations 8
Cbc0038I Pass  17: suminf.    1.16263 (7) obj. -45.3394 iterations 1
Cbc0038I Pass  18: suminf.    1.53530 (4) obj. -45.3394 iterations 15
Cbc0038I Pass  19: suminf.    1.13107 (4) obj. -45.3394 iterations 2
Cbc0038I Pass  20: suminf.    0.69177 (3) obj. -45.3394 iterations 2
Cbc0038I Pass  21: suminf.    1.43448 (4) obj. -45.3394 iterations 3
Cbc0038I Pass  22: suminf.    1.59818 (6) obj. -45.3394 iterations 15
Cbc0038I Pass  23: suminf.    1.02215 (3) obj. -45.3394 iterations 6
Cbc0038I Pass  24: suminf.    1.22072 (3) obj. -45.3394 iterations 5
Cbc0038I Pass  25: suminf.    1.22072 (3) obj. -45.3394 iterations 0
Cbc0038I Pass  26: suminf.    0.86859 (3) obj. -45.3394 iterations 3
Cbc0038I Pass  27: suminf.    0.86432 (3) obj. -45.3394 iterations 1
Cbc0038I Pass  28: suminf.    1.26970 (3) obj. -45.3394 iterations 3
Cbc0038I Pass  29: suminf.    2.10657 (9) obj. -45.3394 iterations 14
Cbc0038I Pass  30: suminf.    1.04874 (5) obj. -45.3394 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 120 rows 71 columns, reduced to 74 rows 46 columns
Cbc0038I Mini branch and bound improved solution from -41.894 to -45.3312 (0.10 seconds)
Cbc0038I Round again with cutoff of -51.5409
Cbc0038I Pass  30: suminf.    3.72564 (21) obj. -51.5409 iterations 0
Cbc0038I Pass  31: suminf.    1.19823 (6) obj. -51.5409 iterations 24
Cbc0038I Pass  32: suminf.    0.56408 (2) obj. -51.5409 iterations 2
Cbc0038I Pass  33: suminf.    0.78057 (4) obj. -51.5409 iterations 4
Cbc0038I Pass  34: suminf.    0.67557 (5) obj. -51.5409 iterations 3
Cbc0038I Pass  35: suminf.    1.93653 (6) obj. -51.5409 iterations 7
Cbc0038I Pass  36: suminf.    0.77650 (4) obj. -51.5409 iterations 3
Cbc0038I Pass  37: suminf.    0.53150 (4) obj. -51.5409 iterations 3
Cbc0038I Pass  38: suminf.    1.70415 (6) obj. -51.5409 iterations 7
Cbc0038I Pass  39: suminf.    0.78622 (4) obj. -51.5409 iterations 4
Cbc0038I Pass  40: suminf.    0.78622 (4) obj. -51.5409 iterations 0
Cbc0038I Pass  41: suminf.    1.60533 (4) obj. -51.5409 iterations 6
Cbc0038I Pass  42: suminf.    1.34548 (4) obj. -51.5409 iterations 1
Cbc0038I Pass  43: suminf.    1.73255 (5) obj. -51.5409 iterations 6
Cbc0038I Pass  44: suminf.    1.03077 (3) obj. -51.5409 iterations 3
Cbc0038I Pass  45: suminf.    1.70415 (6) obj. -51.5409 iterations 5
Cbc0038I Pass  46: suminf.    0.78622 (4) obj. -51.5409 iterations 4
Cbc0038I Pass  47: suminf.    0.78622 (4) obj. -51.5409 iterations 0
Cbc0038I Pass  48: suminf.    1.60533 (4) obj. -51.5409 iterations 6
Cbc0038I Pass  49: suminf.    1.34548 (4) obj. -51.5409 iterations 1
Cbc0038I Pass  50: suminf.    1.73255 (5) obj. -51.5409 iterations 6
Cbc0038I Pass  51: suminf.    1.03077 (3) obj. -51.5409 iterations 3
Cbc0038I Pass  52: suminf.    1.70415 (6) obj. -51.5409 iterations 5
Cbc0038I Pass  53: suminf.    0.78622 (4) obj. -51.5409 iterations 4
Cbc0038I Pass  54: suminf.    0.78622 (4) obj. -51.5409 iterations 0
Cbc0038I Pass  55: suminf.    1.60533 (4) obj. -51.5409 iterations 6
Cbc0038I Pass  56: suminf.    1.34548 (4) obj. -51.5409 iterations 1
Cbc0038I Pass  57: suminf.    1.73255 (5) obj. -51.5409 iterations 6
Cbc0038I Pass  58: suminf.    1.03077 (3) obj. -51.5409 iterations 3
Cbc0038I Pass  59: suminf.    1.70415 (6) obj. -51.5409 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 29 integers at bound fixed and 0 continuous
Cbc0038I Full problem 120 rows 71 columns, reduced to 68 rows 42 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -45.3312 - took 0.13 seconds
Cbc0012I Integer solution of -45.33124 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 120 rows 71 columns, reduced to 64 rows 40 columns
Cbc0031I 19 added rows had average density of 56.684211
Cbc0013I At root node, 19 cuts changed objective from -76.347178 to -68.488354 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 9209 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1564 row cuts average 71.0 elements, 0 column cuts (0 active)  in 0.065 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 14 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -45.33124 best solution, best possible -68.488354 (0.74 seconds)
Cbc0038I Full problem 120 rows 71 columns, reduced to 47 rows 30 columns
Cbc0001I Search completed - best objective -45.33123999999999, took 8667 iterations and 90 nodes (1.02 seconds)
Cbc0032I Strong branching done 872 times (13965 iterations), fathomed 8 nodes and fixed 69 variables
Cbc0035I Maximum depth 23, 403 variables fixed on reduced cost
Total time (CPU seconds):       0.97   (Wallclock seconds):       1.02

