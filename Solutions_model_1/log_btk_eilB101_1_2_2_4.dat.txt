Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 160 (-45) rows, 89 (-14) columns and 491 (-112) elements
Clp1000I sum of infeasibilities 2.73812e-05 - average 1.71133e-07, 22 fixed columns
Coin0506I Presolve 115 (-45) rows, 66 (-23) columns and 355 (-136) elements
Clp0029I End of values pass after 64 iterations
Clp0014I Perturbing problem by 0.001% of 0.28340319 - largest nonzero change 0 ( 0%) - largest zero change 2.9637653e-05
Clp0000I Optimal - objective value 92.584734
Clp0000I Optimal - objective value 92.584734
Coin0511I After Postsolve, objective 92.584734, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 92.584734
Clp0000I Optimal - objective value 92.584734
Clp0000I Optimal - objective value 92.584734
Coin0511I After Postsolve, objective 92.584734, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 92.58473444 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 15 strengthened rows, 0 substitutions
Cgl0004I processed model has 160 rows, 89 columns (88 integer (88 of which binary)) and 506 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.124%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 20 integers unsatisfied sum - 4.71572
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -19.7241 iterations 32
Cbc0038I Solution found of -19.7241
Cbc0038I Relaxing continuous gives -19.7241
Cbc0038I Rounding solution of -62.6612 is better than previous of -19.7241

Cbc0038I Before mini branch and bound, 68 integers at bound fixed and 0 continuous
Cbc0038I Full problem 160 rows 89 columns, reduced to 30 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -62.6612 to -62.7491 (0.02 seconds)
Cbc0038I Round again with cutoff of -65.7327
Cbc0038I Pass   2: suminf.    1.48121 (4) obj. -65.7327 iterations 6
Cbc0038I Pass   3: suminf.    0.83239 (6) obj. -65.7327 iterations 8
Cbc0038I Pass   4: suminf.    1.39818 (5) obj. -65.7327 iterations 8
Cbc0038I Pass   5: suminf.    1.22541 (3) obj. -65.7327 iterations 2
Cbc0038I Pass   6: suminf.    0.66628 (2) obj. -65.7327 iterations 5
Cbc0038I Pass   7: suminf.    0.41463 (1) obj. -65.7327 iterations 2
Cbc0038I Pass   8: suminf.    0.33534 (1) obj. -65.7327 iterations 1
Cbc0038I Pass   9: suminf.    0.09441 (2) obj. -65.7327 iterations 20
Cbc0038I Pass  10: suminf.    0.09358 (2) obj. -65.7327 iterations 5
Cbc0038I Pass  11: suminf.    0.65913 (3) obj. -65.7327 iterations 6
Cbc0038I Pass  12: suminf.    1.14170 (4) obj. -65.7327 iterations 8
Cbc0038I Pass  13: suminf.    0.98901 (4) obj. -65.7327 iterations 6
Cbc0038I Pass  14: suminf.    1.15062 (3) obj. -65.7327 iterations 5
Cbc0038I Pass  15: suminf.    0.87322 (6) obj. -65.7327 iterations 3
Cbc0038I Pass  16: suminf.    1.23950 (5) obj. -65.7327 iterations 10
Cbc0038I Pass  17: suminf.    0.92986 (4) obj. -65.7327 iterations 4
Cbc0038I Pass  18: suminf.    1.28940 (4) obj. -65.7327 iterations 3
Cbc0038I Pass  19: suminf.    0.57130 (3) obj. -65.7327 iterations 3
Cbc0038I Pass  20: suminf.    0.33689 (4) obj. -65.7327 iterations 4
Cbc0038I Pass  21: suminf.    1.20565 (4) obj. -65.7327 iterations 5
Cbc0038I Pass  22: suminf.    1.01494 (4) obj. -65.7327 iterations 3
Cbc0038I Pass  23: suminf.    0.60770 (4) obj. -65.7327 iterations 4
Cbc0038I Pass  24: suminf.    0.59408 (4) obj. -65.7327 iterations 1
Cbc0038I Pass  25: suminf.    1.33015 (4) obj. -65.7327 iterations 6
Cbc0038I Pass  26: suminf.    0.97621 (4) obj. -65.7327 iterations 5
Cbc0038I Pass  27: suminf.    0.90663 (4) obj. -65.7327 iterations 2
Cbc0038I Pass  28: suminf.    0.32548 (4) obj. -65.7327 iterations 4
Cbc0038I Pass  29: suminf.    0.31839 (3) obj. -65.7327 iterations 2
Cbc0038I Pass  30: suminf.    1.20565 (4) obj. -65.7327 iterations 4
Cbc0038I Pass  31: suminf.    1.01494 (4) obj. -65.7327 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 160 rows 89 columns, reduced to 38 rows 27 columns
Cbc0038I Mini branch and bound improved solution from -62.7491 to -65.0687 (0.06 seconds)
Cbc0038I Round again with cutoff of -71.1031
Cbc0038I Pass  31: suminf.    1.95561 (6) obj. -71.1031 iterations 1
Cbc0038I Pass  32: suminf.    1.24510 (6) obj. -71.1031 iterations 6
Cbc0038I Pass  33: suminf.    1.48448 (5) obj. -71.1031 iterations 7
Cbc0038I Pass  34: suminf.    1.48448 (5) obj. -71.1031 iterations 0
Cbc0038I Pass  35: suminf.    1.46990 (5) obj. -71.1031 iterations 8
Cbc0038I Pass  36: suminf.    1.87512 (5) obj. -71.1031 iterations 4
Cbc0038I Pass  37: suminf.    1.95561 (6) obj. -71.1031 iterations 11
Cbc0038I Pass  38: suminf.    1.24510 (6) obj. -71.1031 iterations 6
Cbc0038I Pass  39: suminf.    1.48448 (5) obj. -71.1031 iterations 7
Cbc0038I Pass  40: suminf.    1.48448 (5) obj. -71.1031 iterations 0
Cbc0038I Pass  41: suminf.    1.46990 (5) obj. -71.1031 iterations 8
Cbc0038I Pass  42: suminf.    1.87512 (5) obj. -71.1031 iterations 4
Cbc0038I Pass  43: suminf.    1.95561 (6) obj. -71.1031 iterations 11
Cbc0038I Pass  44: suminf.    1.24510 (6) obj. -71.1031 iterations 6
Cbc0038I Pass  45: suminf.    1.48448 (5) obj. -71.1031 iterations 7
Cbc0038I Pass  46: suminf.    1.48448 (5) obj. -71.1031 iterations 0
Cbc0038I Pass  47: suminf.    1.46990 (5) obj. -71.1031 iterations 8
Cbc0038I Pass  48: suminf.    1.87512 (5) obj. -71.1031 iterations 4
Cbc0038I Pass  49: suminf.    1.95561 (6) obj. -71.1031 iterations 11
Cbc0038I Pass  50: suminf.    1.24510 (6) obj. -71.1031 iterations 6
Cbc0038I Pass  51: suminf.    1.48448 (5) obj. -71.1031 iterations 7
Cbc0038I Pass  52: suminf.    1.48448 (5) obj. -71.1031 iterations 0
Cbc0038I Pass  53: suminf.    1.46990 (5) obj. -71.1031 iterations 8
Cbc0038I Pass  54: suminf.    1.87512 (5) obj. -71.1031 iterations 4
Cbc0038I Pass  55: suminf.    1.95561 (6) obj. -71.1031 iterations 11
Cbc0038I Pass  56: suminf.    1.24510 (6) obj. -71.1031 iterations 6
Cbc0038I Pass  57: suminf.    1.48448 (5) obj. -71.1031 iterations 7
Cbc0038I Pass  58: suminf.    1.48448 (5) obj. -71.1031 iterations 0
Cbc0038I Pass  59: suminf.    1.46990 (5) obj. -71.1031 iterations 8
Cbc0038I Pass  60: suminf.    1.87512 (5) obj. -71.1031 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 160 rows 89 columns, reduced to 34 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -65.0687 - took 0.07 seconds
Cbc0012I Integer solution of -65.06871 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 160 rows 89 columns, reduced to 32 rows 23 columns
Cbc0031I 18 added rows had average density of 60.944444
Cbc0013I At root node, 18 cuts changed objective from -92.584734 to -81.033915 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 4037 row cuts average 3.5 elements, 6 column cuts (6 active)  in 0.070 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1244 row cuts average 82.2 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 103 row cuts average 73.8 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0004I Integer solution of -65.46699 found after 4493 iterations and 21 nodes (0.58 seconds)
Cbc0012I Integer solution of -65.92281 found by rounding after 4843 iterations and 40 nodes (0.60 seconds)
Cbc0038I Full problem 160 rows 89 columns, reduced to 2 rows 4 columns
Cbc0016I Integer solution of -65.92994 found by strong branching after 5096 iterations and 72 nodes (0.64 seconds)
Cbc0012I Integer solution of -66.27493 found by rounding after 5213 iterations and 84 nodes (0.66 seconds)
Cbc0038I Full problem 160 rows 89 columns, reduced to 6 rows 8 columns
Cbc0001I Search completed - best objective -66.27493, took 5371 iterations and 100 nodes (0.68 seconds)
Cbc0032I Strong branching done 516 times (4522 iterations), fathomed 11 nodes and fixed 39 variables
Cbc0035I Maximum depth 11, 283 variables fixed on reduced cost
Total time (CPU seconds):       0.65   (Wallclock seconds):       0.69

