Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 42 (-23) rows, 25 (-8) columns and 126 (-57) elements
Clp1000I sum of infeasibilities 1.7512e-06 - average 4.16953e-08, 1 fixed columns
Coin0506I Presolve 41 (-1) rows, 24 (-1) columns and 122 (-4) elements
Clp0029I End of values pass after 24 iterations
Clp0000I Optimal - objective value 103.38017
Clp0000I Optimal - objective value 103.38017
Coin0511I After Postsolve, objective 103.38017, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 103.38017
Clp0000I Optimal - objective value 103.38017
Clp0000I Optimal - objective value 103.38017
Coin0511I After Postsolve, objective 103.38017, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 103.3801683 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 42 rows, 25 columns (24 integer (24 of which binary)) and 133 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.784%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 3.11333
Cbc0038I Pass   1: suminf.    0.34286 (1) obj. -58.5765 iterations 10
Cbc0038I Solution found of -40.2198
Cbc0038I Relaxing continuous gives -40.2198
Cbc0038I Rounding solution of -48.6117 is better than previous of -40.2198

Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 25 columns, reduced to 12 rows 9 columns
Cbc0038I Mini branch and bound improved solution from -48.6117 to -56.4597 (0.01 seconds)
Cbc0038I Round again with cutoff of -60.56
Cbc0038I Pass   2: suminf.    0.37322 (2) obj. -60.56 iterations 1
Cbc0038I Pass   3: suminf.    0.76801 (3) obj. -60.56 iterations 3
Cbc0038I Pass   4: suminf.    0.76801 (3) obj. -60.56 iterations 2
Cbc0038I Pass   5: suminf.    0.35789 (1) obj. -60.56 iterations 4
Cbc0038I Pass   6: suminf.    0.36798 (1) obj. -60.56 iterations 1
Cbc0038I Pass   7: suminf.    0.50476 (2) obj. -60.56 iterations 10
Cbc0038I Pass   8: suminf.    0.40313 (2) obj. -60.56 iterations 3
Cbc0038I Pass   9: suminf.    0.79203 (2) obj. -60.56 iterations 5
Cbc0038I Pass  10: suminf.    0.69416 (3) obj. -60.56 iterations 1
Cbc0038I Pass  11: suminf.    1.39570 (4) obj. -60.56 iterations 4
Cbc0038I Pass  12: suminf.    1.31319 (4) obj. -60.56 iterations 1
Cbc0038I Pass  13: suminf.    0.16761 (3) obj. -60.56 iterations 3
Cbc0038I Pass  14: suminf.    0.08584 (2) obj. -60.56 iterations 3
Cbc0038I Pass  15: suminf.    0.64000 (4) obj. -60.56 iterations 3
Cbc0038I Pass  16: suminf.    0.64000 (4) obj. -60.56 iterations 1
Cbc0038I Pass  17: suminf.    0.66616 (3) obj. -60.56 iterations 5
Cbc0038I Pass  18: suminf.    0.65755 (2) obj. -60.56 iterations 1
Cbc0038I Pass  19: suminf.    0.39617 (3) obj. -60.56 iterations 4
Cbc0038I Pass  20: suminf.    1.39570 (4) obj. -60.56 iterations 4
Cbc0038I Pass  21: suminf.    1.31319 (4) obj. -60.56 iterations 1
Cbc0038I Pass  22: suminf.    0.16761 (3) obj. -60.56 iterations 3
Cbc0038I Pass  23: suminf.    0.08584 (2) obj. -60.56 iterations 3
Cbc0038I Pass  24: suminf.    0.64000 (4) obj. -60.56 iterations 3
Cbc0038I Pass  25: suminf.    0.64000 (4) obj. -60.56 iterations 1
Cbc0038I Pass  26: suminf.    0.66616 (3) obj. -60.56 iterations 5
Cbc0038I Pass  27: suminf.    0.65755 (2) obj. -60.56 iterations 1
Cbc0038I Pass  28: suminf.    0.39617 (3) obj. -60.56 iterations 4
Cbc0038I Pass  29: suminf.    1.39570 (4) obj. -60.56 iterations 4
Cbc0038I Pass  30: suminf.    1.31319 (4) obj. -60.56 iterations 1
Cbc0038I Pass  31: suminf.    0.16761 (3) obj. -60.56 iterations 3
Cbc0038I Rounding solution of -67.5078 is better than previous of -56.4597

Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 25 columns, reduced to 19 rows 12 columns
Cbc0038I Mini branch and bound improved solution from -67.5078 to -75.1099 (0.02 seconds)
Cbc0038I Round again with cutoff of -79.5803
Cbc0038I Pass  31: suminf.    0.82604 (4) obj. -79.5803 iterations 2
Cbc0038I Pass  32: suminf.    1.44860 (4) obj. -79.5803 iterations 5
Cbc0038I Pass  33: suminf.    0.70525 (3) obj. -79.5803 iterations 2
Cbc0038I Pass  34: suminf.    0.90893 (3) obj. -79.5803 iterations 7
Cbc0038I Pass  35: suminf.    0.71033 (3) obj. -79.5803 iterations 1
Cbc0038I Pass  36: suminf.    0.95126 (4) obj. -79.5803 iterations 4
Cbc0038I Pass  37: suminf.    0.93222 (4) obj. -79.5803 iterations 1
Cbc0038I Pass  38: suminf.    1.26973 (4) obj. -79.5803 iterations 4
Cbc0038I Pass  39: suminf.    1.13987 (4) obj. -79.5803 iterations 4
Cbc0038I Pass  40: suminf.    0.95086 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  41: suminf.    0.84296 (4) obj. -79.5803 iterations 3
Cbc0038I Pass  42: suminf.    1.53485 (5) obj. -79.5803 iterations 4
Cbc0038I Pass  43: suminf.    0.78286 (3) obj. -79.5803 iterations 4
Cbc0038I Pass  44: suminf.    2.13218 (7) obj. -79.5803 iterations 6
Cbc0038I Pass  45: suminf.    0.92511 (7) obj. -79.5803 iterations 4
Cbc0038I Pass  46: suminf.    0.15330 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  47: suminf.    0.98474 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  48: suminf.    0.98474 (4) obj. -79.5803 iterations 0
Cbc0038I Pass  49: suminf.    0.95879 (4) obj. -79.5803 iterations 8
Cbc0038I Pass  50: suminf.    0.78665 (3) obj. -79.5803 iterations 4
Cbc0038I Pass  51: suminf.    1.07520 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  52: suminf.    1.07520 (4) obj. -79.5803 iterations 1
Cbc0038I Pass  53: suminf.    0.90976 (4) obj. -79.5803 iterations 2
Cbc0038I Pass  54: suminf.    1.11608 (4) obj. -79.5803 iterations 5
Cbc0038I Pass  55: suminf.    1.11608 (4) obj. -79.5803 iterations 1
Cbc0038I Pass  56: suminf.    0.90976 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  57: suminf.    0.78665 (3) obj. -79.5803 iterations 2
Cbc0038I Pass  58: suminf.    1.07520 (4) obj. -79.5803 iterations 6
Cbc0038I Pass  59: suminf.    1.07520 (4) obj. -79.5803 iterations 1
Cbc0038I Pass  60: suminf.    0.90976 (4) obj. -79.5803 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 25 columns, reduced to 17 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -75.1099 - took 0.02 seconds
Cbc0012I Integer solution of -75.10992 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 42 rows 25 columns, reduced to 14 rows 10 columns
Cbc0031I 7 added rows had average density of 19.428571
Cbc0013I At root node, 7 cuts changed objective from -97.46165 to -82.769255 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 376 row cuts average 3.1 elements, 4 column cuts (4 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 444 row cuts average 22.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 18 row cuts average 8.1 elements, 0 column cuts (0 active)  in 0.018 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 116 row cuts average 19.1 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0001I Search completed - best objective -75.10992000000002, took 1385 iterations and 8 nodes (0.15 seconds)
Cbc0032I Strong branching done 76 times (564 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 2, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.15

