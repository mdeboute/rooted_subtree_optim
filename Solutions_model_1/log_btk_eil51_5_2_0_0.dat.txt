Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 90 (-15) rows, 51 (-2) columns and 274 (-29) elements
Clp1000I sum of infeasibilities 1.28299e-05 - average 1.42554e-07, 5 fixed columns
Coin0506I Presolve 80 (-10) rows, 46 (-5) columns and 245 (-29) elements
Clp0029I End of values pass after 46 iterations
Clp0000I Optimal - objective value 59.422664
Clp0000I Optimal - objective value 59.422664
Coin0511I After Postsolve, objective 59.422664, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 59.422664
Clp0000I Optimal - objective value 59.422664
Clp0000I Optimal - objective value 59.422664
Coin0511I After Postsolve, objective 59.422664, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 59.42266422 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 90 rows, 51 columns (50 integer (50 of which binary)) and 274 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.675%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 39 integers unsatisfied sum - 9.50827
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 5.02704 iterations 46
Cbc0038I Solution found of 5.02704
Cbc0038I Relaxing continuous gives 5.02704
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 90 rows 51 columns, reduced to 69 rows 40 columns
Cbc0038I Mini branch and bound improved solution from 5.02704 to -24.1925 (0.04 seconds)
Cbc0038I Round again with cutoff of -27.7156
Cbc0038I Pass   2: suminf.    2.65597 (10) obj. -27.7156 iterations 10
Cbc0038I Pass   3: suminf.    2.01652 (7) obj. -27.7156 iterations 2
Cbc0038I Pass   4: suminf.    1.97318 (6) obj. -27.7156 iterations 1
Cbc0038I Pass   5: suminf.    1.97318 (6) obj. -27.7156 iterations 0
Cbc0038I Pass   6: suminf.    1.40778 (4) obj. -27.7156 iterations 8
Cbc0038I Pass   7: suminf.    1.35972 (4) obj. -27.7156 iterations 3
Cbc0038I Pass   8: suminf.    1.58327 (4) obj. -27.7156 iterations 4
Cbc0038I Pass   9: suminf.    1.12853 (4) obj. -27.7156 iterations 3
Cbc0038I Pass  10: suminf.    0.76306 (4) obj. -27.7156 iterations 1
Cbc0038I Pass  11: suminf.    0.75937 (4) obj. -27.7156 iterations 2
Cbc0038I Pass  12: suminf.    1.61241 (4) obj. -27.7156 iterations 5
Cbc0038I Pass  13: suminf.    1.61241 (4) obj. -27.7156 iterations 0
Cbc0038I Pass  14: suminf.    1.99726 (5) obj. -27.7156 iterations 5
Cbc0038I Pass  15: suminf.    1.97318 (6) obj. -27.7156 iterations 3
Cbc0038I Pass  16: suminf.    1.40778 (4) obj. -27.7156 iterations 8
Cbc0038I Pass  17: suminf.    1.35972 (4) obj. -27.7156 iterations 3
Cbc0038I Pass  18: suminf.    1.58327 (4) obj. -27.7156 iterations 4
Cbc0038I Pass  19: suminf.    1.12853 (4) obj. -27.7156 iterations 3
Cbc0038I Pass  20: suminf.    0.76306 (4) obj. -27.7156 iterations 1
Cbc0038I Pass  21: suminf.    0.75937 (4) obj. -27.7156 iterations 2
Cbc0038I Pass  22: suminf.    1.61241 (4) obj. -27.7156 iterations 5
Cbc0038I Pass  23: suminf.    1.61241 (4) obj. -27.7156 iterations 0
Cbc0038I Pass  24: suminf.    1.99726 (5) obj. -27.7156 iterations 5
Cbc0038I Pass  25: suminf.    1.97318 (6) obj. -27.7156 iterations 3
Cbc0038I Pass  26: suminf.    1.40778 (4) obj. -27.7156 iterations 8
Cbc0038I Pass  27: suminf.    1.35972 (4) obj. -27.7156 iterations 3
Cbc0038I Pass  28: suminf.    1.58327 (4) obj. -27.7156 iterations 4
Cbc0038I Pass  29: suminf.    1.12853 (4) obj. -27.7156 iterations 3
Cbc0038I Pass  30: suminf.    0.76306 (4) obj. -27.7156 iterations 1
Cbc0038I Pass  31: suminf.    0.75937 (4) obj. -27.7156 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 90 rows 51 columns, reduced to 71 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -24.1925 - took 0.06 seconds
Cbc0012I Integer solution of -24.1925 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 90 rows 51 columns, reduced to 69 rows 40 columns
Cbc0031I 25 added rows had average density of 31.96
Cbc0013I At root node, 25 cuts changed objective from -59.422664 to -44.766895 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8767 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.052 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1523 row cuts average 50.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.063 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 203 row cuts average 4.9 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 171 row cuts average 49.7 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0010I After 5 nodes, 4 on tree, -24.1925 best solution, best possible -44.766895 (0.67 seconds)
Cbc0038I Full problem 90 rows 51 columns, reduced to 17 rows 13 columns
Cbc0001I Search completed - best objective -24.19250000000001, took 8018 iterations and 46 nodes (0.86 seconds)
Cbc0032I Strong branching done 702 times (11469 iterations), fathomed 2 nodes and fixed 21 variables
Cbc0035I Maximum depth 11, 74 variables fixed on reduced cost
Total time (CPU seconds):       0.83   (Wallclock seconds):       0.86

