Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 60 (-9) rows, 33 (-2) columns and 178 (-17) elements
Clp1000I sum of infeasibilities 9.11457e-05 - average 1.5191e-06, 3 fixed columns
Coin0506I Presolve 54 (-6) rows, 30 (-3) columns and 160 (-18) elements
Clp0029I End of values pass after 30 iterations
Clp0000I Optimal - objective value 107.33692
Clp0000I Optimal - objective value 107.33692
Coin0511I After Postsolve, objective 107.33692, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 107.33692
Clp0000I Optimal - objective value 107.33692
Clp0000I Optimal - objective value 107.33692
Coin0511I After Postsolve, objective 107.33692, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 107.336924 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0004I processed model has 60 rows, 33 columns (32 integer (32 of which binary)) and 183 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.985%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 8.35336
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -51.8295 iterations 22
Cbc0038I Solution found of -51.8295
Cbc0038I Relaxing continuous gives -51.8295
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 60 rows 33 columns, reduced to 44 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -51.8295 to -52.7451 (0.02 seconds)
Cbc0038I Round again with cutoff of -58.2044
Cbc0038I Pass   2: suminf.    0.20891 (6) obj. -58.2044 iterations 4
Cbc0038I Pass   3: suminf.    0.43965 (3) obj. -58.2044 iterations 13
Cbc0038I Pass   4: suminf.    0.41790 (2) obj. -58.2044 iterations 1
Cbc0038I Pass   5: suminf.    0.38149 (2) obj. -58.2044 iterations 2
Cbc0038I Pass   6: suminf.    0.87073 (3) obj. -58.2044 iterations 2
Cbc0038I Pass   7: suminf.    0.38149 (2) obj. -58.2044 iterations 2
Cbc0038I Pass   8: suminf.    3.41394 (9) obj. -58.2044 iterations 8
Cbc0038I Pass   9: suminf.    0.50468 (7) obj. -58.2044 iterations 4
Cbc0038I Pass  10: suminf.    0.89376 (2) obj. -58.2044 iterations 11
Cbc0038I Pass  11: suminf.    0.39179 (2) obj. -58.2044 iterations 1
Cbc0038I Pass  12: suminf.    1.14000 (3) obj. -58.2044 iterations 3
Cbc0038I Pass  13: suminf.    0.39179 (2) obj. -58.2044 iterations 4
Cbc0038I Pass  14: suminf.    4.05415 (13) obj. -58.2044 iterations 16
Cbc0038I Pass  15: suminf.    0.52593 (5) obj. -58.2044 iterations 14
Cbc0038I Pass  16: suminf.    1.14842 (3) obj. -58.2044 iterations 5
Cbc0038I Pass  17: suminf.    0.66065 (4) obj. -58.2044 iterations 2
Cbc0038I Pass  18: suminf.    0.63538 (3) obj. -58.2044 iterations 1
Cbc0038I Pass  19: suminf.    0.89376 (2) obj. -58.2044 iterations 4
Cbc0038I Pass  20: suminf.    0.39179 (2) obj. -58.2044 iterations 1
Cbc0038I Pass  21: suminf.    1.71526 (5) obj. -58.2044 iterations 5
Cbc0038I Pass  22: suminf.    1.07338 (3) obj. -58.2044 iterations 4
Cbc0038I Pass  23: suminf.    0.77327 (3) obj. -58.2044 iterations 2
Cbc0038I Pass  24: suminf.    0.82077 (2) obj. -58.2044 iterations 2
Cbc0038I Pass  25: suminf.    0.73426 (2) obj. -58.2044 iterations 1
Cbc0038I Pass  26: suminf.    0.73426 (2) obj. -58.2044 iterations 0
Cbc0038I Pass  27: suminf.    1.74221 (4) obj. -58.2044 iterations 6
Cbc0038I Pass  28: suminf.    0.67075 (2) obj. -58.2044 iterations 4
Cbc0038I Pass  29: suminf.    0.79458 (2) obj. -58.2044 iterations 1
Cbc0038I Pass  30: suminf.    0.67075 (2) obj. -58.2044 iterations 1
Cbc0038I Pass  31: suminf.    1.00130 (3) obj. -58.2044 iterations 7
Cbc0038I Rounding solution of -54.7055 is better than previous of -52.7451

Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 60 rows 33 columns, reduced to 54 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -54.7055 to -57.9786 (0.05 seconds)
Cbc0038I Round again with cutoff of -68.0309
Cbc0038I Pass  31: suminf.    0.57032 (6) obj. -68.0309 iterations 1
Cbc0038I Pass  32: suminf.    0.93586 (3) obj. -68.0309 iterations 11
Cbc0038I Pass  33: suminf.    0.66782 (3) obj. -68.0309 iterations 3
Cbc0038I Pass  34: suminf.    0.96842 (4) obj. -68.0309 iterations 4
Cbc0038I Pass  35: suminf.    0.96549 (4) obj. -68.0309 iterations 1
Cbc0038I Pass  36: suminf.    0.99755 (4) obj. -68.0309 iterations 5
Cbc0038I Pass  37: suminf.    0.91811 (3) obj. -68.0309 iterations 1
Cbc0038I Pass  38: suminf.    0.93586 (3) obj. -68.0309 iterations 2
Cbc0038I Pass  39: suminf.    0.66782 (3) obj. -68.0309 iterations 3
Cbc0038I Pass  40: suminf.    0.96842 (4) obj. -68.0309 iterations 4
Cbc0038I Pass  41: suminf.    0.96549 (4) obj. -68.0309 iterations 1
Cbc0038I Pass  42: suminf.    0.99755 (4) obj. -68.0309 iterations 5
Cbc0038I Pass  43: suminf.    0.91811 (3) obj. -68.0309 iterations 1
Cbc0038I Pass  44: suminf.    0.93586 (3) obj. -68.0309 iterations 2
Cbc0038I Pass  45: suminf.    0.66782 (3) obj. -68.0309 iterations 3
Cbc0038I Pass  46: suminf.    0.96842 (4) obj. -68.0309 iterations 4
Cbc0038I Pass  47: suminf.    0.96549 (4) obj. -68.0309 iterations 1
Cbc0038I Pass  48: suminf.    0.99755 (4) obj. -68.0309 iterations 5
Cbc0038I Pass  49: suminf.    0.91811 (3) obj. -68.0309 iterations 1
Cbc0038I Pass  50: suminf.    0.93586 (3) obj. -68.0309 iterations 2
Cbc0038I Pass  51: suminf.    0.66782 (3) obj. -68.0309 iterations 3
Cbc0038I Pass  52: suminf.    0.96842 (4) obj. -68.0309 iterations 4
Cbc0038I Pass  53: suminf.    0.96549 (4) obj. -68.0309 iterations 1
Cbc0038I Pass  54: suminf.    0.99755 (4) obj. -68.0309 iterations 5
Cbc0038I Pass  55: suminf.    0.91811 (3) obj. -68.0309 iterations 1
Cbc0038I Pass  56: suminf.    0.93586 (3) obj. -68.0309 iterations 2
Cbc0038I Pass  57: suminf.    0.66782 (3) obj. -68.0309 iterations 3
Cbc0038I Pass  58: suminf.    0.96842 (4) obj. -68.0309 iterations 4
Cbc0038I Pass  59: suminf.    0.96549 (4) obj. -68.0309 iterations 1
Cbc0038I Pass  60: suminf.    0.99755 (4) obj. -68.0309 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 60 rows 33 columns, reduced to 44 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -57.9786 - took 0.06 seconds
Cbc0012I Integer solution of -57.97862 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 60 rows 33 columns, reduced to 47 rows 26 columns
Cbc0031I 14 added rows had average density of 26.357143
Cbc0013I At root node, 14 cuts changed objective from -107.33692 to -85.770383 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1806 row cuts average 3.0 elements, 1 column cuts (1 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 645 row cuts average 32.1 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective -57.97861999999999, took 3442 iterations and 18 nodes (0.34 seconds)
Cbc0032I Strong branching done 252 times (3168 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 7, 20 variables fixed on reduced cost
Total time (CPU seconds):       0.32   (Wallclock seconds):       0.34

