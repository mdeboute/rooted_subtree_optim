Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-11) rows, 48 (-2) columns and 264 (-21) elements
Clp1000I sum of infeasibilities 1.1581e-05 - average 1.31602e-07, 10 fixed columns
Coin0506I Presolve 69 (-19) rows, 38 (-10) columns and 206 (-58) elements
Clp0029I End of values pass after 38 iterations
Clp0000I Optimal - objective value 2195.7181
Clp0000I Optimal - objective value 2195.7181
Coin0511I After Postsolve, objective 2195.7181, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 2195.7181
Clp0000I Optimal - objective value 2195.7181
Clp0000I Optimal - objective value 2195.7181
Coin0511I After Postsolve, objective 2195.7181, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2195.718119 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 48 columns (47 integer (47 of which binary)) and 264 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.847%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 33 integers unsatisfied sum - 10.9292
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -11.107 iterations 29
Cbc0038I Solution found of -11.107
Cbc0038I Relaxing continuous gives -11.107
Cbc0038I Rounding solution of -247.182 is better than previous of -11.107

Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 56 rows 34 columns
Cbc0038I Mini branch and bound improved solution from -247.182 to -464.671 (0.03 seconds)
Cbc0038I Round again with cutoff of -637.776
Cbc0038I Pass   2: suminf.    0.77705 (5) obj. -637.776 iterations 5
Cbc0038I Pass   3: suminf.    0.71763 (4) obj. -637.776 iterations 1
Cbc0038I Pass   4: suminf.    1.07078 (6) obj. -637.776 iterations 5
Cbc0038I Pass   5: suminf.    1.05033 (5) obj. -637.776 iterations 1
Cbc0038I Pass   6: suminf.    1.38668 (5) obj. -637.776 iterations 5
Cbc0038I Pass   7: suminf.    1.20604 (5) obj. -637.776 iterations 1
Cbc0038I Pass   8: suminf.    1.13039 (4) obj. -637.776 iterations 1
Cbc0038I Pass   9: suminf.    1.72001 (6) obj. -637.776 iterations 4
Cbc0038I Pass  10: suminf.    1.50345 (6) obj. -637.776 iterations 1
Cbc0038I Pass  11: suminf.    1.48641 (5) obj. -637.776 iterations 1
Cbc0038I Pass  12: suminf.    1.55552 (6) obj. -637.776 iterations 6
Cbc0038I Pass  13: suminf.    1.55514 (5) obj. -637.776 iterations 1
Cbc0038I Pass  14: suminf.    1.84213 (6) obj. -637.776 iterations 3
Cbc0038I Pass  15: suminf.    1.59930 (6) obj. -637.776 iterations 1
Cbc0038I Pass  16: suminf.    1.58601 (5) obj. -637.776 iterations 1
Cbc0038I Pass  17: suminf.    1.55552 (6) obj. -637.776 iterations 3
Cbc0038I Pass  18: suminf.    1.55514 (5) obj. -637.776 iterations 1
Cbc0038I Pass  19: suminf.    1.84213 (6) obj. -637.776 iterations 3
Cbc0038I Pass  20: suminf.    1.59930 (6) obj. -637.776 iterations 1
Cbc0038I Pass  21: suminf.    1.58601 (5) obj. -637.776 iterations 1
Cbc0038I Pass  22: suminf.    1.55552 (6) obj. -637.776 iterations 3
Cbc0038I Pass  23: suminf.    1.55514 (5) obj. -637.776 iterations 1
Cbc0038I Pass  24: suminf.    1.84213 (6) obj. -637.776 iterations 3
Cbc0038I Pass  25: suminf.    1.59930 (6) obj. -637.776 iterations 1
Cbc0038I Pass  26: suminf.    1.58601 (5) obj. -637.776 iterations 1
Cbc0038I Pass  27: suminf.    1.55552 (6) obj. -637.776 iterations 3
Cbc0038I Pass  28: suminf.    1.55514 (5) obj. -637.776 iterations 1
Cbc0038I Pass  29: suminf.    1.84213 (6) obj. -637.776 iterations 3
Cbc0038I Pass  30: suminf.    1.59930 (6) obj. -637.776 iterations 1
Cbc0038I Pass  31: suminf.    1.58601 (5) obj. -637.776 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 48 columns, reduced to 56 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -464.671 - took 0.04 seconds
Cbc0012I Integer solution of -464.67092 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 88 rows 48 columns, reduced to 56 rows 34 columns
Cbc0031I 27 added rows had average density of 19.37037
Cbc0013I At root node, 27 cuts changed objective from -2195.7181 to -1403.0083 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8024 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1391 row cuts average 48.0 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 100 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 119 row cuts average 39.9 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0010I After 13 nodes, 9 on tree, -464.67092 best solution, best possible -1403.0083 (0.69 seconds)
Cbc0001I Search completed - best objective -464.6709173859999, took 7765 iterations and 30 nodes (0.71 seconds)
Cbc0032I Strong branching done 470 times (10322 iterations), fathomed 1 nodes and fixed 5 variables
Cbc0035I Maximum depth 13, 39 variables fixed on reduced cost
Total time (CPU seconds):       0.69   (Wallclock seconds):       0.72

