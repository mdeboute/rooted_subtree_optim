Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 31 (-18) rows, 19 (-6) columns and 93 (-42) elements
Clp1000I sum of infeasibilities 1.57049e-05 - average 5.06611e-07, 0 fixed columns
Coin0506I Presolve 31 (0) rows, 19 (0) columns and 93 (0) elements
Clp0029I End of values pass after 19 iterations
Clp0000I Optimal - objective value 160.4271
Clp0000I Optimal - objective value 160.4271
Coin0511I After Postsolve, objective 160.4271, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 160.4271
Clp0000I Optimal - objective value 160.4271
Clp0000I Optimal - objective value 160.4271
Coin0511I After Postsolve, objective 160.4271, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 160.4271018 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 31 rows, 19 columns (18 integer (18 of which binary)) and 93 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.914%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 4.76639
Cbc0038I Pass   1: suminf.    0.90537 (4) obj. -111.094 iterations 18
Cbc0038I Pass   2: suminf.    0.90537 (4) obj. -111.094 iterations 0
Cbc0038I Solution found of -48.2417
Cbc0038I Relaxing continuous gives -48.2417
Cbc0038I Rounding solution of -88.4623 is better than previous of -48.2417

Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 19 columns, reduced to 26 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -88.4623 to -111.871 (0.02 seconds)
Cbc0038I Round again with cutoff of -116.714
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    0.94763 (5) obj. -116.714 iterations 1
Cbc0038I Pass   4: suminf.    0.94763 (5) obj. -116.714 iterations 0
Cbc0038I Pass   5: suminf.    0.83515 (5) obj. -116.714 iterations 8
Cbc0038I Pass   6: suminf.    0.44366 (3) obj. -116.714 iterations 2
Cbc0038I Pass   7: suminf.    0.14507 (3) obj. -116.714 iterations 3
Cbc0038I Pass   8: suminf.    0.54105 (5) obj. -116.714 iterations 6
Cbc0038I Pass   9: suminf.    0.22339 (3) obj. -116.714 iterations 2
Cbc0038I Pass  10: suminf.    0.68652 (5) obj. -116.714 iterations 7
Cbc0038I Pass  11: suminf.    0.66404 (4) obj. -116.714 iterations 1
Cbc0038I Pass  12: suminf.    0.64707 (5) obj. -116.714 iterations 5
Cbc0038I Pass  13: suminf.    0.61096 (4) obj. -116.714 iterations 1
Cbc0038I Pass  14: suminf.    0.87711 (4) obj. -116.714 iterations 4
Cbc0038I Pass  15: suminf.    0.23126 (3) obj. -116.714 iterations 3
Cbc0038I Pass  16: suminf.    0.83468 (5) obj. -116.714 iterations 3
Cbc0038I Pass  17: suminf.    0.81436 (4) obj. -116.714 iterations 1
Cbc0038I Pass  18: suminf.    0.69047 (5) obj. -116.714 iterations 3
Cbc0038I Pass  19: suminf.    0.67105 (4) obj. -116.714 iterations 1
Cbc0038I Pass  20: suminf.    0.50210 (4) obj. -116.714 iterations 2
Cbc0038I Pass  21: suminf.    0.49337 (3) obj. -116.714 iterations 1
Cbc0038I Pass  22: suminf.    0.92598 (3) obj. -116.714 iterations 2
Cbc0038I Pass  23: suminf.    0.42947 (4) obj. -116.714 iterations 3
Cbc0038I Pass  24: suminf.    0.50210 (4) obj. -116.714 iterations 4
Cbc0038I Pass  25: suminf.    0.84924 (3) obj. -116.714 iterations 3
Cbc0038I Pass  26: suminf.    0.84924 (3) obj. -116.714 iterations 0
Cbc0038I Pass  27: suminf.    0.50210 (4) obj. -116.714 iterations 3
Cbc0038I Pass  28: suminf.    0.49337 (3) obj. -116.714 iterations 1
Cbc0038I Pass  29: suminf.    0.92598 (3) obj. -116.714 iterations 2
Cbc0038I Pass  30: suminf.    0.42947 (4) obj. -116.714 iterations 3
Cbc0038I Pass  31: suminf.    0.50210 (4) obj. -116.714 iterations 4
Cbc0038I Pass  32: suminf.    1.31939 (5) obj. -116.714 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 19 columns, reduced to 26 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -111.871 - took 0.03 seconds
Cbc0012I Integer solution of -111.87074 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 11 added rows had average density of 12
Cbc0013I At root node, 11 cuts changed objective from -160.30225 to -113.39716 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 242 row cuts average 3.2 elements, 2 column cuts (2 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 317 row cuts average 15.7 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 18 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 167 row cuts average 14.9 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 160 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0001I Search completed - best objective -111.870735, took 1017 iterations and 10 nodes (0.15 seconds)
Cbc0032I Strong branching done 52 times (184 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 3, 19 variables fixed on reduced cost
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.15

