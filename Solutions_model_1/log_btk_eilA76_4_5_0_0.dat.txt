Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 139 (-16) rows, 76 (-2) columns and 422 (-31) elements
Clp1000I sum of infeasibilities 2.24598e-05 - average 1.61581e-07, 11 fixed columns
Coin0506I Presolve 117 (-22) rows, 65 (-11) columns and 356 (-66) elements
Clp0029I End of values pass after 65 iterations
Clp0014I Perturbing problem by 0.001% of 2.1159318 - largest nonzero change 0 ( 0%) - largest zero change 2.9047931e-05
Clp0000I Optimal - objective value 44.128411
Clp0000I Optimal - objective value 44.128411
Coin0511I After Postsolve, objective 44.128411, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.25209227 - largest nonzero change 0 ( 0%) - largest zero change 2.5825523e-05
Clp0000I Optimal - objective value 44.128411
Clp0000I Optimal - objective value 44.128411
Clp0000I Optimal - objective value 44.128411
Coin0511I After Postsolve, objective 44.128411, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 44.12841084 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 139 rows, 76 columns (75 integer (75 of which binary)) and 422 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.178%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 40 integers unsatisfied sum - 7.16923
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1.12272 iterations 56
Cbc0038I Solution found of 1.12272
Cbc0038I Relaxing continuous gives 1.12272
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 139 rows 76 columns, reduced to 71 rows 41 columns
Cbc0038I Mini branch and bound improved solution from 1.12272 to -17.1652 (0.03 seconds)
Cbc0038I Round again with cutoff of -19.8616
Cbc0038I Pass   2: suminf.    2.20584 (11) obj. -19.8616 iterations 13
Cbc0038I Pass   3: suminf.    1.74918 (5) obj. -19.8616 iterations 11
Cbc0038I Pass   4: suminf.    1.46302 (5) obj. -19.8616 iterations 2
Cbc0038I Pass   5: suminf.    1.30625 (6) obj. -19.8616 iterations 12
Cbc0038I Pass   6: suminf.    1.29039 (5) obj. -19.8616 iterations 2
Cbc0038I Pass   7: suminf.    1.91862 (5) obj. -19.8616 iterations 8
Cbc0038I Pass   8: suminf.    1.28909 (5) obj. -19.8616 iterations 2
Cbc0038I Pass   9: suminf.    1.49654 (5) obj. -19.8616 iterations 5
Cbc0038I Pass  10: suminf.    2.26491 (8) obj. -19.8616 iterations 18
Cbc0038I Pass  11: suminf.    1.62884 (6) obj. -19.8616 iterations 11
Cbc0038I Pass  12: suminf.    0.60174 (4) obj. -19.8616 iterations 4
Cbc0038I Pass  13: suminf.    0.58965 (4) obj. -19.8616 iterations 1
Cbc0038I Pass  14: suminf.    1.06633 (3) obj. -19.8616 iterations 3
Cbc0038I Pass  15: suminf.    0.97862 (5) obj. -19.8616 iterations 2
Cbc0038I Pass  16: suminf.    1.14846 (4) obj. -19.8616 iterations 3
Cbc0038I Pass  17: suminf.    1.04708 (4) obj. -19.8616 iterations 1
Cbc0038I Pass  18: suminf.    1.08814 (4) obj. -19.8616 iterations 4
Cbc0038I Pass  19: suminf.    1.08814 (4) obj. -19.8616 iterations 0
Cbc0038I Pass  20: suminf.    1.14846 (4) obj. -19.8616 iterations 3
Cbc0038I Pass  21: suminf.    2.84591 (9) obj. -19.8616 iterations 11
Cbc0038I Pass  22: suminf.    2.51277 (8) obj. -19.8616 iterations 7
Cbc0038I Pass  23: suminf.    1.59913 (5) obj. -19.8616 iterations 9
Cbc0038I Pass  24: suminf.    0.95103 (4) obj. -19.8616 iterations 5
Cbc0038I Pass  25: suminf.    0.74306 (4) obj. -19.8616 iterations 2
Cbc0038I Pass  26: suminf.    1.61624 (6) obj. -19.8616 iterations 4
Cbc0038I Pass  27: suminf.    1.61624 (6) obj. -19.8616 iterations 0
Cbc0038I Pass  28: suminf.    1.14846 (4) obj. -19.8616 iterations 4
Cbc0038I Pass  29: suminf.    1.04708 (4) obj. -19.8616 iterations 1
Cbc0038I Pass  30: suminf.    1.08814 (4) obj. -19.8616 iterations 4
Cbc0038I Pass  31: suminf.    1.08814 (4) obj. -19.8616 iterations 0
Cbc0038I Rounding solution of -18.4607 is better than previous of -17.1652

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 139 rows 76 columns, reduced to 87 rows 50 columns
Cbc0038I Mini branch and bound improved solution from -18.4607 to -18.7474 (0.06 seconds)
Cbc0038I Round again with cutoff of -24.7149
Cbc0038I Pass  31: suminf.    2.78410 (13) obj. -24.7149 iterations 2
Cbc0038I Pass  32: suminf.    2.82857 (8) obj. -24.7149 iterations 17
Cbc0038I Pass  33: suminf.    1.51576 (5) obj. -24.7149 iterations 7
Cbc0038I Pass  34: suminf.    1.50512 (5) obj. -24.7149 iterations 1
Cbc0038I Pass  35: suminf.    2.42003 (7) obj. -24.7149 iterations 6
Cbc0038I Pass  36: suminf.    1.86563 (7) obj. -24.7149 iterations 1
Cbc0038I Pass  37: suminf.    1.90468 (7) obj. -24.7149 iterations 7
Cbc0038I Pass  38: suminf.    1.83727 (7) obj. -24.7149 iterations 5
Cbc0038I Pass  39: suminf.    1.95135 (6) obj. -24.7149 iterations 7
Cbc0038I Pass  40: suminf.    1.72070 (7) obj. -24.7149 iterations 4
Cbc0038I Pass  41: suminf.    1.85022 (8) obj. -24.7149 iterations 6
Cbc0038I Pass  42: suminf.    4.24744 (11) obj. -24.7149 iterations 25
Cbc0038I Pass  43: suminf.    2.65251 (9) obj. -24.7149 iterations 7
Cbc0038I Pass  44: suminf.    2.41894 (8) obj. -24.7149 iterations 1
Cbc0038I Pass  45: suminf.    2.78632 (8) obj. -24.7149 iterations 13
Cbc0038I Pass  46: suminf.    2.18625 (7) obj. -24.7149 iterations 2
Cbc0038I Pass  47: suminf.    2.59032 (8) obj. -24.7149 iterations 17
Cbc0038I Pass  48: suminf.    1.93290 (6) obj. -24.7149 iterations 4
Cbc0038I Pass  49: suminf.    1.88083 (6) obj. -24.7149 iterations 6
Cbc0038I Pass  50: suminf.    2.24124 (7) obj. -24.7149 iterations 8
Cbc0038I Pass  51: suminf.    2.18625 (7) obj. -24.7149 iterations 1
Cbc0038I Pass  52: suminf.    2.59032 (8) obj. -24.7149 iterations 13
Cbc0038I Pass  53: suminf.    1.93290 (6) obj. -24.7149 iterations 4
Cbc0038I Pass  54: suminf.    1.88083 (6) obj. -24.7149 iterations 6
Cbc0038I Pass  55: suminf.    2.24124 (7) obj. -24.7149 iterations 8
Cbc0038I Pass  56: suminf.    2.18625 (7) obj. -24.7149 iterations 1
Cbc0038I Pass  57: suminf.    2.59032 (8) obj. -24.7149 iterations 13
Cbc0038I Pass  58: suminf.    1.93290 (6) obj. -24.7149 iterations 4
Cbc0038I Pass  59: suminf.    1.88083 (6) obj. -24.7149 iterations 6
Cbc0038I Pass  60: suminf.    2.24124 (7) obj. -24.7149 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 139 rows 76 columns, reduced to 78 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -18.7474 - took 0.08 seconds
Cbc0012I Integer solution of -18.74737 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 139 rows 76 columns, reduced to 72 rows 42 columns
Cbc0031I 29 added rows had average density of 46.931034
Cbc0013I At root node, 29 cuts changed objective from -44.128411 to -34.409378 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14292 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.091 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1598 row cuts average 71.4 elements, 0 column cuts (0 active)  in 0.080 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 217 row cuts average 52.9 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -18.74737 best solution, best possible -34.409378 (0.92 seconds)
Cbc0012I Integer solution of -19.69192 found by rounding after 9602 iterations and 36 nodes (1.18 seconds)
Cbc0038I Full problem 139 rows 76 columns, reduced to 25 rows 17 columns
Cbc0001I Search completed - best objective -19.69192, took 10728 iterations and 64 nodes (1.24 seconds)
Cbc0032I Strong branching done 712 times (14109 iterations), fathomed 2 nodes and fixed 29 variables
Cbc0035I Maximum depth 22, 133 variables fixed on reduced cost
Total time (CPU seconds):       1.21   (Wallclock seconds):       1.25

