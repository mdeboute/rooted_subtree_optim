Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 189 (-16) rows, 101 (-2) columns and 572 (-31) elements
Clp1000I sum of infeasibilities 0.000279045 - average 1.47643e-06, 15 fixed columns
Coin0506I Presolve 160 (-29) rows, 86 (-15) columns and 484 (-88) elements
Clp0029I End of values pass after 86 iterations
Clp0014I Perturbing problem by 0.001% of 2.5024857 - largest nonzero change 0 ( 0%) - largest zero change 2.8834042e-05
Clp0000I Optimal - objective value 37.282094
Clp0000I Optimal - objective value 37.282094
Coin0511I After Postsolve, objective 37.282094, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.24589109 - largest nonzero change 0 ( 0%) - largest zero change 2.9994168e-05
Clp0000I Optimal - objective value 37.282094
Clp0000I Optimal - objective value 37.282094
Clp0000I Optimal - objective value 37.282094
Coin0511I After Postsolve, objective 37.282094, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 37.28209365 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 189 rows, 101 columns (100 integer (100 of which binary)) and 572 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.912%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 49 integers unsatisfied sum - 11.4902
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 12.3434 iterations 66
Cbc0038I Solution found of 12.3434
Cbc0038I Relaxing continuous gives 12.3434
Cbc0038I Rounding solution of 1.79843 is better than previous of 12.3434

Cbc0038I Before mini branch and bound, 51 integers at bound fixed and 0 continuous
Cbc0038I Full problem 189 rows 101 columns, reduced to 86 rows 50 columns
Cbc0038I Mini branch and bound improved solution from 1.79843 to -10.079 (0.06 seconds)
Cbc0038I Round again with cutoff of -12.7994
Cbc0038I Pass   2: suminf.    3.48095 (15) obj. -12.7994 iterations 21
Cbc0038I Pass   3: suminf.    3.56311 (8) obj. -12.7994 iterations 24
Cbc0038I Pass   4: suminf.    1.44847 (5) obj. -12.7994 iterations 7
Cbc0038I Pass   5: suminf.    1.40569 (6) obj. -12.7994 iterations 2
Cbc0038I Pass   6: suminf.    1.78233 (4) obj. -12.7994 iterations 5
Cbc0038I Pass   7: suminf.    0.99571 (4) obj. -12.7994 iterations 3
Cbc0038I Pass   8: suminf.    1.61469 (4) obj. -12.7994 iterations 2
Cbc0038I Pass   9: suminf.    2.96396 (10) obj. -12.7994 iterations 27
Cbc0038I Pass  10: suminf.    0.79346 (4) obj. -12.7994 iterations 10
Cbc0038I Pass  11: suminf.    1.20957 (6) obj. -12.7994 iterations 13
Cbc0038I Pass  12: suminf.    1.56957 (4) obj. -12.7994 iterations 4
Cbc0038I Pass  13: suminf.    1.22112 (4) obj. -12.7994 iterations 2
Cbc0038I Pass  14: suminf.    0.63887 (3) obj. -12.7994 iterations 3
Cbc0038I Pass  15: suminf.    1.10497 (3) obj. -12.7994 iterations 1
Cbc0038I Pass  16: suminf.    4.05607 (19) obj. -12.7994 iterations 31
Cbc0038I Pass  17: suminf.    2.53022 (11) obj. -12.7994 iterations 12
Cbc0038I Pass  18: suminf.    0.91817 (4) obj. -12.7994 iterations 12
Cbc0038I Pass  19: suminf.    0.86982 (4) obj. -12.7994 iterations 3
Cbc0038I Pass  20: suminf.    1.53651 (5) obj. -12.7994 iterations 4
Cbc0038I Pass  21: suminf.    3.51493 (14) obj. -12.7994 iterations 27
Cbc0038I Pass  22: suminf.    2.69507 (11) obj. -12.7994 iterations 9
Cbc0038I Pass  23: suminf.    1.68756 (7) obj. -12.7994 iterations 25
Cbc0038I Pass  24: suminf.    0.85972 (5) obj. -12.7994 iterations 8
Cbc0038I Pass  25: suminf.    1.68378 (4) obj. -12.7994 iterations 4
Cbc0038I Pass  26: suminf.    1.25467 (5) obj. -12.7994 iterations 3
Cbc0038I Pass  27: suminf.    0.73306 (3) obj. -12.7994 iterations 4
Cbc0038I Pass  28: suminf.    0.99076 (3) obj. -12.7994 iterations 1
Cbc0038I Pass  29: suminf.    1.85559 (7) obj. -12.7994 iterations 22
Cbc0038I Pass  30: suminf.    1.01840 (7) obj. -12.7994 iterations 12
Cbc0038I Pass  31: suminf.    1.36752 (6) obj. -12.7994 iterations 13
Cbc0038I Rounding solution of -10.6633 is better than previous of -10.079

Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 189 rows 101 columns, reduced to 125 rows 68 columns - 3 fixed gives 97, 65 - ok now
Cbc0038I Full problem 189 rows 101 columns, reduced to 97 rows 65 columns
Cbc0038I Mini branch and bound did not improve solution (0.13 seconds)
Cbc0038I Round again with cutoff of -17.6959
Cbc0038I Pass  31: suminf.    4.56208 (17) obj. -17.6959 iterations 2
Cbc0038I Pass  32: suminf.    3.17352 (8) obj. -17.6959 iterations 20
Cbc0038I Pass  33: suminf.    1.83526 (7) obj. -17.6959 iterations 5
Cbc0038I Pass  34: suminf.    1.74015 (9) obj. -17.6959 iterations 6
Cbc0038I Pass  35: suminf.    1.89159 (7) obj. -17.6959 iterations 7
Cbc0038I Pass  36: suminf.    1.87929 (7) obj. -17.6959 iterations 3
Cbc0038I Pass  37: suminf.    1.96860 (6) obj. -17.6959 iterations 6
Cbc0038I Pass  38: suminf.    1.44688 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  39: suminf.    2.22747 (7) obj. -17.6959 iterations 4
Cbc0038I Pass  40: suminf.    2.05774 (8) obj. -17.6959 iterations 1
Cbc0038I Pass  41: suminf.    2.05774 (8) obj. -17.6959 iterations 0
Cbc0038I Pass  42: suminf.    1.98222 (6) obj. -17.6959 iterations 4
Cbc0038I Pass  43: suminf.    1.77646 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  44: suminf.    1.98222 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  45: suminf.    3.64140 (12) obj. -17.6959 iterations 22
Cbc0038I Pass  46: suminf.    1.94641 (8) obj. -17.6959 iterations 16
Cbc0038I Pass  47: suminf.    1.98705 (7) obj. -17.6959 iterations 6
Cbc0038I Pass  48: suminf.    1.67619 (7) obj. -17.6959 iterations 2
Cbc0038I Pass  49: suminf.    2.12864 (6) obj. -17.6959 iterations 2
Cbc0038I Pass  50: suminf.    1.64772 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  51: suminf.    2.96613 (9) obj. -17.6959 iterations 13
Cbc0038I Pass  52: suminf.    2.06014 (7) obj. -17.6959 iterations 11
Cbc0038I Pass  53: suminf.    2.01278 (8) obj. -17.6959 iterations 2
Cbc0038I Pass  54: suminf.    1.76695 (6) obj. -17.6959 iterations 7
Cbc0038I Pass  55: suminf.    1.72742 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  56: suminf.    1.93136 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  57: suminf.    1.59691 (6) obj. -17.6959 iterations 1
Cbc0038I Pass  58: suminf.    1.58012 (7) obj. -17.6959 iterations 1
Cbc0038I Pass  59: suminf.    2.33980 (8) obj. -17.6959 iterations 3
Cbc0038I Pass  60: suminf.    2.34139 (8) obj. -17.6959 iterations 4
Cbc0038I Rounding solution of -10.8177 is better than previous of -10.6633

Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 189 rows 101 columns, reduced to 106 rows 58 columns
Cbc0038I Mini branch and bound improved solution from -10.8177 to -11.6902 (0.17 seconds)
Cbc0038I Round again with cutoff of -23.5718
Cbc0038I Pass  60: suminf.    5.92834 (22) obj. -23.5718 iterations 7
Cbc0038I Pass  61: suminf.    5.68499 (18) obj. -23.5718 iterations 6
Cbc0038I Pass  62: suminf.    2.53408 (13) obj. -23.5718 iterations 18
Cbc0038I Pass  63: suminf.    2.53408 (13) obj. -23.5718 iterations 0
Cbc0038I Pass  64: suminf.    3.61869 (13) obj. -23.5718 iterations 20
Cbc0038I Pass  65: suminf.    2.40154 (9) obj. -23.5718 iterations 8
Cbc0038I Pass  66: suminf.    2.29884 (9) obj. -23.5718 iterations 3
Cbc0038I Pass  67: suminf.    2.74548 (9) obj. -23.5718 iterations 6
Cbc0038I Pass  68: suminf.    2.63698 (10) obj. -23.5718 iterations 3
Cbc0038I Pass  69: suminf.    3.32739 (10) obj. -23.5718 iterations 9
Cbc0038I Pass  70: suminf.    2.80652 (9) obj. -23.5718 iterations 3
Cbc0038I Pass  71: suminf.    2.87626 (10) obj. -23.5718 iterations 7
Cbc0038I Pass  72: suminf.    5.13097 (16) obj. -23.5718 iterations 21
Cbc0038I Pass  73: suminf.    2.02497 (7) obj. -23.5718 iterations 15
Cbc0038I Pass  74: suminf.    1.72335 (8) obj. -23.5718 iterations 2
Cbc0038I Pass  75: suminf.    2.90952 (9) obj. -23.5718 iterations 10
Cbc0038I Pass  76: suminf.    2.41261 (8) obj. -23.5718 iterations 7
Cbc0038I Pass  77: suminf.    1.93464 (9) obj. -23.5718 iterations 4
Cbc0038I Pass  78: suminf.    1.93464 (9) obj. -23.5718 iterations 0
Cbc0038I Pass  79: suminf.    2.30457 (12) obj. -23.5718 iterations 16
Cbc0038I Pass  80: suminf.    2.08756 (8) obj. -23.5718 iterations 7
Cbc0038I Pass  81: suminf.    2.48651 (7) obj. -23.5718 iterations 11
Cbc0038I Pass  82: suminf.    1.86912 (7) obj. -23.5718 iterations 5
Cbc0038I Pass  83: suminf.    4.65381 (14) obj. -23.5718 iterations 18
Cbc0038I Pass  84: suminf.    2.22716 (10) obj. -23.5718 iterations 31
Cbc0038I Pass  85: suminf.    2.09826 (10) obj. -23.5718 iterations 1
Cbc0038I Pass  86: suminf.    2.09826 (10) obj. -23.5718 iterations 0
Cbc0038I Pass  87: suminf.    2.43509 (8) obj. -23.5718 iterations 18
Cbc0038I Pass  88: suminf.    1.93731 (12) obj. -23.5718 iterations 3
Cbc0038I Pass  89: suminf.    1.93731 (12) obj. -23.5718 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 45 integers at bound fixed and 0 continuous
Cbc0038I Full problem 189 rows 101 columns, reduced to 104 rows 56 columns
Cbc0038I Mini branch and bound did not improve solution (0.22 seconds)
Cbc0038I After 0.22 seconds - Feasibility pump exiting with objective of -11.6902 - took 0.20 seconds
Cbc0012I Integer solution of -11.690171 found by feasibility pump after 0 iterations and 0 nodes (0.22 seconds)
Cbc0038I Full problem 189 rows 101 columns, reduced to 91 rows 53 columns
Cbc0031I 33 added rows had average density of 57.151515
Cbc0013I At root node, 33 cuts changed objective from -37.282094 to -28.728359 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 22538 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.155 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3288 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.171 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.155 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -11.690171 best solution, best possible -28.728359 (1.85 seconds)
Cbc0038I Full problem 189 rows 101 columns, reduced to 86 rows 48 columns
Cbc0012I Integer solution of -12.073924 found by RINS after 12104 iterations and 43 nodes (2.27 seconds)
Cbc0038I Full problem 189 rows 101 columns, reduced to 17 rows 15 columns
Cbc0012I Integer solution of -12.298811 found by rounding after 13428 iterations and 94 nodes (2.47 seconds)
Cbc0004I Integer solution of -12.380533 found after 13433 iterations and 96 nodes (2.48 seconds)
Cbc0010I After 123 nodes, 6 on tree, -12.380533 best solution, best possible -28.728359 (2.55 seconds)
Cbc0012I Integer solution of -12.387884 found by rounding after 16162 iterations and 175 nodes (2.78 seconds)
Cbc0001I Search completed - best objective -12.387884, took 16555 iterations and 190 nodes (2.79 seconds)
Cbc0032I Strong branching done 2232 times (34694 iterations), fathomed 13 nodes and fixed 103 variables
Cbc0035I Maximum depth 31, 255 variables fixed on reduced cost
Total time (CPU seconds):       2.64   (Wallclock seconds):       2.81

