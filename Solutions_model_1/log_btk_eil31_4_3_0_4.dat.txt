Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 32 (-33) rows, 19 (-14) columns and 96 (-87) elements
Clp1000I sum of infeasibilities 1.0313e-06 - average 3.22281e-08, 15 fixed columns
Coin0506I Presolve 3 (-29) rows, 3 (-16) columns and 8 (-88) elements
Clp0029I End of values pass after 3 iterations
Clp0000I Optimal - objective value 3727.8128
Clp0000I Optimal - objective value 3727.8128
Coin0511I After Postsolve, objective 3727.8128, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.7136561 - largest nonzero change 0 ( 0%) - largest zero change 2.5215374e-05
Clp0000I Optimal - objective value 3727.8128
Clp0000I Optimal - objective value 3727.8128
Clp0000I Optimal - objective value 3727.8128
Coin0511I After Postsolve, objective 3727.8128, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 3727.812793 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 31 rows, 19 columns (18 integer (18 of which binary)) and 97 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.613%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 3 integers unsatisfied sum - 1.3296
Cbc0038I Pass   1: suminf.    0.12500 (1) obj. -3456.48 iterations 5
Cbc0038I Solution found of -2394.09
Cbc0038I Relaxing continuous gives -2394.09
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 19 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -2527.46
Cbc0038I Pass   2: suminf.    0.12500 (1) obj. -3456.48 iterations 0
Cbc0038I Pass   3: suminf.    0.10985 (1) obj. -2527.46 iterations 2
Cbc0038I Pass   4: suminf.    0.24390 (1) obj. -2557.93 iterations 7
Cbc0038I Pass   5: suminf.    0.24390 (1) obj. -2557.93 iterations 1
Cbc0038I Pass   6: suminf.    0.26078 (1) obj. -2527.46 iterations 1
Cbc0038I Pass   7: suminf.    0.96275 (4) obj. -3119.24 iterations 5
Cbc0038I Pass   8: suminf.    0.41002 (2) obj. -2919.81 iterations 2
Cbc0038I Pass   9: suminf.    0.65415 (2) obj. -2527.46 iterations 3
Cbc0038I Pass  10: suminf.    0.65415 (2) obj. -2527.46 iterations 0
Cbc0038I Pass  11: suminf.    0.42813 (3) obj. -2527.46 iterations 5
Cbc0038I Pass  12: suminf.    0.20325 (1) obj. -2631.3 iterations 3
Cbc0038I Pass  13: suminf.    0.26078 (1) obj. -2527.46 iterations 1
Cbc0038I Pass  14: suminf.    0.47325 (2) obj. -2527.46 iterations 8
Cbc0038I Pass  15: suminf.    0.47325 (2) obj. -2527.46 iterations 1
Cbc0038I Pass  16: suminf.    0.00000 (0) obj. -3011.17 iterations 5
Cbc0038I Solution found of -3011.17
Cbc0038I Relaxing continuous gives -3011.17
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 19 columns, reduced to 17 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -3154.5
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  17: suminf.    0.12500 (1) obj. -3456.48 iterations 0
Cbc0038I Pass  18: suminf.    0.37372 (1) obj. -3154.5 iterations 2
Cbc0038I Pass  19: suminf.    0.67089 (2) obj. -3377.72 iterations 3
Cbc0038I Pass  20: suminf.    0.67089 (2) obj. -3377.72 iterations 0
Cbc0038I Pass  21: suminf.    0.72687 (3) obj. -3154.5 iterations 2
Cbc0038I Pass  22: suminf.    0.67089 (2) obj. -3377.72 iterations 2
Cbc0038I Pass  23: suminf.    0.38515 (2) obj. -3154.5 iterations 8
Cbc0038I Pass  24: suminf.    0.31532 (3) obj. -3241.03 iterations 3
Cbc0038I Pass  25: suminf.    0.97837 (5) obj. -3154.5 iterations 6
Cbc0038I Pass  26: suminf.    0.23416 (2) obj. -3154.5 iterations 4
Cbc0038I Pass  27: suminf.    0.91220 (3) obj. -3590.28 iterations 6
Cbc0038I Pass  28: suminf.    0.23416 (2) obj. -3154.5 iterations 7
Cbc0038I Pass  29: suminf.    0.42823 (3) obj. -3154.5 iterations 6
Cbc0038I Pass  30: suminf.    0.31532 (3) obj. -3241.03 iterations 3
Cbc0038I Pass  31: suminf.    0.97837 (5) obj. -3154.5 iterations 6
Cbc0038I Pass  32: suminf.    0.23416 (2) obj. -3154.5 iterations 4
Cbc0038I Pass  33: suminf.    0.91220 (3) obj. -3590.28 iterations 6
Cbc0038I Pass  34: suminf.    0.23416 (2) obj. -3154.5 iterations 7
Cbc0038I Pass  35: suminf.    0.67089 (2) obj. -3377.72 iterations 7
Cbc0038I Pass  36: suminf.    0.37372 (1) obj. -3154.5 iterations 2
Cbc0038I Pass  37: suminf.    0.12500 (1) obj. -3456.48 iterations 1
Cbc0038I Pass  38: suminf.    0.66982 (5) obj. -3238.33 iterations 4
Cbc0038I Pass  39: suminf.    0.31647 (2) obj. -3224.7 iterations 6
Cbc0038I Pass  40: suminf.    0.37470 (2) obj. -3154.5 iterations 1
Cbc0038I Pass  41: suminf.    0.45251 (2) obj. -3154.5 iterations 7
Cbc0038I Pass  42: suminf.    0.31647 (2) obj. -3224.7 iterations 4
Cbc0038I Pass  43: suminf.    0.59612 (3) obj. -3154.5 iterations 5
Cbc0038I Pass  44: suminf.    0.83564 (6) obj. -3154.5 iterations 14
Cbc0038I Pass  45: suminf.    0.83012 (5) obj. -3154.5 iterations 2
Cbc0038I Pass  46: suminf.    1.36069 (4) obj. -3154.5 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 31 rows 19 columns, reduced to 17 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -3011.17 - took 0.01 seconds
Cbc0012I Integer solution of -3011.173 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 31 rows 19 columns, reduced to 2 rows 3 columns
Cbc0031I 4 added rows had average density of 5.5
Cbc0013I At root node, 19 cuts changed objective from -3727.8128 to -3011.1731 in 79 passes
Cbc0014I Cut generator 0 (Probing) - 200 row cuts average 3.1 elements, 9 column cuts (9 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 388 row cuts average 14.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 28 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 110 row cuts average 13.2 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 18.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0011I Exiting as integer gap of 5.990931e-05 less than 1e-10 or 0.01%
Cbc0001I Search completed - best objective -3011.173, took 877 iterations and 0 nodes (0.08 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.08   (Wallclock seconds):       0.09

