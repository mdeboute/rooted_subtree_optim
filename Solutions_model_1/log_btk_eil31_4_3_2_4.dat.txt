Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 45 (-20) rows, 25 (-8) columns and 132 (-51) elements
Clp1000I sum of infeasibilities 2.52683e-06 - average 5.61517e-08, 2 fixed columns
Coin0506I Presolve 41 (-4) rows, 23 (-2) columns and 120 (-12) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 134.86085
Clp0000I Optimal - objective value 134.86085
Coin0511I After Postsolve, objective 134.86085, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 134.86085
Clp0000I Optimal - objective value 134.86085
Clp0000I Optimal - objective value 134.86085
Coin0511I After Postsolve, objective 134.86085, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 134.8608527 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 45 rows, 25 columns (24 integer (24 of which binary)) and 147 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.647%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 5.74215
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -40.4147 iterations 21
Cbc0038I Solution found of -40.4147
Cbc0038I Relaxing continuous gives -40.4147
Cbc0038I Rounding solution of -92.4772 is better than previous of -40.4147

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 45 rows 25 columns, reduced to 27 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -92.4772 to -93.0595 (0.02 seconds)
Cbc0038I Round again with cutoff of -96.8499
Cbc0038I Pass   2: suminf.    0.19125 (2) obj. -96.8499 iterations 1
Cbc0038I Pass   3: suminf.    0.19125 (2) obj. -96.8499 iterations 0
Cbc0038I Pass   4: suminf.    0.16842 (1) obj. -96.8499 iterations 2
Cbc0038I Pass   5: suminf.    0.05478 (1) obj. -96.8499 iterations 1
Cbc0038I Pass   6: suminf.    0.24319 (5) obj. -96.8499 iterations 7
Cbc0038I Pass   7: suminf.    0.08929 (3) obj. -96.8499 iterations 6
Cbc0038I Pass   8: suminf.    0.55084 (2) obj. -105.702 iterations 7
Cbc0038I Pass   9: suminf.    0.35789 (1) obj. -103.326 iterations 1
Cbc0038I Pass  10: suminf.    0.43903 (1) obj. -96.8499 iterations 1
Cbc0038I Pass  11: suminf.    1.06310 (5) obj. -96.8499 iterations 6
Cbc0038I Pass  12: suminf.    0.93229 (4) obj. -96.8499 iterations 2
Cbc0038I Pass  13: suminf.    0.31566 (3) obj. -96.8499 iterations 5
Cbc0038I Pass  14: suminf.    0.17391 (2) obj. -96.8499 iterations 1
Cbc0038I Pass  15: suminf.    1.00575 (3) obj. -96.8499 iterations 4
Cbc0038I Pass  16: suminf.    0.19113 (3) obj. -96.8499 iterations 2
Cbc0038I Pass  17: suminf.    0.31566 (3) obj. -96.8499 iterations 3
Cbc0038I Pass  18: suminf.    2.14164 (6) obj. -96.8499 iterations 14
Cbc0038I Pass  19: suminf.    1.52682 (6) obj. -96.8499 iterations 2
Cbc0038I Pass  20: suminf.    1.33562 (6) obj. -96.8499 iterations 7
Cbc0038I Pass  21: suminf.    1.14289 (3) obj. -96.8499 iterations 3
Cbc0038I Pass  22: suminf.    0.71346 (2) obj. -96.8499 iterations 3
Cbc0038I Pass  23: suminf.    1.08295 (3) obj. -96.8499 iterations 2
Cbc0038I Pass  24: suminf.    0.71346 (2) obj. -96.8499 iterations 2
Cbc0038I Pass  25: suminf.    0.94617 (3) obj. -96.8499 iterations 5
Cbc0038I Pass  26: suminf.    0.94617 (3) obj. -96.8499 iterations 2
Cbc0038I Pass  27: suminf.    0.76982 (2) obj. -96.8499 iterations 2
Cbc0038I Pass  28: suminf.    0.76982 (2) obj. -96.8499 iterations 0
Cbc0038I Pass  29: suminf.    0.80957 (2) obj. -96.8499 iterations 2
Cbc0038I Pass  30: suminf.    0.80234 (2) obj. -96.8499 iterations 1
Cbc0038I Pass  31: suminf.    0.80234 (2) obj. -96.8499 iterations 0
Cbc0038I Rounding solution of -95.189 is better than previous of -93.0595

Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 45 rows 25 columns, reduced to 37 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -103.672
Cbc0038I Pass  31: suminf.    0.35479 (2) obj. -103.672 iterations 0
Cbc0038I Pass  32: suminf.    0.35479 (2) obj. -103.672 iterations 0
Cbc0038I Pass  33: suminf.    0.16842 (1) obj. -103.672 iterations 2
Cbc0038I Pass  34: suminf.    0.14024 (1) obj. -103.672 iterations 1
Cbc0038I Pass  35: suminf.    0.69975 (3) obj. -103.672 iterations 4
Cbc0038I Pass  36: suminf.    0.14024 (1) obj. -103.672 iterations 3
Cbc0038I Pass  37: suminf.    3.58073 (11) obj. -103.672 iterations 12
Cbc0038I Pass  38: suminf.    1.17981 (6) obj. -103.672 iterations 9
Cbc0038I Pass  39: suminf.    0.74898 (3) obj. -103.672 iterations 5
Cbc0038I Pass  40: suminf.    0.66736 (4) obj. -103.672 iterations 5
Cbc0038I Pass  41: suminf.    0.20290 (2) obj. -105.356 iterations 3
Cbc0038I Pass  42: suminf.    0.80506 (3) obj. -103.672 iterations 5
Cbc0038I Pass  43: suminf.    2.51197 (7) obj. -103.672 iterations 13
Cbc0038I Pass  44: suminf.    1.39895 (5) obj. -103.672 iterations 6
Cbc0038I Pass  45: suminf.    1.10114 (5) obj. -103.672 iterations 6
Cbc0038I Pass  46: suminf.    0.88530 (4) obj. -103.672 iterations 2
Cbc0038I Pass  47: suminf.    1.74105 (8) obj. -103.672 iterations 5
Cbc0038I Pass  48: suminf.    0.95663 (3) obj. -103.672 iterations 11
Cbc0038I Pass  49: suminf.    0.44453 (2) obj. -103.672 iterations 3
Cbc0038I Pass  50: suminf.    0.68486 (2) obj. -103.672 iterations 3
Cbc0038I Pass  51: suminf.    1.84420 (5) obj. -103.672 iterations 7
Cbc0038I Pass  52: suminf.    1.84420 (5) obj. -103.672 iterations 0
Cbc0038I Pass  53: suminf.    1.70503 (4) obj. -103.672 iterations 10
Cbc0038I Pass  54: suminf.    0.91739 (5) obj. -103.672 iterations 5
Cbc0038I Pass  55: suminf.    0.91739 (5) obj. -103.672 iterations 0
Cbc0038I Pass  56: suminf.    0.68486 (2) obj. -103.672 iterations 10
Cbc0038I Pass  57: suminf.    0.44453 (2) obj. -103.672 iterations 3
Cbc0038I Pass  58: suminf.    1.24650 (4) obj. -103.672 iterations 8
Cbc0038I Pass  59: suminf.    1.24650 (4) obj. -103.672 iterations 1
Cbc0038I Pass  60: suminf.    1.41377 (3) obj. -103.672 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 45 rows 25 columns, reduced to 37 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -95.189 - took 0.05 seconds
Cbc0012I Integer solution of -95.18902 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 45 rows 25 columns, reduced to 31 rows 17 columns
Cbc0031I 7 added rows had average density of 18.714286
Cbc0013I At root node, 7 cuts changed objective from -130.96183 to -116.14052 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 808 row cuts average 4.7 elements, 2 column cuts (2 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 507 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 18 row cuts average 9.6 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -95.18902, took 2449 iterations and 18 nodes (0.27 seconds)
Cbc0032I Strong branching done 194 times (1547 iterations), fathomed 3 nodes and fixed 7 variables
Cbc0035I Maximum depth 5, 11 variables fixed on reduced cost
Total time (CPU seconds):       0.25   (Wallclock seconds):       0.27

