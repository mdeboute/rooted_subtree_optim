Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 42 (-7) rows, 23 (-2) columns and 123 (-12) elements
Clp1000I sum of infeasibilities 0.000211828 - average 5.04353e-06, 15 fixed columns
Coin0506I Presolve 10 (-32) rows, 8 (-15) columns and 30 (-93) elements
Clp0029I End of values pass after 8 iterations
Clp0000I Optimal - objective value 7536.6398
Clp0000I Optimal - objective value 7536.6398
Coin0511I After Postsolve, objective 7536.6398, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 2.0190019 - largest nonzero change 0 ( 0%) - largest zero change 2.3530591e-05
Clp0000I Optimal - objective value 7536.6398
Clp0000I Optimal - objective value 7536.6398
Clp0000I Optimal - objective value 7536.6398
Coin0511I After Postsolve, objective 7536.6398, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 7536.639816 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 42 rows, 23 columns (22 integer (22 of which binary)) and 123 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.995%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 1.97165
Cbc0038I Solution found of -3212.31
Cbc0038I Relaxing continuous gives -3212.31
Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 23 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound improved solution from -3212.31 to -3224.17 (0.01 seconds)
Cbc0038I Round again with cutoff of -3398.1
Cbc0038I Pass   1: suminf.    0.05014 (1) obj. -3398.1 iterations 8
Cbc0038I Pass   2: suminf.    0.42829 (1) obj. -4799.38 iterations 1
Cbc0038I Pass   3: suminf.    0.22707 (1) obj. -4196.86 iterations 6
Cbc0038I Pass   4: suminf.    0.01110 (1) obj. -3398.1 iterations 5
Cbc0038I Pass   5: suminf.    0.19566 (1) obj. -4107.79 iterations 1
Cbc0038I Pass   6: suminf.    0.03345 (1) obj. -3398.1 iterations 4
Cbc0038I Pass   7: suminf.    0.03345 (1) obj. -3398.1 iterations 1
Cbc0038I Pass   8: suminf.    0.28718 (1) obj. -4373.76 iterations 1
Cbc0038I Pass   9: suminf.    0.14418 (1) obj. -4072.36 iterations 2
Cbc0038I Solution found of -3517.92
Cbc0038I Relaxing continuous gives -3517.92
Cbc0038I Rounding solution of -3689.88 is better than previous of -3517.92

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -3944.59
Cbc0038I Pass  10: suminf.    0.19762 (1) obj. -3944.59 iterations 0
Cbc0038I Pass  11: suminf.    0.42829 (1) obj. -4799.38 iterations 1
Cbc0038I Pass  12: suminf.    0.38561 (1) obj. -4682.05 iterations 4
Cbc0038I Pass  13: suminf.    0.17982 (1) obj. -3944.59 iterations 4
Cbc0038I Pass  14: suminf.    0.23951 (1) obj. -4174.14 iterations 1
Cbc0038I Pass  15: suminf.    0.25756 (1) obj. -4534.47 iterations 7
Cbc0038I Pass  16: suminf.    0.09837 (1) obj. -3944.59 iterations 3
Cbc0038I Pass  17: suminf.    0.25756 (1) obj. -4534.47 iterations 2
Cbc0038I Pass  18: suminf.    1.75679 (4) obj. -3944.59 iterations 5
Cbc0038I Pass  19: suminf.    0.08732 (1) obj. -3944.59 iterations 5
Cbc0038I Pass  20: suminf.    0.22829 (1) obj. -4466.98 iterations 2
Cbc0038I Pass  21: suminf.    0.62071 (5) obj. -3944.59 iterations 5
Cbc0038I Pass  22: suminf.    0.08525 (1) obj. -3944.59 iterations 14
Cbc0038I Pass  23: suminf.    0.08525 (1) obj. -3944.59 iterations 2
Cbc0038I Pass  24: suminf.    0.09414 (1) obj. -3978.77 iterations 1
Cbc0038I Pass  25: suminf.    1.92679 (5) obj. -3944.59 iterations 7
Cbc0038I Pass  26: suminf.    1.92679 (5) obj. -3944.59 iterations 1
Cbc0038I Pass  27: suminf.    0.25187 (2) obj. -4520.72 iterations 4
Cbc0038I Pass  28: suminf.    0.09703 (1) obj. -3944.59 iterations 2
Cbc0038I Pass  29: suminf.    0.11797 (1) obj. -4025.1 iterations 1
Cbc0038I Pass  30: suminf.    0.39618 (3) obj. -3944.59 iterations 10
Cbc0038I Pass  31: suminf.    0.13995 (2) obj. -3944.59 iterations 2
Cbc0038I Pass  32: suminf.    0.18561 (1) obj. -4288.24 iterations 2
Cbc0038I Pass  33: suminf.    0.08950 (1) obj. -3944.59 iterations 2
Cbc0038I Pass  34: suminf.    0.20623 (1) obj. -4393.47 iterations 1
Cbc0038I Pass  35: suminf.    0.96152 (5) obj. -3944.59 iterations 11
Cbc0038I Pass  36: suminf.    0.75605 (3) obj. -3944.59 iterations 9
Cbc0038I Pass  37: suminf.    0.25080 (2) obj. -3944.59 iterations 2
Cbc0038I Pass  38: suminf.    0.13683 (1) obj. -4064.39 iterations 2
Cbc0038I Pass  39: suminf.    0.10070 (1) obj. -3944.59 iterations 2
Cbc0038I Rounding solution of -3702.72 is better than previous of -3689.88

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 42 rows 23 columns, reduced to 8 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -3702.72 to -3867.17 (0.02 seconds)
Cbc0038I Round again with cutoff of -4250.24
Cbc0038I Pass  39: suminf.    0.28010 (1) obj. -4250.24 iterations 0
Cbc0038I Pass  40: suminf.    0.42829 (1) obj. -4799.38 iterations 1
Cbc0038I Pass  41: suminf.    1.55122 (4) obj. -4250.24 iterations 8
Cbc0038I Pass  42: suminf.    0.45268 (1) obj. -4668.57 iterations 6
Cbc0038I Pass  43: suminf.    0.33979 (1) obj. -4250.24 iterations 1
Cbc0038I Pass  44: suminf.    0.59269 (3) obj. -4250.24 iterations 7
Cbc0038I Pass  45: suminf.    0.23701 (3) obj. -4250.24 iterations 4
Cbc0038I Pass  46: suminf.    0.21301 (1) obj. -4272.02 iterations 3
Cbc0038I Pass  47: suminf.    0.20734 (1) obj. -4250.24 iterations 1
Cbc0038I Pass  48: suminf.    0.21301 (1) obj. -4272.02 iterations 1
Cbc0038I Pass  49: suminf.    0.23701 (3) obj. -4250.24 iterations 4
Cbc0038I Pass  50: suminf.    1.12032 (3) obj. -4250.24 iterations 10
Cbc0038I Pass  51: suminf.    0.74988 (2) obj. -4250.24 iterations 3
Cbc0038I Pass  52: suminf.    0.26783 (1) obj. -4250.24 iterations 2
Cbc0038I Pass  53: suminf.    0.32818 (1) obj. -4482.3 iterations 1
Cbc0038I Pass  54: suminf.    0.27849 (1) obj. -4250.24 iterations 2
Cbc0038I Pass  55: suminf.    0.36070 (1) obj. -4566.38 iterations 1
Cbc0038I Pass  56: suminf.    0.27849 (1) obj. -4250.24 iterations 1
Cbc0038I Pass  57: suminf.    0.97277 (3) obj. -4250.24 iterations 2
Cbc0038I Pass  58: suminf.    0.24470 (1) obj. -4250.24 iterations 1
Cbc0038I Pass  59: suminf.    0.32293 (1) obj. -4551.06 iterations 1
Cbc0038I Pass  60: suminf.    0.25366 (1) obj. -4405.56 iterations 6
Cbc0038I Pass  61: suminf.    0.21327 (1) obj. -4250.24 iterations 1
Cbc0038I Pass  62: suminf.    0.25366 (1) obj. -4405.56 iterations 1
Cbc0038I Pass  63: suminf.    0.21327 (1) obj. -4250.24 iterations 2
Cbc0038I Pass  64: suminf.    0.18426 (2) obj. -4250.24 iterations 5
Cbc0038I Pass  65: suminf.    0.18426 (2) obj. -4250.24 iterations 1
Cbc0038I Pass  66: suminf.    0.25694 (2) obj. -4519.23 iterations 1
Cbc0038I Pass  67: suminf.    1.09371 (3) obj. -4250.24 iterations 5
Cbc0038I Pass  68: suminf.    0.25223 (1) obj. -4250.24 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -3867.17 - took 0.02 seconds
Cbc0012I Integer solution of -3867.1689 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 42 rows 23 columns, reduced to 7 rows 11 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 10 added rows had average density of 5.6
Cbc0013I At root node, 10 cuts changed objective from -4963.4291 to -3868.0477 in 12 passes
Cbc0014I Cut generator 0 (Probing) - 107 row cuts average 6.0 elements, 7 column cuts (7 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 31 row cuts average 19.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 27 row cuts average 9.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 3 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 11 row cuts average 19.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 44 row cuts average 16.3 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0001I Search completed - best objective -3867.168900000001, took 77 iterations and 0 nodes (0.04 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.08

