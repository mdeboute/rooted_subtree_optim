Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 61 (-8) rows, 33 (-2) columns and 180 (-15) elements
Clp1000I sum of infeasibilities 3.31468e-05 - average 5.43391e-07, 2 fixed columns
Coin0506I Presolve 55 (-6) rows, 30 (-3) columns and 162 (-18) elements
Clp0029I End of values pass after 30 iterations
Clp0000I Optimal - objective value 88.353084
Clp0000I Optimal - objective value 88.353084
Coin0511I After Postsolve, objective 88.353084, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 88.353084
Clp0000I Optimal - objective value 88.353084
Clp0000I Optimal - objective value 88.353084
Coin0511I After Postsolve, objective 88.353084, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 88.35308387 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 61 rows, 33 columns (32 integer (32 of which binary)) and 182 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.804%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 21 integers unsatisfied sum - 7.4416
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 14.555 iterations 24
Cbc0038I Solution found of 14.555
Cbc0038I Relaxing continuous gives 14.555
Cbc0038I Rounding solution of -15.0661 is better than previous of 14.555

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 61 rows 33 columns, reduced to 39 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -15.0661 to -39.1334 (0.03 seconds)
Cbc0038I Round again with cutoff of -44.0554
Cbc0038I Pass   2: suminf.    1.75218 (6) obj. -44.0554 iterations 10
Cbc0038I Pass   3: suminf.    1.16171 (4) obj. -44.0554 iterations 7
Cbc0038I Pass   4: suminf.    1.25119 (3) obj. -44.0554 iterations 3
Cbc0038I Pass   5: suminf.    0.56376 (2) obj. -44.0554 iterations 2
Cbc0038I Pass   6: suminf.    0.54506 (2) obj. -44.0554 iterations 2
Cbc0038I Pass   7: suminf.    0.54506 (2) obj. -44.0554 iterations 0
Cbc0038I Pass   8: suminf.    0.69129 (2) obj. -44.0554 iterations 2
Cbc0038I Pass   9: suminf.    1.74727 (8) obj. -44.0554 iterations 12
Cbc0038I Pass  10: suminf.    1.74727 (8) obj. -44.0554 iterations 3
Cbc0038I Pass  11: suminf.    0.66379 (3) obj. -44.0554 iterations 15
Cbc0038I Pass  12: suminf.    0.54766 (2) obj. -44.0554 iterations 2
Cbc0038I Pass  13: suminf.    0.45263 (2) obj. -44.0554 iterations 2
Cbc0038I Pass  14: suminf.    0.75686 (2) obj. -44.0554 iterations 2
Cbc0038I Pass  15: suminf.    0.75686 (2) obj. -44.0554 iterations 0
Cbc0038I Pass  16: suminf.    0.81462 (3) obj. -44.0554 iterations 2
Cbc0038I Pass  17: suminf.    0.45298 (2) obj. -44.0554 iterations 3
Cbc0038I Pass  18: suminf.    0.20500 (2) obj. -44.0554 iterations 2
Cbc0038I Pass  19: suminf.    0.20500 (2) obj. -44.0554 iterations 1
Cbc0038I Pass  20: suminf.    0.78853 (2) obj. -44.0554 iterations 2
Cbc0038I Pass  21: suminf.    1.23145 (6) obj. -44.0554 iterations 9
Cbc0038I Pass  22: suminf.    0.78121 (6) obj. -44.0554 iterations 6
Cbc0038I Pass  23: suminf.    1.52321 (5) obj. -44.0554 iterations 15
Cbc0038I Pass  24: suminf.    0.87520 (2) obj. -44.0554 iterations 3
Cbc0038I Pass  25: suminf.    0.79716 (2) obj. -44.0554 iterations 1
Cbc0038I Pass  26: suminf.    0.87520 (2) obj. -44.0554 iterations 1
Cbc0038I Pass  27: suminf.    1.26738 (5) obj. -44.0554 iterations 6
Cbc0038I Pass  28: suminf.    1.16040 (4) obj. -44.0554 iterations 5
Cbc0038I Pass  29: suminf.    0.89409 (2) obj. -44.0554 iterations 4
Cbc0038I Pass  30: suminf.    0.78621 (2) obj. -44.0554 iterations 1
Cbc0038I Pass  31: suminf.    1.15161 (4) obj. -44.0554 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 61 rows 33 columns, reduced to 47 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -39.1334 - took 0.05 seconds
Cbc0012I Integer solution of -39.13336 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 61 rows 33 columns, reduced to 39 rows 22 columns
Cbc0031I 13 added rows had average density of 30.846154
Cbc0013I At root node, 13 cuts changed objective from -88.353084 to -64.861346 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2186 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1148 row cuts average 33.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 19 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 92 row cuts average 32.9 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0001I Search completed - best objective -39.13336000000001, took 4046 iterations and 20 nodes (0.43 seconds)
Cbc0032I Strong branching done 288 times (3681 iterations), fathomed 3 nodes and fixed 15 variables
Cbc0035I Maximum depth 5, 26 variables fixed on reduced cost
Total time (CPU seconds):       0.41   (Wallclock seconds):       0.43

