Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 175 (-30) rows, 95 (-8) columns and 533 (-70) elements
Clp1000I sum of infeasibilities 2.9178e-05 - average 1.66732e-07, 25 fixed columns
Coin0506I Presolve 113 (-62) rows, 69 (-26) columns and 357 (-176) elements
Clp0029I End of values pass after 69 iterations
Clp0014I Perturbing problem by 0.001% of 2.3039484 - largest nonzero change 2.6009659e-05 ( 0.0016981022%) - largest zero change 2.3094151e-05
Clp0000I Optimal - objective value 97.798209
Clp0000I Optimal - objective value 97.798209
Coin0511I After Postsolve, objective 97.798209, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 97.798209
Clp0000I Optimal - objective value 97.798209
Clp0000I Optimal - objective value 97.798209
Coin0511I After Postsolve, objective 97.798209, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 97.79820909 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 175 rows, 95 columns (94 integer (94 of which binary)) and 533 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.953%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 26 integers unsatisfied sum - 8.3927
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -39.7697 iterations 35
Cbc0038I Solution found of -39.7697
Cbc0038I Relaxing continuous gives -39.7697
Cbc0038I Rounding solution of -56.5855 is better than previous of -39.7697

Cbc0038I Before mini branch and bound, 68 integers at bound fixed and 0 continuous
Cbc0038I Full problem 175 rows 95 columns, reduced to 38 rows 27 columns
Cbc0038I Mini branch and bound improved solution from -56.5855 to -69.4337 (0.03 seconds)
Cbc0038I Round again with cutoff of -72.2703
Cbc0038I Pass   2: suminf.    1.40641 (4) obj. -72.2703 iterations 13
Cbc0038I Pass   3: suminf.    1.40641 (4) obj. -72.2703 iterations 0
Cbc0038I Pass   4: suminf.    0.53706 (2) obj. -72.2703 iterations 9
Cbc0038I Pass   5: suminf.    0.52623 (2) obj. -72.2703 iterations 5
Cbc0038I Pass   6: suminf.    0.86406 (6) obj. -72.2703 iterations 10
Cbc0038I Pass   7: suminf.    2.44304 (9) obj. -72.2703 iterations 10
Cbc0038I Pass   8: suminf.    1.35625 (6) obj. -72.2703 iterations 10
Cbc0038I Pass   9: suminf.    1.93927 (6) obj. -72.2703 iterations 5
Cbc0038I Pass  10: suminf.    0.53706 (2) obj. -72.2703 iterations 9
Cbc0038I Pass  11: suminf.    0.52623 (2) obj. -72.2703 iterations 3
Cbc0038I Pass  12: suminf.    0.86406 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  13: suminf.    2.44304 (9) obj. -72.2703 iterations 10
Cbc0038I Pass  14: suminf.    1.35625 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  15: suminf.    1.93927 (6) obj. -72.2703 iterations 5
Cbc0038I Pass  16: suminf.    0.53706 (2) obj. -72.2703 iterations 9
Cbc0038I Pass  17: suminf.    0.52623 (2) obj. -72.2703 iterations 3
Cbc0038I Pass  18: suminf.    0.86406 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  19: suminf.    2.44304 (9) obj. -72.2703 iterations 10
Cbc0038I Pass  20: suminf.    1.35625 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  21: suminf.    1.93927 (6) obj. -72.2703 iterations 5
Cbc0038I Pass  22: suminf.    0.53706 (2) obj. -72.2703 iterations 9
Cbc0038I Pass  23: suminf.    0.52623 (2) obj. -72.2703 iterations 3
Cbc0038I Pass  24: suminf.    0.86406 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  25: suminf.    2.44304 (9) obj. -72.2703 iterations 10
Cbc0038I Pass  26: suminf.    1.35625 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  27: suminf.    1.93927 (6) obj. -72.2703 iterations 5
Cbc0038I Pass  28: suminf.    0.53706 (2) obj. -72.2703 iterations 9
Cbc0038I Pass  29: suminf.    0.52623 (2) obj. -72.2703 iterations 3
Cbc0038I Pass  30: suminf.    0.86406 (6) obj. -72.2703 iterations 10
Cbc0038I Pass  31: suminf.    2.44304 (9) obj. -72.2703 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 175 rows 95 columns, reduced to 40 rows 29 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -69.4337 - took 0.04 seconds
Cbc0012I Integer solution of -69.433714 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 175 rows 95 columns, reduced to 38 rows 27 columns
Cbc0031I 12 added rows had average density of 24
Cbc0013I At root node, 12 cuts changed objective from -97.798209 to -81.267133 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3474 row cuts average 3.4 elements, 5 column cuts (5 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1138 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 118 row cuts average 27.6 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0016I Integer solution of -69.504094 found by strong branching after 3372 iterations and 12 nodes (0.48 seconds)
Cbc0012I Integer solution of -69.868894 found by rounding after 3395 iterations and 15 nodes (0.48 seconds)
Cbc0012I Integer solution of -70.966073 found by DiveCoefficient after 3438 iterations and 19 nodes (0.49 seconds)
Cbc0001I Search completed - best objective -70.96607299999999, took 3473 iterations and 20 nodes (0.49 seconds)
Cbc0032I Strong branching done 196 times (2148 iterations), fathomed 5 nodes and fixed 12 variables
Cbc0035I Maximum depth 5, 156 variables fixed on reduced cost
Total time (CPU seconds):       0.47   (Wallclock seconds):       0.49

