Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 86 (-13) rows, 48 (-2) columns and 260 (-25) elements
Clp1000I sum of infeasibilities 1.49864e-07 - average 1.7426e-09, 4 fixed columns
Coin0506I Presolve 79 (-7) rows, 44 (-4) columns and 238 (-22) elements
Clp0029I End of values pass after 44 iterations
Clp0014I Perturbing problem by 0.001% of 20.83645 - largest nonzero change 0 ( 0%) - largest zero change 2.5115664e-05
Clp0000I Optimal - objective value 159583.38
Clp0000I Optimal - objective value 159583.38
Coin0511I After Postsolve, objective 159583.38, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 159583.38
Clp0000I Optimal - objective value 159583.38
Clp0000I Optimal - objective value 159583.38
Coin0511I After Postsolve, objective 159583.38, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 159583.3838 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 86 rows, 48 columns (47 integer (47 of which binary)) and 260 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.804%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 6.26658
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -157441 iterations 26
Cbc0038I Solution found of -157441
Cbc0038I Relaxing continuous gives -157441
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 86 rows 48 columns, reduced to 25 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -157441 to -158524 (0.02 seconds)
Cbc0038I Round again with cutoff of -158630
Cbc0038I Pass   2: suminf.    2.00000 (8) obj. -158630 iterations 10
Cbc0038I Pass   3: suminf.    2.83868 (12) obj. -158630 iterations 17
Cbc0038I Pass   4: suminf.    0.82477 (3) obj. -158630 iterations 12
Cbc0038I Pass   5: suminf.    0.31120 (2) obj. -158630 iterations 2
Cbc0038I Pass   6: suminf.    0.99199 (2) obj. -158630 iterations 2
Cbc0038I Pass   7: suminf.    0.99199 (2) obj. -158630 iterations 0
Cbc0038I Pass   8: suminf.    0.64965 (2) obj. -158630 iterations 5
Cbc0038I Pass   9: suminf.    0.61742 (2) obj. -158630 iterations 1
Cbc0038I Pass  10: suminf.    0.18558 (2) obj. -158630 iterations 2
Cbc0038I Pass  11: suminf.    0.97666 (2) obj. -158630 iterations 2
Cbc0038I Pass  12: suminf.    0.97666 (2) obj. -158630 iterations 0
Cbc0038I Pass  13: suminf.    0.67676 (2) obj. -158630 iterations 7
Cbc0038I Pass  14: suminf.    0.67676 (2) obj. -158630 iterations 0
Cbc0038I Pass  15: suminf.    0.18558 (2) obj. -158630 iterations 2
Cbc0038I Pass  16: suminf.    0.97666 (2) obj. -158630 iterations 2
Cbc0038I Pass  17: suminf.    0.97666 (2) obj. -158630 iterations 0
Cbc0038I Pass  18: suminf.    0.67676 (2) obj. -158630 iterations 7
Cbc0038I Pass  19: suminf.    0.67676 (2) obj. -158630 iterations 0
Cbc0038I Pass  20: suminf.    0.18558 (2) obj. -158630 iterations 2
Cbc0038I Pass  21: suminf.    0.97666 (2) obj. -158630 iterations 2
Cbc0038I Pass  22: suminf.    0.97666 (2) obj. -158630 iterations 0
Cbc0038I Pass  23: suminf.    0.67676 (2) obj. -158630 iterations 7
Cbc0038I Pass  24: suminf.    0.67676 (2) obj. -158630 iterations 0
Cbc0038I Pass  25: suminf.    0.18558 (2) obj. -158630 iterations 2
Cbc0038I Pass  26: suminf.    0.97666 (2) obj. -158630 iterations 2
Cbc0038I Pass  27: suminf.    0.97666 (2) obj. -158630 iterations 0
Cbc0038I Pass  28: suminf.    0.67676 (2) obj. -158630 iterations 7
Cbc0038I Pass  29: suminf.    0.67676 (2) obj. -158630 iterations 0
Cbc0038I Pass  30: suminf.    0.18558 (2) obj. -158630 iterations 2
Cbc0038I Pass  31: suminf.    0.97666 (2) obj. -158630 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 86 rows 48 columns, reduced to 29 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -158524 - took 0.02 seconds
Cbc0012I Integer solution of -158523.6 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 86 rows 48 columns, reduced to 25 rows 18 columns
Cbc0031I 13 added rows had average density of 31.692308
Cbc0013I At root node, 13 cuts changed objective from -159583.38 to -158642.92 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2068 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 866 row cuts average 43.2 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 79 row cuts average 39.7 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0001I Search completed - best objective -158523.6, took 2235 iterations and 2 nodes (0.26 seconds)
Cbc0032I Strong branching done 64 times (914 iterations), fathomed 2 nodes and fixed 2 variables
Cbc0035I Maximum depth 0, 18 variables fixed on reduced cost
Total time (CPU seconds):       0.26   (Wallclock seconds):       0.27

