Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 52 (-17) rows, 28 (-7) columns and 153 (-42) elements
Clp1000I sum of infeasibilities 1.86585e-06 - average 3.58818e-08, 3 fixed columns
Coin0506I Presolve 47 (-5) rows, 25 (-3) columns and 137 (-16) elements
Clp0029I End of values pass after 25 iterations
Clp0000I Optimal - objective value 221.04182
Clp0000I Optimal - objective value 221.04182
Coin0511I After Postsolve, objective 221.04182, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 221.04182
Clp0000I Optimal - objective value 221.04182
Clp0000I Optimal - objective value 221.04182
Coin0511I After Postsolve, objective 221.04182, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 221.0418218 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0004I processed model has 52 rows, 28 columns (27 integer (27 of which binary)) and 155 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.386%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 15 integers unsatisfied sum - 5.9057
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -127.833 iterations 14
Cbc0038I Solution found of -127.833
Cbc0038I Relaxing continuous gives -127.833
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 28 columns, reduced to 30 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -136.805
Cbc0038I Pass   2: suminf.    0.14222 (2) obj. -136.805 iterations 2
Cbc0038I Pass   3: suminf.    0.38900 (2) obj. -136.805 iterations 2
Cbc0038I Pass   4: suminf.    0.69096 (2) obj. -136.805 iterations 3
Cbc0038I Pass   5: suminf.    0.38094 (2) obj. -136.805 iterations 2
Cbc0038I Pass   6: suminf.    1.98139 (8) obj. -136.805 iterations 5
Cbc0038I Pass   7: suminf.    1.25208 (5) obj. -136.805 iterations 2
Cbc0038I Pass   8: suminf.    0.87965 (5) obj. -136.805 iterations 2
Cbc0038I Pass   9: suminf.    1.43202 (6) obj. -136.805 iterations 8
Cbc0038I Pass  10: suminf.    1.43202 (6) obj. -136.805 iterations 0
Cbc0038I Pass  11: suminf.    0.54786 (4) obj. -136.805 iterations 8
Cbc0038I Pass  12: suminf.    0.25217 (3) obj. -136.805 iterations 2
Cbc0038I Pass  13: suminf.    1.93773 (5) obj. -136.805 iterations 6
Cbc0038I Pass  14: suminf.    0.43556 (2) obj. -136.805 iterations 4
Cbc0038I Pass  15: suminf.    0.32895 (2) obj. -136.805 iterations 1
Cbc0038I Pass  16: suminf.    0.38900 (2) obj. -136.805 iterations 2
Cbc0038I Pass  17: suminf.    0.69096 (2) obj. -136.805 iterations 3
Cbc0038I Pass  18: suminf.    0.38094 (2) obj. -136.805 iterations 2
Cbc0038I Pass  19: suminf.    0.93750 (6) obj. -136.805 iterations 5
Cbc0038I Pass  20: suminf.    0.85145 (4) obj. -136.805 iterations 2
Cbc0038I Pass  21: suminf.    1.47223 (6) obj. -136.805 iterations 8
Cbc0038I Pass  22: suminf.    1.05612 (4) obj. -136.805 iterations 3
Cbc0038I Pass  23: suminf.    1.43202 (6) obj. -136.805 iterations 8
Cbc0038I Pass  24: suminf.    1.43202 (6) obj. -136.805 iterations 0
Cbc0038I Pass  25: suminf.    0.54786 (4) obj. -136.805 iterations 8
Cbc0038I Pass  26: suminf.    0.25217 (3) obj. -136.805 iterations 2
Cbc0038I Pass  27: suminf.    1.93773 (5) obj. -136.805 iterations 6
Cbc0038I Pass  28: suminf.    0.43556 (2) obj. -136.805 iterations 4
Cbc0038I Pass  29: suminf.    0.32895 (2) obj. -136.805 iterations 1
Cbc0038I Pass  30: suminf.    0.38900 (2) obj. -136.805 iterations 2
Cbc0038I Pass  31: suminf.    0.69096 (2) obj. -136.805 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 28 columns, reduced to 32 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -127.833 - took 0.02 seconds
Cbc0012I Integer solution of -127.8333 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 52 rows 28 columns, reduced to 30 rows 16 columns
Cbc0031I 10 added rows had average density of 22.6
Cbc0013I At root node, 10 cuts changed objective from -217.54807 to -163.3691 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 787 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 493 row cuts average 24.9 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 16 row cuts average 5.4 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 7 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 133 row cuts average 21.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -127.8333, took 1386 iterations and 4 nodes (0.15 seconds)
Cbc0032I Strong branching done 28 times (179 iterations), fathomed 0 nodes and fixed 5 variables
Cbc0035I Maximum depth 1, 8 variables fixed on reduced cost
Total time (CPU seconds):       0.15   (Wallclock seconds):       0.15

