Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 33 (-14) rows, 22 (-2) columns and 102 (-27) elements
Clp1000I sum of infeasibilities 6.06662e-06 - average 1.83837e-07, 1 fixed columns
Coin0506I Presolve 32 (-1) rows, 21 (-1) columns and 98 (-4) elements
Clp0029I End of values pass after 21 iterations
Clp0000I Optimal - objective value 60.055212
Clp0000I Optimal - objective value 60.055212
Coin0511I After Postsolve, objective 60.055212, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 60.055212
Clp0000I Optimal - objective value 60.055212
Clp0000I Optimal - objective value 60.055212
Coin0511I After Postsolve, objective 60.055212, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 60.05521193 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 33 rows, 22 columns (21 integer (21 of which binary)) and 102 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.131%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 4.08092
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -1.29235 iterations 15
Cbc0038I Solution found of -1.29235
Cbc0038I Relaxing continuous gives -1.29235
Cbc0038I Rounding solution of -4.55197 is better than previous of -1.29235

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 22 columns, reduced to 22 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -4.55197 to -21.5078 (0.01 seconds)
Cbc0038I Round again with cutoff of -25.3626
Cbc0038I Pass   2: suminf.    0.96974 (3) obj. -25.3626 iterations 4
Cbc0038I Pass   3: suminf.    0.84134 (4) obj. -25.3626 iterations 3
Cbc0038I Pass   4: suminf.    1.11464 (3) obj. -25.3626 iterations 3
Cbc0038I Pass   5: suminf.    0.72698 (3) obj. -25.3626 iterations 2
Cbc0038I Pass   6: suminf.    0.49503 (4) obj. -25.3626 iterations 4
Cbc0038I Pass   7: suminf.    0.25399 (2) obj. -25.3626 iterations 8
Cbc0038I Pass   8: suminf.    0.95857 (3) obj. -25.3626 iterations 2
Cbc0038I Pass   9: suminf.    0.75297 (2) obj. -25.3626 iterations 1
Cbc0038I Pass  10: suminf.    0.46393 (3) obj. -25.3626 iterations 5
Cbc0038I Pass  11: suminf.    0.46393 (3) obj. -25.3626 iterations 0
Cbc0038I Pass  12: suminf.    0.67159 (3) obj. -25.3626 iterations 9
Cbc0038I Pass  13: suminf.    0.49417 (4) obj. -25.3626 iterations 4
Cbc0038I Pass  14: suminf.    1.48935 (4) obj. -25.3626 iterations 4
Cbc0038I Pass  15: suminf.    1.37443 (5) obj. -25.3626 iterations 2
Cbc0038I Pass  16: suminf.    1.37443 (5) obj. -25.3626 iterations 0
Cbc0038I Pass  17: suminf.    0.47499 (2) obj. -25.3626 iterations 4
Cbc0038I Pass  18: suminf.    0.40305 (2) obj. -25.3626 iterations 2
Cbc0038I Pass  19: suminf.    0.95196 (3) obj. -25.3626 iterations 4
Cbc0038I Pass  20: suminf.    0.49417 (4) obj. -25.3626 iterations 5
Cbc0038I Pass  21: suminf.    1.48935 (4) obj. -25.3626 iterations 4
Cbc0038I Pass  22: suminf.    1.37443 (5) obj. -25.3626 iterations 2
Cbc0038I Pass  23: suminf.    1.37443 (5) obj. -25.3626 iterations 0
Cbc0038I Pass  24: suminf.    0.47499 (2) obj. -25.3626 iterations 4
Cbc0038I Pass  25: suminf.    0.40305 (2) obj. -25.3626 iterations 2
Cbc0038I Pass  26: suminf.    0.95196 (3) obj. -25.3626 iterations 4
Cbc0038I Pass  27: suminf.    0.49417 (4) obj. -25.3626 iterations 5
Cbc0038I Pass  28: suminf.    1.48935 (4) obj. -25.3626 iterations 4
Cbc0038I Pass  29: suminf.    1.37443 (5) obj. -25.3626 iterations 2
Cbc0038I Pass  30: suminf.    1.37443 (5) obj. -25.3626 iterations 0
Cbc0038I Pass  31: suminf.    0.47499 (2) obj. -25.3626 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 33 rows 22 columns, reduced to 26 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -21.5078 - took 0.02 seconds
Cbc0012I Integer solution of -21.50775 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 33 rows 22 columns, reduced to 22 rows 15 columns
Cbc0031I 14 added rows had average density of 16.857143
Cbc0013I At root node, 14 cuts changed objective from -60.055212 to -45.036634 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2219 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 677 row cuts average 21.6 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 131 row cuts average 6.4 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 113 row cuts average 19.3 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0001I Search completed - best objective -21.50775, took 2795 iterations and 8 nodes (0.23 seconds)
Cbc0032I Strong branching done 108 times (1391 iterations), fathomed 0 nodes and fixed 8 variables
Cbc0035I Maximum depth 3, 17 variables fixed on reduced cost
Total time (CPU seconds):       0.22   (Wallclock seconds):       0.23

