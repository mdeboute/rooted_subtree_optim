Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 158 (-62) rows, 81 (-30) columns and 394 (-150) elements
Clp0000I Optimal - objective value 9388836
Coin0511I After Postsolve, objective 9388836, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 9388836.049 - 69 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 158 rows, 81 columns (80 integer (80 of which binary)) and 394 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.189%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 28 integers unsatisfied sum - 3.44798
Cbc0038I Pass   1: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 21
Cbc0038I Solution found of -9.14167e+06
Cbc0038I Relaxing continuous gives -9.14167e+06
Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 158 rows 81 columns, reduced to 57 rows 32 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -9.16639e+06
Cbc0038I Reduced cost fixing fixed 11 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 0
Cbc0038I Pass   3: suminf.    0.06254 (3) obj. -9.16639e+06 iterations 9
Cbc0038I Pass   4: suminf.    0.57364 (4) obj. -9.16639e+06 iterations 11
Cbc0038I Pass   5: suminf.    0.54323 (2) obj. -9.16639e+06 iterations 9
Cbc0038I Pass   6: suminf.    0.36949 (2) obj. -9.16639e+06 iterations 26
Cbc0038I Pass   7: suminf.    0.23410 (3) obj. -9.16639e+06 iterations 4
Cbc0038I Pass   8: suminf.    0.29167 (3) obj. -9.18914e+06 iterations 9
Cbc0038I Pass   9: suminf.    0.32729 (4) obj. -9.16639e+06 iterations 14
Cbc0038I Pass  10: suminf.    0.32729 (4) obj. -9.16639e+06 iterations 4
Cbc0038I Pass  11: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 8
Cbc0038I Pass  12: suminf.    0.06254 (3) obj. -9.16639e+06 iterations 10
Cbc0038I Pass  13: suminf.    1.37131 (8) obj. -9.16639e+06 iterations 15
Cbc0038I Pass  14: suminf.    0.06254 (3) obj. -9.16639e+06 iterations 16
Cbc0038I Pass  15: suminf.    0.05507 (3) obj. -9.16639e+06 iterations 7
Cbc0038I Pass  16: suminf.    0.05507 (3) obj. -9.16639e+06 iterations 9
Cbc0038I Pass  17: suminf.    0.12500 (3) obj. -9.19403e+06 iterations 7
Cbc0038I Pass  18: suminf.    1.51076 (5) obj. -9.16639e+06 iterations 22
Cbc0038I Pass  19: suminf.    1.16044 (3) obj. -9.16639e+06 iterations 19
Cbc0038I Pass  20: suminf.    1.37500 (3) obj. -9.25119e+06 iterations 8
Cbc0038I Pass  21: suminf.    1.82982 (6) obj. -9.16639e+06 iterations 8
Cbc0038I Pass  22: suminf.    1.37500 (3) obj. -9.25119e+06 iterations 9
Cbc0038I Pass  23: suminf.    1.44652 (4) obj. -9.16639e+06 iterations 7
Cbc0038I Pass  24: suminf.    1.48751 (5) obj. -9.16639e+06 iterations 17
Cbc0038I Pass  25: suminf.    1.48751 (5) obj. -9.16639e+06 iterations 2
Cbc0038I Pass  26: suminf.    0.06254 (3) obj. -9.16639e+06 iterations 26
Cbc0038I Pass  27: suminf.    0.06254 (3) obj. -9.16639e+06 iterations 0
Cbc0038I Pass  28: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 10
Cbc0038I Pass  29: suminf.    0.46562 (5) obj. -9.16639e+06 iterations 16
Cbc0038I Pass  30: suminf.    1.35423 (3) obj. -9.16639e+06 iterations 19
Cbc0038I Pass  31: suminf.    1.35423 (3) obj. -9.16639e+06 iterations 10
Cbc0038I Rounding solution of -9.14462e+06 is better than previous of -9.14167e+06

Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 158 rows 81 columns, reduced to 85 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -9.21088e+06
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 0
Cbc0038I Pass  32: suminf.    0.17510 (3) obj. -9.21088e+06 iterations 9
Cbc0038I Pass  33: suminf.    0.91355 (5) obj. -9.21088e+06 iterations 11
Cbc0038I Pass  34: suminf.    0.50359 (4) obj. -9.21088e+06 iterations 5
Cbc0038I Pass  35: suminf.    1.44262 (4) obj. -9.31401e+06 iterations 26
Cbc0038I Pass  36: suminf.    0.79081 (9) obj. -9.21088e+06 iterations 8
Cbc0038I Pass  37: suminf.    0.56222 (7) obj. -9.21088e+06 iterations 23
Cbc0038I Pass  38: suminf.    0.79081 (9) obj. -9.21088e+06 iterations 28
Cbc0038I Pass  39: suminf.    1.39904 (5) obj. -9.21088e+06 iterations 20
Cbc0038I Pass  40: suminf.    2.27064 (8) obj. -9.21088e+06 iterations 9
Cbc0038I Pass  41: suminf.    0.79081 (9) obj. -9.21088e+06 iterations 11
Cbc0038I Pass  42: suminf.    1.24784 (11) obj. -9.21088e+06 iterations 12
Cbc0038I Pass  43: suminf.    1.17052 (4) obj. -9.21088e+06 iterations 6
Cbc0038I Pass  44: suminf.    1.08710 (11) obj. -9.21088e+06 iterations 18
Cbc0038I Pass  45: suminf.    0.75669 (3) obj. -9.21088e+06 iterations 23
Cbc0038I Pass  46: suminf.    0.72143 (6) obj. -9.21088e+06 iterations 8
Cbc0038I Pass  47: suminf.    0.84878 (4) obj. -9.21088e+06 iterations 26
Cbc0038I Pass  48: suminf.    0.84878 (4) obj. -9.21088e+06 iterations 0
Cbc0038I Pass  49: suminf.    0.17510 (3) obj. -9.21088e+06 iterations 23
Cbc0038I Pass  50: suminf.    0.17510 (3) obj. -9.21088e+06 iterations 0
Cbc0038I Pass  51: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 8
Cbc0038I Pass  52: suminf.    1.02065 (3) obj. -9.21088e+06 iterations 15
Cbc0038I Pass  53: suminf.    0.95386 (4) obj. -9.21088e+06 iterations 17
Cbc0038I Pass  54: suminf.    1.15914 (4) obj. -9.21088e+06 iterations 5
Cbc0038I Pass  55: suminf.    0.95386 (4) obj. -9.21088e+06 iterations 4
Cbc0038I Pass  56: suminf.    0.17510 (3) obj. -9.21088e+06 iterations 23
Cbc0038I Pass  57: suminf.    0.17510 (3) obj. -9.21088e+06 iterations 0
Cbc0038I Pass  58: suminf.    0.58333 (3) obj. -9.37223e+06 iterations 10
Cbc0038I Pass  59: suminf.    1.10828 (4) obj. -9.21088e+06 iterations 18
Cbc0038I Pass  60: suminf.    1.10828 (4) obj. -9.21088e+06 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 158 rows 81 columns, reduced to 86 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -9.14462e+06 - took 0.03 seconds
Cbc0012I Integer solution of -9144622.4 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 158 rows 81 columns, reduced to 59 rows 33 columns
Cbc0031I 4 added rows had average density of 54.5
Cbc0013I At root node, 4 cuts changed objective from -9388836 to -9217748.2 in 8 passes
Cbc0014I Cut generator 0 (Probing) - 10 row cuts average 12.8 elements, 5 column cuts (5 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 7 row cuts average 46.1 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 25.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 30 row cuts average 45.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 8 row cuts average 80.0 elements, 0 column cuts (0 active)  in 0.061 seconds - new frequency is 1
Cbc0001I Search completed - best objective -9144622.4, took 237 iterations and 8 nodes (0.69 seconds)
Cbc0032I Strong branching done 74 times (214 iterations), fathomed 2 nodes and fixed 1 variables
Cbc0035I Maximum depth 3, 21 variables fixed on reduced cost
Total time (CPU seconds):       0.42   (Wallclock seconds):       0.69

