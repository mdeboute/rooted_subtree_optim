Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 153 (-52) rows, 84 (-19) columns and 468 (-135) elements
Clp1000I sum of infeasibilities 1.07901e-07 - average 7.05237e-10, 77 fixed columns
Coin0506I Presolve 9 (-144) rows, 7 (-77) columns and 26 (-442) elements
Clp0029I End of values pass after 7 iterations
Clp0000I Optimal - objective value 25111.796
Clp0000I Optimal - objective value 25111.796
Coin0511I After Postsolve, objective 25111.796, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.26526927 - largest nonzero change 0 ( 0%) - largest zero change 2.9865189e-05
Clp0000I Optimal - objective value 25111.796
Clp0000I Optimal - objective value 25111.796
Clp0000I Optimal - objective value 25111.796
Coin0511I After Postsolve, objective 25111.796, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 25111.7957 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 153 rows, 84 columns (83 integer (83 of which binary)) and 468 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.064%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 6 integers unsatisfied sum - 2.81081
Cbc0038I Pass   1: suminf.    0.94040 (3) obj. -23961.7 iterations 25
Cbc0038I Pass   2: suminf.    0.94040 (3) obj. -23961.7 iterations 0
Cbc0038I Solution found of -18773.9
Cbc0038I Relaxing continuous gives -18773.9
Cbc0038I Rounding solution of -22030 is better than previous of -18773.9

Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Full problem 153 rows 84 columns, reduced to 11 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -22030 to -23882.4 (0.01 seconds)
Cbc0038I Round again with cutoff of -24005.4
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 2
Cbc0038I Pass   3: suminf.    0.94285 (4) obj. -24005.4 iterations 3
Cbc0038I Pass   4: suminf.    0.94285 (4) obj. -24005.4 iterations 0
Cbc0038I Pass   5: suminf.    0.41625 (1) obj. -24005.4 iterations 17
Cbc0038I Pass   6: suminf.    0.41625 (1) obj. -24005.4 iterations 0
Cbc0038I Pass   7: suminf.    0.46154 (1) obj. -24111.8 iterations 4
Cbc0038I Pass   8: suminf.    0.91318 (5) obj. -24005.4 iterations 17
Cbc0038I Pass   9: suminf.    0.82044 (5) obj. -24005.4 iterations 20
Cbc0038I Pass  10: suminf.    0.39558 (2) obj. -24005.4 iterations 22
Cbc0038I Pass  11: suminf.    0.59137 (2) obj. -24823.6 iterations 6
Cbc0038I Pass  12: suminf.    0.32258 (1) obj. -24530.6 iterations 3
Cbc0038I Pass  13: suminf.    0.08844 (1) obj. -24005.4 iterations 6
Cbc0038I Pass  14: suminf.    0.19231 (1) obj. -24249.6 iterations 4
Cbc0038I Pass  15: suminf.    1.22659 (5) obj. -24005.4 iterations 20
Cbc0038I Pass  16: suminf.    1.21857 (4) obj. -24005.4 iterations 13
Cbc0038I Pass  17: suminf.    0.64453 (3) obj. -24005.4 iterations 19
Cbc0038I Pass  18: suminf.    0.64453 (3) obj. -24005.4 iterations 0
Cbc0038I Pass  19: suminf.    0.59137 (2) obj. -24823.6 iterations 13
Cbc0038I Pass  20: suminf.    0.32258 (1) obj. -24530.6 iterations 3
Cbc0038I Pass  21: suminf.    0.08844 (1) obj. -24005.4 iterations 6
Cbc0038I Pass  22: suminf.    0.19231 (1) obj. -24249.6 iterations 3
Cbc0038I Pass  23: suminf.    0.41116 (5) obj. -24005.4 iterations 8
Cbc0038I Pass  24: suminf.    1.14363 (3) obj. -24005.4 iterations 17
Cbc0038I Pass  25: suminf.    1.14363 (3) obj. -24005.4 iterations 1
Cbc0038I Pass  26: suminf.    0.14786 (1) obj. -24005.4 iterations 23
Cbc0038I Pass  27: suminf.    0.38462 (1) obj. -24562 iterations 3
Cbc0038I Pass  28: suminf.    2.09986 (7) obj. -24005.4 iterations 12
Cbc0038I Pass  29: suminf.    0.20672 (2) obj. -24005.4 iterations 14
Cbc0038I Pass  30: suminf.    0.14715 (2) obj. -24005.4 iterations 6
Cbc0038I Pass  31: suminf.    0.39848 (2) obj. -24264.6 iterations 3
Cbc0038I Pass  32: suminf.    0.71945 (3) obj. -24005.4 iterations 11
Cbc0038I Rounding solution of -24102.5 is better than previous of -23882.4

Cbc0038I Before mini branch and bound, 55 integers at bound fixed and 0 continuous
Cbc0038I Full problem 153 rows 84 columns, reduced to 19 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -24102.5 to -24433.7 (0.03 seconds)
Cbc0038I Round again with cutoff of -24569.3
Cbc0038I Reduced cost fixing fixed 41 variables on major pass 3
Cbc0038I Pass  32: suminf.    1.03580 (4) obj. -24569.3 iterations 6
Cbc0038I Pass  33: suminf.    1.03580 (4) obj. -24569.3 iterations 0
Cbc0038I Pass  34: suminf.    0.58249 (2) obj. -24569.3 iterations 12
Cbc0038I Pass  35: suminf.    0.38462 (1) obj. -24773.4 iterations 7
Cbc0038I Pass  36: suminf.    0.47143 (1) obj. -24569.3 iterations 3
Cbc0038I Pass  37: suminf.    1.34130 (4) obj. -24569.3 iterations 14
Cbc0038I Pass  38: suminf.    0.48289 (2) obj. -24569.3 iterations 12
Cbc0038I Pass  39: suminf.    0.72882 (2) obj. -24569.3 iterations 8
Cbc0038I Pass  40: suminf.    0.50000 (2) obj. -24665.7 iterations 7
Cbc0038I Pass  41: suminf.    0.59800 (2) obj. -24569.3 iterations 3
Cbc0038I Pass  42: suminf.    0.66599 (3) obj. -24569.3 iterations 8
Cbc0038I Pass  43: suminf.    0.76832 (4) obj. -24569.3 iterations 14
Cbc0038I Pass  44: suminf.    0.54078 (4) obj. -24569.3 iterations 10
Cbc0038I Pass  45: suminf.    0.94910 (4) obj. -24569.3 iterations 12
Cbc0038I Pass  46: suminf.    0.84407 (4) obj. -24569.3 iterations 13
Cbc0038I Pass  47: suminf.    0.54078 (4) obj. -24569.3 iterations 17
Cbc0038I Pass  48: suminf.    0.68500 (6) obj. -24569.3 iterations 7
Cbc0038I Pass  49: suminf.    0.99874 (4) obj. -24569.3 iterations 13
Cbc0038I Pass  50: suminf.    1.31132 (4) obj. -24569.3 iterations 16
Cbc0038I Pass  51: suminf.    1.42878 (4) obj. -24569.3 iterations 16
Cbc0038I Pass  52: suminf.    0.69479 (4) obj. -24569.3 iterations 15
Cbc0038I Pass  53: suminf.    0.69479 (4) obj. -24569.3 iterations 2
Cbc0038I Pass  54: suminf.    0.44560 (3) obj. -24569.3 iterations 8
Cbc0038I Pass  55: suminf.    0.26923 (1) obj. -24572.4 iterations 6
Cbc0038I Pass  56: suminf.    0.27055 (1) obj. -24569.3 iterations 3
Cbc0038I Pass  57: suminf.    0.79945 (3) obj. -24569.3 iterations 7
Cbc0038I Pass  58: suminf.    0.59115 (2) obj. -24569.3 iterations 17
Cbc0038I Pass  59: suminf.    0.88071 (2) obj. -24859.1 iterations 14
Cbc0038I Pass  60: suminf.    0.78541 (2) obj. -24569.3 iterations 3
Cbc0038I Pass  61: suminf.    0.59115 (2) obj. -24569.3 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 67 integers at bound fixed and 0 continuous
Cbc0038I Full problem 153 rows 84 columns, reduced to 20 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -24433.7 - took 0.03 seconds
Cbc0012I Integer solution of -24433.685 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 153 rows 84 columns, reduced to 9 rows 8 columns
Cbc0031I 7 added rows had average density of 10
Cbc0013I At root node, 7 cuts changed objective from -25111.796 to -24673.078 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 7 row cuts average 2.4 elements, 5 column cuts (5 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 19 row cuts average 7.8 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 54 row cuts average 13.3 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 83.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -24433.685, took 97 iterations and 2 nodes (0.05 seconds)
Cbc0032I Strong branching done 18 times (82 iterations), fathomed 0 nodes and fixed 1 variables
Cbc0035I Maximum depth 0, 39 variables fixed on reduced cost
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.05

