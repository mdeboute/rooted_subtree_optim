Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 261 (-3) columns and 1498 (-47) elements
Clp1000I sum of infeasibilities 2.86558e-05 - average 5.68568e-08, 65 fixed columns
Coin0506I Presolve 371 (-133) rows, 193 (-68) columns and 1099 (-399) elements
Clp0029I End of values pass after 193 iterations
Clp0014I Perturbing problem by 0.001% of 2.1608484 - largest nonzero change 0 ( 0%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 138.91628
Clp0000I Optimal - objective value 138.91628
Coin0511I After Postsolve, objective 138.91628, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 138.91628
Clp0000I Optimal - objective value 138.91628
Clp0000I Optimal - objective value 138.91628
Coin0511I After Postsolve, objective 138.91628, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 138.916278 - 0 iterations time 0.172, Presolve 0.00, Idiot 0.16

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 261 columns (260 integer (260 of which binary)) and 1498 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 80 integers unsatisfied sum - 12.0741
Cbc0038I Solution found of 4.98837
Cbc0038I Relaxing continuous gives -9.67084
Cbc0038I Before mini branch and bound, 180 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 150 rows 81 columns
Cbc0038I Mini branch and bound improved solution from -9.67084 to -81.4524 (0.15 seconds)
Cbc0038I Round again with cutoff of -87.1988
Cbc0038I Pass   1: suminf.    3.98607 (43) obj. -87.1988 iterations 221
Cbc0038I Pass   2: suminf.    3.98607 (43) obj. -87.1988 iterations 0
Cbc0038I Pass   3: suminf.    3.24904 (11) obj. -87.1988 iterations 72
Cbc0038I Pass   4: suminf.    2.21233 (14) obj. -87.1988 iterations 36
Cbc0038I Pass   5: suminf.    3.10098 (10) obj. -87.1988 iterations 47
Cbc0038I Pass   6: suminf.    2.95028 (10) obj. -87.1988 iterations 17
Cbc0038I Pass   7: suminf.    3.31430 (11) obj. -87.1988 iterations 20
Cbc0038I Pass   8: suminf.    2.48122 (11) obj. -87.1988 iterations 7
Cbc0038I Pass   9: suminf.    2.47346 (11) obj. -87.1988 iterations 5
Cbc0038I Pass  10: suminf.    3.73471 (10) obj. -87.1988 iterations 11
Cbc0038I Pass  11: suminf.    3.68283 (11) obj. -87.1988 iterations 14
Cbc0038I Pass  12: suminf.    3.46173 (10) obj. -87.1988 iterations 3
Cbc0038I Pass  13: suminf.    2.88824 (11) obj. -87.1988 iterations 14
Cbc0038I Pass  14: suminf.    2.77933 (10) obj. -87.1988 iterations 29
Cbc0038I Pass  15: suminf.    2.41941 (7) obj. -87.1988 iterations 20
Cbc0038I Pass  16: suminf.    2.41941 (7) obj. -87.1988 iterations 0
Cbc0038I Pass  17: suminf.    2.63942 (7) obj. -87.1988 iterations 19
Cbc0038I Pass  18: suminf.    2.23526 (9) obj. -87.1988 iterations 12
Cbc0038I Pass  19: suminf.    4.24012 (11) obj. -87.1988 iterations 16
Cbc0038I Pass  20: suminf.    2.09036 (10) obj. -87.1988 iterations 10
Cbc0038I Pass  21: suminf.    2.09036 (10) obj. -87.1988 iterations 4
Cbc0038I Pass  22: suminf.    3.22378 (11) obj. -87.1988 iterations 17
Cbc0038I Pass  23: suminf.    2.50372 (11) obj. -87.1988 iterations 21
Cbc0038I Pass  24: suminf.    2.41941 (7) obj. -87.1988 iterations 6
Cbc0038I Pass  25: suminf.    2.41941 (7) obj. -87.1988 iterations 0
Cbc0038I Pass  26: suminf.    2.63942 (7) obj. -87.1988 iterations 20
Cbc0038I Pass  27: suminf.    2.23526 (9) obj. -87.1988 iterations 12
Cbc0038I Pass  28: suminf.    4.24012 (11) obj. -87.1988 iterations 15
Cbc0038I Pass  29: suminf.    2.09036 (10) obj. -87.1988 iterations 9
Cbc0038I Pass  30: suminf.    2.09036 (10) obj. -87.1988 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 160 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 187 rows 101 columns
Cbc0038I Mini branch and bound improved solution from -81.4524 to -83.7328 (0.40 seconds)
Cbc0038I Round again with cutoff of -97.5423
Cbc0038I Pass  30: suminf.    4.66795 (60) obj. -97.5423 iterations 2
Cbc0038I Pass  31: suminf.    4.66795 (60) obj. -97.5423 iterations 0
Cbc0038I Pass  32: suminf.    4.51040 (14) obj. -97.5423 iterations 82
Cbc0038I Pass  33: suminf.    3.03189 (16) obj. -97.5423 iterations 32
Cbc0038I Pass  34: suminf.    3.03095 (17) obj. -97.5423 iterations 3
Cbc0038I Pass  35: suminf.    4.70358 (13) obj. -97.5423 iterations 56
Cbc0038I Pass  36: suminf.    3.93567 (15) obj. -97.5423 iterations 39
Cbc0038I Pass  37: suminf.    5.35858 (16) obj. -97.5423 iterations 30
Cbc0038I Pass  38: suminf.    5.08083 (23) obj. -97.5423 iterations 26
Cbc0038I Pass  39: suminf.    4.47350 (33) obj. -97.5423 iterations 29
Cbc0038I Pass  40: suminf.    4.33014 (46) obj. -97.5423 iterations 24
Cbc0038I Pass  41: suminf.    4.46496 (13) obj. -97.5423 iterations 77
Cbc0038I Pass  42: suminf.    3.35720 (14) obj. -97.5423 iterations 23
Cbc0038I Pass  43: suminf.    3.35720 (14) obj. -97.5423 iterations 2
Cbc0038I Pass  44: suminf.    5.30049 (15) obj. -97.5423 iterations 37
Cbc0038I Pass  45: suminf.    3.75024 (32) obj. -97.5423 iterations 43
Cbc0038I Pass  46: suminf.    5.39760 (16) obj. -97.5423 iterations 49
Cbc0038I Pass  47: suminf.    3.80262 (18) obj. -97.5423 iterations 26
Cbc0038I Pass  48: suminf.    3.80262 (18) obj. -97.5423 iterations 0
Cbc0038I Pass  49: suminf.    4.12801 (16) obj. -97.5423 iterations 22
Cbc0038I Pass  50: suminf.    3.39010 (16) obj. -97.5423 iterations 53
Cbc0038I Pass  51: suminf.    4.99962 (14) obj. -97.5423 iterations 31
Cbc0038I Pass  52: suminf.    9.75085 (34) obj. -97.5423 iterations 53
Cbc0038I Pass  53: suminf.    5.64661 (27) obj. -97.5423 iterations 64
Cbc0038I Pass  54: suminf.    5.43929 (19) obj. -97.5423 iterations 11
Cbc0038I Pass  55: suminf.    4.67780 (18) obj. -97.5423 iterations 4
Cbc0038I Pass  56: suminf.    4.09584 (17) obj. -97.5423 iterations 15
Cbc0038I Pass  57: suminf.    5.49026 (15) obj. -97.5423 iterations 37
Cbc0038I Pass  58: suminf.    3.74421 (14) obj. -97.5423 iterations 34
Cbc0038I Pass  59: suminf.    5.16244 (16) obj. -97.5423 iterations 32
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 146 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 261 columns, reduced to 215 rows 115 columns
Cbc0038I Mini branch and bound did not improve solution (0.66 seconds)
Cbc0038I After 0.67 seconds - Feasibility pump exiting with objective of -83.7328 - took 0.60 seconds
Cbc0012I Integer solution of -83.732763 found by feasibility pump after 0 iterations and 0 nodes (0.67 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 150 rows 81 columns
Cbc0031I 38 added rows had average density of 130.44737
Cbc0013I At root node, 38 cuts changed objective from -138.91628 to -126.43503 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 44201 row cuts average 3.2 elements, 1 column cuts (1 active)  in 1.194 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3676 row cuts average 258.7 elements, 0 column cuts (0 active)  in 1.263 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.061 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.288 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.454 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.084 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 239 row cuts average 253.4 elements, 0 column cuts (0 active)  in 0.485 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -83.732763 best solution, best possible -126.43503 (14.53 seconds)
Cbc0010I After 3 nodes, 4 on tree, -83.732763 best solution, best possible -126.43503 (15.29 seconds)
Cbc0010I After 6 nodes, 7 on tree, -83.732763 best solution, best possible -126.43503 (16.00 seconds)
Cbc0010I After 24 nodes, 7 on tree, -83.732763 best solution, best possible -126.43503 (16.70 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 41 rows 28 columns
Cbc0010I After 52 nodes, 11 on tree, -83.732763 best solution, best possible -126.43503 (17.41 seconds)
Cbc0010I After 87 nodes, 14 on tree, -83.732763 best solution, best possible -126.43503 (18.12 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 146 rows 80 columns
Cbc0010I After 153 nodes, 6 on tree, -83.732763 best solution, best possible -126.43503 (18.88 seconds)
Cbc0010I After 197 nodes, 4 on tree, -83.732763 best solution, best possible -126.43503 (19.60 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 36 rows 26 columns
Cbc0010I After 282 nodes, 6 on tree, -83.732763 best solution, best possible -126.43503 (20.31 seconds)
Cbc0038I Full problem 504 rows 261 columns, reduced to 19 rows 14 columns
Cbc0010I After 348 nodes, 1 on tree, -83.732763 best solution, best possible -84.073632 (21.02 seconds)
Cbc0001I Search completed - best objective -83.73276299999998, took 36928 iterations and 350 nodes (21.03 seconds)
Cbc0032I Strong branching done 3264 times (79489 iterations), fathomed 52 nodes and fixed 259 variables
Cbc0035I Maximum depth 60, 2055 variables fixed on reduced cost
Total time (CPU seconds):       20.01   (Wallclock seconds):       21.17

