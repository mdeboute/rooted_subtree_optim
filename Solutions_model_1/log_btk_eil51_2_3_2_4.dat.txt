Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 84 (-21) rows, 51 (-2) columns and 262 (-41) elements
Clp1000I sum of infeasibilities 1.99194e-05 - average 2.37135e-07, 3 fixed columns
Coin0506I Presolve 79 (-5) rows, 48 (-3) columns and 246 (-16) elements
Clp0029I End of values pass after 48 iterations
Clp0000I Optimal - objective value 36.653124
Clp0000I Optimal - objective value 36.653124
Coin0511I After Postsolve, objective 36.653124, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 36.653124
Clp0000I Optimal - objective value 36.653124
Clp0000I Optimal - objective value 36.653124
Coin0511I After Postsolve, objective 36.653124, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36.65312438 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 84 rows, 51 columns (50 integer (50 of which binary)) and 262 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.561%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 41 integers unsatisfied sum - 8.76504
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.47787 iterations 37
Cbc0038I Solution found of 6.47787
Cbc0038I Relaxing continuous gives 6.47787
Cbc0038I Rounding solution of 3.93276 is better than previous of 6.47787

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 51 columns, reduced to 69 rows 42 columns
Cbc0038I Mini branch and bound improved solution from 3.93276 to -7.45145 (0.05 seconds)
Cbc0038I Round again with cutoff of -10.3717
Cbc0038I Pass   2: suminf.    2.13164 (7) obj. -10.3717 iterations 10
Cbc0038I Pass   3: suminf.    1.71567 (5) obj. -10.3717 iterations 10
Cbc0038I Pass   4: suminf.    0.89109 (4) obj. -10.3717 iterations 12
Cbc0038I Pass   5: suminf.    0.89109 (4) obj. -10.3717 iterations 0
Cbc0038I Pass   6: suminf.    1.41779 (4) obj. -10.3717 iterations 4
Cbc0038I Pass   7: suminf.    1.41213 (4) obj. -10.3717 iterations 2
Cbc0038I Pass   8: suminf.    1.50956 (4) obj. -10.3717 iterations 2
Cbc0038I Pass   9: suminf.    0.98042 (5) obj. -10.3717 iterations 12
Cbc0038I Pass  10: suminf.    0.98042 (5) obj. -10.3717 iterations 4
Cbc0038I Pass  11: suminf.    1.93644 (6) obj. -10.3717 iterations 11
Cbc0038I Pass  12: suminf.    1.71567 (5) obj. -10.3717 iterations 4
Cbc0038I Pass  13: suminf.    1.71567 (5) obj. -10.3717 iterations 0
Cbc0038I Pass  14: suminf.    0.89109 (4) obj. -10.3717 iterations 12
Cbc0038I Pass  15: suminf.    0.89109 (4) obj. -10.3717 iterations 0
Cbc0038I Pass  16: suminf.    1.41779 (4) obj. -10.3717 iterations 4
Cbc0038I Pass  17: suminf.    1.41213 (4) obj. -10.3717 iterations 2
Cbc0038I Pass  18: suminf.    1.50956 (4) obj. -10.3717 iterations 2
Cbc0038I Pass  19: suminf.    1.34380 (5) obj. -10.3717 iterations 14
Cbc0038I Pass  20: suminf.    1.10935 (4) obj. -10.3717 iterations 7
Cbc0038I Pass  21: suminf.    0.90200 (4) obj. -10.3717 iterations 10
Cbc0038I Pass  22: suminf.    0.85053 (3) obj. -10.3717 iterations 1
Cbc0038I Pass  23: suminf.    1.35921 (4) obj. -10.3717 iterations 2
Cbc0038I Pass  24: suminf.    2.30152 (8) obj. -10.3717 iterations 13
Cbc0038I Pass  25: suminf.    0.96957 (4) obj. -10.3717 iterations 8
Cbc0038I Pass  26: suminf.    0.96957 (4) obj. -10.3717 iterations 1
Cbc0038I Pass  27: suminf.    1.29096 (3) obj. -10.3717 iterations 3
Cbc0038I Pass  28: suminf.    0.83202 (3) obj. -10.3717 iterations 2
Cbc0038I Pass  29: suminf.    0.83202 (3) obj. -10.3717 iterations 1
Cbc0038I Pass  30: suminf.    1.29096 (3) obj. -10.3717 iterations 2
Cbc0038I Pass  31: suminf.    3.34037 (13) obj. -10.3717 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 51 columns, reduced to 78 rows 48 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -7.45145 - took 0.09 seconds
Cbc0012I Integer solution of -7.45145 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0031I 22 added rows had average density of 36
Cbc0013I At root node, 22 cuts changed objective from -36.653124 to -27.007515 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 9084 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.049 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1672 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 62 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 172 row cuts average 50.8 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0010I After 23 nodes, 7 on tree, -7.45145 best solution, best possible -27.007515 (0.68 seconds)
Cbc0001I Search completed - best objective -7.451450000000001, took 7251 iterations and 30 nodes (0.69 seconds)
Cbc0032I Strong branching done 494 times (9014 iterations), fathomed 4 nodes and fixed 11 variables
Cbc0035I Maximum depth 13, 54 variables fixed on reduced cost
Total time (CPU seconds):       0.67   (Wallclock seconds):       0.70

