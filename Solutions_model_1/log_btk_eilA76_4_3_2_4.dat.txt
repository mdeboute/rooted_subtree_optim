Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 122 (-33) rows, 70 (-8) columns and 376 (-77) elements
Clp1000I sum of infeasibilities 3.49575e-05 - average 2.86537e-07, 24 fixed columns
Coin0506I Presolve 75 (-47) rows, 44 (-26) columns and 230 (-146) elements
Clp0029I End of values pass after 44 iterations
Clp0014I Perturbing problem by 0.001% of 2.284645 - largest nonzero change 0 ( 0%) - largest zero change 2.5735924e-05
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 55.49776462 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 122 rows, 70 columns (69 integer (69 of which binary)) and 377 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.236%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 5.9046
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -5.28638 iterations 31
Cbc0038I Solution found of -5.28638
Cbc0038I Relaxing continuous gives -5.28638
Cbc0038I Rounding solution of -28.1234 is better than previous of -5.28638

Cbc0038I Before mini branch and bound, 45 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 42 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -28.1234 to -28.3789 (0.02 seconds)
Cbc0038I Round again with cutoff of -31.0909
Cbc0038I Pass   2: suminf.    1.82618 (5) obj. -31.0909 iterations 8
Cbc0038I Pass   3: suminf.    0.92146 (3) obj. -31.0909 iterations 3
Cbc0038I Pass   4: suminf.    0.64705 (2) obj. -31.0909 iterations 4
Cbc0038I Pass   5: suminf.    0.66903 (2) obj. -31.0909 iterations 1
Cbc0038I Pass   6: suminf.    0.62954 (2) obj. -31.0909 iterations 3
Cbc0038I Pass   7: suminf.    3.08140 (13) obj. -31.0909 iterations 16
Cbc0038I Pass   8: suminf.    1.04997 (5) obj. -31.0909 iterations 14
Cbc0038I Pass   9: suminf.    0.92765 (4) obj. -31.0909 iterations 2
Cbc0038I Pass  10: suminf.    0.92900 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  11: suminf.    0.92900 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  12: suminf.    0.67300 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  13: suminf.    0.63065 (3) obj. -31.0909 iterations 1
Cbc0038I Pass  14: suminf.    1.61951 (4) obj. -31.0909 iterations 7
Cbc0038I Pass  15: suminf.    0.95284 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  16: suminf.    0.66408 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  17: suminf.    0.59810 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  18: suminf.    2.56803 (8) obj. -31.0909 iterations 18
Cbc0038I Pass  19: suminf.    1.52589 (6) obj. -31.0909 iterations 6
Cbc0038I Pass  20: suminf.    1.25024 (6) obj. -31.0909 iterations 3
Cbc0038I Pass  21: suminf.    1.67672 (4) obj. -31.0909 iterations 18
Cbc0038I Pass  22: suminf.    1.67672 (4) obj. -31.0909 iterations 0
Cbc0038I Pass  23: suminf.    0.71591 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  24: suminf.    0.63116 (3) obj. -31.0909 iterations 4
Cbc0038I Pass  25: suminf.    3.00328 (8) obj. -31.0909 iterations 10
Cbc0038I Pass  26: suminf.    1.75327 (7) obj. -31.0909 iterations 7
Cbc0038I Pass  27: suminf.    0.77362 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  28: suminf.    0.77362 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  29: suminf.    0.66505 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  30: suminf.    0.47094 (2) obj. -31.0909 iterations 1
Cbc0038I Pass  31: suminf.    0.77362 (3) obj. -31.0909 iterations 3
Cbc0038I Rounding solution of -29.3172 is better than previous of -28.3789

Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 48 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -29.3172 to -29.9648 (0.05 seconds)
Cbc0038I Round again with cutoff of -35.9723
Cbc0038I Pass  31: suminf.    2.28355 (6) obj. -35.9723 iterations 1
Cbc0038I Pass  32: suminf.    1.27515 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  33: suminf.    1.09761 (4) obj. -35.9723 iterations 7
Cbc0038I Pass  34: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  35: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  36: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  37: suminf.    2.92213 (8) obj. -35.9723 iterations 18
Cbc0038I Pass  38: suminf.    2.03726 (7) obj. -35.9723 iterations 12
Cbc0038I Pass  39: suminf.    1.12269 (4) obj. -35.9723 iterations 15
Cbc0038I Pass  40: suminf.    1.09761 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  41: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  42: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  43: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  44: suminf.    2.43895 (8) obj. -35.9723 iterations 13
Cbc0038I Pass  45: suminf.    0.96158 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  46: suminf.    0.88681 (3) obj. -35.9723 iterations 10
Cbc0038I Pass  47: suminf.    0.73146 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  48: suminf.    1.40890 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  49: suminf.    0.88681 (3) obj. -35.9723 iterations 1
Cbc0038I Pass  50: suminf.    2.82756 (8) obj. -35.9723 iterations 20
Cbc0038I Pass  51: suminf.    1.24283 (4) obj. -35.9723 iterations 12
Cbc0038I Pass  52: suminf.    1.24283 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  53: suminf.    1.48130 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  54: suminf.    1.18382 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  55: suminf.    1.40695 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  56: suminf.    1.40695 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  57: suminf.    1.61397 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  58: suminf.    0.96933 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  59: suminf.    1.40695 (4) obj. -35.9723 iterations 3
Cbc0038I Pass  60: suminf.    2.60221 (8) obj. -35.9723 iterations 15
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 60 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -29.9648 - took 0.06 seconds
Cbc0012I Integer solution of -29.96485 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 43 rows 26 columns
Cbc0031I 21 added rows had average density of 48.142857
Cbc0013I At root node, 21 cuts changed objective from -55.497765 to -46.520432 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6777 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.070 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1088 row cuts average 70.0 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 139 row cuts average 69.7 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0010I After 2 nodes, 3 on tree, -29.96485 best solution, best possible -46.520432 (0.70 seconds)
Cbc0012I Integer solution of -30.09255 found by rounding after 6338 iterations and 32 nodes (0.81 seconds)
Cbc0016I Integer solution of -30.41854 found by strong branching after 6345 iterations and 34 nodes (0.81 seconds)
Cbc0012I Integer solution of -30.98242 found by rounding after 6394 iterations and 36 nodes (0.81 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 10 rows 10 columns
Cbc0001I Search completed - best objective -30.98242, took 6859 iterations and 50 nodes (0.85 seconds)
Cbc0032I Strong branching done 472 times (7868 iterations), fathomed 3 nodes and fixed 25 variables
Cbc0035I Maximum depth 13, 197 variables fixed on reduced cost
Total time (CPU seconds):       0.81   (Wallclock seconds):       0.86

