Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 503 (-24) rows, 262 (-2) columns and 1499 (-46) elements
Clp1000I sum of infeasibilities 0.000247379 - average 4.91808e-07, 115 fixed columns
Coin0506I Presolve 268 (-235) rows, 142 (-120) columns and 800 (-699) elements
Clp0029I End of values pass after 142 iterations
Clp0000I Optimal - objective value 188.86257
Clp0000I Optimal - objective value 188.86257
Coin0511I After Postsolve, objective 188.86257, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13441103 - largest nonzero change 0 ( 0%) - largest zero change 2.971642e-05
Clp0000I Optimal - objective value 188.86257
Clp0000I Optimal - objective value 188.86257
Clp0000I Optimal - objective value 188.86257
Coin0511I After Postsolve, objective 188.86257, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 188.8625652 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.04

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 503 rows, 262 columns (261 integer (261 of which binary)) and 1499 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.364%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 79 integers unsatisfied sum - 11.0863
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -3.5216 iterations 231
Cbc0038I Solution found of -3.5216
Cbc0038I Relaxing continuous gives -3.5216
Cbc0038I Before mini branch and bound, 182 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 262 columns, reduced to 149 rows 80 columns
Cbc0038I Mini branch and bound improved solution from -3.5216 to -115.88 (0.10 seconds)
Cbc0038I Round again with cutoff of -123.179
Cbc0038I Pass   2: suminf.    4.88098 (25) obj. -123.179 iterations 82
Cbc0038I Pass   3: suminf.    3.29922 (22) obj. -123.179 iterations 22
Cbc0038I Pass   4: suminf.    2.29530 (8) obj. -123.179 iterations 38
Cbc0038I Pass   5: suminf.    0.80401 (5) obj. -123.179 iterations 59
Cbc0038I Pass   6: suminf.    2.26985 (8) obj. -123.179 iterations 50
Cbc0038I Pass   7: suminf.    1.85383 (6) obj. -123.179 iterations 18
Cbc0038I Pass   8: suminf.    1.70159 (6) obj. -123.179 iterations 60
Cbc0038I Pass   9: suminf.    1.05601 (5) obj. -123.179 iterations 31
Cbc0038I Pass  10: suminf.    1.01293 (6) obj. -123.179 iterations 8
Cbc0038I Pass  11: suminf.    1.87085 (6) obj. -123.179 iterations 32
Cbc0038I Pass  12: suminf.    1.20879 (6) obj. -123.179 iterations 15
Cbc0038I Pass  13: suminf.    1.83296 (6) obj. -123.179 iterations 31
Cbc0038I Pass  14: suminf.    3.01792 (15) obj. -123.179 iterations 70
Cbc0038I Pass  15: suminf.    0.80960 (8) obj. -123.179 iterations 77
Cbc0038I Pass  16: suminf.    0.80375 (10) obj. -123.179 iterations 9
Cbc0038I Pass  17: suminf.    2.92292 (7) obj. -123.179 iterations 44
Cbc0038I Pass  18: suminf.    2.10708 (9) obj. -123.179 iterations 6
Cbc0038I Pass  19: suminf.    1.83050 (7) obj. -123.179 iterations 16
Cbc0038I Pass  20: suminf.    1.35613 (5) obj. -123.179 iterations 49
Cbc0038I Pass  21: suminf.    0.69643 (7) obj. -123.179 iterations 33
Cbc0038I Pass  22: suminf.    2.10560 (10) obj. -123.179 iterations 29
Cbc0038I Pass  23: suminf.    1.31694 (5) obj. -123.179 iterations 25
Cbc0038I Pass  24: suminf.    1.14370 (5) obj. -123.179 iterations 7
Cbc0038I Pass  25: suminf.    1.41943 (7) obj. -123.179 iterations 55
Cbc0038I Pass  26: suminf.    1.31771 (4) obj. -123.179 iterations 22
Cbc0038I Pass  27: suminf.    1.49812 (6) obj. -123.179 iterations 49
Cbc0038I Pass  28: suminf.    1.11970 (5) obj. -123.179 iterations 12
Cbc0038I Pass  29: suminf.    0.77314 (5) obj. -123.179 iterations 33
Cbc0038I Pass  30: suminf.    1.61147 (10) obj. -123.179 iterations 33
Cbc0038I Pass  31: suminf.    1.31771 (4) obj. -123.179 iterations 34
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 159 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 262 columns, reduced to 190 rows 103 columns
Cbc0038I Mini branch and bound improved solution from -115.88 to -122.265 (0.23 seconds)
Cbc0038I Round again with cutoff of -136.315
Cbc0038I Pass  31: suminf.    5.44825 (29) obj. -136.315 iterations 1
Cbc0038I Pass  32: suminf.    4.30906 (18) obj. -136.315 iterations 21
Cbc0038I Pass  33: suminf.    3.63934 (18) obj. -136.315 iterations 38
Cbc0038I Pass  34: suminf.    3.97621 (12) obj. -136.315 iterations 40
Cbc0038I Pass  35: suminf.    3.21876 (21) obj. -136.315 iterations 31
Cbc0038I Pass  36: suminf.    3.49061 (13) obj. -136.315 iterations 53
Cbc0038I Pass  37: suminf.    2.65856 (12) obj. -136.315 iterations 18
Cbc0038I Pass  38: suminf.    2.65078 (13) obj. -136.315 iterations 7
Cbc0038I Pass  39: suminf.    4.23627 (12) obj. -136.315 iterations 26
Cbc0038I Pass  40: suminf.    2.62284 (12) obj. -136.315 iterations 49
Cbc0038I Pass  41: suminf.    2.30235 (9) obj. -136.315 iterations 19
Cbc0038I Pass  42: suminf.    2.23366 (9) obj. -136.315 iterations 4
Cbc0038I Pass  43: suminf.    3.53227 (12) obj. -136.315 iterations 25
Cbc0038I Pass  44: suminf.    3.48724 (12) obj. -136.315 iterations 5
Cbc0038I Pass  45: suminf.    3.02156 (13) obj. -136.315 iterations 35
Cbc0038I Pass  46: suminf.    2.86231 (12) obj. -136.315 iterations 25
Cbc0038I Pass  47: suminf.    3.36286 (11) obj. -136.315 iterations 20
Cbc0038I Pass  48: suminf.    2.89382 (12) obj. -136.315 iterations 32
Cbc0038I Pass  49: suminf.    3.33696 (11) obj. -136.315 iterations 32
Cbc0038I Pass  50: suminf.    3.18845 (11) obj. -136.315 iterations 24
Cbc0038I Pass  51: suminf.    2.59820 (12) obj. -136.315 iterations 25
Cbc0038I Pass  52: suminf.    2.59820 (12) obj. -136.315 iterations 2
Cbc0038I Pass  53: suminf.    3.13060 (11) obj. -136.315 iterations 22
Cbc0038I Pass  54: suminf.    2.89382 (12) obj. -136.315 iterations 33
Cbc0038I Pass  55: suminf.    2.89382 (12) obj. -136.315 iterations 0
Cbc0038I Pass  56: suminf.    3.33696 (11) obj. -136.315 iterations 32
Cbc0038I Pass  57: suminf.    3.18845 (11) obj. -136.315 iterations 24
Cbc0038I Pass  58: suminf.    2.59820 (12) obj. -136.315 iterations 23
Cbc0038I Pass  59: suminf.    2.59820 (12) obj. -136.315 iterations 2
Cbc0038I Pass  60: suminf.    3.13060 (11) obj. -136.315 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 167 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 262 columns, reduced to 175 rows 95 columns
Cbc0038I Mini branch and bound did not improve solution (0.36 seconds)
Cbc0038I After 0.36 seconds - Feasibility pump exiting with objective of -122.265 - took 0.32 seconds
Cbc0012I Integer solution of -122.26525 found by feasibility pump after 0 iterations and 0 nodes (0.36 seconds)
Cbc0038I Full problem 503 rows 262 columns, reduced to 154 rows 84 columns
Cbc0012I Integer solution of -122.59193 found by RINS after 0 iterations and 0 nodes (0.44 seconds)
Cbc0031I 48 added rows had average density of 130.5
Cbc0013I At root node, 48 cuts changed objective from -188.86257 to -175.29472 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 49065 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.604 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3306 row cuts average 257.3 elements, 0 column cuts (0 active)  in 0.607 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.114 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.648 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 203 row cuts average 253.4 elements, 0 column cuts (0 active)  in 0.245 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -122.59193 best solution, best possible -175.29472 (7.06 seconds)
Cbc0010I After 6 nodes, 7 on tree, -122.59193 best solution, best possible -175.29472 (7.84 seconds)
Cbc0038I Full problem 503 rows 262 columns, reduced to 18 rows 18 columns
Cbc0012I Integer solution of -124.43215 found by rounding after 26185 iterations and 43 nodes (8.51 seconds)
Cbc0010I After 45 nodes, 15 on tree, -124.43215 best solution, best possible -175.29472 (8.56 seconds)
Cbc0038I Full problem 503 rows 262 columns, reduced to 4 rows 8 columns
Cbc0012I Integer solution of -127.32174 found by RINS after 28781 iterations and 91 nodes (8.90 seconds)
Cbc0004I Integer solution of -128.44415 found after 30682 iterations and 154 nodes (9.08 seconds)
Cbc0010I After 198 nodes, 11 on tree, -128.44415 best solution, best possible -175.29472 (9.28 seconds)
Cbc0038I Full problem 503 rows 262 columns, reduced to 126 rows 74 columns
Cbc0012I Integer solution of -128.75404 found by RINS after 32534 iterations and 200 nodes (9.36 seconds)
Cbc0038I Full problem 503 rows 262 columns, reduced to 9 rows 11 columns
Cbc0010I After 342 nodes, 13 on tree, -128.75404 best solution, best possible -175.29472 (9.98 seconds)
Cbc0001I Search completed - best objective -128.75404, took 40681 iterations and 414 nodes (10.26 seconds)
Cbc0032I Strong branching done 3334 times (79210 iterations), fathomed 77 nodes and fixed 249 variables
Cbc0035I Maximum depth 60, 1960 variables fixed on reduced cost
Total time (CPU seconds):       9.90   (Wallclock seconds):       10.33

