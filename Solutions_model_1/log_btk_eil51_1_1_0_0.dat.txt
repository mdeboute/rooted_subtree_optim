Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 78 (-27) rows, 44 (-9) columns and 236 (-67) elements
Clp1000I sum of infeasibilities 0.00154773 - average 1.98427e-05, 9 fixed columns
Coin0506I Presolve 57 (-21) rows, 35 (-9) columns and 176 (-60) elements
Clp0029I End of values pass after 35 iterations
Clp0000I Optimal - objective value 56.335034
Clp0000I Optimal - objective value 56.335034
Coin0511I After Postsolve, objective 56.335034, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 56.335034
Clp0000I Optimal - objective value 56.335034
Clp0000I Optimal - objective value 56.335034
Coin0511I After Postsolve, objective 56.335034, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 56.33503351 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 78 rows, 44 columns (43 integer (43 of which binary)) and 236 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.941%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 7.52334
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -7.8225 iterations 26
Cbc0038I Solution found of -7.8225
Cbc0038I Relaxing continuous gives -7.8225
Cbc0038I Before mini branch and bound, 16 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 44 columns, reduced to 44 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -7.8225 to -26.6416 (0.03 seconds)
Cbc0038I Round again with cutoff of -29.611
Cbc0038I Pass   2: suminf.    1.63203 (7) obj. -29.611 iterations 10
Cbc0038I Pass   3: suminf.    1.63203 (7) obj. -29.611 iterations 0
Cbc0038I Pass   4: suminf.    0.96914 (4) obj. -29.611 iterations 10
Cbc0038I Pass   5: suminf.    0.81469 (4) obj. -29.611 iterations 2
Cbc0038I Pass   6: suminf.    0.69305 (4) obj. -29.611 iterations 5
Cbc0038I Pass   7: suminf.    0.64367 (4) obj. -29.611 iterations 1
Cbc0038I Pass   8: suminf.    1.63391 (4) obj. -29.611 iterations 3
Cbc0038I Pass   9: suminf.    3.77431 (9) obj. -29.611 iterations 12
Cbc0038I Pass  10: suminf.    1.29517 (3) obj. -29.611 iterations 7
Cbc0038I Pass  11: suminf.    1.12596 (4) obj. -29.611 iterations 2
Cbc0038I Pass  12: suminf.    0.98758 (4) obj. -29.611 iterations 8
Cbc0038I Pass  13: suminf.    0.65660 (3) obj. -29.611 iterations 2
Cbc0038I Pass  14: suminf.    0.56782 (3) obj. -29.611 iterations 1
Cbc0038I Pass  15: suminf.    0.80101 (4) obj. -29.611 iterations 11
Cbc0038I Pass  16: suminf.    0.80101 (4) obj. -29.611 iterations 2
Cbc0038I Pass  17: suminf.    0.75397 (3) obj. -29.611 iterations 3
Cbc0038I Pass  18: suminf.    0.28664 (4) obj. -29.611 iterations 3
Cbc0038I Pass  19: suminf.    1.08237 (4) obj. -29.611 iterations 3
Cbc0038I Pass  20: suminf.    0.72713 (4) obj. -29.611 iterations 3
Cbc0038I Pass  21: suminf.    1.55277 (5) obj. -29.611 iterations 6
Cbc0038I Pass  22: suminf.    0.75350 (4) obj. -29.611 iterations 5
Cbc0038I Pass  23: suminf.    2.73704 (10) obj. -29.611 iterations 10
Cbc0038I Pass  24: suminf.    1.09917 (3) obj. -29.611 iterations 7
Cbc0038I Pass  25: suminf.    1.36429 (4) obj. -29.611 iterations 4
Cbc0038I Pass  26: suminf.    1.13603 (3) obj. -29.611 iterations 2
Cbc0038I Pass  27: suminf.    2.35959 (7) obj. -29.611 iterations 12
Cbc0038I Pass  28: suminf.    2.35959 (7) obj. -29.611 iterations 2
Cbc0038I Pass  29: suminf.    1.89773 (6) obj. -29.611 iterations 12
Cbc0038I Pass  30: suminf.    1.65183 (5) obj. -29.611 iterations 1
Cbc0038I Pass  31: suminf.    0.82842 (4) obj. -29.611 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 44 columns, reduced to 62 rows 36 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -26.6416 - took 0.04 seconds
Cbc0012I Integer solution of -26.6416 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 78 rows 44 columns, reduced to 44 rows 28 columns
Cbc0031I 15 added rows had average density of 38.6
Cbc0013I At root node, 15 cuts changed objective from -56.335034 to -38.373546 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3146 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1225 row cuts average 42.8 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 29 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 114 row cuts average 36.7 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0001I Search completed - best objective -26.6416, took 4292 iterations and 16 nodes (0.39 seconds)
Cbc0032I Strong branching done 250 times (3849 iterations), fathomed 3 nodes and fixed 9 variables
Cbc0035I Maximum depth 5, 34 variables fixed on reduced cost
Total time (CPU seconds):       0.38   (Wallclock seconds):       0.39

