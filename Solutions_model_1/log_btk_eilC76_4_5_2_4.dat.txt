Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 132 (-23) rows, 76 (-2) columns and 409 (-44) elements
Clp1000I sum of infeasibilities 2.77429e-05 - average 2.10173e-07, 7 fixed columns
Coin0506I Presolve 117 (-15) rows, 67 (-9) columns and 361 (-48) elements
Clp0029I End of values pass after 67 iterations
Clp0014I Perturbing problem by 0.001% of 2.5323718 - largest nonzero change 0 ( 0%) - largest zero change 2.623149e-05
Clp0000I Optimal - objective value 39.990891
Clp0000I Optimal - objective value 39.990891
Coin0511I After Postsolve, objective 39.990891, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 39.990891
Clp0000I Optimal - objective value 39.990891
Clp0000I Optimal - objective value 39.990891
Coin0511I After Postsolve, objective 39.990891, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 39.99089072 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 132 rows, 76 columns (75 integer (75 of which binary)) and 409 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.118%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 44 integers unsatisfied sum - 9.44946
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.64549 iterations 60
Cbc0038I Solution found of 6.64549
Cbc0038I Relaxing continuous gives 6.64549
Cbc0038I Rounding solution of -4.75137 is better than previous of 6.64549

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 76 columns, reduced to 73 rows 45 columns
Cbc0038I Mini branch and bound improved solution from -4.75137 to -8.76512 (0.05 seconds)
Cbc0038I Round again with cutoff of -11.8878
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    1.42940 (16) obj. -11.8878 iterations 17
Cbc0038I Pass   3: suminf.    1.28516 (17) obj. -11.8878 iterations 3
Cbc0038I Pass   4: suminf.    0.76656 (5) obj. -11.8878 iterations 32
Cbc0038I Pass   5: suminf.    0.48417 (4) obj. -11.8878 iterations 9
Cbc0038I Pass   6: suminf.    0.27446 (5) obj. -11.8878 iterations 6
Cbc0038I Pass   7: suminf.    0.26951 (5) obj. -11.8878 iterations 1
Cbc0038I Pass   8: suminf.    1.72689 (10) obj. -11.8878 iterations 15
Cbc0038I Pass   9: suminf.    0.93965 (7) obj. -11.8878 iterations 5
Cbc0038I Pass  10: suminf.    1.55252 (5) obj. -11.8878 iterations 13
Cbc0038I Pass  11: suminf.    0.67324 (3) obj. -11.8878 iterations 2
Cbc0038I Pass  12: suminf.    0.63691 (4) obj. -11.8878 iterations 2
Cbc0038I Pass  13: suminf.    1.56589 (5) obj. -11.8878 iterations 8
Cbc0038I Pass  14: suminf.    1.10328 (5) obj. -11.8878 iterations 3
Cbc0038I Pass  15: suminf.    1.00504 (6) obj. -11.8878 iterations 2
Cbc0038I Pass  16: suminf.    1.44688 (5) obj. -11.8878 iterations 10
Cbc0038I Pass  17: suminf.    1.40813 (4) obj. -11.8878 iterations 1
Cbc0038I Pass  18: suminf.    1.43856 (5) obj. -11.8878 iterations 5
Cbc0038I Pass  19: suminf.    1.39659 (4) obj. -11.8878 iterations 1
Cbc0038I Pass  20: suminf.    1.44688 (5) obj. -11.8878 iterations 5
Cbc0038I Pass  21: suminf.    2.94090 (10) obj. -11.8878 iterations 21
Cbc0038I Pass  22: suminf.    1.59360 (7) obj. -11.8878 iterations 10
Cbc0038I Pass  23: suminf.    1.59360 (7) obj. -11.8878 iterations 0
Cbc0038I Pass  24: suminf.    2.27745 (8) obj. -11.8878 iterations 16
Cbc0038I Pass  25: suminf.    1.73488 (9) obj. -11.8878 iterations 1
Cbc0038I Pass  26: suminf.    1.45551 (9) obj. -11.8878 iterations 10
Cbc0038I Pass  27: suminf.    1.79876 (8) obj. -11.8878 iterations 13
Cbc0038I Pass  28: suminf.    1.45455 (6) obj. -11.8878 iterations 2
Cbc0038I Pass  29: suminf.    2.10889 (6) obj. -11.8878 iterations 6
Cbc0038I Pass  30: suminf.    1.68209 (8) obj. -11.8878 iterations 5
Cbc0038I Pass  31: suminf.    1.45551 (9) obj. -11.8878 iterations 7
Cbc0038I Rounding solution of -9.41915 is better than previous of -8.76512

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 76 columns, reduced to 81 rows 50 columns
Cbc0038I Mini branch and bound improved solution from -9.41915 to -9.59801 (0.11 seconds)
Cbc0038I Round again with cutoff of -17.5084
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    2.62498 (29) obj. -17.5084 iterations 7
Cbc0038I Pass  32: suminf.    2.49848 (29) obj. -17.5084 iterations 4
Cbc0038I Pass  33: suminf.    2.45205 (9) obj. -17.5084 iterations 26
Cbc0038I Pass  34: suminf.    2.16207 (9) obj. -17.5084 iterations 6
Cbc0038I Pass  35: suminf.    2.35685 (6) obj. -17.5084 iterations 11
Cbc0038I Pass  36: suminf.    2.35685 (6) obj. -17.5084 iterations 0
Cbc0038I Pass  37: suminf.    1.87864 (6) obj. -17.5084 iterations 4
Cbc0038I Pass  38: suminf.    1.87864 (6) obj. -17.5084 iterations 2
Cbc0038I Pass  39: suminf.    2.48837 (7) obj. -17.5084 iterations 4
Cbc0038I Pass  40: suminf.    3.93973 (14) obj. -17.5084 iterations 23
Cbc0038I Pass  41: suminf.    2.65889 (8) obj. -17.5084 iterations 16
Cbc0038I Pass  42: suminf.    2.57052 (7) obj. -17.5084 iterations 1
Cbc0038I Pass  43: suminf.    2.51554 (7) obj. -17.5084 iterations 1
Cbc0038I Pass  44: suminf.    2.15449 (5) obj. -17.5084 iterations 7
Cbc0038I Pass  45: suminf.    2.04642 (6) obj. -17.5084 iterations 1
Cbc0038I Pass  46: suminf.    2.04642 (6) obj. -17.5084 iterations 0
Cbc0038I Pass  47: suminf.    2.52171 (6) obj. -17.5084 iterations 3
Cbc0038I Pass  48: suminf.    2.16916 (5) obj. -17.5084 iterations 2
Cbc0038I Pass  49: suminf.    4.63831 (16) obj. -17.5084 iterations 33
Cbc0038I Pass  50: suminf.    2.96668 (12) obj. -17.5084 iterations 15
Cbc0038I Pass  51: suminf.    2.36980 (6) obj. -17.5084 iterations 12
Cbc0038I Pass  52: suminf.    2.01021 (6) obj. -17.5084 iterations 1
Cbc0038I Pass  53: suminf.    2.54042 (8) obj. -17.5084 iterations 6
Cbc0038I Pass  54: suminf.    2.41602 (10) obj. -17.5084 iterations 3
Cbc0038I Pass  55: suminf.    2.38772 (7) obj. -17.5084 iterations 10
Cbc0038I Pass  56: suminf.    2.38772 (7) obj. -17.5084 iterations 0
Cbc0038I Pass  57: suminf.    2.79603 (10) obj. -17.5084 iterations 11
Cbc0038I Pass  58: suminf.    2.34535 (6) obj. -17.5084 iterations 8
Cbc0038I Pass  59: suminf.    2.34535 (6) obj. -17.5084 iterations 0
Cbc0038I Pass  60: suminf.    2.38314 (7) obj. -17.5084 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 132 rows 76 columns, reduced to 91 rows 54 columns
Cbc0038I Mini branch and bound did not improve solution (0.18 seconds)
Cbc0038I After 0.18 seconds - Feasibility pump exiting with objective of -9.59801 - took 0.16 seconds
Cbc0012I Integer solution of -9.59801 found by feasibility pump after 0 iterations and 0 nodes (0.18 seconds)
Cbc0038I Full problem 132 rows 76 columns, reduced to 74 rows 46 columns
Cbc0012I Integer solution of -9.72801 found by RINS after 0 iterations and 0 nodes (0.24 seconds)
Cbc0031I 31 added rows had average density of 57.225806
Cbc0013I At root node, 31 cuts changed objective from -39.990891 to -31.387599 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10755 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.077 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1302 row cuts average 73.0 elements, 0 column cuts (0 active)  in 0.087 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 202 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.078 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -9.72801 best solution, best possible -31.387599 (0.91 seconds)
Cbc0038I Full problem 132 rows 76 columns, reduced to 11 rows 10 columns
Cbc0004I Integer solution of -10.52098 found after 8951 iterations and 59 nodes (1.20 seconds)
Cbc0004I Integer solution of -10.67473 found after 9257 iterations and 80 nodes (1.22 seconds)
Cbc0038I Full problem 132 rows 76 columns, reduced to 3 rows 8 columns
Cbc0001I Search completed - best objective -10.67473, took 10092 iterations and 118 nodes (1.26 seconds)
Cbc0032I Strong branching done 1038 times (19377 iterations), fathomed 13 nodes and fixed 44 variables
Cbc0035I Maximum depth 37, 371 variables fixed on reduced cost
Total time (CPU seconds):       1.22   (Wallclock seconds):       1.27

