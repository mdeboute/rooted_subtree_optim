Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 134 (-21) rows, 76 (-2) columns and 413 (-40) elements
Clp1000I sum of infeasibilities 2.93019e-05 - average 2.18671e-07, 12 fixed columns
Coin0506I Presolve 107 (-27) rows, 62 (-14) columns and 331 (-82) elements
Clp0029I End of values pass after 62 iterations
Clp0014I Perturbing problem by 0.001% of 2.3176172 - largest nonzero change 0 ( 0%) - largest zero change 2.5841054e-05
Clp0000I Optimal - objective value 45.731334
Clp0000I Optimal - objective value 45.731334
Coin0511I After Postsolve, objective 45.731334, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 45.731334
Clp0000I Optimal - objective value 45.731334
Clp0000I Optimal - objective value 45.731334
Coin0511I After Postsolve, objective 45.731334, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 45.7313339 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 134 rows, 76 columns (75 integer (75 of which binary)) and 413 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.135%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 38 integers unsatisfied sum - 7.02085
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1.16736 iterations 51
Cbc0038I Solution found of 1.16736
Cbc0038I Relaxing continuous gives 1.16736
Cbc0038I Rounding solution of -1.29642 is better than previous of 1.16736

Cbc0038I Before mini branch and bound, 37 integers at bound fixed and 0 continuous
Cbc0038I Full problem 134 rows 76 columns, reduced to 63 rows 39 columns
Cbc0038I Mini branch and bound improved solution from -1.29642 to -13.8674 (0.06 seconds)
Cbc0038I Round again with cutoff of -17.0538
Cbc0038I Pass   2: suminf.    1.66528 (7) obj. -17.0538 iterations 6
Cbc0038I Pass   3: suminf.    2.02468 (5) obj. -17.0538 iterations 9
Cbc0038I Pass   4: suminf.    2.02468 (5) obj. -17.0538 iterations 0
Cbc0038I Pass   5: suminf.    1.57466 (5) obj. -17.0538 iterations 8
Cbc0038I Pass   6: suminf.    1.70409 (5) obj. -17.0538 iterations 5
Cbc0038I Pass   7: suminf.    1.10040 (4) obj. -17.0538 iterations 3
Cbc0038I Pass   8: suminf.    1.45108 (4) obj. -17.0538 iterations 6
Cbc0038I Pass   9: suminf.    1.45108 (4) obj. -17.0538 iterations 0
Cbc0038I Pass  10: suminf.    1.54709 (4) obj. -17.0538 iterations 4
Cbc0038I Pass  11: suminf.    1.59900 (11) obj. -17.0538 iterations 15
Cbc0038I Pass  12: suminf.    1.47082 (7) obj. -17.0538 iterations 6
Cbc0038I Pass  13: suminf.    0.95192 (3) obj. -17.0538 iterations 9
Cbc0038I Pass  14: suminf.    1.06710 (3) obj. -17.0538 iterations 3
Cbc0038I Pass  15: suminf.    0.90459 (3) obj. -17.0538 iterations 3
Cbc0038I Pass  16: suminf.    0.95192 (3) obj. -17.0538 iterations 4
Cbc0038I Pass  17: suminf.    0.88468 (3) obj. -17.0538 iterations 15
Cbc0038I Pass  18: suminf.    0.51478 (3) obj. -17.0538 iterations 6
Cbc0038I Pass  19: suminf.    0.35484 (2) obj. -17.0538 iterations 2
Cbc0038I Pass  20: suminf.    0.26891 (2) obj. -17.0538 iterations 2
Cbc0038I Pass  21: suminf.    3.16228 (12) obj. -17.0538 iterations 22
Cbc0038I Pass  22: suminf.    1.87310 (6) obj. -17.0538 iterations 18
Cbc0038I Pass  23: suminf.    0.80950 (3) obj. -17.0538 iterations 9
Cbc0038I Pass  24: suminf.    0.71071 (2) obj. -17.0538 iterations 2
Cbc0038I Pass  25: suminf.    0.85162 (3) obj. -17.0538 iterations 2
Cbc0038I Pass  26: suminf.    0.81413 (4) obj. -17.0538 iterations 1
Cbc0038I Pass  27: suminf.    1.80545 (4) obj. -17.0538 iterations 3
Cbc0038I Pass  28: suminf.    0.90296 (3) obj. -17.0538 iterations 3
Cbc0038I Pass  29: suminf.    0.71071 (2) obj. -17.0538 iterations 2
Cbc0038I Pass  30: suminf.    0.85162 (3) obj. -17.0538 iterations 2
Cbc0038I Pass  31: suminf.    0.81413 (4) obj. -17.0538 iterations 1
Cbc0038I Rounding solution of -15.3458 is better than previous of -13.8674

Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 134 rows 76 columns, reduced to 85 rows 52 columns
Cbc0038I Mini branch and bound improved solution from -15.3458 to -17.4744 (0.10 seconds)
Cbc0038I Round again with cutoff of -23.1258
Cbc0038I Pass  31: suminf.    2.35458 (9) obj. -23.1258 iterations 1
Cbc0038I Pass  32: suminf.    2.86789 (7) obj. -23.1258 iterations 9
Cbc0038I Pass  33: suminf.    2.13934 (6) obj. -23.1258 iterations 7
Cbc0038I Pass  34: suminf.    1.78569 (6) obj. -23.1258 iterations 2
Cbc0038I Pass  35: suminf.    1.71870 (6) obj. -23.1258 iterations 1
Cbc0038I Pass  36: suminf.    1.71930 (5) obj. -23.1258 iterations 1
Cbc0038I Pass  37: suminf.    2.17943 (5) obj. -23.1258 iterations 7
Cbc0038I Pass  38: suminf.    1.80271 (6) obj. -23.1258 iterations 2
Cbc0038I Pass  39: suminf.    1.80419 (6) obj. -23.1258 iterations 1
Cbc0038I Pass  40: suminf.    1.80419 (6) obj. -23.1258 iterations 0
Cbc0038I Pass  41: suminf.    1.74577 (4) obj. -23.1258 iterations 6
Cbc0038I Pass  42: suminf.    1.72477 (5) obj. -23.1258 iterations 3
Cbc0038I Pass  43: suminf.    1.66480 (5) obj. -23.1258 iterations 4
Cbc0038I Pass  44: suminf.    1.39679 (4) obj. -23.1258 iterations 2
Cbc0038I Pass  45: suminf.    1.74387 (4) obj. -23.1258 iterations 4
Cbc0038I Pass  46: suminf.    1.99934 (7) obj. -23.1258 iterations 13
Cbc0038I Pass  47: suminf.    1.49595 (5) obj. -23.1258 iterations 7
Cbc0038I Pass  48: suminf.    1.19201 (3) obj. -23.1258 iterations 10
Cbc0038I Pass  49: suminf.    1.13835 (3) obj. -23.1258 iterations 1
Cbc0038I Pass  50: suminf.    1.32349 (4) obj. -23.1258 iterations 3
Cbc0038I Pass  51: suminf.    1.30439 (5) obj. -23.1258 iterations 1
Cbc0038I Pass  52: suminf.    2.17806 (5) obj. -23.1258 iterations 4
Cbc0038I Pass  53: suminf.    1.39068 (4) obj. -23.1258 iterations 3
Cbc0038I Pass  54: suminf.    1.18040 (3) obj. -23.1258 iterations 1
Cbc0038I Pass  55: suminf.    1.32349 (4) obj. -23.1258 iterations 4
Cbc0038I Pass  56: suminf.    1.30439 (5) obj. -23.1258 iterations 1
Cbc0038I Pass  57: suminf.    2.17806 (5) obj. -23.1258 iterations 4
Cbc0038I Pass  58: suminf.    1.39068 (4) obj. -23.1258 iterations 3
Cbc0038I Pass  59: suminf.    1.18040 (3) obj. -23.1258 iterations 1
Cbc0038I Pass  60: suminf.    1.32349 (4) obj. -23.1258 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 134 rows 76 columns, reduced to 71 rows 44 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of -17.4744 - took 0.12 seconds
Cbc0012I Integer solution of -17.47435 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0038I Full problem 134 rows 76 columns, reduced to 64 rows 40 columns
Cbc0031I 26 added rows had average density of 51.461538
Cbc0013I At root node, 26 cuts changed objective from -45.731334 to -36.762322 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 10713 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.074 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2090 row cuts average 76.0 elements, 0 column cuts (0 active)  in 0.077 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 139 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -17.47435 best solution, best possible -36.762322 (0.80 seconds)
Cbc0038I Full problem 134 rows 76 columns, reduced to 46 rows 33 columns
Cbc0001I Search completed - best objective -17.47435, took 8341 iterations and 76 nodes (1.09 seconds)
Cbc0032I Strong branching done 896 times (17496 iterations), fathomed 5 nodes and fixed 42 variables
Cbc0035I Maximum depth 32, 156 variables fixed on reduced cost
Total time (CPU seconds):       1.06   (Wallclock seconds):       1.10

