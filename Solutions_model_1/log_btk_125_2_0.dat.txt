Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 241 (-11) rows, 123 (-4) columns and 602 (-22) elements
Clp1000I sum of infeasibilities 0.0262363 - average 0.000108864, 28 fixed columns
Coin0506I Presolve 178 (-63) rows, 95 (-28) columns and 448 (-154) elements
Clp0029I End of values pass after 95 iterations
Clp0014I Perturbing problem by 0.001% of 0.19440615 - largest nonzero change 0 ( 0%) - largest zero change 2.5537642e-05
Clp0000I Optimal - objective value 15333.658
Clp0000I Optimal - objective value 15333.658
Coin0511I After Postsolve, objective 15333.658, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.19212383 - largest nonzero change 0 ( 0%) - largest zero change 2.9345031e-05
Clp0000I Optimal - objective value 15333.658
Clp0000I Optimal - objective value 15333.658
Clp0000I Optimal - objective value 15333.658
Coin0511I After Postsolve, objective 15333.658, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 15333.65758 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 241 rows, 123 columns (122 integer (122 of which binary)) and 602 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.790%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 94 integers unsatisfied sum - 23.2395
Cbc0038I Solution found of 458.349
Cbc0038I Relaxing continuous gives -46.285
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 241 rows 123 columns, reduced to 178 rows 95 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -1575.02
Cbc0038I Pass   1: suminf.    1.25997 (12) obj. -1575.02 iterations 77
Cbc0038I Pass   2: suminf.    3.82827 (13) obj. -1575.02 iterations 36
Cbc0038I Pass   3: suminf.    2.79448 (10) obj. -1575.02 iterations 5
Cbc0038I Pass   4: suminf.    1.62333 (10) obj. -1575.02 iterations 13
Cbc0038I Pass   5: suminf.    0.84314 (10) obj. -1575.02 iterations 5
Cbc0038I Pass   6: suminf.    2.41450 (10) obj. -1575.02 iterations 19
Cbc0038I Pass   7: suminf.    0.82537 (11) obj. -1575.02 iterations 25
Cbc0038I Pass   8: suminf.    3.79589 (11) obj. -1575.02 iterations 22
Cbc0038I Pass   9: suminf.    1.97943 (6) obj. -1575.02 iterations 12
Cbc0038I Pass  10: suminf.    1.80080 (7) obj. -1575.02 iterations 7
Cbc0038I Pass  11: suminf.    1.63781 (10) obj. -1575.02 iterations 3
Cbc0038I Pass  12: suminf.    2.30977 (7) obj. -1575.02 iterations 13
Cbc0038I Pass  13: suminf.    2.30977 (7) obj. -1575.02 iterations 1
Cbc0038I Pass  14: suminf.    1.81807 (8) obj. -1575.02 iterations 9
Cbc0038I Pass  15: suminf.    1.71082 (9) obj. -1575.02 iterations 1
Cbc0038I Pass  16: suminf.    2.50914 (8) obj. -1575.02 iterations 11
Cbc0038I Pass  17: suminf.    1.02232 (4) obj. -1575.02 iterations 31
Cbc0038I Pass  18: suminf.    0.98890 (4) obj. -1575.02 iterations 16
Cbc0038I Pass  19: suminf.    0.27778 (1) obj. -4405.64 iterations 4
Cbc0038I Pass  20: suminf.    0.03686 (1) obj. -1575.02 iterations 2
Cbc0038I Solution found of -1575.02
Cbc0038I Relaxing continuous gives -1625.12
Cbc0038I Rounding solution of -3346.81 is better than previous of -1625.12

Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 241 rows 123 columns, reduced to 186 rows 99 columns - 5 fixed gives 140, 89 - still too large
Cbc0038I Full problem 241 rows 123 columns, reduced to 140 rows 89 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -5744.18
Cbc0038I Pass  21: suminf.    5.86175 (31) obj. -5744.18 iterations 22
Cbc0038I Pass  22: suminf.    2.24042 (7) obj. -5744.18 iterations 56
Cbc0038I Pass  23: suminf.    2.24042 (7) obj. -5744.18 iterations 0
Cbc0038I Pass  24: suminf.    1.14032 (5) obj. -5744.18 iterations 10
Cbc0038I Pass  25: suminf.    0.72148 (11) obj. -5744.18 iterations 6
Cbc0038I Pass  26: suminf.    0.72148 (11) obj. -5744.18 iterations 0
Cbc0038I Pass  27: suminf.    2.44908 (9) obj. -5744.18 iterations 16
Cbc0038I Pass  28: suminf.    2.44908 (9) obj. -5744.18 iterations 0
Cbc0038I Pass  29: suminf.    0.75177 (10) obj. -5744.18 iterations 11
Cbc0038I Pass  30: suminf.    0.75177 (10) obj. -5744.18 iterations 1
Cbc0038I Pass  31: suminf.    3.18748 (9) obj. -5744.18 iterations 12
Cbc0038I Pass  32: suminf.    2.48108 (8) obj. -5744.18 iterations 5
Cbc0038I Pass  33: suminf.    2.02489 (8) obj. -5744.18 iterations 9
Cbc0038I Pass  34: suminf.    0.72148 (11) obj. -5744.18 iterations 5
Cbc0038I Pass  35: suminf.    0.72148 (11) obj. -5744.18 iterations 0
Cbc0038I Pass  36: suminf.    2.44908 (9) obj. -5744.18 iterations 16
Cbc0038I Pass  37: suminf.    2.44908 (9) obj. -5744.18 iterations 0
Cbc0038I Pass  38: suminf.    0.75177 (10) obj. -5744.18 iterations 11
Cbc0038I Pass  39: suminf.    0.75177 (10) obj. -5744.18 iterations 1
Cbc0038I Pass  40: suminf.    3.18748 (9) obj. -5744.18 iterations 12
Cbc0038I Pass  41: suminf.    2.48108 (8) obj. -5744.18 iterations 5
Cbc0038I Pass  42: suminf.    2.02489 (8) obj. -5744.18 iterations 9
Cbc0038I Pass  43: suminf.    0.72148 (11) obj. -5744.18 iterations 5
Cbc0038I Pass  44: suminf.    0.72148 (11) obj. -5744.18 iterations 0
Cbc0038I Pass  45: suminf.    2.44908 (9) obj. -5744.18 iterations 16
Cbc0038I Pass  46: suminf.    2.44908 (9) obj. -5744.18 iterations 0
Cbc0038I Pass  47: suminf.    0.75177 (10) obj. -5744.18 iterations 11
Cbc0038I Pass  48: suminf.    0.75177 (10) obj. -5744.18 iterations 1
Cbc0038I Pass  49: suminf.    3.18748 (9) obj. -5744.18 iterations 12
Cbc0038I Pass  50: suminf.    2.48108 (8) obj. -5744.18 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 241 rows 123 columns, reduced to 178 rows 95 columns - 6 fixed gives 120, 78 - still too large
Cbc0038I Full problem 241 rows 123 columns, reduced to 120 rows 78 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -3346.81 - took 0.04 seconds
Cbc0012I Integer solution of -3346.8129 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0031I 13 added rows had average density of 84.692308
Cbc0013I At root node, 13 cuts changed objective from -15333.658 to -11482.091 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 21878 row cuts average 3.4 elements, 1 column cuts (1 active)  in 0.167 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1509 row cuts average 119.5 elements, 0 column cuts (0 active)  in 0.141 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.118 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.128 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 117 row cuts average 96.2 elements, 0 column cuts (0 active)  in 0.092 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -3346.8129 best solution, best possible -11482.091 (1.35 seconds)
Cbc0012I Integer solution of -6029.7512 found by rounding after 6012 iterations and 9 nodes (1.53 seconds)
Cbc0012I Integer solution of -6240.838 found by DiveCoefficient after 6012 iterations and 9 nodes (1.53 seconds)
Cbc0012I Integer solution of -6275.5893 found by DiveCoefficient after 6256 iterations and 16 nodes (1.57 seconds)
Cbc0012I Integer solution of -6288.0142 found by rounding after 6268 iterations and 17 nodes (1.57 seconds)
Cbc0016I Integer solution of -6328.2073 found by strong branching after 6294 iterations and 18 nodes (1.57 seconds)
Cbc0038I Full problem 241 rows 123 columns, reduced to 152 rows 84 columns - 2 fixed gives 150, 82 - still too large
Cbc0038I Full problem 241 rows 123 columns, reduced to 150 rows 82 columns - too large
Cbc0012I Integer solution of -7221.372 found by rounding after 7052 iterations and 46 nodes (1.65 seconds)
Cbc0012I Integer solution of -7464.6102 found by DiveCoefficient after 8031 iterations and 73 nodes (1.76 seconds)
Cbc0012I Integer solution of -7578.4639 found by DiveCoefficient after 8034 iterations and 74 nodes (1.76 seconds)
Cbc0004I Integer solution of -7922.4102 found after 8051 iterations and 74 nodes (1.76 seconds)
Cbc0001I Search completed - best objective -7922.410200000002, took 8112 iterations and 76 nodes (1.77 seconds)
Cbc0032I Strong branching done 896 times (18385 iterations), fathomed 14 nodes and fixed 8 variables
Cbc0035I Maximum depth 17, 201 variables fixed on reduced cost
Total time (CPU seconds):       1.75   (Wallclock seconds):       1.79

