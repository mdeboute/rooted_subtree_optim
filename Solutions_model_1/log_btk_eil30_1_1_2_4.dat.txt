Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 52 (-11) rows, 29 (-3) columns and 154 (-23) elements
Clp1000I sum of infeasibilities 1.02087e-05 - average 1.96321e-07, 1 fixed columns
Coin0506I Presolve 48 (-4) rows, 28 (-1) columns and 144 (-10) elements
Clp0029I End of values pass after 28 iterations
Clp0000I Optimal - objective value 83.580517
Clp0000I Optimal - objective value 83.580517
Coin0511I After Postsolve, objective 83.580517, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.580517
Clp0000I Optimal - objective value 83.580517
Clp0000I Optimal - objective value 83.580517
Coin0511I After Postsolve, objective 83.580517, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.58051739 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 52 rows, 29 columns (28 integer (28 of which binary)) and 155 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.156%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 7.59264
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -17.2187 iterations 24
Cbc0038I Solution found of -17.2187
Cbc0038I Relaxing continuous gives -17.2187
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 29 columns, reduced to 41 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -17.2187 to -32.8298 (0.03 seconds)
Cbc0038I Round again with cutoff of -37.9049
Cbc0038I Pass   2: suminf.    0.53988 (2) obj. -37.9049 iterations 2
Cbc0038I Pass   3: suminf.    0.34519 (2) obj. -37.9049 iterations 2
Cbc0038I Pass   4: suminf.    0.45784 (2) obj. -37.9049 iterations 1
Cbc0038I Pass   5: suminf.    2.33767 (8) obj. -37.9049 iterations 7
Cbc0038I Pass   6: suminf.    1.57338 (8) obj. -37.9049 iterations 5
Cbc0038I Pass   7: suminf.    0.90265 (4) obj. -37.9049 iterations 7
Cbc0038I Pass   8: suminf.    0.89014 (4) obj. -37.9049 iterations 1
Cbc0038I Pass   9: suminf.    0.96812 (3) obj. -37.9049 iterations 5
Cbc0038I Pass  10: suminf.    0.96799 (3) obj. -37.9049 iterations 1
Cbc0038I Pass  11: suminf.    1.14106 (3) obj. -37.9049 iterations 7
Cbc0038I Pass  12: suminf.    1.14106 (3) obj. -37.9049 iterations 1
Cbc0038I Pass  13: suminf.    0.53494 (2) obj. -37.9049 iterations 3
Cbc0038I Pass  14: suminf.    0.59366 (2) obj. -37.9049 iterations 1
Cbc0038I Pass  15: suminf.    0.66310 (4) obj. -37.9049 iterations 4
Cbc0038I Pass  16: suminf.    0.66310 (4) obj. -37.9049 iterations 2
Cbc0038I Pass  17: suminf.    0.40503 (4) obj. -37.9049 iterations 9
Cbc0038I Pass  18: suminf.    0.15842 (2) obj. -37.9049 iterations 5
Cbc0038I Pass  19: suminf.    0.44844 (5) obj. -37.9049 iterations 5
Cbc0038I Pass  20: suminf.    0.44259 (4) obj. -37.9049 iterations 1
Cbc0038I Pass  21: suminf.    0.41682 (3) obj. -37.9049 iterations 5
Cbc0038I Pass  22: suminf.    0.41682 (3) obj. -37.9049 iterations 0
Cbc0038I Pass  23: suminf.    0.43582 (2) obj. -37.9049 iterations 4
Cbc0038I Pass  24: suminf.    0.53988 (2) obj. -37.9049 iterations 3
Cbc0038I Pass  25: suminf.    0.34519 (2) obj. -37.9049 iterations 2
Cbc0038I Pass  26: suminf.    0.45784 (2) obj. -37.9049 iterations 1
Cbc0038I Pass  27: suminf.    0.70326 (5) obj. -37.9049 iterations 5
Cbc0038I Pass  28: suminf.    0.68969 (4) obj. -37.9049 iterations 3
Cbc0038I Pass  29: suminf.    0.69882 (2) obj. -37.9049 iterations 6
Cbc0038I Pass  30: suminf.    1.14106 (3) obj. -37.9049 iterations 2
Cbc0038I Pass  31: suminf.    1.14106 (3) obj. -37.9049 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 29 columns, reduced to 45 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -32.8298 - took 0.05 seconds
Cbc0012I Integer solution of -32.82978 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0031I 11 added rows had average density of 24.818182
Cbc0013I At root node, 11 cuts changed objective from -83.580517 to -54.550032 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 2286 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 789 row cuts average 29.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 139 row cuts average 6.2 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0001I Search completed - best objective -32.82978, took 2807 iterations and 14 nodes (0.35 seconds)
Cbc0032I Strong branching done 156 times (1803 iterations), fathomed 0 nodes and fixed 11 variables
Cbc0035I Maximum depth 3, 32 variables fixed on reduced cost
Total time (CPU seconds):       0.33   (Wallclock seconds):       0.36

