Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 52 (-13) rows, 28 (-5) columns and 153 (-30) elements
Clp1000I sum of infeasibilities 1.72971e-06 - average 3.32637e-08, 5 fixed columns
Coin0506I Presolve 41 (-11) rows, 23 (-5) columns and 121 (-32) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 98.329264
Clp0000I Optimal - objective value 98.329264
Coin0511I After Postsolve, objective 98.329264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 98.329264
Clp0000I Optimal - objective value 98.329264
Clp0000I Optimal - objective value 98.329264
Coin0511I After Postsolve, objective 98.329264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 98.32926402 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0004I processed model has 50 rows, 28 columns (27 integer (27 of which binary)) and 162 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.890%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 13 integers unsatisfied sum - 3.49717
Cbc0038I Pass   1: suminf.    0.16250 (1) obj. -72.1488 iterations 18
Cbc0038I Solution found of -25.275
Cbc0038I Relaxing continuous gives -26.4875
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 28 columns, reduced to 23 rows 14 columns
Cbc0038I Mini branch and bound improved solution from -26.4875 to -52.0687 (0.02 seconds)
Cbc0038I Round again with cutoff of -55.3307
Cbc0038I Pass   2: suminf.    0.16250 (1) obj. -72.1488 iterations 0
Cbc0038I Pass   3: suminf.    0.48465 (1) obj. -55.3307 iterations 2
Cbc0038I Pass   4: suminf.    1.71622 (5) obj. -55.3307 iterations 6
Cbc0038I Pass   5: suminf.    1.24857 (4) obj. -55.3307 iterations 6
Cbc0038I Pass   6: suminf.    0.83198 (3) obj. -55.3307 iterations 11
Cbc0038I Pass   7: suminf.    1.47558 (5) obj. -55.3307 iterations 15
Cbc0038I Pass   8: suminf.    1.47558 (5) obj. -55.3307 iterations 1
Cbc0038I Pass   9: suminf.    0.58125 (2) obj. -55.3307 iterations 8
Cbc0038I Pass  10: suminf.    0.16250 (1) obj. -55.3307 iterations 1
Cbc0038I Pass  11: suminf.    0.48465 (1) obj. -55.3307 iterations 1
Cbc0038I Pass  12: suminf.    0.42407 (3) obj. -55.3307 iterations 4
Cbc0038I Pass  13: suminf.    0.42407 (3) obj. -55.3307 iterations 1
Cbc0038I Pass  14: suminf.    1.25000 (4) obj. -57.8799 iterations 12
Cbc0038I Pass  15: suminf.    0.13868 (1) obj. -55.3307 iterations 6
Cbc0038I Pass  16: suminf.    0.18750 (1) obj. -58.0629 iterations 1
Cbc0038I Pass  17: suminf.    0.50160 (2) obj. -55.3307 iterations 5
Cbc0038I Pass  18: suminf.    0.50160 (2) obj. -55.3307 iterations 1
Cbc0038I Pass  19: suminf.    0.27537 (1) obj. -55.3307 iterations 5
Cbc0038I Pass  20: suminf.    0.28750 (1) obj. -56.0097 iterations 1
Cbc0038I Pass  21: suminf.    0.89066 (4) obj. -55.3307 iterations 6
Cbc0038I Pass  22: suminf.    0.35466 (3) obj. -55.3307 iterations 7
Cbc0038I Pass  23: suminf.    0.82471 (5) obj. -55.3307 iterations 6
Cbc0038I Pass  24: suminf.    0.81932 (4) obj. -55.3307 iterations 3
Cbc0038I Pass  25: suminf.    0.89644 (2) obj. -55.3307 iterations 6
Cbc0038I Pass  26: suminf.    0.84333 (4) obj. -55.3307 iterations 1
Cbc0038I Pass  27: suminf.    0.21250 (1) obj. -66.4879 iterations 4
Cbc0038I Pass  28: suminf.    0.21250 (1) obj. -66.4879 iterations 0
Cbc0038I Pass  29: suminf.    0.54913 (2) obj. -55.3307 iterations 2
Cbc0038I Pass  30: suminf.    1.03722 (4) obj. -55.3307 iterations 8
Cbc0038I Pass  31: suminf.    0.87846 (4) obj. -55.3307 iterations 3
Cbc0038I Rounding solution of -53.9937 is better than previous of -52.0687

Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 28 columns, reduced to 42 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -53.9937 to -56.2063 (0.04 seconds)
Cbc0038I Round again with cutoff of -61.9027
Cbc0038I Pass  31: suminf.    0.16250 (1) obj. -72.1488 iterations 0
Cbc0038I Pass  32: suminf.    0.36723 (1) obj. -61.9027 iterations 2
Cbc0038I Pass  33: suminf.    2.11273 (7) obj. -61.9027 iterations 7
Cbc0038I Pass  34: suminf.    0.68060 (2) obj. -61.9027 iterations 7
Cbc0038I Pass  35: suminf.    0.17500 (1) obj. -61.9027 iterations 1
Cbc0038I Pass  36: suminf.    0.17500 (1) obj. -61.9027 iterations 0
Cbc0038I Pass  37: suminf.    0.45553 (2) obj. -61.9027 iterations 9
Cbc0038I Pass  38: suminf.    0.32355 (1) obj. -61.9027 iterations 8
Cbc0038I Pass  39: suminf.    0.35556 (1) obj. -63.6937 iterations 2
Cbc0038I Pass  40: suminf.    2.58198 (7) obj. -61.9027 iterations 14
Cbc0038I Pass  41: suminf.    0.74037 (3) obj. -61.9027 iterations 5
Cbc0038I Pass  42: suminf.    0.58636 (2) obj. -61.9027 iterations 4
Cbc0038I Pass  43: suminf.    0.58636 (2) obj. -61.9027 iterations 0
Cbc0038I Pass  44: suminf.    0.68060 (2) obj. -61.9027 iterations 3
Cbc0038I Pass  45: suminf.    0.17500 (1) obj. -61.9027 iterations 1
Cbc0038I Pass  46: suminf.    0.17500 (1) obj. -61.9027 iterations 0
Cbc0038I Pass  47: suminf.    1.91097 (7) obj. -61.9027 iterations 10
Cbc0038I Pass  48: suminf.    0.89977 (4) obj. -61.9027 iterations 6
Cbc0038I Pass  49: suminf.    0.73346 (3) obj. -61.9027 iterations 7
Cbc0038I Pass  50: suminf.    0.83209 (2) obj. -61.9027 iterations 7
Cbc0038I Pass  51: suminf.    0.68060 (2) obj. -61.9027 iterations 2
Cbc0038I Pass  52: suminf.    0.17500 (1) obj. -61.9027 iterations 1
Cbc0038I Pass  53: suminf.    0.17500 (1) obj. -61.9027 iterations 0
Cbc0038I Pass  54: suminf.    0.68025 (5) obj. -61.9027 iterations 7
Cbc0038I Pass  55: suminf.    0.47623 (2) obj. -61.9027 iterations 6
Cbc0038I Pass  56: suminf.    1.37417 (5) obj. -61.9027 iterations 7
Cbc0038I Pass  57: suminf.    1.37417 (5) obj. -61.9027 iterations 0
Cbc0038I Pass  58: suminf.    1.20663 (4) obj. -61.9027 iterations 5
Cbc0038I Pass  59: suminf.    0.33745 (3) obj. -61.9027 iterations 3
Cbc0038I Pass  60: suminf.    0.17500 (1) obj. -68.6617 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 28 columns, reduced to 40 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -56.2063 - took 0.04 seconds
Cbc0012I Integer solution of -56.20625 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 50 rows 28 columns, reduced to 26 rows 16 columns
Cbc0031I 7 added rows had average density of 19.571429
Cbc0013I At root node, 7 cuts changed objective from -84.687922 to -68.95073 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 974 row cuts average 3.2 elements, 3 column cuts (3 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 332 row cuts average 25.9 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 10 row cuts average 4.6 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 79 row cuts average 24.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 26.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -56.20625000000001, took 2055 iterations and 12 nodes (0.22 seconds)
Cbc0032I Strong branching done 160 times (1331 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 5, 16 variables fixed on reduced cost
Total time (CPU seconds):       0.22   (Wallclock seconds):       0.23

