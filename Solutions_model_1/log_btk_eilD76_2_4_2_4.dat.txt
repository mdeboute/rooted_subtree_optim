Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 135 (-20) rows, 72 (-6) columns and 406 (-47) elements
Clp1000I sum of infeasibilities 1.93574e-05 - average 1.43388e-07, 13 fixed columns
Coin0506I Presolve 102 (-33) rows, 59 (-13) columns and 315 (-91) elements
Clp0029I End of values pass after 59 iterations
Clp0000I Optimal - objective value 91.575178
Clp0000I Optimal - objective value 91.575178
Coin0511I After Postsolve, objective 91.575178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 91.575178
Clp0000I Optimal - objective value 91.575178
Clp0000I Optimal - objective value 91.575178
Coin0511I After Postsolve, objective 91.575178, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 91.5751782 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 135 rows, 72 columns (71 integer (71 of which binary)) and 406 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.274%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 44 integers unsatisfied sum - 12.0305
Cbc0038I Solution found of -2.56341
Cbc0038I Relaxing continuous gives -6.23555
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 72 columns, reduced to 79 rows 45 columns
Cbc0038I Mini branch and bound improved solution from -6.23555 to -61.328 (0.06 seconds)
Cbc0038I Round again with cutoff of -64.3528
Cbc0038I Pass   1: suminf.    6.54568 (34) obj. -64.3528 iterations 41
Cbc0038I Pass   2: suminf.    6.22546 (26) obj. -64.3528 iterations 10
Cbc0038I Pass   3: suminf.    1.55967 (6) obj. -64.3528 iterations 31
Cbc0038I Pass   4: suminf.    1.07495 (6) obj. -64.3528 iterations 6
Cbc0038I Pass   5: suminf.    1.17346 (6) obj. -64.3528 iterations 13
Cbc0038I Pass   6: suminf.    0.76367 (4) obj. -64.3528 iterations 5
Cbc0038I Pass   7: suminf.    0.97678 (5) obj. -64.3528 iterations 4
Cbc0038I Pass   8: suminf.    0.69137 (7) obj. -64.3528 iterations 6
Cbc0038I Pass   9: suminf.    1.80514 (7) obj. -64.3528 iterations 10
Cbc0038I Pass  10: suminf.    1.95039 (5) obj. -64.3528 iterations 19
Cbc0038I Pass  11: suminf.    1.69852 (8) obj. -64.3528 iterations 7
Cbc0038I Pass  12: suminf.    3.19448 (9) obj. -64.3528 iterations 10
Cbc0038I Pass  13: suminf.    1.15951 (6) obj. -64.3528 iterations 14
Cbc0038I Pass  14: suminf.    1.12015 (4) obj. -64.3528 iterations 12
Cbc0038I Pass  15: suminf.    1.33467 (7) obj. -64.3528 iterations 7
Cbc0038I Pass  16: suminf.    0.96966 (5) obj. -64.3528 iterations 5
Cbc0038I Pass  17: suminf.    1.59494 (5) obj. -64.3528 iterations 10
Cbc0038I Pass  18: suminf.    1.15951 (6) obj. -64.3528 iterations 8
Cbc0038I Pass  19: suminf.    1.12015 (4) obj. -64.3528 iterations 10
Cbc0038I Pass  20: suminf.    1.33467 (7) obj. -64.3528 iterations 7
Cbc0038I Pass  21: suminf.    0.96966 (5) obj. -64.3528 iterations 5
Cbc0038I Pass  22: suminf.    1.59494 (5) obj. -64.3528 iterations 10
Cbc0038I Pass  23: suminf.    1.15951 (6) obj. -64.3528 iterations 8
Cbc0038I Pass  24: suminf.    1.12015 (4) obj. -64.3528 iterations 10
Cbc0038I Pass  25: suminf.    1.33467 (7) obj. -64.3528 iterations 7
Cbc0038I Pass  26: suminf.    0.96966 (5) obj. -64.3528 iterations 5
Cbc0038I Pass  27: suminf.    1.59494 (5) obj. -64.3528 iterations 10
Cbc0038I Pass  28: suminf.    1.15951 (6) obj. -64.3528 iterations 8
Cbc0038I Pass  29: suminf.    1.12015 (4) obj. -64.3528 iterations 10
Cbc0038I Pass  30: suminf.    1.33467 (7) obj. -64.3528 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 72 columns, reduced to 87 rows 50 columns
Cbc0038I Mini branch and bound improved solution from -61.328 to -61.3296 (0.11 seconds)
Cbc0038I Round again with cutoff of -69.7973
Cbc0038I Pass  30: suminf.    7.27676 (34) obj. -69.7973 iterations 4
Cbc0038I Pass  31: suminf.    6.90828 (28) obj. -69.7973 iterations 14
Cbc0038I Pass  32: suminf.    2.28568 (8) obj. -69.7973 iterations 26
Cbc0038I Pass  33: suminf.    1.82713 (8) obj. -69.7973 iterations 9
Cbc0038I Pass  34: suminf.    3.25730 (9) obj. -69.7973 iterations 11
Cbc0038I Pass  35: suminf.    2.13249 (9) obj. -69.7973 iterations 5
Cbc0038I Pass  36: suminf.    2.13249 (9) obj. -69.7973 iterations 2
Cbc0038I Pass  37: suminf.    2.43727 (19) obj. -69.7973 iterations 13
Cbc0038I Pass  38: suminf.    2.40134 (8) obj. -69.7973 iterations 6
Cbc0038I Pass  39: suminf.    2.27045 (9) obj. -69.7973 iterations 11
Cbc0038I Pass  40: suminf.    2.25478 (11) obj. -69.7973 iterations 3
Cbc0038I Pass  41: suminf.    3.20653 (9) obj. -69.7973 iterations 18
Cbc0038I Pass  42: suminf.    2.86730 (9) obj. -69.7973 iterations 7
Cbc0038I Pass  43: suminf.    3.36946 (16) obj. -69.7973 iterations 14
Cbc0038I Pass  44: suminf.    2.97809 (10) obj. -69.7973 iterations 9
Cbc0038I Pass  45: suminf.    3.46818 (11) obj. -69.7973 iterations 13
Cbc0038I Pass  46: suminf.    2.64851 (12) obj. -69.7973 iterations 9
Cbc0038I Pass  47: suminf.    3.20653 (9) obj. -69.7973 iterations 22
Cbc0038I Pass  48: suminf.    2.86730 (9) obj. -69.7973 iterations 6
Cbc0038I Pass  49: suminf.    3.36946 (16) obj. -69.7973 iterations 12
Cbc0038I Pass  50: suminf.    2.97809 (10) obj. -69.7973 iterations 9
Cbc0038I Pass  51: suminf.    3.46818 (11) obj. -69.7973 iterations 14
Cbc0038I Pass  52: suminf.    2.64851 (12) obj. -69.7973 iterations 10
Cbc0038I Pass  53: suminf.    4.10869 (17) obj. -69.7973 iterations 17
Cbc0038I Pass  54: suminf.    2.86730 (9) obj. -69.7973 iterations 8
Cbc0038I Pass  55: suminf.    3.36946 (16) obj. -69.7973 iterations 12
Cbc0038I Pass  56: suminf.    2.97809 (10) obj. -69.7973 iterations 9
Cbc0038I Pass  57: suminf.    3.46818 (11) obj. -69.7973 iterations 13
Cbc0038I Pass  58: suminf.    2.64851 (12) obj. -69.7973 iterations 9
Cbc0038I Pass  59: suminf.    4.10869 (17) obj. -69.7973 iterations 18
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 72 columns, reduced to 87 rows 50 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -61.3296 - took 0.13 seconds
Cbc0012I Integer solution of -61.329565 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 135 rows 72 columns, reduced to 79 rows 45 columns
Cbc0031I 22 added rows had average density of 50.818182
Cbc0013I At root node, 22 cuts changed objective from -91.575178 to -79.177834 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7061 row cuts average 3.3 elements, 1 column cuts (1 active)  in 0.063 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1522 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.061 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 36 row cuts average 4.1 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0010I After 1 nodes, 2 on tree, -61.329565 best solution, best possible -79.177834 (0.68 seconds)
Cbc0038I Full problem 135 rows 72 columns, reduced to 8 rows 12 columns
Cbc0012I Integer solution of -61.331165 found by rounding after 5611 iterations and 50 nodes (0.82 seconds)
Cbc0038I Full problem 135 rows 72 columns, reduced to 6 rows 10 columns
Cbc0012I Integer solution of -61.331875 found by rounding after 6794 iterations and 185 nodes (0.94 seconds)
Cbc0001I Search completed - best objective -61.33187515000002, took 8102 iterations and 278 nodes (1.05 seconds)
Cbc0032I Strong branching done 1456 times (13253 iterations), fathomed 61 nodes and fixed 76 variables
Cbc0035I Maximum depth 17, 754 variables fixed on reduced cost
Total time (CPU seconds):       1.01   (Wallclock seconds):       1.06

