Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 28 (-21) rows, 15 (-10) columns and 79 (-56) elements
Clp0000I Optimal - objective value 96.313253
Coin0511I After Postsolve, objective 96.313253, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 96.31325342 - 16 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 28 rows, 15 columns (14 integer (14 of which binary)) and 79 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.591%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 7 integers unsatisfied sum - 2.37055
Cbc0038I Pass   1: suminf.    0.37886 (2) obj. -60.0415 iterations 12
Cbc0038I Solution found of 16
Cbc0038I Relaxing continuous gives 16
Cbc0038I Rounding solution of -5.66667 is better than previous of 16

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 15 columns, reduced to 11 rows 9 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -14.7314
Cbc0038I Pass   2: suminf.    0.37886 (2) obj. -60.0415 iterations 0
Cbc0038I Pass   3: suminf.    0.40851 (2) obj. -14.7314 iterations 3
Cbc0038I Solution found of -30.6667
Cbc0038I Relaxing continuous gives -30.6667
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 15 columns, reduced to 11 rows 8 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -43.7961
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass   4: suminf.    0.59047 (2) obj. -64.2188 iterations 8
Cbc0038I Pass   5: suminf.    0.38792 (2) obj. -43.7961 iterations 4
Cbc0038I Pass   6: suminf.    1.00757 (4) obj. -43.7961 iterations 5
Cbc0038I Pass   7: suminf.    0.66950 (3) obj. -43.7961 iterations 1
Cbc0038I Pass   8: suminf.    0.75048 (2) obj. -43.7961 iterations 3
Cbc0038I Pass   9: suminf.    0.20524 (1) obj. -43.7961 iterations 3
Cbc0038I Pass  10: suminf.    0.54559 (2) obj. -43.7961 iterations 2
Cbc0038I Pass  11: suminf.    0.00505 (1) obj. -43.7961 iterations 7
Cbc0038I Pass  12: suminf.    0.00505 (1) obj. -43.7961 iterations 1
Cbc0038I Pass  13: suminf.    0.30713 (1) obj. -43.7961 iterations 3
Cbc0038I Pass  14: suminf.    0.56580 (2) obj. -43.7961 iterations 2
Cbc0038I Pass  15: suminf.    0.02411 (1) obj. -43.7961 iterations 6
Cbc0038I Pass  16: suminf.    0.02411 (1) obj. -43.7961 iterations 2
Cbc0038I Pass  17: suminf.    0.66506 (2) obj. -43.7961 iterations 2
Cbc0038I Pass  18: suminf.    0.26939 (1) obj. -43.7961 iterations 3
Cbc0038I Pass  19: suminf.    0.59290 (2) obj. -43.7961 iterations 2
Cbc0038I Pass  20: suminf.    0.26939 (1) obj. -43.7961 iterations 3
Cbc0038I Pass  21: suminf.    0.49613 (1) obj. -43.7961 iterations 1
Cbc0038I Pass  22: suminf.    0.69037 (2) obj. -43.7961 iterations 1
Cbc0038I Pass  23: suminf.    0.69037 (2) obj. -43.7961 iterations 0
Cbc0038I Pass  24: suminf.    0.63740 (2) obj. -43.7961 iterations 6
Cbc0038I Pass  25: suminf.    0.00000 (0) obj. -68 iterations 2
Cbc0038I Solution found of -68
Cbc0038I Relaxing continuous gives -68
Cbc0038I Rounding solution of -73 is better than previous of -68

Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 15 columns, reduced to 15 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -79.994
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 4
Cbc0038I Pass  26: suminf.    0.64171 (4) obj. -79.994 iterations 2
Cbc0038I Pass  27: suminf.    2.02793 (6) obj. -79.994 iterations 7
Cbc0038I Pass  28: suminf.    0.84905 (4) obj. -79.994 iterations 4
Cbc0038I Pass  29: suminf.    0.95856 (4) obj. -79.994 iterations 7
Cbc0038I Pass  30: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I Pass  31: suminf.    1.07353 (4) obj. -79.994 iterations 2
Cbc0038I Pass  32: suminf.    0.96416 (3) obj. -79.994 iterations 1
Cbc0038I Pass  33: suminf.    0.16355 (2) obj. -79.994 iterations 1
Cbc0038I Pass  34: suminf.    0.95856 (4) obj. -79.994 iterations 4
Cbc0038I Pass  35: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I Pass  36: suminf.    1.07353 (4) obj. -79.994 iterations 2
Cbc0038I Pass  37: suminf.    0.96416 (3) obj. -79.994 iterations 1
Cbc0038I Pass  38: suminf.    0.16355 (2) obj. -79.994 iterations 1
Cbc0038I Pass  39: suminf.    0.95856 (4) obj. -79.994 iterations 4
Cbc0038I Pass  40: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I Pass  41: suminf.    1.07353 (4) obj. -79.994 iterations 2
Cbc0038I Pass  42: suminf.    0.96416 (3) obj. -79.994 iterations 1
Cbc0038I Pass  43: suminf.    0.16355 (2) obj. -79.994 iterations 1
Cbc0038I Pass  44: suminf.    0.95856 (4) obj. -79.994 iterations 4
Cbc0038I Pass  45: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I Pass  46: suminf.    1.07353 (4) obj. -79.994 iterations 2
Cbc0038I Pass  47: suminf.    0.96416 (3) obj. -79.994 iterations 1
Cbc0038I Pass  48: suminf.    0.16355 (2) obj. -79.994 iterations 1
Cbc0038I Pass  49: suminf.    0.95856 (4) obj. -79.994 iterations 4
Cbc0038I Pass  50: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I Pass  51: suminf.    1.07353 (4) obj. -79.994 iterations 2
Cbc0038I Pass  52: suminf.    0.96416 (3) obj. -79.994 iterations 1
Cbc0038I Pass  53: suminf.    0.16355 (2) obj. -79.994 iterations 1
Cbc0038I Pass  54: suminf.    0.95856 (4) obj. -79.994 iterations 4
Cbc0038I Pass  55: suminf.    0.85680 (3) obj. -79.994 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 15 columns, reduced to 13 rows 9 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -73 - took 0.01 seconds
Cbc0012I Integer solution of -73 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 28 rows 15 columns, reduced to 11 rows 9 columns
Cbc0012I Integer solution of -73.66667 found by DiveCoefficient after 7 iterations and 0 nodes (0.02 seconds)
Cbc0031I 2 added rows had average density of 4
Cbc0013I At root node, 2 cuts changed objective from -96.313253 to -73.66667 in 3 passes
Cbc0014I Cut generator 0 (Probing) - 5 row cuts average 2.0 elements, 8 column cuts (8 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 3 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 13.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -73.66667000000001, took 7 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

