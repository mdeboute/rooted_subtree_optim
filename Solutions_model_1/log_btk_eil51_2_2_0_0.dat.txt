Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 85 (-20) rows, 51 (-2) columns and 264 (-39) elements
Clp1000I sum of infeasibilities 6.87269e-06 - average 8.08552e-08, 5 fixed columns
Coin0506I Presolve 77 (-8) rows, 46 (-5) columns and 238 (-26) elements
Clp0029I End of values pass after 46 iterations
Clp0000I Optimal - objective value 34.634717
Clp0000I Optimal - objective value 34.634717
Coin0511I After Postsolve, objective 34.634717, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.39893571 - largest nonzero change 0 ( 0%) - largest zero change 2.9392985e-05
Clp0000I Optimal - objective value 34.634717
Clp0000I Optimal - objective value 34.634717
Clp0000I Optimal - objective value 34.634717
Coin0511I After Postsolve, objective 34.634717, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 34.63471691 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 85 rows, 51 columns (50 integer (50 of which binary)) and 264 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.580%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 30 integers unsatisfied sum - 9.58929
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 7.75867 iterations 30
Cbc0038I Solution found of 7.75867
Cbc0038I Relaxing continuous gives 7.75867
Cbc0038I Rounding solution of -4.99425 is better than previous of 7.75867

Cbc0038I Before mini branch and bound, 20 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 51 columns, reduced to 53 rows 31 columns
Cbc0038I Mini branch and bound improved solution from -4.99425 to -8.51129 (0.04 seconds)
Cbc0038I Round again with cutoff of -11.1237
Cbc0038I Pass   2: suminf.    1.15517 (5) obj. -11.1237 iterations 8
Cbc0038I Pass   3: suminf.    1.12095 (4) obj. -11.1237 iterations 2
Cbc0038I Pass   4: suminf.    1.29850 (5) obj. -11.1237 iterations 5
Cbc0038I Pass   5: suminf.    1.26844 (4) obj. -11.1237 iterations 1
Cbc0038I Pass   6: suminf.    1.12095 (4) obj. -11.1237 iterations 1
Cbc0038I Pass   7: suminf.    0.52826 (8) obj. -11.1237 iterations 10
Cbc0038I Pass   8: suminf.    0.44538 (5) obj. -11.1237 iterations 5
Cbc0038I Pass   9: suminf.    1.35534 (4) obj. -11.1237 iterations 5
Cbc0038I Pass  10: suminf.    1.35534 (4) obj. -11.1237 iterations 0
Cbc0038I Pass  11: suminf.    1.17759 (3) obj. -11.1237 iterations 3
Cbc0038I Pass  12: suminf.    1.12095 (4) obj. -11.1237 iterations 1
Cbc0038I Pass  13: suminf.    1.29850 (5) obj. -11.1237 iterations 5
Cbc0038I Pass  14: suminf.    1.26844 (4) obj. -11.1237 iterations 1
Cbc0038I Pass  15: suminf.    1.12095 (4) obj. -11.1237 iterations 1
Cbc0038I Pass  16: suminf.    3.08308 (8) obj. -11.1237 iterations 13
Cbc0038I Pass  17: suminf.    1.81983 (8) obj. -11.1237 iterations 8
Cbc0038I Pass  18: suminf.    1.23494 (4) obj. -11.1237 iterations 7
Cbc0038I Pass  19: suminf.    1.00195 (3) obj. -11.1237 iterations 2
Cbc0038I Pass  20: suminf.    1.23484 (4) obj. -11.1237 iterations 3
Cbc0038I Pass  21: suminf.    4.47360 (12) obj. -11.1237 iterations 15
Cbc0038I Pass  22: suminf.    1.88513 (7) obj. -11.1237 iterations 7
Cbc0038I Pass  23: suminf.    1.74760 (6) obj. -11.1237 iterations 9
Cbc0038I Pass  24: suminf.    1.66108 (5) obj. -11.1237 iterations 1
Cbc0038I Pass  25: suminf.    1.14692 (3) obj. -11.1237 iterations 3
Cbc0038I Pass  26: suminf.    1.12128 (4) obj. -11.1237 iterations 1
Cbc0038I Pass  27: suminf.    1.12087 (4) obj. -11.1237 iterations 1
Cbc0038I Pass  28: suminf.    1.12087 (4) obj. -11.1237 iterations 0
Cbc0038I Pass  29: suminf.    1.12128 (4) obj. -11.1237 iterations 2
Cbc0038I Pass  30: suminf.    2.22475 (8) obj. -11.1237 iterations 20
Cbc0038I Pass  31: suminf.    2.22475 (8) obj. -11.1237 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 51 columns, reduced to 69 rows 42 columns
Cbc0038I Mini branch and bound improved solution from -8.51129 to -9.02191 (0.09 seconds)
Cbc0038I Round again with cutoff of -15.8259
Cbc0038I Pass  31: suminf.    1.66862 (7) obj. -15.8259 iterations 2
Cbc0038I Pass  32: suminf.    1.53115 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  33: suminf.    1.02149 (4) obj. -15.8259 iterations 6
Cbc0038I Pass  34: suminf.    1.01820 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  35: suminf.    1.59529 (4) obj. -15.8259 iterations 3
Cbc0038I Pass  36: suminf.    0.88931 (5) obj. -15.8259 iterations 3
Cbc0038I Pass  37: suminf.    1.66862 (7) obj. -15.8259 iterations 4
Cbc0038I Pass  38: suminf.    1.53115 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  39: suminf.    1.02149 (4) obj. -15.8259 iterations 6
Cbc0038I Pass  40: suminf.    1.01820 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  41: suminf.    1.59529 (4) obj. -15.8259 iterations 3
Cbc0038I Pass  42: suminf.    0.88931 (5) obj. -15.8259 iterations 3
Cbc0038I Pass  43: suminf.    1.66862 (7) obj. -15.8259 iterations 4
Cbc0038I Pass  44: suminf.    1.53115 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  45: suminf.    1.02149 (4) obj. -15.8259 iterations 6
Cbc0038I Pass  46: suminf.    1.01820 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  47: suminf.    1.59529 (4) obj. -15.8259 iterations 3
Cbc0038I Pass  48: suminf.    0.88931 (5) obj. -15.8259 iterations 3
Cbc0038I Pass  49: suminf.    1.66862 (7) obj. -15.8259 iterations 4
Cbc0038I Pass  50: suminf.    1.53115 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  51: suminf.    1.02149 (4) obj. -15.8259 iterations 6
Cbc0038I Pass  52: suminf.    1.01820 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  53: suminf.    1.59529 (4) obj. -15.8259 iterations 3
Cbc0038I Pass  54: suminf.    0.88931 (5) obj. -15.8259 iterations 3
Cbc0038I Pass  55: suminf.    1.66862 (7) obj. -15.8259 iterations 4
Cbc0038I Pass  56: suminf.    1.53115 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  57: suminf.    1.02149 (4) obj. -15.8259 iterations 6
Cbc0038I Pass  58: suminf.    1.01820 (5) obj. -15.8259 iterations 2
Cbc0038I Pass  59: suminf.    1.59529 (4) obj. -15.8259 iterations 3
Cbc0038I Pass  60: suminf.    0.88931 (5) obj. -15.8259 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 18 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 51 columns, reduced to 56 rows 33 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -9.02191 - took 0.09 seconds
Cbc0012I Integer solution of -9.021909 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 85 rows 51 columns, reduced to 54 rows 32 columns
Cbc0031I 26 added rows had average density of 27.384615
Cbc0013I At root node, 26 cuts changed objective from -34.634717 to -24.3681 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8921 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.048 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1486 row cuts average 51.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 64 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.037 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0012I Integer solution of -9.034289 found by rounding after 6690 iterations and 39 nodes (0.65 seconds)
Cbc0012I Integer solution of -9.090389 found by DiveCoefficient after 6836 iterations and 59 nodes (0.67 seconds)
Cbc0012I Integer solution of -9.258519 found by rounding after 6840 iterations and 61 nodes (0.67 seconds)
Cbc0001I Search completed - best objective -9.258519, took 6947 iterations and 78 nodes (0.68 seconds)
Cbc0032I Strong branching done 690 times (10352 iterations), fathomed 8 nodes and fixed 14 variables
Cbc0035I Maximum depth 14, 140 variables fixed on reduced cost
Total time (CPU seconds):       0.66   (Wallclock seconds):       0.69

