Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 494 (-33) rows, 256 (-8) columns and 1470 (-75) elements
Clp1000I sum of infeasibilities 1.58749e-05 - average 3.21354e-08, 96 fixed columns
Coin0506I Presolve 302 (-192) rows, 159 (-97) columns and 897 (-573) elements
Clp0029I End of values pass after 159 iterations
Clp0014I Perturbing problem by 0.001% of 2.3277775 - largest nonzero change 0 ( 0%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 228.60686
Clp0000I Optimal - objective value 228.60686
Coin0511I After Postsolve, objective 228.60686, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 228.60686
Clp0000I Optimal - objective value 228.60686
Clp0000I Optimal - objective value 228.60686
Coin0511I After Postsolve, objective 228.60686, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 228.6068642 - 0 iterations time 0.162, Presolve 0.00, Idiot 0.15

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 494 rows, 256 columns (255 integer (255 of which binary)) and 1470 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.375%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 9.15877
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -73.917 iterations 104
Cbc0038I Solution found of -73.917
Cbc0038I Relaxing continuous gives -73.917
Cbc0038I Rounding solution of -135.507 is better than previous of -73.917

Cbc0038I Before mini branch and bound, 213 integers at bound fixed and 0 continuous
Cbc0038I Full problem 494 rows 256 columns, reduced to 74 rows 43 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I Round again with cutoff of -144.817
Cbc0038I Pass   2: suminf.    0.82166 (3) obj. -144.817 iterations 10
Cbc0038I Pass   3: suminf.    0.56218 (2) obj. -144.817 iterations 9
Cbc0038I Pass   4: suminf.    0.81644 (2) obj. -144.817 iterations 8
Cbc0038I Pass   5: suminf.    5.40789 (20) obj. -144.817 iterations 61
Cbc0038I Pass   6: suminf.    2.92218 (11) obj. -144.817 iterations 40
Cbc0038I Pass   7: suminf.    2.49766 (7) obj. -144.817 iterations 14
Cbc0038I Pass   8: suminf.    1.99080 (8) obj. -144.817 iterations 7
Cbc0038I Pass   9: suminf.    2.02363 (7) obj. -144.817 iterations 10
Cbc0038I Pass  10: suminf.    1.73651 (6) obj. -144.817 iterations 11
Cbc0038I Pass  11: suminf.    1.73651 (6) obj. -144.817 iterations 1
Cbc0038I Pass  12: suminf.    1.49486 (4) obj. -144.817 iterations 7
Cbc0038I Pass  13: suminf.    1.03347 (4) obj. -144.817 iterations 8
Cbc0038I Pass  14: suminf.    1.68509 (4) obj. -144.817 iterations 5
Cbc0038I Pass  15: suminf.    0.91143 (4) obj. -144.817 iterations 10
Cbc0038I Pass  16: suminf.    1.61570 (4) obj. -144.817 iterations 6
Cbc0038I Pass  17: suminf.    1.21926 (5) obj. -144.817 iterations 4
Cbc0038I Pass  18: suminf.    1.03347 (4) obj. -144.817 iterations 4
Cbc0038I Pass  19: suminf.    1.68509 (4) obj. -144.817 iterations 5
Cbc0038I Pass  20: suminf.    0.91143 (4) obj. -144.817 iterations 10
Cbc0038I Pass  21: suminf.    1.61570 (4) obj. -144.817 iterations 6
Cbc0038I Pass  22: suminf.    1.21926 (5) obj. -144.817 iterations 4
Cbc0038I Pass  23: suminf.    1.03347 (4) obj. -144.817 iterations 4
Cbc0038I Pass  24: suminf.    1.68509 (4) obj. -144.817 iterations 5
Cbc0038I Pass  25: suminf.    0.91143 (4) obj. -144.817 iterations 10
Cbc0038I Pass  26: suminf.    1.61570 (4) obj. -144.817 iterations 6
Cbc0038I Pass  27: suminf.    1.21926 (5) obj. -144.817 iterations 4
Cbc0038I Pass  28: suminf.    1.03347 (4) obj. -144.817 iterations 4
Cbc0038I Pass  29: suminf.    1.68509 (4) obj. -144.817 iterations 5
Cbc0038I Pass  30: suminf.    0.91143 (4) obj. -144.817 iterations 10
Cbc0038I Pass  31: suminf.    1.61570 (4) obj. -144.817 iterations 6
Cbc0038I Rounding solution of -143.143 is better than previous of -135.507

Cbc0038I Before mini branch and bound, 195 integers at bound fixed and 0 continuous
Cbc0038I Full problem 494 rows 256 columns, reduced to 103 rows 60 columns
Cbc0038I Mini branch and bound improved solution from -143.143 to -154.078 (0.26 seconds)
Cbc0038I Round again with cutoff of -168.984
Cbc0038I Pass  31: suminf.    1.52430 (5) obj. -168.984 iterations 15
Cbc0038I Pass  32: suminf.    1.52002 (5) obj. -168.984 iterations 11
Cbc0038I Pass  33: suminf.    2.04203 (7) obj. -168.984 iterations 40
Cbc0038I Pass  34: suminf.    1.98162 (7) obj. -168.984 iterations 10
Cbc0038I Pass  35: suminf.    2.26796 (7) obj. -168.984 iterations 28
Cbc0038I Pass  36: suminf.    1.79512 (7) obj. -168.984 iterations 12
Cbc0038I Pass  37: suminf.    1.74020 (7) obj. -168.984 iterations 2
Cbc0038I Pass  38: suminf.    2.87029 (7) obj. -168.984 iterations 20
Cbc0038I Pass  39: suminf.    2.14772 (6) obj. -168.984 iterations 12
Cbc0038I Pass  40: suminf.    1.59037 (5) obj. -168.984 iterations 7
Cbc0038I Pass  41: suminf.    1.52002 (5) obj. -168.984 iterations 10
Cbc0038I Pass  42: suminf.    2.04203 (7) obj. -168.984 iterations 40
Cbc0038I Pass  43: suminf.    1.98162 (7) obj. -168.984 iterations 10
Cbc0038I Pass  44: suminf.    2.26796 (7) obj. -168.984 iterations 30
Cbc0038I Pass  45: suminf.    1.79512 (7) obj. -168.984 iterations 12
Cbc0038I Pass  46: suminf.    1.74020 (7) obj. -168.984 iterations 2
Cbc0038I Pass  47: suminf.    2.87029 (7) obj. -168.984 iterations 18
Cbc0038I Pass  48: suminf.    2.14772 (6) obj. -168.984 iterations 12
Cbc0038I Pass  49: suminf.    1.59037 (5) obj. -168.984 iterations 7
Cbc0038I Pass  50: suminf.    1.52002 (5) obj. -168.984 iterations 9
Cbc0038I Pass  51: suminf.    2.04203 (7) obj. -168.984 iterations 40
Cbc0038I Pass  52: suminf.    1.98162 (7) obj. -168.984 iterations 11
Cbc0038I Pass  53: suminf.    2.26796 (7) obj. -168.984 iterations 28
Cbc0038I Pass  54: suminf.    1.79512 (7) obj. -168.984 iterations 12
Cbc0038I Pass  55: suminf.    1.74020 (7) obj. -168.984 iterations 2
Cbc0038I Pass  56: suminf.    2.87029 (7) obj. -168.984 iterations 18
Cbc0038I Pass  57: suminf.    2.14772 (6) obj. -168.984 iterations 12
Cbc0038I Pass  58: suminf.    1.59037 (5) obj. -168.984 iterations 7
Cbc0038I Pass  59: suminf.    1.52002 (5) obj. -168.984 iterations 10
Cbc0038I Pass  60: suminf.    2.04203 (7) obj. -168.984 iterations 42
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 211 integers at bound fixed and 0 continuous
Cbc0038I Full problem 494 rows 256 columns, reduced to 76 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.34 seconds)
Cbc0038I After 0.34 seconds - Feasibility pump exiting with objective of -154.078 - took 0.28 seconds
Cbc0012I Integer solution of -154.07813 found by feasibility pump after 0 iterations and 0 nodes (0.34 seconds)
Cbc0038I Full problem 494 rows 256 columns, reduced to 76 rows 45 columns
Cbc0031I 28 added rows had average density of 137.5
Cbc0013I At root node, 28 cuts changed objective from -228.60686 to -205.81267 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 18383 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.815 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1779 row cuts average 251.3 elements, 0 column cuts (0 active)  in 0.593 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.125 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.542 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.052 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 197 row cuts average 246.2 elements, 0 column cuts (0 active)  in 0.328 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -154.07813 best solution, best possible -205.81267 (5.89 seconds)
Cbc0010I After 6 nodes, 7 on tree, -154.07813 best solution, best possible -205.81267 (6.64 seconds)
Cbc0010I After 39 nodes, 8 on tree, -154.07813 best solution, best possible -205.81267 (7.34 seconds)
Cbc0038I Full problem 494 rows 256 columns, reduced to 41 rows 28 columns
Cbc0038I Full problem 494 rows 256 columns, reduced to 138 rows 75 columns
Cbc0010I After 96 nodes, 7 on tree, -154.07813 best solution, best possible -205.81267 (8.20 seconds)
Cbc0001I Search completed - best objective -154.07813, took 16817 iterations and 158 nodes (8.90 seconds)
Cbc0032I Strong branching done 1768 times (42837 iterations), fathomed 26 nodes and fixed 126 variables
Cbc0035I Maximum depth 44, 1810 variables fixed on reduced cost
Total time (CPU seconds):       8.55   (Wallclock seconds):       8.96

