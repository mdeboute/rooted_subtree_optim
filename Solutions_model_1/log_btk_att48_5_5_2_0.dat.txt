Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 78 (-21) rows, 42 (-8) columns and 233 (-52) elements
Clp1000I sum of infeasibilities 0.000605622 - average 7.76439e-06, 5 fixed columns
Coin0506I Presolve 68 (-10) rows, 37 (-5) columns and 203 (-30) elements
Clp0029I End of values pass after 37 iterations
Clp0000I Optimal - objective value 1522.6858
Clp0000I Optimal - objective value 1522.6858
Coin0511I After Postsolve, objective 1522.6858, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1522.6858
Clp0000I Optimal - objective value 1522.6858
Clp0000I Optimal - objective value 1522.6858
Coin0511I After Postsolve, objective 1522.6858, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1522.685778 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 78 rows, 42 columns (41 integer (41 of which binary)) and 233 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.129%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 10.9013
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1375.38 iterations 38
Cbc0038I Solution found of 1375.38
Cbc0038I Relaxing continuous gives 1375.38
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 42 columns, reduced to 51 rows 28 columns
Cbc0038I Mini branch and bound improved solution from 1375.38 to -347.677 (0.02 seconds)
Cbc0038I Round again with cutoff of -465.178
Cbc0038I Pass   2: suminf.    3.06794 (15) obj. -465.178 iterations 22
Cbc0038I Pass   3: suminf.    3.06794 (15) obj. -465.178 iterations 0
Cbc0038I Pass   4: suminf.    2.03759 (18) obj. -465.178 iterations 22
Cbc0038I Pass   5: suminf.    1.45033 (27) obj. -465.178 iterations 20
Cbc0038I Pass   6: suminf.    3.28436 (17) obj. -465.178 iterations 34
Cbc0038I Pass   7: suminf.    3.10823 (14) obj. -465.178 iterations 5
Cbc0038I Pass   8: suminf.    1.89879 (19) obj. -465.178 iterations 17
Cbc0038I Pass   9: suminf.    4.38844 (15) obj. -465.178 iterations 14
Cbc0038I Pass  10: suminf.    3.16003 (13) obj. -465.178 iterations 6
Cbc0038I Pass  11: suminf.    3.13619 (14) obj. -465.178 iterations 6
Cbc0038I Pass  12: suminf.    5.22068 (14) obj. -465.178 iterations 8
Cbc0038I Pass  13: suminf.    4.66061 (13) obj. -465.178 iterations 1
Cbc0038I Pass  14: suminf.    4.20666 (13) obj. -465.178 iterations 2
Cbc0038I Pass  15: suminf.    4.16848 (13) obj. -465.178 iterations 1
Cbc0038I Pass  16: suminf.    3.23738 (13) obj. -465.178 iterations 4
Cbc0038I Pass  17: suminf.    2.96421 (12) obj. -465.178 iterations 3
Cbc0038I Pass  18: suminf.    3.52689 (13) obj. -465.178 iterations 15
Cbc0038I Pass  19: suminf.    3.05917 (12) obj. -465.178 iterations 3
Cbc0038I Pass  20: suminf.    2.73150 (10) obj. -465.178 iterations 3
Cbc0038I Pass  21: suminf.    2.42115 (9) obj. -465.178 iterations 2
Cbc0038I Pass  22: suminf.    2.04400 (10) obj. -465.178 iterations 2
Cbc0038I Pass  23: suminf.    3.65485 (15) obj. -465.178 iterations 12
Cbc0038I Pass  24: suminf.    3.12782 (12) obj. -465.178 iterations 4
Cbc0038I Pass  25: suminf.    3.07739 (11) obj. -465.178 iterations 1
Cbc0038I Pass  26: suminf.    2.96091 (12) obj. -465.178 iterations 9
Cbc0038I Pass  27: suminf.    2.78042 (10) obj. -465.178 iterations 2
Cbc0038I Pass  28: suminf.    2.56241 (9) obj. -465.178 iterations 1
Cbc0038I Pass  29: suminf.    2.04400 (10) obj. -465.178 iterations 4
Cbc0038I Pass  30: suminf.    3.65485 (15) obj. -465.178 iterations 12
Cbc0038I Pass  31: suminf.    3.12782 (12) obj. -465.178 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 14 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 42 columns, reduced to 51 rows 28 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -347.677 - took 0.04 seconds
Cbc0012I Integer solution of -347.677 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 78 rows 42 columns, reduced to 51 rows 28 columns
Cbc0031I 21 added rows had average density of 15.142857
Cbc0013I At root node, 163 cuts changed objective from -1522.6858 to -347.67701 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 361 row cuts average 3.3 elements, 3 column cuts (3 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 81 row cuts average 33.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 9 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 81 row cuts average 33.2 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective -347.677, took 131 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 1 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

