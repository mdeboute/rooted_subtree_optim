Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 54 (-11) rows, 30 (-3) columns and 161 (-22) elements
Clp1000I sum of infeasibilities 3.38767e-05 - average 6.27347e-07, 5 fixed columns
Coin0506I Presolve 40 (-14) rows, 23 (-7) columns and 119 (-42) elements
Clp0029I End of values pass after 23 iterations
Clp0000I Optimal - objective value 102.11744
Clp0000I Optimal - objective value 102.11744
Coin0511I After Postsolve, objective 102.11744, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 102.11744
Clp0000I Optimal - objective value 102.11744
Clp0000I Optimal - objective value 102.11744
Coin0511I After Postsolve, objective 102.11744, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 102.117438 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 14 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 7 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 5 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 52 rows, 30 columns (29 integer (29 of which binary)) and 182 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 7.541%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 6 integers unsatisfied sum - 2.0682
Cbc0038I Pass   1: suminf.    0.56823 (2) obj. -80.216 iterations 7
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. -53.8502 iterations 3
Cbc0038I Solution found of -53.8502
Cbc0038I Relaxing continuous gives -53.8502
Cbc0038I Before mini branch and bound, 23 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 30 columns, reduced to 10 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -53.8502 to -57.4095 (0.01 seconds)
Cbc0038I Round again with cutoff of -61.1192
Cbc0038I Pass   3: suminf.    0.56823 (2) obj. -80.216 iterations 0
Cbc0038I Pass   4: suminf.    0.11988 (1) obj. -61.1192 iterations 3
Cbc0038I Pass   5: suminf.    1.33751 (3) obj. -61.1192 iterations 13
Cbc0038I Pass   6: suminf.    0.84006 (2) obj. -61.1192 iterations 3
Cbc0038I Pass   7: suminf.    0.64416 (3) obj. -61.1192 iterations 2
Cbc0038I Pass   8: suminf.    0.67889 (2) obj. -62.7269 iterations 1
Cbc0038I Pass   9: suminf.    1.01350 (5) obj. -61.1192 iterations 6
Cbc0038I Pass  10: suminf.    1.01350 (5) obj. -61.1192 iterations 0
Cbc0038I Pass  11: suminf.    0.70463 (3) obj. -61.1192 iterations 8
Cbc0038I Pass  12: suminf.    0.37277 (2) obj. -61.1192 iterations 1
Cbc0038I Pass  13: suminf.    0.79231 (2) obj. -61.1192 iterations 3
Cbc0038I Pass  14: suminf.    0.48309 (2) obj. -64.0974 iterations 8
Cbc0038I Pass  15: suminf.    0.41443 (2) obj. -61.1192 iterations 2
Cbc0038I Pass  16: suminf.    0.97218 (3) obj. -61.1192 iterations 4
Cbc0038I Pass  17: suminf.    1.05539 (3) obj. -61.1192 iterations 1
Cbc0038I Pass  18: suminf.    0.76299 (5) obj. -61.1192 iterations 8
Cbc0038I Pass  19: suminf.    0.75320 (6) obj. -61.1192 iterations 4
Cbc0038I Pass  20: suminf.    0.09819 (1) obj. -61.1192 iterations 11
Cbc0038I Pass  21: suminf.    0.30894 (1) obj. -73.8989 iterations 1
Cbc0038I Pass  22: suminf.    0.68798 (4) obj. -61.1192 iterations 6
Cbc0038I Pass  23: suminf.    0.68798 (4) obj. -61.1192 iterations 0
Cbc0038I Pass  24: suminf.    1.28044 (4) obj. -61.1192 iterations 4
Cbc0038I Pass  25: suminf.    0.41040 (2) obj. -68.8055 iterations 4
Cbc0038I Pass  26: suminf.    0.23309 (2) obj. -61.1192 iterations 1
Cbc0038I Pass  27: suminf.    0.76494 (2) obj. -61.1192 iterations 3
Cbc0038I Pass  28: suminf.    0.70465 (2) obj. -61.1192 iterations 1
Cbc0038I Pass  29: suminf.    0.44954 (2) obj. -61.1192 iterations 3
Cbc0038I Pass  30: suminf.    0.72760 (7) obj. -61.1192 iterations 12
Cbc0038I Pass  31: suminf.    0.50620 (3) obj. -61.1192 iterations 5
Cbc0038I Pass  32: suminf.    1.08577 (3) obj. -71.3259 iterations 4
Cbc0038I Rounding solution of -72.4031 is better than previous of -57.4095

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 30 columns, reduced to 26 rows 16 columns
Cbc0038I Mini branch and bound improved solution from -72.4031 to -72.4678 (0.02 seconds)
Cbc0038I Round again with cutoff of -76.8755
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    0.56823 (2) obj. -80.216 iterations 0
Cbc0038I Pass  33: suminf.    0.48117 (2) obj. -76.8755 iterations 1
Cbc0038I Pass  34: suminf.    0.92725 (2) obj. -76.8755 iterations 3
Cbc0038I Pass  35: suminf.    0.62783 (2) obj. -85.6128 iterations 2
Cbc0038I Pass  36: suminf.    0.92725 (2) obj. -76.8755 iterations 3
Cbc0038I Pass  37: suminf.    1.56609 (7) obj. -76.8755 iterations 9
Cbc0038I Pass  38: suminf.    0.97191 (3) obj. -76.8755 iterations 5
Cbc0038I Pass  39: suminf.    0.96432 (4) obj. -76.8755 iterations 2
Cbc0038I Pass  40: suminf.    0.62797 (3) obj. -76.8755 iterations 5
Cbc0038I Pass  41: suminf.    0.39637 (2) obj. -81.5107 iterations 2
Cbc0038I Pass  42: suminf.    0.92591 (2) obj. -76.8755 iterations 4
Cbc0038I Pass  43: suminf.    0.75917 (2) obj. -81.3269 iterations 2
Cbc0038I Pass  44: suminf.    0.65648 (2) obj. -76.8755 iterations 1
Cbc0038I Pass  45: suminf.    0.92591 (2) obj. -76.8755 iterations 3
Cbc0038I Pass  46: suminf.    2.13567 (10) obj. -76.8755 iterations 16
Cbc0038I Pass  47: suminf.    0.19869 (2) obj. -76.8755 iterations 10
Cbc0038I Pass  48: suminf.    0.23312 (2) obj. -78.8803 iterations 1
Cbc0038I Pass  49: suminf.    0.90048 (4) obj. -76.8755 iterations 11
Cbc0038I Pass  50: suminf.    0.65135 (3) obj. -76.8755 iterations 7
Cbc0038I Pass  51: suminf.    0.76987 (4) obj. -76.8755 iterations 2
Cbc0038I Pass  52: suminf.    0.76644 (4) obj. -76.8755 iterations 1
Cbc0038I Pass  53: suminf.    0.92970 (3) obj. -76.8755 iterations 2
Cbc0038I Pass  54: suminf.    0.79849 (3) obj. -76.8755 iterations 2
Cbc0038I Pass  55: suminf.    0.90897 (3) obj. -76.8755 iterations 1
Cbc0038I Pass  56: suminf.    0.90897 (3) obj. -76.8755 iterations 0
Cbc0038I Pass  57: suminf.    0.79849 (3) obj. -76.8755 iterations 1
Cbc0038I Pass  58: suminf.    1.18151 (5) obj. -76.8755 iterations 7
Cbc0038I Pass  59: suminf.    1.17076 (4) obj. -76.8755 iterations 1
Cbc0038I Pass  60: suminf.    1.08886 (3) obj. -76.8755 iterations 4
Cbc0038I Pass  61: suminf.    0.76234 (3) obj. -76.8755 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 30 columns, reduced to 36 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -72.4678 - took 0.03 seconds
Cbc0012I Integer solution of -72.4678 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 52 rows 30 columns, reduced to 14 rows 10 columns
Cbc0031I 10 added rows had average density of 16.2
Cbc0013I At root node, 10 cuts changed objective from -94.50608 to -80.523509 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 439 row cuts average 3.7 elements, 5 column cuts (5 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 494 row cuts average 24.1 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 24 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 6 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 149 row cuts average 20.2 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 27.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -72.46780000000001, took 1662 iterations and 10 nodes (0.19 seconds)
Cbc0032I Strong branching done 124 times (901 iterations), fathomed 1 nodes and fixed 1 variables
Cbc0035I Maximum depth 4, 19 variables fixed on reduced cost
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.20

