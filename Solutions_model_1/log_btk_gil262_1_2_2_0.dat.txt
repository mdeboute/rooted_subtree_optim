Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 504 (-23) rows, 262 (-2) columns and 1501 (-44) elements
Clp1000I sum of infeasibilities 8.57187e-05 - average 1.70077e-07, 119 fixed columns
Coin0506I Presolve 258 (-246) rows, 138 (-124) columns and 765 (-736) elements
Clp0029I End of values pass after 138 iterations
Clp0014I Perturbing problem by 0.001% of 0.17050795 - largest nonzero change 0 ( 0%) - largest zero change 2.9514682e-05
Clp0000I Optimal - objective value 123.90872
Clp0000I Optimal - objective value 123.90872
Coin0511I After Postsolve, objective 123.90872, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13707262 - largest nonzero change 0 ( 0%) - largest zero change 2.9856677e-05
Clp0000I Optimal - objective value 123.90872
Clp0000I Optimal - objective value 123.90872
Clp0000I Optimal - objective value 123.90872
Coin0511I After Postsolve, objective 123.90872, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 123.9087172 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 504 rows, 262 columns (261 integer (261 of which binary)) and 1501 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.365%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 78 integers unsatisfied sum - 12.8246
Cbc0038I Solution found of 15.4654
Cbc0038I Relaxing continuous gives -0.668949
Cbc0038I Before mini branch and bound, 183 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 143 rows 79 columns
Cbc0038I Mini branch and bound improved solution from -0.668949 to -58.0991 (0.08 seconds)
Cbc0038I Round again with cutoff of -64.6801
Cbc0038I Pass   1: suminf.    4.42602 (59) obj. -64.6801 iterations 199
Cbc0038I Pass   2: suminf.    3.76514 (34) obj. -64.6801 iterations 41
Cbc0038I Pass   3: suminf.    3.99366 (11) obj. -64.6801 iterations 68
Cbc0038I Pass   4: suminf.    3.11048 (11) obj. -64.6801 iterations 26
Cbc0038I Pass   5: suminf.    3.46505 (9) obj. -64.6801 iterations 29
Cbc0038I Pass   6: suminf.    2.37935 (7) obj. -64.6801 iterations 7
Cbc0038I Pass   7: suminf.    2.26872 (7) obj. -64.6801 iterations 9
Cbc0038I Pass   8: suminf.    2.96984 (9) obj. -64.6801 iterations 24
Cbc0038I Pass   9: suminf.    2.62368 (7) obj. -64.6801 iterations 19
Cbc0038I Pass  10: suminf.    2.27406 (6) obj. -64.6801 iterations 1
Cbc0038I Pass  11: suminf.    2.00685 (7) obj. -64.6801 iterations 18
Cbc0038I Pass  12: suminf.    2.00685 (7) obj. -64.6801 iterations 6
Cbc0038I Pass  13: suminf.    2.54692 (7) obj. -64.6801 iterations 13
Cbc0038I Pass  14: suminf.    1.95532 (6) obj. -64.6801 iterations 5
Cbc0038I Pass  15: suminf.    1.79513 (6) obj. -64.6801 iterations 9
Cbc0038I Pass  16: suminf.    2.45636 (6) obj. -64.6801 iterations 13
Cbc0038I Pass  17: suminf.    2.00685 (7) obj. -64.6801 iterations 25
Cbc0038I Pass  18: suminf.    2.00685 (7) obj. -64.6801 iterations 6
Cbc0038I Pass  19: suminf.    2.54692 (7) obj. -64.6801 iterations 13
Cbc0038I Pass  20: suminf.    1.95532 (6) obj. -64.6801 iterations 5
Cbc0038I Pass  21: suminf.    1.79513 (6) obj. -64.6801 iterations 10
Cbc0038I Pass  22: suminf.    2.45636 (6) obj. -64.6801 iterations 14
Cbc0038I Pass  23: suminf.    2.00685 (7) obj. -64.6801 iterations 25
Cbc0038I Pass  24: suminf.    2.00685 (7) obj. -64.6801 iterations 6
Cbc0038I Pass  25: suminf.    2.54692 (7) obj. -64.6801 iterations 13
Cbc0038I Pass  26: suminf.    1.95532 (6) obj. -64.6801 iterations 5
Cbc0038I Pass  27: suminf.    1.79513 (6) obj. -64.6801 iterations 10
Cbc0038I Pass  28: suminf.    2.45636 (6) obj. -64.6801 iterations 14
Cbc0038I Pass  29: suminf.    2.00685 (7) obj. -64.6801 iterations 25
Cbc0038I Pass  30: suminf.    2.00685 (7) obj. -64.6801 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 154 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 200 rows 108 columns
Cbc0038I Mini branch and bound improved solution from -58.0991 to -60.2207 (0.21 seconds)
Cbc0038I Round again with cutoff of -76.5258
Cbc0038I Pass  30: suminf.    5.06003 (59) obj. -76.5258 iterations 0
Cbc0038I Pass  31: suminf.    4.59443 (39) obj. -76.5258 iterations 24
Cbc0038I Pass  32: suminf.    3.02719 (8) obj. -76.5258 iterations 61
Cbc0038I Pass  33: suminf.    2.83200 (9) obj. -76.5258 iterations 16
Cbc0038I Pass  34: suminf.    3.37958 (9) obj. -76.5258 iterations 19
Cbc0038I Pass  35: suminf.    2.87244 (7) obj. -76.5258 iterations 19
Cbc0038I Pass  36: suminf.    2.87244 (7) obj. -76.5258 iterations 0
Cbc0038I Pass  37: suminf.    2.78890 (11) obj. -76.5258 iterations 31
Cbc0038I Pass  38: suminf.    2.66615 (8) obj. -76.5258 iterations 17
Cbc0038I Pass  39: suminf.    2.55456 (8) obj. -76.5258 iterations 9
Cbc0038I Pass  40: suminf.    3.12446 (9) obj. -76.5258 iterations 21
Cbc0038I Pass  41: suminf.    2.75792 (8) obj. -76.5258 iterations 4
Cbc0038I Pass  42: suminf.    2.75792 (8) obj. -76.5258 iterations 2
Cbc0038I Pass  43: suminf.    3.37887 (9) obj. -76.5258 iterations 21
Cbc0038I Pass  44: suminf.    3.17721 (8) obj. -76.5258 iterations 16
Cbc0038I Pass  45: suminf.    2.82543 (7) obj. -76.5258 iterations 6
Cbc0038I Pass  46: suminf.    2.78385 (8) obj. -76.5258 iterations 12
Cbc0038I Pass  47: suminf.    3.45500 (8) obj. -76.5258 iterations 17
Cbc0038I Pass  48: suminf.    2.87244 (7) obj. -76.5258 iterations 12
Cbc0038I Pass  49: suminf.    2.87244 (7) obj. -76.5258 iterations 0
Cbc0038I Pass  50: suminf.    2.78890 (11) obj. -76.5258 iterations 31
Cbc0038I Pass  51: suminf.    2.66615 (8) obj. -76.5258 iterations 17
Cbc0038I Pass  52: suminf.    2.55456 (8) obj. -76.5258 iterations 9
Cbc0038I Pass  53: suminf.    3.12446 (9) obj. -76.5258 iterations 21
Cbc0038I Pass  54: suminf.    2.75792 (8) obj. -76.5258 iterations 4
Cbc0038I Pass  55: suminf.    2.75792 (8) obj. -76.5258 iterations 2
Cbc0038I Pass  56: suminf.    3.37887 (9) obj. -76.5258 iterations 22
Cbc0038I Pass  57: suminf.    3.17721 (8) obj. -76.5258 iterations 16
Cbc0038I Pass  58: suminf.    2.82543 (7) obj. -76.5258 iterations 6
Cbc0038I Pass  59: suminf.    2.78385 (8) obj. -76.5258 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 154 integers at bound fixed and 0 continuous
Cbc0038I Full problem 504 rows 262 columns, reduced to 200 rows 108 columns
Cbc0038I Mini branch and bound did not improve solution (0.30 seconds)
Cbc0038I After 0.30 seconds - Feasibility pump exiting with objective of -60.2207 - took 0.25 seconds
Cbc0012I Integer solution of -60.220669 found by feasibility pump after 0 iterations and 0 nodes (0.30 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 143 rows 79 columns
Cbc0012I Integer solution of -61.881769 found by RINS after 0 iterations and 0 nodes (0.36 seconds)
Cbc0031I 46 added rows had average density of 169.32609
Cbc0013I At root node, 46 cuts changed objective from -123.90872 to -110.48254 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 43043 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.553 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3658 row cuts average 259.0 elements, 0 column cuts (0 active)  in 0.597 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.085 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 22 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.811 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 247 row cuts average 255.4 elements, 0 column cuts (0 active)  in 0.175 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -61.881769 best solution, best possible -110.48254 (6.27 seconds)
Cbc0010I After 7 nodes, 8 on tree, -61.881769 best solution, best possible -110.48254 (6.99 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 167 rows 92 columns
Cbc0010I After 45 nodes, 12 on tree, -61.881769 best solution, best possible -110.48254 (7.70 seconds)
Cbc0012I Integer solution of -62.679889 found by rounding after 22500 iterations and 55 nodes (7.77 seconds)
Cbc0012I Integer solution of -64.216739 found by rounding after 23476 iterations and 88 nodes (7.87 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 6 rows 7 columns
Cbc0012I Integer solution of -65.929179 found by rounding after 23590 iterations and 92 nodes (7.89 seconds)
Cbc0010I After 150 nodes, 19 on tree, -65.929179 best solution, best possible -110.48254 (8.40 seconds)
Cbc0038I Full problem 504 rows 262 columns, reduced to 41 rows 30 columns
Cbc0001I Search completed - best objective -65.92917899999999, took 31298 iterations and 240 nodes (8.75 seconds)
Cbc0032I Strong branching done 2202 times (65362 iterations), fathomed 7 nodes and fixed 87 variables
Cbc0035I Maximum depth 65, 988 variables fixed on reduced cost
Total time (CPU seconds):       8.55   (Wallclock seconds):       8.82

