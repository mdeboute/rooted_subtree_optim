Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 185 (-20) rows, 101 (-2) columns and 564 (-39) elements
Clp1000I sum of infeasibilities 0.000111444 - average 6.024e-07, 20 fixed columns
Coin0506I Presolve 148 (-37) rows, 81 (-20) columns and 450 (-114) elements
Clp0029I End of values pass after 81 iterations
Clp0000I Optimal - objective value 36.809082
Clp0000I Optimal - objective value 36.809082
Coin0511I After Postsolve, objective 36.809082, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 36.809082
Clp0000I Optimal - objective value 36.809082
Clp0000I Optimal - objective value 36.809082
Coin0511I After Postsolve, objective 36.809082, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36.8090818 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 185 rows, 101 columns (100 integer (100 of which binary)) and 564 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.893%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 47 integers unsatisfied sum - 13.2554
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 19.2868 iterations 87
Cbc0038I Solution found of 19.2868
Cbc0038I Relaxing continuous gives 19.2868
Cbc0038I Rounding solution of 10.8161 is better than previous of 19.2868

Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 101 columns, reduced to 86 rows 48 columns
Cbc0038I Mini branch and bound improved solution from 10.8161 to -0.953203 (0.06 seconds)
Cbc0038I Round again with cutoff of -4.53888
Cbc0038I Pass   2: suminf.    0.77048 (39) obj. -4.53888 iterations 44
Cbc0038I Pass   3: suminf.    0.74671 (38) obj. -4.53888 iterations 6
Cbc0038I Pass   4: suminf.    1.11645 (9) obj. -4.53888 iterations 41
Cbc0038I Pass   5: suminf.    1.00764 (7) obj. -4.53888 iterations 5
Cbc0038I Pass   6: suminf.    1.61690 (5) obj. -4.53888 iterations 13
Cbc0038I Pass   7: suminf.    1.61690 (5) obj. -4.53888 iterations 0
Cbc0038I Pass   8: suminf.    2.11780 (5) obj. -4.53888 iterations 6
Cbc0038I Pass   9: suminf.    1.76691 (5) obj. -4.53888 iterations 6
Cbc0038I Pass  10: suminf.    2.07907 (5) obj. -4.53888 iterations 2
Cbc0038I Pass  11: suminf.    1.83569 (7) obj. -4.53888 iterations 4
Cbc0038I Pass  12: suminf.    4.58935 (12) obj. -4.53888 iterations 28
Cbc0038I Pass  13: suminf.    2.33047 (7) obj. -4.53888 iterations 16
Cbc0038I Pass  14: suminf.    1.59738 (5) obj. -4.53888 iterations 9
Cbc0038I Pass  15: suminf.    1.59738 (5) obj. -4.53888 iterations 0
Cbc0038I Pass  16: suminf.    1.80379 (5) obj. -4.53888 iterations 3
Cbc0038I Pass  17: suminf.    1.51131 (5) obj. -4.53888 iterations 3
Cbc0038I Pass  18: suminf.    1.51131 (5) obj. -4.53888 iterations 1
Cbc0038I Pass  19: suminf.    1.74259 (4) obj. -4.53888 iterations 2
Cbc0038I Pass  20: suminf.    1.42284 (4) obj. -4.53888 iterations 3
Cbc0038I Pass  21: suminf.    1.42284 (4) obj. -4.53888 iterations 1
Cbc0038I Pass  22: suminf.    3.45136 (15) obj. -4.53888 iterations 38
Cbc0038I Pass  23: suminf.    1.98833 (11) obj. -4.53888 iterations 13
Cbc0038I Pass  24: suminf.    1.72721 (10) obj. -4.53888 iterations 3
Cbc0038I Pass  25: suminf.    1.73766 (7) obj. -4.53888 iterations 21
Cbc0038I Pass  26: suminf.    1.73766 (7) obj. -4.53888 iterations 1
Cbc0038I Pass  27: suminf.    1.10773 (5) obj. -4.53888 iterations 7
Cbc0038I Pass  28: suminf.    1.05327 (5) obj. -4.53888 iterations 1
Cbc0038I Pass  29: suminf.    1.81479 (6) obj. -4.53888 iterations 5
Cbc0038I Pass  30: suminf.    2.72086 (9) obj. -4.53888 iterations 26
Cbc0038I Pass  31: suminf.    1.30569 (6) obj. -4.53888 iterations 14
Cbc0038I Rounding solution of -1.36052 is better than previous of -0.953203

Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 101 columns, reduced to 120 rows 67 columns - 3 fixed gives 57, 64 - ok now
Cbc0038I Full problem 185 rows 101 columns, reduced to 57 rows 64 columns
Cbc0038I Mini branch and bound improved solution from -1.36052 to -3.36749 (0.09 seconds)
Cbc0038I Round again with cutoff of -10.9929
Cbc0038I Pass  31: suminf.    2.93164 (39) obj. -10.9929 iterations 0
Cbc0038I Pass  32: suminf.    2.84119 (38) obj. -10.9929 iterations 6
Cbc0038I Pass  33: suminf.    3.26840 (10) obj. -10.9929 iterations 38
Cbc0038I Pass  34: suminf.    1.99507 (9) obj. -10.9929 iterations 2
Cbc0038I Pass  35: suminf.    2.99360 (7) obj. -10.9929 iterations 19
Cbc0038I Pass  36: suminf.    2.99360 (7) obj. -10.9929 iterations 0
Cbc0038I Pass  37: suminf.    2.03543 (7) obj. -10.9929 iterations 5
Cbc0038I Pass  38: suminf.    2.00012 (7) obj. -10.9929 iterations 1
Cbc0038I Pass  39: suminf.    2.77490 (9) obj. -10.9929 iterations 17
Cbc0038I Pass  40: suminf.    1.73298 (7) obj. -10.9929 iterations 12
Cbc0038I Pass  41: suminf.    2.12140 (8) obj. -10.9929 iterations 21
Cbc0038I Pass  42: suminf.    2.12140 (8) obj. -10.9929 iterations 1
Cbc0038I Pass  43: suminf.    2.35129 (7) obj. -10.9929 iterations 6
Cbc0038I Pass  44: suminf.    2.35129 (7) obj. -10.9929 iterations 0
Cbc0038I Pass  45: suminf.    2.19853 (7) obj. -10.9929 iterations 8
Cbc0038I Pass  46: suminf.    2.19853 (7) obj. -10.9929 iterations 0
Cbc0038I Pass  47: suminf.    3.33292 (16) obj. -10.9929 iterations 19
Cbc0038I Pass  48: suminf.    1.98248 (11) obj. -10.9929 iterations 7
Cbc0038I Pass  49: suminf.    3.37751 (11) obj. -10.9929 iterations 22
Cbc0038I Pass  50: suminf.    2.77222 (9) obj. -10.9929 iterations 3
Cbc0038I Pass  51: suminf.    2.09441 (7) obj. -10.9929 iterations 2
Cbc0038I Pass  52: suminf.    2.09441 (7) obj. -10.9929 iterations 0
Cbc0038I Pass  53: suminf.    1.49112 (6) obj. -10.9929 iterations 8
Cbc0038I Pass  54: suminf.    1.14928 (5) obj. -10.9929 iterations 2
Cbc0038I Pass  55: suminf.    1.64986 (6) obj. -10.9929 iterations 6
Cbc0038I Pass  56: suminf.    1.30125 (5) obj. -10.9929 iterations 2
Cbc0038I Pass  57: suminf.    1.19075 (6) obj. -10.9929 iterations 2
Cbc0038I Pass  58: suminf.    2.72764 (8) obj. -10.9929 iterations 6
Cbc0038I Pass  59: suminf.    1.51113 (8) obj. -10.9929 iterations 5
Cbc0038I Pass  60: suminf.    1.24180 (8) obj. -10.9929 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 185 rows 101 columns, reduced to 108 rows 61 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -3.36749 - took 0.14 seconds
Cbc0012I Integer solution of -3.367487 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 185 rows 101 columns, reduced to 87 rows 49 columns
Cbc0031I 29 added rows had average density of 80.862069
Cbc0013I At root node, 29 cuts changed objective from -36.809082 to -28.451999 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13382 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.111 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1909 row cuts average 101.0 elements, 0 column cuts (0 active)  in 0.124 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.119 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -3.367487 best solution, best possible -28.451999 (1.17 seconds)
Cbc0038I Full problem 185 rows 101 columns, reduced to 102 rows 57 columns
Cbc0038I Full problem 185 rows 101 columns, reduced to 90 rows 50 columns
Cbc0001I Search completed - best objective -3.367487000000004, took 12411 iterations and 126 nodes (1.84 seconds)
Cbc0032I Strong branching done 1556 times (25042 iterations), fathomed 4 nodes and fixed 48 variables
Cbc0035I Maximum depth 37, 497 variables fixed on reduced cost
Total time (CPU seconds):       1.79   (Wallclock seconds):       1.86

