Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 46 (-19) rows, 25 (-8) columns and 135 (-48) elements
Clp1000I sum of infeasibilities 9.76586e-06 - average 2.12301e-07, 4 fixed columns
Coin0506I Presolve 36 (-10) rows, 20 (-5) columns and 105 (-30) elements
Clp0029I End of values pass after 20 iterations
Clp0000I Optimal - objective value 103.47156
Clp0000I Optimal - objective value 103.47156
Coin0511I After Postsolve, objective 103.47156, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 103.47156
Clp0000I Optimal - objective value 103.47156
Clp0000I Optimal - objective value 103.47156
Coin0511I After Postsolve, objective 103.47156, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 103.4715561 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 25 columns (24 integer (24 of which binary)) and 141 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.118%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 4.63376
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -44.9616 iterations 15
Cbc0038I Solution found of -44.9616
Cbc0038I Relaxing continuous gives -44.9616
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 30 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -44.9616 to -68.0723 (0.02 seconds)
Cbc0038I Round again with cutoff of -71.0618
Cbc0038I Pass   2: suminf.    1.00350 (5) obj. -71.0618 iterations 3
Cbc0038I Pass   3: suminf.    1.63640 (4) obj. -71.0618 iterations 8
Cbc0038I Pass   4: suminf.    0.97308 (3) obj. -71.0618 iterations 1
Cbc0038I Pass   5: suminf.    0.71044 (4) obj. -71.0618 iterations 2
Cbc0038I Pass   6: suminf.    0.27153 (3) obj. -73.3896 iterations 2
Cbc0038I Pass   7: suminf.    1.37262 (4) obj. -71.0618 iterations 8
Cbc0038I Pass   8: suminf.    1.36538 (4) obj. -71.0618 iterations 2
Cbc0038I Pass   9: suminf.    1.38465 (4) obj. -71.0618 iterations 5
Cbc0038I Pass  10: suminf.    1.10239 (3) obj. -71.0618 iterations 3
Cbc0038I Pass  11: suminf.    0.50327 (2) obj. -71.0618 iterations 3
Cbc0038I Pass  12: suminf.    0.86974 (5) obj. -71.0618 iterations 7
Cbc0038I Pass  13: suminf.    0.77909 (3) obj. -71.0618 iterations 8
Cbc0038I Pass  14: suminf.    2.65036 (7) obj. -71.0618 iterations 6
Cbc0038I Pass  15: suminf.    2.40492 (8) obj. -71.0618 iterations 3
Cbc0038I Pass  16: suminf.    1.73943 (6) obj. -71.0618 iterations 14
Cbc0038I Pass  17: suminf.    0.95129 (4) obj. -71.0618 iterations 2
Cbc0038I Pass  18: suminf.    0.85363 (4) obj. -71.0618 iterations 3
Cbc0038I Pass  19: suminf.    0.68674 (4) obj. -71.0618 iterations 1
Cbc0038I Pass  20: suminf.    1.22688 (6) obj. -71.0618 iterations 10
Cbc0038I Pass  21: suminf.    0.86974 (5) obj. -71.0618 iterations 4
Cbc0038I Pass  22: suminf.    0.77909 (3) obj. -71.0618 iterations 8
Cbc0038I Pass  23: suminf.    0.50327 (2) obj. -71.0618 iterations 2
Cbc0038I Pass  24: suminf.    1.21685 (4) obj. -71.0618 iterations 4
Cbc0038I Pass  25: suminf.    0.50327 (2) obj. -71.0618 iterations 4
Cbc0038I Pass  26: suminf.    1.59897 (6) obj. -71.0618 iterations 11
Cbc0038I Pass  27: suminf.    0.30538 (3) obj. -71.0618 iterations 4
Cbc0038I Pass  28: suminf.    0.30538 (3) obj. -71.0618 iterations 0
Cbc0038I Pass  29: suminf.    0.85363 (4) obj. -71.0618 iterations 4
Cbc0038I Pass  30: suminf.    0.68674 (4) obj. -71.0618 iterations 1
Cbc0038I Pass  31: suminf.    1.22688 (6) obj. -71.0618 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 39 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -68.0723 - took 0.04 seconds
Cbc0012I Integer solution of -68.07234 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 43 rows 25 columns, reduced to 30 rows 17 columns
Cbc0031I 9 added rows had average density of 17
Cbc0013I At root node, 9 cuts changed objective from -97.965728 to -86.228012 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1061 row cuts average 4.4 elements, 3 column cuts (3 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 416 row cuts average 23.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 4.5 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -68.07234, took 2730 iterations and 30 nodes (0.24 seconds)
Cbc0032I Strong branching done 242 times (1454 iterations), fathomed 3 nodes and fixed 2 variables
Cbc0035I Maximum depth 6, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.23   (Wallclock seconds):       0.25

