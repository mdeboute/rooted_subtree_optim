Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 510 (-17) rows, 261 (-3) columns and 1511 (-34) elements
Clp1000I sum of infeasibilities 4.42481e-05 - average 8.67609e-08, 114 fixed columns
Coin0506I Presolve 280 (-230) rows, 145 (-116) columns and 824 (-687) elements
Clp0029I End of values pass after 145 iterations
Clp0014I Perturbing problem by 0.001% of 0.1648637 - largest nonzero change 0 ( 0%) - largest zero change 2.9941894e-05
Clp0000I Optimal - objective value 167.90588
Clp0000I Optimal - objective value 167.90588
Coin0511I After Postsolve, objective 167.90588, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13614542 - largest nonzero change 0 ( 0%) - largest zero change 2.98842e-05
Clp0000I Optimal - objective value 167.90588
Clp0000I Optimal - objective value 167.90588
Clp0000I Optimal - objective value 167.90588
Coin0511I After Postsolve, objective 167.90588, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 167.9058835 - 0 iterations time 0.112, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 510 rows, 261 columns (260 integer (260 of which binary)) and 1511 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.372%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 69 integers unsatisfied sum - 12.9298
Cbc0038I Solution found of 21.6306
Cbc0038I Relaxing continuous gives -2.94384
Cbc0038I Before mini branch and bound, 191 integers at bound fixed and 0 continuous
Cbc0038I Full problem 510 rows 261 columns, reduced to 131 rows 70 columns
Cbc0038I Mini branch and bound improved solution from -2.94384 to -86.7942 (0.12 seconds)
Cbc0038I Round again with cutoff of -94.9054
Cbc0038I Pass   1: suminf.    3.79560 (45) obj. -94.9054 iterations 196
Cbc0038I Pass   2: suminf.    3.79560 (45) obj. -94.9054 iterations 0
Cbc0038I Pass   3: suminf.    2.47905 (9) obj. -94.9054 iterations 67
Cbc0038I Pass   4: suminf.    1.93044 (13) obj. -94.9054 iterations 27
Cbc0038I Pass   5: suminf.    2.31308 (8) obj. -94.9054 iterations 57
Cbc0038I Pass   6: suminf.    2.21013 (8) obj. -94.9054 iterations 24
Cbc0038I Pass   7: suminf.    3.87186 (13) obj. -94.9054 iterations 43
Cbc0038I Pass   8: suminf.    3.55337 (10) obj. -94.9054 iterations 9
Cbc0038I Pass   9: suminf.    2.61873 (8) obj. -94.9054 iterations 11
Cbc0038I Pass  10: suminf.    2.87646 (10) obj. -94.9054 iterations 30
Cbc0038I Pass  11: suminf.    2.00023 (13) obj. -94.9054 iterations 13
Cbc0038I Pass  12: suminf.    2.00254 (12) obj. -94.9054 iterations 3
Cbc0038I Pass  13: suminf.    2.35354 (7) obj. -94.9054 iterations 53
Cbc0038I Pass  14: suminf.    2.35354 (7) obj. -94.9054 iterations 0
Cbc0038I Pass  15: suminf.    2.12650 (7) obj. -94.9054 iterations 28
Cbc0038I Pass  16: suminf.    1.74690 (6) obj. -94.9054 iterations 14
Cbc0038I Pass  17: suminf.    1.71618 (6) obj. -94.9054 iterations 14
Cbc0038I Pass  18: suminf.    2.93167 (8) obj. -94.9054 iterations 7
Cbc0038I Pass  19: suminf.    2.51023 (8) obj. -94.9054 iterations 12
Cbc0038I Pass  20: suminf.    2.45598 (8) obj. -94.9054 iterations 9
Cbc0038I Pass  21: suminf.    2.37188 (8) obj. -94.9054 iterations 6
Cbc0038I Pass  22: suminf.    2.85243 (8) obj. -94.9054 iterations 47
Cbc0038I Pass  23: suminf.    2.58795 (8) obj. -94.9054 iterations 19
Cbc0038I Pass  24: suminf.    2.44568 (8) obj. -94.9054 iterations 19
Cbc0038I Pass  25: suminf.    2.33724 (7) obj. -94.9054 iterations 19
Cbc0038I Pass  26: suminf.    2.79469 (8) obj. -94.9054 iterations 27
Cbc0038I Pass  27: suminf.    2.45598 (8) obj. -94.9054 iterations 13
Cbc0038I Pass  28: suminf.    2.37188 (8) obj. -94.9054 iterations 6
Cbc0038I Pass  29: suminf.    2.85243 (8) obj. -94.9054 iterations 48
Cbc0038I Pass  30: suminf.    2.58795 (8) obj. -94.9054 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 156 integers at bound fixed and 0 continuous
Cbc0038I Full problem 510 rows 261 columns, reduced to 200 rows 105 columns
Cbc0038I Mini branch and bound improved solution from -86.7942 to -88.1551 (0.34 seconds)
Cbc0038I Round again with cutoff of -109.506
Cbc0038I Pass  30: suminf.    4.58502 (60) obj. -109.506 iterations 8
Cbc0038I Pass  31: suminf.    4.58502 (60) obj. -109.506 iterations 0
Cbc0038I Pass  32: suminf.    4.73464 (15) obj. -109.506 iterations 68
Cbc0038I Pass  33: suminf.    3.07052 (13) obj. -109.506 iterations 50
Cbc0038I Pass  34: suminf.    5.35867 (14) obj. -109.506 iterations 48
Cbc0038I Pass  35: suminf.    4.57791 (16) obj. -109.506 iterations 16
Cbc0038I Pass  36: suminf.    4.52996 (16) obj. -109.506 iterations 3
Cbc0038I Pass  37: suminf.    3.19120 (13) obj. -109.506 iterations 32
Cbc0038I Pass  38: suminf.    2.91450 (13) obj. -109.506 iterations 28
Cbc0038I Pass  39: suminf.    2.91450 (13) obj. -109.506 iterations 0
Cbc0038I Pass  40: suminf.    4.14539 (13) obj. -109.506 iterations 25
Cbc0038I Pass  41: suminf.    4.09797 (13) obj. -109.506 iterations 17
Cbc0038I Pass  42: suminf.    3.35326 (11) obj. -109.506 iterations 10
Cbc0038I Pass  43: suminf.    3.30294 (16) obj. -109.506 iterations 10
Cbc0038I Pass  44: suminf.    3.75432 (12) obj. -109.506 iterations 36
Cbc0038I Pass  45: suminf.    3.31208 (16) obj. -109.506 iterations 16
Cbc0038I Pass  46: suminf.    3.28066 (13) obj. -109.506 iterations 9
Cbc0038I Pass  47: suminf.    3.17544 (11) obj. -109.506 iterations 22
Cbc0038I Pass  48: suminf.    1.95631 (10) obj. -109.506 iterations 12
Cbc0038I Pass  49: suminf.    1.91101 (10) obj. -109.506 iterations 2
Cbc0038I Pass  50: suminf.    2.41041 (8) obj. -109.506 iterations 17
Cbc0038I Pass  51: suminf.    2.14164 (8) obj. -109.506 iterations 9
Cbc0038I Pass  52: suminf.    1.86998 (8) obj. -109.506 iterations 16
Cbc0038I Pass  53: suminf.    1.86085 (9) obj. -109.506 iterations 8
Cbc0038I Pass  54: suminf.    3.24824 (9) obj. -109.506 iterations 9
Cbc0038I Pass  55: suminf.    2.15605 (8) obj. -109.506 iterations 17
Cbc0038I Pass  56: suminf.    2.14164 (8) obj. -109.506 iterations 4
Cbc0038I Pass  57: suminf.    1.86998 (8) obj. -109.506 iterations 18
Cbc0038I Pass  58: suminf.    1.86085 (9) obj. -109.506 iterations 9
Cbc0038I Pass  59: suminf.    3.24824 (9) obj. -109.506 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 150 integers at bound fixed and 0 continuous
Cbc0038I Full problem 510 rows 261 columns, reduced to 212 rows 111 columns
Cbc0038I Mini branch and bound did not improve solution (0.60 seconds)
Cbc0038I After 0.60 seconds - Feasibility pump exiting with objective of -88.1551 - took 0.54 seconds
Cbc0012I Integer solution of -88.15508 found by feasibility pump after 0 iterations and 0 nodes (0.60 seconds)
Cbc0038I Full problem 510 rows 261 columns, reduced to 133 rows 71 columns
Cbc0031I 40 added rows had average density of 170
Cbc0013I At root node, 40 cuts changed objective from -167.90588 to -151.21239 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 41933 row cuts average 3.3 elements, 1 column cuts (1 active)  in 1.108 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2917 row cuts average 259.4 elements, 0 column cuts (0 active)  in 1.109 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.063 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.247 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 10 row cuts average 4.8 elements, 0 column cuts (0 active)  in 1.238 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.081 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 196 row cuts average 254.8 elements, 0 column cuts (0 active)  in 0.470 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -88.15508 best solution, best possible -151.21239 (12.24 seconds)
Cbc0010I After 3 nodes, 4 on tree, -88.15508 best solution, best possible -151.21239 (12.98 seconds)
Cbc0010I After 7 nodes, 8 on tree, -88.15508 best solution, best possible -151.21239 (13.71 seconds)
Cbc0010I After 24 nodes, 11 on tree, -88.15508 best solution, best possible -151.21239 (14.42 seconds)
Cbc0012I Integer solution of -88.48428 found by rounding after 21622 iterations and 42 nodes (15.04 seconds)
Cbc0038I Full problem 510 rows 261 columns, reduced to 5 rows 6 columns
Cbc0012I Integer solution of -94.10714 found by RINS after 21622 iterations and 42 nodes (15.06 seconds)
Cbc0010I After 45 nodes, 11 on tree, -94.10714 best solution, best possible -151.21239 (15.18 seconds)
Cbc0016I Integer solution of -95.75008 found by strong branching after 22502 iterations and 58 nodes (15.34 seconds)
Cbc0010I After 86 nodes, 15 on tree, -95.75008 best solution, best possible -151.21239 (15.88 seconds)
Cbc0038I Full problem 510 rows 261 columns, reduced to 138 rows 73 columns
Cbc0010I After 136 nodes, 19 on tree, -95.75008 best solution, best possible -151.21239 (16.59 seconds)
Cbc0001I Search completed - best objective -95.75008, took 28932 iterations and 202 nodes (17.01 seconds)
Cbc0032I Strong branching done 2098 times (65052 iterations), fathomed 13 nodes and fixed 72 variables
Cbc0035I Maximum depth 84, 919 variables fixed on reduced cost
Total time (CPU seconds):       16.32   (Wallclock seconds):       17.11

