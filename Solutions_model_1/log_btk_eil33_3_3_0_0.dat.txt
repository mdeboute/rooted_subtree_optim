Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 63 (-6) rows, 33 (-2) columns and 184 (-11) elements
Clp1000I sum of infeasibilities 0.000277057 - average 4.39773e-06, 1 fixed columns
Coin0506I Presolve 61 (-2) rows, 32 (-1) columns and 178 (-6) elements
Clp0029I End of values pass after 32 iterations
Clp0000I Optimal - objective value 95.150377
Clp0000I Optimal - objective value 95.150377
Coin0511I After Postsolve, objective 95.150377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 95.150377
Clp0000I Optimal - objective value 95.150377
Clp0000I Optimal - objective value 95.150377
Coin0511I After Postsolve, objective 95.150377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 95.15037664 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 63 rows, 33 columns (32 integer (32 of which binary)) and 184 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.759%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 20 integers unsatisfied sum - 5.74347
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -10.2693 iterations 27
Cbc0038I Solution found of -10.2693
Cbc0038I Relaxing continuous gives -10.2693
Cbc0038I Rounding solution of -36.9392 is better than previous of -10.2693

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 63 rows 33 columns, reduced to 36 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -36.9392 to -40.7376 (0.02 seconds)
Cbc0038I Round again with cutoff of -46.1789
Cbc0038I Pass   2: suminf.    1.63914 (5) obj. -46.1789 iterations 9
Cbc0038I Pass   3: suminf.    1.25913 (4) obj. -46.1789 iterations 8
Cbc0038I Pass   4: suminf.    1.40798 (4) obj. -46.1789 iterations 6
Cbc0038I Pass   5: suminf.    0.50961 (2) obj. -46.1789 iterations 9
Cbc0038I Pass   6: suminf.    0.96336 (2) obj. -46.1789 iterations 6
Cbc0038I Pass   7: suminf.    0.51557 (2) obj. -46.1789 iterations 3
Cbc0038I Pass   8: suminf.    0.92036 (3) obj. -46.1789 iterations 10
Cbc0038I Pass   9: suminf.    0.92036 (3) obj. -46.1789 iterations 1
Cbc0038I Pass  10: suminf.    1.61564 (5) obj. -46.1789 iterations 7
Cbc0038I Pass  11: suminf.    0.89399 (4) obj. -46.1789 iterations 5
Cbc0038I Pass  12: suminf.    1.66678 (8) obj. -46.1789 iterations 10
Cbc0038I Pass  13: suminf.    0.49354 (3) obj. -46.1789 iterations 4
Cbc0038I Pass  14: suminf.    0.49354 (3) obj. -46.1789 iterations 1
Cbc0038I Pass  15: suminf.    0.91295 (3) obj. -46.1789 iterations 6
Cbc0038I Pass  16: suminf.    1.13914 (4) obj. -46.1789 iterations 7
Cbc0038I Pass  17: suminf.    0.71186 (3) obj. -46.1789 iterations 1
Cbc0038I Pass  18: suminf.    1.36269 (4) obj. -46.1789 iterations 5
Cbc0038I Pass  19: suminf.    0.78246 (3) obj. -46.1789 iterations 6
Cbc0038I Pass  20: suminf.    1.36269 (4) obj. -46.1789 iterations 7
Cbc0038I Pass  21: suminf.    1.25913 (4) obj. -46.1789 iterations 11
Cbc0038I Pass  22: suminf.    1.25913 (4) obj. -46.1789 iterations 3
Cbc0038I Pass  23: suminf.    1.40798 (4) obj. -46.1789 iterations 6
Cbc0038I Pass  24: suminf.    0.50961 (2) obj. -46.1789 iterations 9
Cbc0038I Pass  25: suminf.    0.96336 (2) obj. -46.1789 iterations 4
Cbc0038I Pass  26: suminf.    0.51557 (2) obj. -46.1789 iterations 3
Cbc0038I Pass  27: suminf.    1.30107 (5) obj. -46.1789 iterations 9
Cbc0038I Pass  28: suminf.    1.15818 (5) obj. -46.1789 iterations 2
Cbc0038I Pass  29: suminf.    0.89759 (4) obj. -46.1789 iterations 2
Cbc0038I Pass  30: suminf.    0.89408 (4) obj. -46.1789 iterations 1
Cbc0038I Pass  31: suminf.    1.53314 (5) obj. -46.1789 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 63 rows 33 columns, reduced to 38 rows 23 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -40.7376 - took 0.04 seconds
Cbc0012I Integer solution of -40.73757 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 63 rows 33 columns, reduced to 36 rows 21 columns
Cbc0031I 11 added rows had average density of 25
Cbc0013I At root node, 11 cuts changed objective from -95.150377 to -69.415745 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1811 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 751 row cuts average 32.9 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 43 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 107 row cuts average 32.5 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0012I Integer solution of -42.77283 found by DiveCoefficient after 2924 iterations and 6 nodes (0.39 seconds)
Cbc0001I Search completed - best objective -42.77283, took 3020 iterations and 10 nodes (0.39 seconds)
Cbc0032I Strong branching done 158 times (1918 iterations), fathomed 2 nodes and fixed 11 variables
Cbc0035I Maximum depth 3, 8 variables fixed on reduced cost
Total time (CPU seconds):       0.37   (Wallclock seconds):       0.39

