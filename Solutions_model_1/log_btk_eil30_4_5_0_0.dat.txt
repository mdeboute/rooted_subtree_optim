Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 43 (-20) rows, 24 (-8) columns and 127 (-50) elements
Clp1000I sum of infeasibilities 4.14114e-05 - average 9.63056e-07, 1 fixed columns
Coin0506I Presolve 35 (-8) rows, 22 (-2) columns and 107 (-20) elements
Clp0029I End of values pass after 22 iterations
Clp0000I Optimal - objective value 81.157134
Clp0000I Optimal - objective value 81.157134
Coin0511I After Postsolve, objective 81.157134, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 81.157134
Clp0000I Optimal - objective value 81.157134
Clp0000I Optimal - objective value 81.157134
Coin0511I After Postsolve, objective 81.157134, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 81.15713385 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 24 columns (23 integer (23 of which binary)) and 128 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.827%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 18 integers unsatisfied sum - 7.38687
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -23.34 iterations 21
Cbc0038I Solution found of -23.34
Cbc0038I Relaxing continuous gives -23.34
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 24 columns, reduced to 29 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -23.34 to -35.4025 (0.02 seconds)
Cbc0038I Round again with cutoff of -39.9802
Cbc0038I Pass   2: suminf.    0.74809 (4) obj. -39.9802 iterations 8
Cbc0038I Pass   3: suminf.    0.60968 (3) obj. -39.9802 iterations 7
Cbc0038I Pass   4: suminf.    0.52272 (3) obj. -39.9802 iterations 4
Cbc0038I Pass   5: suminf.    1.53594 (5) obj. -39.9802 iterations 4
Cbc0038I Pass   6: suminf.    0.63737 (3) obj. -39.9802 iterations 1
Cbc0038I Pass   7: suminf.    2.59720 (8) obj. -39.9802 iterations 14
Cbc0038I Pass   8: suminf.    1.60243 (6) obj. -39.9802 iterations 3
Cbc0038I Pass   9: suminf.    1.21244 (5) obj. -39.9802 iterations 9
Cbc0038I Pass  10: suminf.    0.93316 (5) obj. -39.9802 iterations 2
Cbc0038I Pass  11: suminf.    1.32143 (5) obj. -39.9802 iterations 9
Cbc0038I Pass  12: suminf.    0.63051 (3) obj. -39.9802 iterations 1
Cbc0038I Pass  13: suminf.    0.52272 (3) obj. -39.9802 iterations 8
Cbc0038I Pass  14: suminf.    1.53594 (5) obj. -39.9802 iterations 4
Cbc0038I Pass  15: suminf.    0.63737 (3) obj. -39.9802 iterations 1
Cbc0038I Pass  16: suminf.    1.05833 (7) obj. -39.9802 iterations 9
Cbc0038I Pass  17: suminf.    0.81325 (7) obj. -39.9802 iterations 3
Cbc0038I Pass  18: suminf.    1.89720 (6) obj. -39.9802 iterations 14
Cbc0038I Pass  19: suminf.    1.47054 (9) obj. -39.9802 iterations 3
Cbc0038I Pass  20: suminf.    0.49355 (5) obj. -39.9802 iterations 10
Cbc0038I Pass  21: suminf.    0.49355 (5) obj. -39.9802 iterations 0
Cbc0038I Pass  22: suminf.    1.84845 (8) obj. -39.9802 iterations 10
Cbc0038I Pass  23: suminf.    1.75199 (8) obj. -39.9802 iterations 1
Cbc0038I Pass  24: suminf.    2.36060 (5) obj. -39.9802 iterations 9
Cbc0038I Pass  25: suminf.    1.47054 (9) obj. -39.9802 iterations 6
Cbc0038I Pass  26: suminf.    1.47054 (9) obj. -39.9802 iterations 0
Cbc0038I Pass  27: suminf.    0.49355 (5) obj. -39.9802 iterations 10
Cbc0038I Pass  28: suminf.    0.49355 (5) obj. -39.9802 iterations 0
Cbc0038I Pass  29: suminf.    1.84845 (8) obj. -39.9802 iterations 10
Cbc0038I Pass  30: suminf.    1.75199 (8) obj. -39.9802 iterations 1
Cbc0038I Pass  31: suminf.    2.36060 (5) obj. -39.9802 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 24 columns, reduced to 31 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -35.4025 - took 0.03 seconds
Cbc0012I Integer solution of -35.4025 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 43 rows 24 columns, reduced to 29 rows 19 columns
Cbc0031I 10 added rows had average density of 14.7
Cbc0013I At root node, 10 cuts changed objective from -81.157134 to -47.493553 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1570 row cuts average 3.0 elements, 2 column cuts (2 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 733 row cuts average 21.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 92 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 22.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -35.40249999999999, took 1846 iterations and 6 nodes (0.17 seconds)
Cbc0032I Strong branching done 72 times (710 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 2, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.17   (Wallclock seconds):       0.18

