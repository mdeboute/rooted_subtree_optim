Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 52 (-11) rows, 28 (-4) columns and 152 (-25) elements
Clp1000I sum of infeasibilities 0.000137676 - average 2.64761e-06, 3 fixed columns
Coin0506I Presolve 40 (-12) rows, 24 (-4) columns and 120 (-32) elements
Clp0029I End of values pass after 24 iterations
Clp0000I Optimal - objective value 94.393456
Clp0000I Optimal - objective value 94.393456
Coin0511I After Postsolve, objective 94.393456, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 94.393456
Clp0000I Optimal - objective value 94.393456
Clp0000I Optimal - objective value 94.393456
Coin0511I After Postsolve, objective 94.393456, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 94.39345597 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 52 rows, 28 columns (27 integer (27 of which binary)) and 153 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.383%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 5.8576
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -13.0775 iterations 19
Cbc0038I Solution found of -13.0775
Cbc0038I Relaxing continuous gives -13.0775
Cbc0038I Rounding solution of -28.6075 is better than previous of -13.0775

Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 28 columns, reduced to 28 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -28.6075 to -48.5075 (0.02 seconds)
Cbc0038I Round again with cutoff of -53.0872
Cbc0038I Pass   2: suminf.    1.48392 (6) obj. -53.0872 iterations 6
Cbc0038I Pass   3: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass   4: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass   5: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass   6: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I Pass   7: suminf.    1.47116 (6) obj. -53.0872 iterations 8
Cbc0038I Pass   8: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass   9: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass  10: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass  11: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I Pass  12: suminf.    1.47116 (6) obj. -53.0872 iterations 8
Cbc0038I Pass  13: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass  14: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass  15: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass  16: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I Pass  17: suminf.    1.47116 (6) obj. -53.0872 iterations 8
Cbc0038I Pass  18: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass  19: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass  20: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass  21: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I Pass  22: suminf.    1.47116 (6) obj. -53.0872 iterations 8
Cbc0038I Pass  23: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass  24: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass  25: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass  26: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I Pass  27: suminf.    1.47116 (6) obj. -53.0872 iterations 8
Cbc0038I Pass  28: suminf.    1.10749 (5) obj. -53.0872 iterations 3
Cbc0038I Pass  29: suminf.    1.36528 (4) obj. -53.0872 iterations 5
Cbc0038I Pass  30: suminf.    0.89601 (4) obj. -53.0872 iterations 3
Cbc0038I Pass  31: suminf.    0.89601 (4) obj. -53.0872 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 52 rows 28 columns, reduced to 28 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -48.5075 - took 0.03 seconds
Cbc0012I Integer solution of -48.5075 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 52 rows 28 columns, reduced to 28 rows 18 columns
Cbc0031I 7 added rows had average density of 20.714286
Cbc0013I At root node, 7 cuts changed objective from -94.282259 to -65.586662 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1309 row cuts average 3.3 elements, 2 column cuts (2 active)  in 0.017 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 674 row cuts average 27.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 18 row cuts average 5.9 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 96 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 26.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -48.50749999999999, took 2312 iterations and 8 nodes (0.22 seconds)
Cbc0032I Strong branching done 70 times (510 iterations), fathomed 0 nodes and fixed 7 variables
Cbc0035I Maximum depth 2, 11 variables fixed on reduced cost
Total time (CPU seconds):       0.20   (Wallclock seconds):       0.22

