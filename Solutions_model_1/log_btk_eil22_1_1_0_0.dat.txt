Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 38 (-9) rows, 22 (-2) columns and 113 (-16) elements
Clp1000I sum of infeasibilities 3.11254e-06 - average 8.19089e-08, 2 fixed columns
Coin0506I Presolve 34 (-4) rows, 20 (-2) columns and 101 (-12) elements
Clp0029I End of values pass after 20 iterations
Clp0000I Optimal - objective value 65.832065
Clp0000I Optimal - objective value 65.832065
Coin0511I After Postsolve, objective 65.832065, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 65.832065
Clp0000I Optimal - objective value 65.832065
Clp0000I Optimal - objective value 65.832065
Coin0511I After Postsolve, objective 65.832065, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 65.83206537 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 38 rows, 22 columns (21 integer (21 of which binary)) and 115 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.040%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 19 integers unsatisfied sum - 4.29321
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -9.59278 iterations 21
Cbc0038I Solution found of -9.59278
Cbc0038I Relaxing continuous gives -9.59278
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 0 continuous
Cbc0038I Full problem 38 rows 22 columns, reduced to 34 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -9.59278 to -21.8008 (0.02 seconds)
Cbc0038I Round again with cutoff of -26.204
Cbc0038I Pass   2: suminf.    0.72450 (3) obj. -26.204 iterations 3
Cbc0038I Pass   3: suminf.    0.10788 (3) obj. -26.204 iterations 3
Cbc0038I Pass   4: suminf.    1.14901 (5) obj. -26.204 iterations 8
Cbc0038I Pass   5: suminf.    0.53329 (3) obj. -26.204 iterations 4
Cbc0038I Pass   6: suminf.    0.47325 (2) obj. -26.204 iterations 6
Cbc0038I Pass   7: suminf.    0.56161 (2) obj. -26.204 iterations 1
Cbc0038I Pass   8: suminf.    0.65249 (3) obj. -26.204 iterations 5
Cbc0038I Pass   9: suminf.    0.59630 (2) obj. -26.204 iterations 3
Cbc0038I Pass  10: suminf.    0.10788 (3) obj. -26.204 iterations 2
Cbc0038I Pass  11: suminf.    0.72450 (3) obj. -26.204 iterations 2
Cbc0038I Pass  12: suminf.    1.29392 (5) obj. -26.204 iterations 5
Cbc0038I Pass  13: suminf.    0.72450 (3) obj. -26.204 iterations 6
Cbc0038I Pass  14: suminf.    1.36907 (6) obj. -26.204 iterations 4
Cbc0038I Pass  15: suminf.    1.19788 (4) obj. -26.204 iterations 9
Cbc0038I Pass  16: suminf.    0.65942 (3) obj. -26.204 iterations 5
Cbc0038I Pass  17: suminf.    0.77348 (4) obj. -26.204 iterations 2
Cbc0038I Pass  18: suminf.    0.69276 (3) obj. -26.204 iterations 5
Cbc0038I Pass  19: suminf.    0.42873 (2) obj. -26.204 iterations 1
Cbc0038I Pass  20: suminf.    0.56830 (3) obj. -26.204 iterations 2
Cbc0038I Pass  21: suminf.    0.69276 (3) obj. -26.204 iterations 3
Cbc0038I Pass  22: suminf.    0.10788 (3) obj. -26.204 iterations 4
Cbc0038I Pass  23: suminf.    0.10788 (3) obj. -26.204 iterations 0
Cbc0038I Pass  24: suminf.    0.72450 (3) obj. -26.204 iterations 2
Cbc0038I Pass  25: suminf.    0.80149 (2) obj. -26.204 iterations 8
Cbc0038I Pass  26: suminf.    0.42284 (2) obj. -26.204 iterations 3
Cbc0038I Pass  27: suminf.    0.46319 (1) obj. -26.204 iterations 2
Cbc0038I Pass  28: suminf.    0.33712 (1) obj. -26.204 iterations 1
Cbc0038I Pass  29: suminf.    0.78377 (4) obj. -26.204 iterations 6
Cbc0038I Pass  30: suminf.    0.61272 (3) obj. -26.204 iterations 3
Cbc0038I Pass  31: suminf.    0.79821 (3) obj. -26.204 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 0 continuous
Cbc0038I Full problem 38 rows 22 columns, reduced to 38 rows 22 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -21.8008 - took 0.03 seconds
Cbc0012I Integer solution of -21.8008 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0031I 11 added rows had average density of 16.545455
Cbc0013I At root node, 11 cuts changed objective from -65.832065 to -40.237675 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1158 row cuts average 3.6 elements, 2 column cuts (2 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 804 row cuts average 21.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.019 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0001I Search completed - best objective -21.8008, took 1969 iterations and 4 nodes (0.14 seconds)
Cbc0032I Strong branching done 42 times (489 iterations), fathomed 0 nodes and fixed 5 variables
Cbc0035I Maximum depth 1, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.14   (Wallclock seconds):       0.15

