Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-17) rows, 51 (-2) columns and 270 (-33) elements
Clp1000I sum of infeasibilities 1.62819e-05 - average 1.85022e-07, 4 fixed columns
Coin0506I Presolve 80 (-8) rows, 47 (-4) columns and 246 (-24) elements
Clp0029I End of values pass after 47 iterations
Clp0000I Optimal - objective value 37.188767
Clp0000I Optimal - objective value 37.188767
Coin0511I After Postsolve, objective 37.188767, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 37.188767
Clp0000I Optimal - objective value 37.188767
Clp0000I Optimal - objective value 37.188767
Coin0511I After Postsolve, objective 37.188767, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 37.18876723 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 51 columns (50 integer (50 of which binary)) and 270 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.637%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 35 integers unsatisfied sum - 8.59116
Cbc0038I Solution found of 6.57622
Cbc0038I Relaxing continuous gives 6.14195
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 51 columns, reduced to 59 rows 36 columns
Cbc0038I Mini branch and bound improved solution from 6.14195 to -4.79858 (0.05 seconds)
Cbc0038I Round again with cutoff of -8.03769
Cbc0038I Pass   1: suminf.    1.84398 (8) obj. -8.03769 iterations 37
Cbc0038I Pass   2: suminf.    0.10595 (2) obj. -8.03769 iterations 11
Cbc0038I Pass   3: suminf.    0.64981 (3) obj. -8.03769 iterations 5
Cbc0038I Pass   4: suminf.    1.07652 (4) obj. -8.03769 iterations 2
Cbc0038I Pass   5: suminf.    0.65186 (3) obj. -8.03769 iterations 1
Cbc0038I Pass   6: suminf.    0.20871 (2) obj. -8.03769 iterations 1
Cbc0038I Pass   7: suminf.    0.86245 (4) obj. -8.03769 iterations 3
Cbc0038I Pass   8: suminf.    0.66004 (3) obj. -8.03769 iterations 1
Cbc0038I Pass   9: suminf.    2.15137 (8) obj. -8.03769 iterations 13
Cbc0038I Pass  10: suminf.    1.54276 (8) obj. -8.03769 iterations 6
Cbc0038I Pass  11: suminf.    1.24568 (7) obj. -8.03769 iterations 4
Cbc0038I Pass  12: suminf.    2.15823 (6) obj. -8.03769 iterations 7
Cbc0038I Pass  13: suminf.    2.13137 (7) obj. -8.03769 iterations 1
Cbc0038I Pass  14: suminf.    0.74845 (4) obj. -8.03769 iterations 8
Cbc0038I Pass  15: suminf.    0.20871 (2) obj. -8.03769 iterations 3
Cbc0038I Pass  16: suminf.    0.86245 (4) obj. -8.03769 iterations 3
Cbc0038I Pass  17: suminf.    0.66004 (3) obj. -8.03769 iterations 1
Cbc0038I Pass  18: suminf.    2.68061 (9) obj. -8.03769 iterations 16
Cbc0038I Pass  19: suminf.    1.92519 (7) obj. -8.03769 iterations 4
Cbc0038I Pass  20: suminf.    1.92552 (9) obj. -8.03769 iterations 1
Cbc0038I Pass  21: suminf.    1.12896 (4) obj. -8.03769 iterations 11
Cbc0038I Pass  22: suminf.    0.86354 (4) obj. -8.03769 iterations 1
Cbc0038I Pass  23: suminf.    0.57880 (3) obj. -8.03769 iterations 2
Cbc0038I Pass  24: suminf.    1.44234 (4) obj. -8.03769 iterations 5
Cbc0038I Pass  25: suminf.    0.59544 (4) obj. -8.03769 iterations 2
Cbc0038I Pass  26: suminf.    0.59544 (4) obj. -8.03769 iterations 0
Cbc0038I Pass  27: suminf.    1.35432 (4) obj. -8.03769 iterations 4
Cbc0038I Pass  28: suminf.    0.65497 (4) obj. -8.03769 iterations 2
Cbc0038I Pass  29: suminf.    0.63141 (3) obj. -8.03769 iterations 1
Cbc0038I Pass  30: suminf.    0.53387 (3) obj. -8.03769 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 51 columns, reduced to 66 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -4.79858 - took 0.12 seconds
Cbc0012I Integer solution of -4.79858 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0038I Full problem 88 rows 51 columns, reduced to 59 rows 36 columns
Cbc0012I Integer solution of -8.42554 found by RINS after 0 iterations and 0 nodes (0.14 seconds)
Cbc0031I 21 added rows had average density of 41.952381
Cbc0013I At root node, 21 cuts changed objective from -37.188767 to -27.471694 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6945 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1455 row cuts average 50.9 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 22 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 186 row cuts average 50.3 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0010I After 36 nodes, 1 on tree, -8.42554 best solution, best possible -10.172717 (0.70 seconds)
Cbc0001I Search completed - best objective -8.425539999999998, took 6664 iterations and 44 nodes (0.72 seconds)
Cbc0032I Strong branching done 570 times (10130 iterations), fathomed 1 nodes and fixed 21 variables
Cbc0035I Maximum depth 16, 81 variables fixed on reduced cost
Total time (CPU seconds):       0.72   (Wallclock seconds):       0.72

