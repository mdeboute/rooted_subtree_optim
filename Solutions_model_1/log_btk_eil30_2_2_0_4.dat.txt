Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 46 (-17) rows, 26 (-6) columns and 137 (-40) elements
Clp0000I Optimal - objective value 353.70058
Coin0511I After Postsolve, objective 353.70058, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 353.7005756 - 15 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 46 rows, 26 columns (25 integer (25 of which binary)) and 137 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 3.338%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 6 integers unsatisfied sum - 1.29597
Cbc0038I Pass   1: suminf.    0.59121 (3) obj. -325.062 iterations 6
Cbc0038I Solution found of -111.5
Cbc0038I Relaxing continuous gives -111.5
Cbc0038I Rounding solution of -195 is better than previous of -111.5

Cbc0038I Before mini branch and bound, 19 integers at bound fixed and 0 continuous
Cbc0038I Full problem 46 rows 26 columns, reduced to 10 rows 7 columns
Cbc0038I Mini branch and bound improved solution from -195 to -280.5 (0.01 seconds)
Cbc0038I Round again with cutoff of -288.27
Cbc0038I Pass   2: suminf.    0.59121 (3) obj. -325.062 iterations 0
Cbc0038I Pass   3: suminf.    0.67661 (2) obj. -288.27 iterations 3
Cbc0038I Pass   4: suminf.    0.38940 (2) obj. -323.622 iterations 1
Cbc0038I Pass   5: suminf.    1.58185 (6) obj. -288.27 iterations 7
Cbc0038I Pass   6: suminf.    1.57266 (7) obj. -288.27 iterations 3
Cbc0038I Pass   7: suminf.    0.14601 (2) obj. -288.27 iterations 9
Cbc0038I Pass   8: suminf.    0.14601 (2) obj. -288.27 iterations 0
Cbc0038I Pass   9: suminf.    0.72683 (3) obj. -288.27 iterations 3
Cbc0038I Pass  10: suminf.    0.50586 (2) obj. -301.414 iterations 2
Cbc0038I Pass  11: suminf.    0.61265 (2) obj. -288.27 iterations 2
Cbc0038I Pass  12: suminf.    2.70688 (8) obj. -288.27 iterations 7
Cbc0038I Pass  13: suminf.    1.44465 (5) obj. -288.27 iterations 2
Cbc0038I Pass  14: suminf.    1.44465 (5) obj. -288.27 iterations 0
Cbc0038I Pass  15: suminf.    0.49881 (4) obj. -288.27 iterations 6
Cbc0038I Pass  16: suminf.    0.49881 (4) obj. -288.27 iterations 1
Cbc0038I Pass  17: suminf.    0.79360 (4) obj. -288.27 iterations 3
Cbc0038I Pass  18: suminf.    1.10765 (5) obj. -288.27 iterations 5
Cbc0038I Pass  19: suminf.    0.84272 (3) obj. -288.27 iterations 5
Cbc0038I Pass  20: suminf.    0.14601 (2) obj. -288.27 iterations 3
Cbc0038I Pass  21: suminf.    0.72683 (3) obj. -288.27 iterations 4
Cbc0038I Pass  22: suminf.    0.50586 (2) obj. -301.414 iterations 2
Cbc0038I Pass  23: suminf.    0.61265 (2) obj. -288.27 iterations 3
Cbc0038I Pass  24: suminf.    1.84604 (6) obj. -288.27 iterations 13
Cbc0038I Pass  25: suminf.    0.17659 (3) obj. -288.27 iterations 3
Cbc0038I Pass  26: suminf.    0.59121 (3) obj. -288.27 iterations 6
Cbc0038I Pass  27: suminf.    0.67661 (2) obj. -288.27 iterations 3
Cbc0038I Pass  28: suminf.    0.38940 (2) obj. -323.622 iterations 1
Cbc0038I Pass  29: suminf.    0.72837 (2) obj. -302.984 iterations 1
Cbc0038I Pass  30: suminf.    0.72837 (2) obj. -302.984 iterations 0
Cbc0038I Pass  31: suminf.    0.82857 (2) obj. -288.27 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 46 rows 26 columns, reduced to 19 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -280.5 - took 0.01 seconds
Cbc0012I Integer solution of -280.5 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 46 rows 26 columns, reduced to 10 rows 7 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 4 added rows had average density of 3.25
Cbc0013I At root node, 4 cuts changed objective from -353.70058 to -286.44821 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 10 row cuts average 2.7 elements, 7 column cuts (7 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 4 row cuts average 17.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 3.8 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 11.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0001I Search completed - best objective -280.5, took 16 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

