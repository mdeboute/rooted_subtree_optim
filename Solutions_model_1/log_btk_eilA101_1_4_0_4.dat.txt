Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 126 (-79) rows, 70 (-33) columns and 386 (-217) elements
Clp1000I sum of infeasibilities 3.06159e-05 - average 2.42984e-07, 65 fixed columns
Coin0506I Presolve 4 (-122) rows, 5 (-65) columns and 12 (-374) elements
Clp0029I End of values pass after 5 iterations
Clp0000I Optimal - objective value 28692.101
Clp0000I Optimal - objective value 28692.101
Coin0511I After Postsolve, objective 28692.101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.29563636 - largest nonzero change 0 ( 0%) - largest zero change 2.9178178e-05
Clp0000I Optimal - objective value 28692.101
Clp0000I Optimal - objective value 28692.101
Clp0000I Optimal - objective value 28692.101
Coin0511I After Postsolve, objective 28692.101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 28692.10118 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 126 rows, 70 columns (69 integer (69 of which binary)) and 386 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.256%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 3 integers unsatisfied sum - 0.848739
Cbc0038I Pass   1: suminf.    0.20000 (1) obj. -28376.9 iterations 16
Cbc0038I Solution found of -26282
Cbc0038I Relaxing continuous gives -26282
Cbc0038I Rounding solution of -27106.6 is better than previous of -26282

Cbc0038I Before mini branch and bound, 65 integers at bound fixed and 0 continuous
Cbc0038I Full problem 126 rows 70 columns, reduced to 4 rows 5 columns
Cbc0038I Mini branch and bound improved solution from -27106.6 to -27256.9 (0.01 seconds)
Cbc0038I Round again with cutoff of -27400.4
Cbc0038I Reduced cost fixing fixed 16 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.20000 (1) obj. -28376.9 iterations 0
Cbc0038I Pass   3: suminf.    0.42709 (1) obj. -27400.4 iterations 4
Cbc0038I Pass   4: suminf.    0.42504 (2) obj. -27400.4 iterations 14
Cbc0038I Pass   5: suminf.    0.42504 (2) obj. -27400.4 iterations 7
Cbc0038I Pass   6: suminf.    0.42709 (1) obj. -27400.4 iterations 6
Cbc0038I Pass   7: suminf.    0.39802 (3) obj. -27400.4 iterations 15
Cbc0038I Pass   8: suminf.    0.39802 (3) obj. -27400.4 iterations 4
Cbc0038I Pass   9: suminf.    0.23870 (1) obj. -27400.4 iterations 8
Cbc0038I Pass  10: suminf.    0.23870 (1) obj. -27400.4 iterations 0
Cbc0038I Pass  11: suminf.    0.25000 (1) obj. -28444.4 iterations 9
Cbc0038I Pass  12: suminf.    0.47516 (1) obj. -27400.4 iterations 2
Cbc0038I Pass  13: suminf.    0.96809 (3) obj. -27400.4 iterations 20
Cbc0038I Pass  14: suminf.    0.61081 (2) obj. -27400.4 iterations 8
Cbc0038I Pass  15: suminf.    0.75153 (2) obj. -27675.1 iterations 2
Cbc0038I Pass  16: suminf.    0.49807 (3) obj. -27400.4 iterations 22
Cbc0038I Pass  17: suminf.    0.45755 (2) obj. -27400.4 iterations 8
Cbc0038I Pass  18: suminf.    0.77690 (2) obj. -27420.8 iterations 4
Cbc0038I Pass  19: suminf.    0.76646 (2) obj. -27400.4 iterations 3
Cbc0038I Pass  20: suminf.    0.78460 (4) obj. -27400.4 iterations 8
Cbc0038I Pass  21: suminf.    0.76646 (2) obj. -27400.4 iterations 9
Cbc0038I Pass  22: suminf.    0.91276 (4) obj. -27400.4 iterations 10
Cbc0038I Pass  23: suminf.    0.41192 (1) obj. -27400.4 iterations 8
Cbc0038I Pass  24: suminf.    0.45714 (1) obj. -27518.8 iterations 3
Cbc0038I Pass  25: suminf.    1.83321 (6) obj. -27400.4 iterations 14
Cbc0038I Pass  26: suminf.    0.43333 (1) obj. -27400.4 iterations 14
Cbc0038I Pass  27: suminf.    0.22222 (1) obj. -27538.4 iterations 8
Cbc0038I Pass  28: suminf.    0.25854 (1) obj. -27400.4 iterations 1
Cbc0038I Pass  29: suminf.    0.76247 (4) obj. -27400.4 iterations 12
Cbc0038I Pass  30: suminf.    0.25854 (1) obj. -27400.4 iterations 10
Cbc0038I Pass  31: suminf.    0.90278 (3) obj. -27400.4 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 126 rows 70 columns, reduced to 22 rows 22 columns
Cbc0038I Mini branch and bound improved solution from -27256.9 to -27952.3 (0.02 seconds)
Cbc0038I Round again with cutoff of -28100.2
Cbc0038I Reduced cost fixing fixed 37 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.20000 (1) obj. -28376.9 iterations 0
Cbc0038I Pass  32: suminf.    0.30566 (1) obj. -28100.2 iterations 3
Cbc0038I Pass  33: suminf.    0.87218 (3) obj. -28100.2 iterations 19
Cbc0038I Pass  34: suminf.    0.87218 (3) obj. -28100.2 iterations 6
Cbc0038I Pass  35: suminf.    0.42786 (2) obj. -28100.2 iterations 3
Cbc0038I Pass  36: suminf.    0.25000 (1) obj. -28444.4 iterations 4
Cbc0038I Pass  37: suminf.    0.34060 (1) obj. -28100.2 iterations 2
Cbc0038I Pass  38: suminf.    0.80746 (3) obj. -28100.2 iterations 12
Cbc0038I Pass  39: suminf.    0.50219 (2) obj. -28190.3 iterations 7
Cbc0038I Pass  40: suminf.    0.54833 (2) obj. -28100.2 iterations 4
Cbc0038I Pass  41: suminf.    0.71242 (3) obj. -28100.2 iterations 14
Cbc0038I Pass  42: suminf.    0.71242 (3) obj. -28100.2 iterations 3
Cbc0038I Pass  43: suminf.    0.58705 (2) obj. -28564.1 iterations 9
Cbc0038I Pass  44: suminf.    0.08333 (1) obj. -28102.6 iterations 1
Cbc0038I Pass  45: suminf.    0.08395 (1) obj. -28100.2 iterations 2
Cbc0038I Pass  46: suminf.    0.09165 (2) obj. -28100.2 iterations 6
Cbc0038I Pass  47: suminf.    0.62610 (3) obj. -28100.2 iterations 9
Cbc0038I Pass  48: suminf.    0.62610 (3) obj. -28100.2 iterations 3
Cbc0038I Pass  49: suminf.    0.77364 (2) obj. -28100.2 iterations 6
Cbc0038I Pass  50: suminf.    0.55678 (3) obj. -28100.2 iterations 6
Cbc0038I Pass  51: suminf.    0.34477 (2) obj. -28100.2 iterations 3
Cbc0038I Pass  52: suminf.    0.46442 (2) obj. -28100.2 iterations 3
Cbc0038I Pass  53: suminf.    0.87591 (3) obj. -28100.2 iterations 13
Cbc0038I Pass  54: suminf.    0.48663 (1) obj. -28100.2 iterations 10
Cbc0038I Pass  55: suminf.    0.45714 (1) obj. -28247.5 iterations 3
Cbc0038I Pass  56: suminf.    0.20231 (2) obj. -28100.2 iterations 18
Cbc0038I Pass  57: suminf.    0.15424 (2) obj. -28100.2 iterations 10
Cbc0038I Pass  58: suminf.    0.43220 (2) obj. -28180.3 iterations 11
Cbc0038I Pass  59: suminf.    0.34477 (2) obj. -28100.2 iterations 3
Cbc0038I Pass  60: suminf.    0.46442 (2) obj. -28100.2 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 59 integers at bound fixed and 0 continuous
Cbc0038I Full problem 126 rows 70 columns, reduced to 11 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -27952.3 - took 0.02 seconds
Cbc0012I Integer solution of -27952.272 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 126 rows 70 columns, reduced to 4 rows 6 columns
Cbc0031I 7 added rows had average density of 5.8571429
Cbc0013I At root node, 7 cuts changed objective from -28692.101 to -28459.474 in 6 passes
Cbc0014I Cut generator 0 (Probing) - 12 row cuts average 3.1 elements, 4 column cuts (4 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 6 row cuts average 6.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 69.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -27952.272, took 60 iterations and 4 nodes (0.04 seconds)
Cbc0032I Strong branching done 24 times (89 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 1, 42 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.04

