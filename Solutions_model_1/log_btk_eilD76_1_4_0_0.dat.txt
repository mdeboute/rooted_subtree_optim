Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 131 (-24) rows, 73 (-5) columns and 400 (-53) elements
Clp1000I sum of infeasibilities 2.03803e-05 - average 1.55574e-07, 11 fixed columns
Coin0506I Presolve 111 (-20) rows, 62 (-11) columns and 338 (-62) elements
Clp0029I End of values pass after 62 iterations
Clp0014I Perturbing problem by 0.001% of 2.5747417 - largest nonzero change 0 ( 0%) - largest zero change 2.3568723e-05
Clp0000I Optimal - objective value 44.922297
Clp0000I Optimal - objective value 44.922297
Coin0511I After Postsolve, objective 44.922297, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 44.922297
Clp0000I Optimal - objective value 44.922297
Clp0000I Optimal - objective value 44.922297
Coin0511I After Postsolve, objective 44.922297, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 44.92229655 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 131 rows, 73 columns (72 integer (72 of which binary)) and 400 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.202%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 10.5998
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 9.88658 iterations 48
Cbc0038I Solution found of 9.88658
Cbc0038I Relaxing continuous gives 9.88658
Cbc0038I Rounding solution of -5.55061 is better than previous of 9.88658

Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 73 columns, reduced to 64 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -5.55061 to -9.35468 (0.05 seconds)
Cbc0038I Round again with cutoff of -12.9115
Cbc0038I Pass   2: suminf.    2.70940 (12) obj. -12.9115 iterations 16
Cbc0038I Pass   3: suminf.    2.40284 (21) obj. -12.9115 iterations 11
Cbc0038I Pass   4: suminf.    2.09687 (36) obj. -12.9115 iterations 19
Cbc0038I Pass   5: suminf.    2.86772 (11) obj. -12.9115 iterations 43
Cbc0038I Pass   6: suminf.    1.01205 (6) obj. -12.9115 iterations 7
Cbc0038I Pass   7: suminf.    1.57219 (5) obj. -12.9115 iterations 15
Cbc0038I Pass   8: suminf.    1.44706 (5) obj. -12.9115 iterations 4
Cbc0038I Pass   9: suminf.    1.36656 (4) obj. -12.9115 iterations 1
Cbc0038I Pass  10: suminf.    1.20387 (4) obj. -12.9115 iterations 4
Cbc0038I Pass  11: suminf.    1.05838 (4) obj. -12.9115 iterations 2
Cbc0038I Pass  12: suminf.    0.95083 (3) obj. -12.9115 iterations 1
Cbc0038I Pass  13: suminf.    1.06375 (4) obj. -12.9115 iterations 2
Cbc0038I Pass  14: suminf.    0.90467 (3) obj. -12.9115 iterations 1
Cbc0038I Pass  15: suminf.    1.05838 (4) obj. -12.9115 iterations 2
Cbc0038I Pass  16: suminf.    3.12599 (10) obj. -12.9115 iterations 13
Cbc0038I Pass  17: suminf.    1.93522 (7) obj. -12.9115 iterations 8
Cbc0038I Pass  18: suminf.    2.13597 (7) obj. -12.9115 iterations 12
Cbc0038I Pass  19: suminf.    2.13597 (7) obj. -12.9115 iterations 0
Cbc0038I Pass  20: suminf.    1.28962 (5) obj. -12.9115 iterations 7
Cbc0038I Pass  21: suminf.    1.73723 (6) obj. -12.9115 iterations 7
Cbc0038I Pass  22: suminf.    1.59207 (5) obj. -12.9115 iterations 5
Cbc0038I Pass  23: suminf.    1.42438 (4) obj. -12.9115 iterations 16
Cbc0038I Pass  24: suminf.    1.11606 (4) obj. -12.9115 iterations 5
Cbc0038I Pass  25: suminf.    1.46739 (4) obj. -12.9115 iterations 4
Cbc0038I Pass  26: suminf.    1.33592 (4) obj. -12.9115 iterations 2
Cbc0038I Pass  27: suminf.    1.32693 (4) obj. -12.9115 iterations 1
Cbc0038I Pass  28: suminf.    1.32213 (4) obj. -12.9115 iterations 4
Cbc0038I Pass  29: suminf.    1.16230 (4) obj. -12.9115 iterations 2
Cbc0038I Pass  30: suminf.    1.10505 (4) obj. -12.9115 iterations 1
Cbc0038I Pass  31: suminf.    1.46739 (4) obj. -12.9115 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 73 columns, reduced to 80 rows 46 columns
Cbc0038I Mini branch and bound improved solution from -9.35468 to -10.0873 (0.11 seconds)
Cbc0038I Round again with cutoff of -19.3137
Cbc0038I Pass  31: suminf.    3.92627 (19) obj. -19.3137 iterations 7
Cbc0038I Pass  32: suminf.    3.92491 (21) obj. -19.3137 iterations 4
Cbc0038I Pass  33: suminf.    1.46666 (7) obj. -19.3137 iterations 23
Cbc0038I Pass  34: suminf.    1.46666 (7) obj. -19.3137 iterations 0
Cbc0038I Pass  35: suminf.    3.64356 (10) obj. -19.3137 iterations 9
Cbc0038I Pass  36: suminf.    1.42484 (7) obj. -19.3137 iterations 11
Cbc0038I Pass  37: suminf.    1.19392 (5) obj. -19.3137 iterations 4
Cbc0038I Pass  38: suminf.    1.75650 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  39: suminf.    1.72476 (6) obj. -19.3137 iterations 1
Cbc0038I Pass  40: suminf.    2.10715 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  41: suminf.    1.21159 (4) obj. -19.3137 iterations 6
Cbc0038I Pass  42: suminf.    1.19392 (5) obj. -19.3137 iterations 2
Cbc0038I Pass  43: suminf.    1.75650 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  44: suminf.    1.72476 (6) obj. -19.3137 iterations 1
Cbc0038I Pass  45: suminf.    2.10715 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  46: suminf.    1.21159 (4) obj. -19.3137 iterations 6
Cbc0038I Pass  47: suminf.    1.19392 (5) obj. -19.3137 iterations 2
Cbc0038I Pass  48: suminf.    1.75650 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  49: suminf.    1.72476 (6) obj. -19.3137 iterations 1
Cbc0038I Pass  50: suminf.    2.10715 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  51: suminf.    1.21159 (4) obj. -19.3137 iterations 6
Cbc0038I Pass  52: suminf.    1.19392 (5) obj. -19.3137 iterations 2
Cbc0038I Pass  53: suminf.    1.75650 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  54: suminf.    1.72476 (6) obj. -19.3137 iterations 1
Cbc0038I Pass  55: suminf.    2.10715 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  56: suminf.    1.21159 (4) obj. -19.3137 iterations 6
Cbc0038I Pass  57: suminf.    1.19392 (5) obj. -19.3137 iterations 2
Cbc0038I Pass  58: suminf.    1.75650 (6) obj. -19.3137 iterations 5
Cbc0038I Pass  59: suminf.    1.72476 (6) obj. -19.3137 iterations 1
Cbc0038I Pass  60: suminf.    2.10715 (6) obj. -19.3137 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 73 columns, reduced to 70 rows 40 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -10.0873 - took 0.14 seconds
Cbc0012I Integer solution of -10.08727 found by feasibility pump after 0 iterations and 0 nodes (0.16 seconds)
Cbc0038I Full problem 131 rows 73 columns, reduced to 65 rows 39 columns
Cbc0012I Integer solution of -12.29363 found by RINS after 0 iterations and 0 nodes (0.21 seconds)
Cbc0031I 21 added rows had average density of 53.285714
Cbc0013I At root node, 21 cuts changed objective from -44.922297 to -34.411775 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 7805 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.071 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2079 row cuts average 72.6 elements, 0 column cuts (0 active)  in 0.074 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 93 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 121 row cuts average 65.6 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -12.29363 best solution, best possible -34.411775 (0.84 seconds)
Cbc0038I Full problem 131 rows 73 columns, reduced to 55 rows 33 columns
Cbc0012I Integer solution of -12.528112 found by rounding after 7241 iterations and 59 nodes (1.25 seconds)
Cbc0016I Integer solution of -12.724522 found by strong branching after 7274 iterations and 61 nodes (1.25 seconds)
Cbc0001I Search completed - best objective -12.724522, took 8059 iterations and 84 nodes (1.29 seconds)
Cbc0032I Strong branching done 936 times (15381 iterations), fathomed 6 nodes and fixed 24 variables
Cbc0035I Maximum depth 26, 245 variables fixed on reduced cost
Total time (CPU seconds):       1.22   (Wallclock seconds):       1.30

