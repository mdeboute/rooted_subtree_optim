Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 46 (-19) rows, 25 (-8) columns and 135 (-48) elements
Clp1000I sum of infeasibilities 1.15924e-06 - average 2.52008e-08, 5 fixed columns
Coin0506I Presolve 36 (-10) rows, 20 (-5) columns and 105 (-30) elements
Clp0029I End of values pass after 20 iterations
Clp0000I Optimal - objective value 93.004831
Clp0000I Optimal - objective value 93.004831
Coin0511I After Postsolve, objective 93.004831, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 93.004831
Clp0000I Optimal - objective value 93.004831
Clp0000I Optimal - objective value 93.004831
Coin0511I After Postsolve, objective 93.004831, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 93.00483142 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 8 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 43 rows, 25 columns (24 integer (24 of which binary)) and 141 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.118%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 6.023
Cbc0038I Solution found of 0.675902
Cbc0038I Relaxing continuous gives -9.66437
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 31 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -9.66437 to -58.7292 (0.02 seconds)
Cbc0038I Round again with cutoff of -61.6743
Cbc0038I Pass   1: suminf.    1.23106 (5) obj. -61.6743 iterations 19
Cbc0038I Pass   2: suminf.    0.76528 (6) obj. -61.6743 iterations 5
Cbc0038I Pass   3: suminf.    0.26316 (1) obj. -61.6743 iterations 5
Cbc0038I Pass   4: suminf.    0.34279 (1) obj. -61.6743 iterations 1
Cbc0038I Pass   5: suminf.    1.47497 (5) obj. -61.6743 iterations 6
Cbc0038I Pass   6: suminf.    0.89168 (4) obj. -61.6743 iterations 3
Cbc0038I Pass   7: suminf.    0.55640 (3) obj. -61.6743 iterations 3
Cbc0038I Pass   8: suminf.    0.45263 (1) obj. -63.8912 iterations 4
Cbc0038I Pass   9: suminf.    0.49002 (2) obj. -61.6743 iterations 2
Cbc0038I Pass  10: suminf.    0.45263 (1) obj. -63.8912 iterations 2
Cbc0038I Pass  11: suminf.    1.45311 (6) obj. -61.6743 iterations 7
Cbc0038I Pass  12: suminf.    1.45311 (6) obj. -61.6743 iterations 0
Cbc0038I Pass  13: suminf.    1.85892 (6) obj. -61.6743 iterations 10
Cbc0038I Pass  14: suminf.    1.24872 (5) obj. -61.6743 iterations 4
Cbc0038I Pass  15: suminf.    0.71676 (2) obj. -63.4216 iterations 9
Cbc0038I Pass  16: suminf.    0.71676 (2) obj. -63.4216 iterations 0
Cbc0038I Pass  17: suminf.    0.49846 (2) obj. -61.6743 iterations 5
Cbc0038I Pass  18: suminf.    0.15789 (1) obj. -62.7232 iterations 2
Cbc0038I Pass  19: suminf.    0.64928 (5) obj. -61.6743 iterations 5
Cbc0038I Pass  20: suminf.    0.33185 (3) obj. -61.6743 iterations 4
Cbc0038I Pass  21: suminf.    0.20590 (2) obj. -61.6743 iterations 5
Cbc0038I Pass  22: suminf.    0.17895 (1) obj. -61.7537 iterations 2
Cbc0038I Pass  23: suminf.    1.00570 (3) obj. -61.6743 iterations 9
Cbc0038I Pass  24: suminf.    0.83147 (3) obj. -61.6743 iterations 4
Cbc0038I Pass  25: suminf.    0.33684 (1) obj. -64.5769 iterations 3
Cbc0038I Pass  26: suminf.    0.39283 (1) obj. -61.6743 iterations 1
Cbc0038I Pass  27: suminf.    1.25982 (3) obj. -61.6743 iterations 2
Cbc0038I Pass  28: suminf.    1.30020 (5) obj. -61.6743 iterations 8
Cbc0038I Pass  29: suminf.    0.95179 (4) obj. -61.6743 iterations 5
Cbc0038I Pass  30: suminf.    1.47174 (4) obj. -61.6743 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 43 rows 25 columns, reduced to 36 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -58.7292 - took 0.03 seconds
Cbc0012I Integer solution of -58.72922 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0012I Integer solution of -58.72926 found by DiveCoefficient after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 43 rows 25 columns, reduced to 31 rows 18 columns
Cbc0031I 8 added rows had average density of 16.375
Cbc0013I At root node, 8 cuts changed objective from -88.179523 to -76.173368 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 982 row cuts average 3.6 elements, 3 column cuts (3 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 550 row cuts average 23.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 5 row cuts average 6.4 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 103 row cuts average 22.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0001I Search completed - best objective -58.72926, took 2705 iterations and 24 nodes (0.26 seconds)
Cbc0032I Strong branching done 250 times (1945 iterations), fathomed 1 nodes and fixed 7 variables
Cbc0035I Maximum depth 8, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.25   (Wallclock seconds):       0.27

