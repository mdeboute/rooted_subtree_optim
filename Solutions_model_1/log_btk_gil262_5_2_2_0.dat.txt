Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 505 (-22) rows, 261 (-3) columns and 1502 (-43) elements
Clp1000I sum of infeasibilities 2.34328e-05 - average 4.64016e-08, 125 fixed columns
Coin0506I Presolve 242 (-263) rows, 132 (-129) columns and 723 (-779) elements
Clp0029I End of values pass after 132 iterations
Clp0014I Perturbing problem by 0.001% of 2.4551833 - largest nonzero change 0 ( 0%) - largest zero change 2.9939396e-05
Clp0000I Optimal - objective value 182.76338
Clp0000I Optimal - objective value 182.76338
Coin0511I After Postsolve, objective 182.76338, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.13645076 - largest nonzero change 0 ( 0%) - largest zero change 2.9769852e-05
Clp0000I Optimal - objective value 182.76338
Clp0000I Optimal - objective value 182.76338
Clp0000I Optimal - objective value 182.76338
Coin0511I After Postsolve, objective 182.76338, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 182.7633767 - 0 iterations time 0.112, Presolve 0.00, Idiot 0.11

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 505 rows, 261 columns (260 integer (260 of which binary)) and 1502 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.368%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 77 integers unsatisfied sum - 12.937
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -5.75022 iterations 225
Cbc0038I Solution found of -5.75022
Cbc0038I Relaxing continuous gives -5.75022
Cbc0038I Rounding solution of -50.898 is better than previous of -5.75022

Cbc0038I Before mini branch and bound, 183 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 141 rows 78 columns
Cbc0038I Mini branch and bound improved solution from -50.898 to -97.2824 (0.19 seconds)
Cbc0038I Round again with cutoff of -105.831
Cbc0038I Pass   2: suminf.    3.67816 (19) obj. -105.831 iterations 62
Cbc0038I Pass   3: suminf.    3.56715 (14) obj. -105.831 iterations 14
Cbc0038I Pass   4: suminf.    1.93219 (8) obj. -105.831 iterations 35
Cbc0038I Pass   5: suminf.    1.51824 (5) obj. -105.831 iterations 22
Cbc0038I Pass   6: suminf.    1.87808 (7) obj. -105.831 iterations 23
Cbc0038I Pass   7: suminf.    1.87990 (6) obj. -105.831 iterations 7
Cbc0038I Pass   8: suminf.    1.61654 (6) obj. -105.831 iterations 17
Cbc0038I Pass   9: suminf.    1.45497 (5) obj. -105.831 iterations 33
Cbc0038I Pass  10: suminf.    1.45497 (5) obj. -105.831 iterations 0
Cbc0038I Pass  11: suminf.    1.64871 (5) obj. -105.831 iterations 29
Cbc0038I Pass  12: suminf.    1.51091 (6) obj. -105.831 iterations 47
Cbc0038I Pass  13: suminf.    3.70372 (12) obj. -105.831 iterations 60
Cbc0038I Pass  14: suminf.    2.26765 (6) obj. -105.831 iterations 57
Cbc0038I Pass  15: suminf.    1.93965 (5) obj. -105.831 iterations 33
Cbc0038I Pass  16: suminf.    1.15075 (3) obj. -105.831 iterations 11
Cbc0038I Pass  17: suminf.    1.19229 (3) obj. -105.831 iterations 5
Cbc0038I Pass  18: suminf.    0.98414 (5) obj. -105.831 iterations 10
Cbc0038I Pass  19: suminf.    1.56766 (4) obj. -105.831 iterations 11
Cbc0038I Pass  20: suminf.    1.11554 (4) obj. -105.831 iterations 10
Cbc0038I Pass  21: suminf.    4.55704 (14) obj. -105.831 iterations 50
Cbc0038I Pass  22: suminf.    2.96471 (9) obj. -105.831 iterations 29
Cbc0038I Pass  23: suminf.    2.14400 (9) obj. -105.831 iterations 10
Cbc0038I Pass  24: suminf.    1.73436 (5) obj. -105.831 iterations 42
Cbc0038I Pass  25: suminf.    1.12003 (6) obj. -105.831 iterations 17
Cbc0038I Pass  26: suminf.    1.01271 (5) obj. -105.831 iterations 17
Cbc0038I Pass  27: suminf.    1.84628 (9) obj. -105.831 iterations 21
Cbc0038I Pass  28: suminf.    1.40311 (4) obj. -105.831 iterations 19
Cbc0038I Pass  29: suminf.    1.37558 (5) obj. -105.831 iterations 10
Cbc0038I Pass  30: suminf.    2.29249 (6) obj. -105.831 iterations 23
Cbc0038I Pass  31: suminf.    2.23022 (10) obj. -105.831 iterations 10
Cbc0038I Rounding solution of -109.173 is better than previous of -97.2824

Cbc0038I Before mini branch and bound, 157 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 188 rows 104 columns
Cbc0038I Mini branch and bound did not improve solution (0.52 seconds)
Cbc0038I Round again with cutoff of -123.891
Cbc0038I Pass  31: suminf.    4.50537 (20) obj. -123.891 iterations 4
Cbc0038I Pass  32: suminf.    4.39385 (22) obj. -123.891 iterations 14
Cbc0038I Pass  33: suminf.    2.88747 (11) obj. -123.891 iterations 38
Cbc0038I Pass  34: suminf.    2.51784 (11) obj. -123.891 iterations 19
Cbc0038I Pass  35: suminf.    3.35012 (9) obj. -123.891 iterations 26
Cbc0038I Pass  36: suminf.    3.23978 (9) obj. -123.891 iterations 15
Cbc0038I Pass  37: suminf.    3.66615 (9) obj. -123.891 iterations 18
Cbc0038I Pass  38: suminf.    2.62084 (11) obj. -123.891 iterations 43
Cbc0038I Pass  39: suminf.    2.88115 (9) obj. -123.891 iterations 21
Cbc0038I Pass  40: suminf.    2.51784 (11) obj. -123.891 iterations 28
Cbc0038I Pass  41: suminf.    3.35012 (9) obj. -123.891 iterations 25
Cbc0038I Pass  42: suminf.    3.23978 (9) obj. -123.891 iterations 15
Cbc0038I Pass  43: suminf.    3.66615 (9) obj. -123.891 iterations 17
Cbc0038I Pass  44: suminf.    2.62084 (11) obj. -123.891 iterations 42
Cbc0038I Pass  45: suminf.    2.88115 (9) obj. -123.891 iterations 22
Cbc0038I Pass  46: suminf.    2.51784 (11) obj. -123.891 iterations 29
Cbc0038I Pass  47: suminf.    3.35012 (9) obj. -123.891 iterations 26
Cbc0038I Pass  48: suminf.    3.23978 (9) obj. -123.891 iterations 16
Cbc0038I Pass  49: suminf.    3.66615 (9) obj. -123.891 iterations 17
Cbc0038I Pass  50: suminf.    2.62084 (11) obj. -123.891 iterations 43
Cbc0038I Pass  51: suminf.    2.88115 (9) obj. -123.891 iterations 22
Cbc0038I Pass  52: suminf.    2.51784 (11) obj. -123.891 iterations 29
Cbc0038I Pass  53: suminf.    3.35012 (9) obj. -123.891 iterations 27
Cbc0038I Pass  54: suminf.    3.23978 (9) obj. -123.891 iterations 16
Cbc0038I Pass  55: suminf.    3.66615 (9) obj. -123.891 iterations 19
Cbc0038I Pass  56: suminf.    2.62084 (11) obj. -123.891 iterations 44
Cbc0038I Pass  57: suminf.    2.88115 (9) obj. -123.891 iterations 22
Cbc0038I Pass  58: suminf.    2.51784 (11) obj. -123.891 iterations 29
Cbc0038I Pass  59: suminf.    3.35012 (9) obj. -123.891 iterations 27
Cbc0038I Pass  60: suminf.    3.23978 (9) obj. -123.891 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 167 integers at bound fixed and 0 continuous
Cbc0038I Full problem 505 rows 261 columns, reduced to 169 rows 94 columns
Cbc0038I Mini branch and bound did not improve solution (0.73 seconds)
Cbc0038I After 0.73 seconds - Feasibility pump exiting with objective of -109.173 - took 0.67 seconds
Cbc0012I Integer solution of -109.17255 found by feasibility pump after 0 iterations and 0 nodes (0.73 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 150 rows 84 columns
Cbc0031I 31 added rows had average density of 127.6129
Cbc0013I At root node, 31 cuts changed objective from -182.76338 to -168.12358 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 31167 row cuts average 3.3 elements, 1 column cuts (1 active)  in 1.089 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2471 row cuts average 258.7 elements, 0 column cuts (0 active)  in 0.940 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.060 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.048 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.203 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 13 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.822 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.065 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 162 row cuts average 253.2 elements, 0 column cuts (0 active)  in 0.416 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -109.17255 best solution, best possible -168.12358 (10.57 seconds)
Cbc0010I After 5 nodes, 6 on tree, -109.17255 best solution, best possible -168.12358 (11.42 seconds)
Cbc0010I After 29 nodes, 8 on tree, -109.17255 best solution, best possible -168.12358 (12.13 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 175 rows 97 columns
Cbc0010I After 53 nodes, 12 on tree, -109.17255 best solution, best possible -168.12358 (12.83 seconds)
Cbc0010I After 84 nodes, 13 on tree, -109.17255 best solution, best possible -168.12358 (13.57 seconds)
Cbc0038I Full problem 505 rows 261 columns, reduced to 119 rows 67 columns
Cbc0012I Integer solution of -110.97904 found by RINS after 20499 iterations and 93 nodes (14.02 seconds)
Cbc0010I After 103 nodes, 18 on tree, -110.97904 best solution, best possible -168.12358 (14.27 seconds)
Cbc0012I Integer solution of -111.85189 found by rounding after 21960 iterations and 125 nodes (14.57 seconds)
Cbc0010I After 186 nodes, 22 on tree, -111.85189 best solution, best possible -168.12358 (14.98 seconds)
Cbc0012I Integer solution of -112.2322 found by rounding after 24109 iterations and 202 nodes (15.09 seconds)
Cbc0010I After 276 nodes, 1 on tree, -112.2322 best solution, best possible -124.80515 (15.70 seconds)
Cbc0001I Search completed - best objective -112.2322, took 27677 iterations and 280 nodes (15.81 seconds)
Cbc0032I Strong branching done 2752 times (63966 iterations), fathomed 58 nodes and fixed 178 variables
Cbc0035I Maximum depth 70, 1216 variables fixed on reduced cost
Total time (CPU seconds):       14.51   (Wallclock seconds):       15.92

