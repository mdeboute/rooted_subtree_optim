Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 188 (-17) rows, 101 (-2) columns and 570 (-33) elements
Clp1000I sum of infeasibilities 0.000479777 - average 2.55201e-06, 18 fixed columns
Coin0506I Presolve 155 (-33) rows, 83 (-18) columns and 468 (-102) elements
Clp0029I End of values pass after 83 iterations
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Coin0511I After Postsolve, objective 36.19649, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Coin0511I After Postsolve, objective 36.19649, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36.19649018 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 188 rows, 101 columns (100 integer (100 of which binary)) and 570 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.907%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 69 integers unsatisfied sum - 13.9925
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 11.0274 iterations 115
Cbc0038I Solution found of 11.0274
Cbc0038I Relaxing continuous gives 11.0274
Cbc0038I Rounding solution of -1.71074 is better than previous of 11.0274

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - 0 fixed gives 129, 70 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -5.1594
Cbc0038I Pass   2: suminf.    1.93864 (7) obj. -5.1594 iterations 13
Cbc0038I Pass   3: suminf.    1.56861 (9) obj. -5.1594 iterations 23
Cbc0038I Pass   4: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass   5: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass   6: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass   7: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass   8: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass   9: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  10: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  11: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  12: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  13: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  14: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  15: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  16: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  17: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  18: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  19: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  20: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  21: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  22: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  23: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  24: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  25: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  26: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  27: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  28: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  29: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  30: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  31: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Rounding solution of -6.73612 is better than previous of -1.71074

Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 130 rows 71 columns - 2 fixed gives 118, 69 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 118 rows 69 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -12.6283
Cbc0038I Pass  31: suminf.    3.86745 (19) obj. -12.6283 iterations 10
Cbc0038I Pass  32: suminf.    2.76557 (9) obj. -12.6283 iterations 30
Cbc0038I Pass  33: suminf.    2.76557 (9) obj. -12.6283 iterations 0
Cbc0038I Pass  34: suminf.    2.44666 (8) obj. -12.6283 iterations 16
Cbc0038I Pass  35: suminf.    2.45144 (7) obj. -12.6283 iterations 1
Cbc0038I Pass  36: suminf.    2.23544 (7) obj. -12.6283 iterations 8
Cbc0038I Pass  37: suminf.    2.04011 (7) obj. -12.6283 iterations 1
Cbc0038I Pass  38: suminf.    2.54851 (9) obj. -12.6283 iterations 9
Cbc0038I Pass  39: suminf.    5.64992 (17) obj. -12.6283 iterations 27
Cbc0038I Pass  40: suminf.    2.94202 (10) obj. -12.6283 iterations 14
Cbc0038I Pass  41: suminf.    2.94202 (10) obj. -12.6283 iterations 0
Cbc0038I Pass  42: suminf.    1.81862 (5) obj. -12.6283 iterations 14
Cbc0038I Pass  43: suminf.    1.34321 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  44: suminf.    1.32733 (4) obj. -12.6283 iterations 1
Cbc0038I Pass  45: suminf.    1.61140 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  46: suminf.    7.00424 (19) obj. -12.6283 iterations 36
Cbc0038I Pass  47: suminf.    2.02585 (7) obj. -12.6283 iterations 28
Cbc0038I Pass  48: suminf.    1.76172 (7) obj. -12.6283 iterations 7
Cbc0038I Pass  49: suminf.    1.73208 (12) obj. -12.6283 iterations 9
Cbc0038I Pass  50: suminf.    2.62101 (8) obj. -12.6283 iterations 18
Cbc0038I Pass  51: suminf.    2.37540 (9) obj. -12.6283 iterations 4
Cbc0038I Pass  52: suminf.    1.95251 (8) obj. -12.6283 iterations 2
Cbc0038I Pass  53: suminf.    1.59481 (5) obj. -12.6283 iterations 14
Cbc0038I Pass  54: suminf.    1.26057 (4) obj. -12.6283 iterations 10
Cbc0038I Pass  55: suminf.    1.46582 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  56: suminf.    1.31098 (4) obj. -12.6283 iterations 1
Cbc0038I Pass  57: suminf.    2.90742 (13) obj. -12.6283 iterations 20
Cbc0038I Pass  58: suminf.    2.29360 (7) obj. -12.6283 iterations 14
Cbc0038I Pass  59: suminf.    2.53065 (9) obj. -12.6283 iterations 15
Cbc0038I Pass  60: suminf.    2.53065 (9) obj. -12.6283 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 140 rows 76 columns - 0 fixed gives 140, 76 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 140 rows 76 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -6.73612 - took 0.03 seconds
Cbc0012I Integer solution of -7.403356 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - 2 fixed gives 117, 68 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 117 rows 68 columns - too large
Cbc0031I 30 added rows had average density of 81.7
Cbc0013I At root node, 30 cuts changed objective from -36.19649 to -28.450372 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 25424 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.157 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2430 row cuts average 100.6 elements, 0 column cuts (0 active)  in 0.179 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.187 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -7.403356 best solution, best possible -28.450372 (1.75 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 20 rows 19 columns
Cbc0038I Full problem 188 rows 101 columns, reduced to 66 rows 41 columns
Cbc0010I After 103 nodes, 15 on tree, -7.403356 best solution, best possible -28.450372 (2.45 seconds)
Cbc0001I Search completed - best objective -7.403356000000002, took 18344 iterations and 174 nodes (2.61 seconds)
Cbc0032I Strong branching done 1670 times (31609 iterations), fathomed 9 nodes and fixed 32 variables
Cbc0035I Maximum depth 41, 327 variables fixed on reduced cost
Total time (CPU seconds):       2.55   (Wallclock seconds):       2.62

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 135 (-69) rows, 147 (-55) columns and 3072 (-2581) elements
Clp1000I sum of infeasibilities 1.42293e-07 - average 1.05402e-09, 24 fixed columns
Coin0506I Presolve 113 (-22) rows, 123 (-24) columns and 2204 (-868) elements
Clp0006I 0  Obj 37.253159 Dual inf 6.1660912 (121)
Clp0029I End of values pass after 123 iterations
Clp0014I Perturbing problem by 0.001% of 1.9292497 - largest nonzero change 2.9889496e-05 ( 0.0025820745%) - largest zero change 2.9913638e-05
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Coin0511I After Postsolve, objective 55.940377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 55.940377
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Coin0511I After Postsolve, objective 55.940377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 55.94037724 - 0 iterations time 0.042, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 135 rows, 147 columns (147 integer (147 of which binary)) and 3075 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.660%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 50 integers unsatisfied sum - 6.58446
Cbc0038I Pass   1: suminf.    2.64524 (36) obj. -37.7454 iterations 21
Cbc0038I Pass   2: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass   3: suminf.    0.35605 (11) obj. 0.237026 iterations 25
Cbc0038I Solution found of 10.881
Cbc0038I Rounding solution of 5.83491 is better than previous of 10.881

Cbc0038I Before mini branch and bound, 95 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 12 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of 0.170577
Cbc0038I Pass   4: suminf.    2.64524 (36) obj. -37.7454 iterations 0
Cbc0038I Pass   5: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass   6: suminf.    1.24560 (23) obj. -16.4032 iterations 13
Cbc0038I Pass   7: suminf.    0.45923 (13) obj. -1.65979 iterations 10
Cbc0038I Pass   8: suminf.    0.74435 (8) obj. 0.170577 iterations 17
Cbc0038I Pass   9: suminf.    0.74435 (8) obj. 0.170577 iterations 0
Cbc0038I Pass  10: suminf.    0.68908 (3) obj. 0.170577 iterations 20
Cbc0038I Pass  11: suminf.    0.59421 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  12: suminf.    0.68908 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  13: suminf.    2.37324 (18) obj. 0.170577 iterations 41
Cbc0038I Pass  14: suminf.    1.36602 (15) obj. 0.170577 iterations 14
Cbc0038I Pass  15: suminf.    0.84245 (5) obj. 0.170577 iterations 26
Cbc0038I Pass  16: suminf.    0.84245 (5) obj. 0.170577 iterations 0
Cbc0038I Pass  17: suminf.    0.87696 (5) obj. 0.170577 iterations 11
Cbc0038I Pass  18: suminf.    0.87696 (5) obj. 0.170577 iterations 4
Cbc0038I Pass  19: suminf.    0.84245 (5) obj. 0.170577 iterations 9
Cbc0038I Pass  20: suminf.    1.19848 (10) obj. -5.92158 iterations 38
Cbc0038I Pass  21: suminf.    1.19848 (10) obj. -5.92158 iterations 17
Cbc0038I Pass  22: suminf.    1.05511 (5) obj. 0.170577 iterations 16
Cbc0038I Pass  23: suminf.    0.75783 (5) obj. 0.170577 iterations 3
Cbc0038I Pass  24: suminf.    0.69906 (9) obj. 0.170577 iterations 22
Cbc0038I Pass  25: suminf.    0.69906 (9) obj. 0.170577 iterations 0
Cbc0038I Pass  26: suminf.    0.67172 (4) obj. 0.170577 iterations 26
Cbc0038I Pass  27: suminf.    0.42152 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  28: suminf.    0.85232 (4) obj. 0.170577 iterations 6
Cbc0038I Pass  29: suminf.    0.58701 (2) obj. 0.170577 iterations 5
Cbc0038I Pass  30: suminf.    1.66229 (13) obj. 0.170577 iterations 23
Cbc0038I Pass  31: suminf.    1.45847 (13) obj. 0.170577 iterations 11
Cbc0038I Pass  32: suminf.    0.66902 (3) obj. 0.170577 iterations 15
Cbc0038I Pass  33: suminf.    0.42152 (3) obj. 0.170577 iterations 9
Cbc0038I Rounding solution of 4.70265 is better than previous of 5.83491

Cbc0038I Before mini branch and bound, 75 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 35 rows 46 columns
Cbc0038I Mini branch and bound improved solution from 4.70265 to 1.47974 (0.10 seconds)
Cbc0038I Round again with cutoff of -10.025
Cbc0038I Pass  33: suminf.    2.64524 (36) obj. -37.7454 iterations 0
Cbc0038I Pass  34: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass  35: suminf.    0.54841 (13) obj. -10.025 iterations 28
Cbc0038I Pass  36: suminf.    0.48736 (12) obj. -10.3529 iterations 2
Cbc0038I Pass  37: suminf.    1.41144 (12) obj. -10.025 iterations 20
Cbc0038I Pass  38: suminf.    1.41144 (12) obj. -10.025 iterations 2
Cbc0038I Pass  39: suminf.    1.80620 (8) obj. -10.025 iterations 22
Cbc0038I Pass  40: suminf.    1.80620 (8) obj. -10.025 iterations 2
Cbc0038I Pass  41: suminf.    1.86975 (8) obj. -10.025 iterations 8
Cbc0038I Pass  42: suminf.    1.86975 (8) obj. -10.025 iterations 1
Cbc0038I Pass  43: suminf.    1.34926 (7) obj. -10.025 iterations 11
Cbc0038I Pass  44: suminf.    0.83467 (7) obj. -10.025 iterations 5
Cbc0038I Pass  45: suminf.    1.96779 (8) obj. -10.025 iterations 8
Cbc0038I Pass  46: suminf.    1.96779 (8) obj. -10.025 iterations 0
Cbc0038I Pass  47: suminf.    1.25624 (7) obj. -10.025 iterations 6
Cbc0038I Pass  48: suminf.    1.25624 (7) obj. -10.025 iterations 0
Cbc0038I Pass  49: suminf.    1.96779 (8) obj. -10.025 iterations 12
Cbc0038I Pass  50: suminf.    1.95921 (17) obj. -10.025 iterations 30
Cbc0038I Pass  51: suminf.    1.95921 (17) obj. -10.025 iterations 4
Cbc0038I Pass  52: suminf.    2.37722 (11) obj. -10.025 iterations 24
Cbc0038I Pass  53: suminf.    2.37722 (11) obj. -10.025 iterations 0
Cbc0038I Pass  54: suminf.    2.15149 (10) obj. -10.025 iterations 9
Cbc0038I Pass  55: suminf.    2.15149 (10) obj. -10.025 iterations 0
Cbc0038I Pass  56: suminf.    2.40098 (10) obj. -10.025 iterations 11
Cbc0038I Pass  57: suminf.    1.78429 (10) obj. -10.025 iterations 12
Cbc0038I Pass  58: suminf.    1.34926 (8) obj. -10.025 iterations 8
Cbc0038I Pass  59: suminf.    1.13572 (8) obj. -10.025 iterations 7
Cbc0038I Pass  60: suminf.    1.98497 (9) obj. -10.025 iterations 9
Cbc0038I Pass  61: suminf.    1.63877 (13) obj. -10.025 iterations 26
Cbc0038I Pass  62: suminf.    1.63877 (13) obj. -10.025 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 83 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 14 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.12 seconds)
Cbc0038I After 0.12 seconds - Feasibility pump exiting with objective of 1.47974 - took 0.09 seconds
Cbc0012I Integer solution of 1.479737 found by feasibility pump after 0 iterations and 0 nodes (0.12 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 27 rows 32 columns
Cbc0031I 81 added rows had average density of 33.82716
Cbc0013I At root node, 81 cuts changed objective from -50.807496 to -14.773946 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 21928 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.173 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1986 row cuts average 142.8 elements, 0 column cuts (0 active)  in 0.242 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 45 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 1119 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.060 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.195 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1661 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.178 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 433 row cuts average 84.6 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 125 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.327 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1.479737 best solution, best possible -14.773946 (2.59 seconds)
Cbc0012I Integer solution of -4.950456 found by rounding after 7472 iterations and 1 nodes (2.60 seconds)
Cbc0004I Integer solution of -7.403356 found after 7516 iterations and 1 nodes (2.61 seconds)
Cbc0010I After 4 nodes, 3 on tree, -7.403356 best solution, best possible -13.85934 (3.34 seconds)
Cbc0010I After 31 nodes, 9 on tree, -7.403356 best solution, best possible -13.85934 (4.05 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 62 rows 75 columns
Cbc0010I After 86 nodes, 7 on tree, -7.403356 best solution, best possible -13.85934 (4.75 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 62 rows 75 columns
Cbc0010I After 143 nodes, 2 on tree, -7.403356 best solution, best possible -13.858285 (5.57 seconds)
Cbc0010I After 147 nodes, 6 on tree, -7.403356 best solution, best possible -13.858285 (6.34 seconds)
Cbc0010I After 186 nodes, 5 on tree, -7.403356 best solution, best possible -13.858285 (7.08 seconds)
Cbc0010I After 195 nodes, 4 on tree, -7.403356 best solution, best possible -13.858285 (7.81 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 71 rows 92 columns
Cbc0010I After 209 nodes, 2 on tree, -7.403356 best solution, best possible -13.711943 (8.60 seconds)
Cbc0010I After 245 nodes, 2 on tree, -7.403356 best solution, best possible -13.711943 (9.41 seconds)
Cbc0001I Search completed - best objective -7.403356000000002, took 20203 iterations and 250 nodes (9.55 seconds)
Cbc0032I Strong branching done 3002 times (71268 iterations), fathomed 19 nodes and fixed 11 variables
Cbc0035I Maximum depth 25, 580 variables fixed on reduced cost
Total time (CPU seconds):       9.22   (Wallclock seconds):       9.58

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 188 (-17) rows, 101 (-2) columns and 570 (-33) elements
Clp1000I sum of infeasibilities 0.000479777 - average 2.55201e-06, 18 fixed columns
Coin0506I Presolve 155 (-33) rows, 83 (-18) columns and 468 (-102) elements
Clp0029I End of values pass after 83 iterations
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Coin0511I After Postsolve, objective 36.19649, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Clp0000I Optimal - objective value 36.19649
Coin0511I After Postsolve, objective 36.19649, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 36.19649018 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 188 rows, 101 columns (100 integer (100 of which binary)) and 570 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.907%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 69 integers unsatisfied sum - 13.9925
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 11.0274 iterations 115
Cbc0038I Solution found of 11.0274
Cbc0038I Relaxing continuous gives 11.0274
Cbc0038I Rounding solution of -1.71074 is better than previous of 11.0274

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - 0 fixed gives 129, 70 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -5.1594
Cbc0038I Pass   2: suminf.    1.93864 (7) obj. -5.1594 iterations 13
Cbc0038I Pass   3: suminf.    1.56861 (9) obj. -5.1594 iterations 23
Cbc0038I Pass   4: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass   5: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass   6: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass   7: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass   8: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass   9: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  10: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  11: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  12: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  13: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  14: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  15: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  16: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  17: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  18: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  19: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  20: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  21: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  22: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  23: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  24: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Pass  25: suminf.    1.56861 (9) obj. -5.1594 iterations 0
Cbc0038I Pass  26: suminf.    1.17737 (4) obj. -5.1594 iterations 16
Cbc0038I Pass  27: suminf.    1.17737 (4) obj. -5.1594 iterations 0
Cbc0038I Pass  28: suminf.    0.82171 (3) obj. -5.1594 iterations 5
Cbc0038I Pass  29: suminf.    1.06706 (5) obj. -5.1594 iterations 7
Cbc0038I Pass  30: suminf.    1.04846 (6) obj. -5.1594 iterations 1
Cbc0038I Pass  31: suminf.    1.56861 (9) obj. -5.1594 iterations 17
Cbc0038I Rounding solution of -6.73612 is better than previous of -1.71074

Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 130 rows 71 columns - 2 fixed gives 118, 69 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 118 rows 69 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -12.6283
Cbc0038I Pass  31: suminf.    3.86745 (19) obj. -12.6283 iterations 10
Cbc0038I Pass  32: suminf.    2.76557 (9) obj. -12.6283 iterations 30
Cbc0038I Pass  33: suminf.    2.76557 (9) obj. -12.6283 iterations 0
Cbc0038I Pass  34: suminf.    2.44666 (8) obj. -12.6283 iterations 16
Cbc0038I Pass  35: suminf.    2.45144 (7) obj. -12.6283 iterations 1
Cbc0038I Pass  36: suminf.    2.23544 (7) obj. -12.6283 iterations 8
Cbc0038I Pass  37: suminf.    2.04011 (7) obj. -12.6283 iterations 1
Cbc0038I Pass  38: suminf.    2.54851 (9) obj. -12.6283 iterations 9
Cbc0038I Pass  39: suminf.    5.64992 (17) obj. -12.6283 iterations 27
Cbc0038I Pass  40: suminf.    2.94202 (10) obj. -12.6283 iterations 14
Cbc0038I Pass  41: suminf.    2.94202 (10) obj. -12.6283 iterations 0
Cbc0038I Pass  42: suminf.    1.81862 (5) obj. -12.6283 iterations 14
Cbc0038I Pass  43: suminf.    1.34321 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  44: suminf.    1.32733 (4) obj. -12.6283 iterations 1
Cbc0038I Pass  45: suminf.    1.61140 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  46: suminf.    7.00424 (19) obj. -12.6283 iterations 36
Cbc0038I Pass  47: suminf.    2.02585 (7) obj. -12.6283 iterations 28
Cbc0038I Pass  48: suminf.    1.76172 (7) obj. -12.6283 iterations 7
Cbc0038I Pass  49: suminf.    1.73208 (12) obj. -12.6283 iterations 9
Cbc0038I Pass  50: suminf.    2.62101 (8) obj. -12.6283 iterations 18
Cbc0038I Pass  51: suminf.    2.37540 (9) obj. -12.6283 iterations 4
Cbc0038I Pass  52: suminf.    1.95251 (8) obj. -12.6283 iterations 2
Cbc0038I Pass  53: suminf.    1.59481 (5) obj. -12.6283 iterations 14
Cbc0038I Pass  54: suminf.    1.26057 (4) obj. -12.6283 iterations 10
Cbc0038I Pass  55: suminf.    1.46582 (5) obj. -12.6283 iterations 6
Cbc0038I Pass  56: suminf.    1.31098 (4) obj. -12.6283 iterations 1
Cbc0038I Pass  57: suminf.    2.90742 (13) obj. -12.6283 iterations 20
Cbc0038I Pass  58: suminf.    2.29360 (7) obj. -12.6283 iterations 14
Cbc0038I Pass  59: suminf.    2.53065 (9) obj. -12.6283 iterations 15
Cbc0038I Pass  60: suminf.    2.53065 (9) obj. -12.6283 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 188 rows 101 columns, reduced to 140 rows 76 columns - 0 fixed gives 140, 76 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 140 rows 76 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -6.73612 - took 0.03 seconds
Cbc0012I Integer solution of -7.403356 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 129 rows 70 columns - 2 fixed gives 117, 68 - still too large
Cbc0038I Full problem 188 rows 101 columns, reduced to 117 rows 68 columns - too large
Cbc0031I 30 added rows had average density of 81.7
Cbc0013I At root node, 30 cuts changed objective from -36.19649 to -28.450372 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 25424 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.155 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2430 row cuts average 100.6 elements, 0 column cuts (0 active)  in 0.190 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.180 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -7.403356 best solution, best possible -28.450372 (1.72 seconds)
Cbc0038I Full problem 188 rows 101 columns, reduced to 20 rows 19 columns
Cbc0038I Full problem 188 rows 101 columns, reduced to 66 rows 41 columns
Cbc0010I After 113 nodes, 12 on tree, -7.403356 best solution, best possible -28.450372 (2.43 seconds)
Cbc0001I Search completed - best objective -7.403356000000002, took 18344 iterations and 174 nodes (2.57 seconds)
Cbc0032I Strong branching done 1670 times (31609 iterations), fathomed 9 nodes and fixed 32 variables
Cbc0035I Maximum depth 41, 327 variables fixed on reduced cost
Total time (CPU seconds):       2.52   (Wallclock seconds):       2.59

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 135 (-70) rows, 147 (-56) columns and 3072 (-2582) elements
Clp1000I sum of infeasibilities 1.42293e-07 - average 1.05402e-09, 24 fixed columns
Coin0506I Presolve 113 (-22) rows, 123 (-24) columns and 2204 (-868) elements
Clp0006I 0  Obj 37.253159 Dual inf 6.1660912 (121)
Clp0029I End of values pass after 123 iterations
Clp0014I Perturbing problem by 0.001% of 1.9292497 - largest nonzero change 2.9889496e-05 ( 0.0025820745%) - largest zero change 2.9913638e-05
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Coin0511I After Postsolve, objective 55.940377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 55.940377
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Clp0000I Optimal - objective value 55.940377
Coin0511I After Postsolve, objective 55.940377, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 55.94037724 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 135 rows, 147 columns (147 integer (147 of which binary)) and 3075 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.660%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 50 integers unsatisfied sum - 6.58446
Cbc0038I Pass   1: suminf.    2.64524 (36) obj. -37.7454 iterations 21
Cbc0038I Pass   2: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass   3: suminf.    0.35605 (11) obj. 0.237026 iterations 25
Cbc0038I Solution found of 10.881
Cbc0038I Rounding solution of 5.83491 is better than previous of 10.881

Cbc0038I Before mini branch and bound, 95 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 12 rows 14 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of 0.170577
Cbc0038I Pass   4: suminf.    2.64524 (36) obj. -37.7454 iterations 0
Cbc0038I Pass   5: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass   6: suminf.    1.24560 (23) obj. -16.4032 iterations 13
Cbc0038I Pass   7: suminf.    0.45923 (13) obj. -1.65979 iterations 10
Cbc0038I Pass   8: suminf.    0.74435 (8) obj. 0.170577 iterations 17
Cbc0038I Pass   9: suminf.    0.74435 (8) obj. 0.170577 iterations 0
Cbc0038I Pass  10: suminf.    0.68908 (3) obj. 0.170577 iterations 20
Cbc0038I Pass  11: suminf.    0.59421 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  12: suminf.    0.68908 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  13: suminf.    2.37324 (18) obj. 0.170577 iterations 41
Cbc0038I Pass  14: suminf.    1.36602 (15) obj. 0.170577 iterations 14
Cbc0038I Pass  15: suminf.    0.84245 (5) obj. 0.170577 iterations 26
Cbc0038I Pass  16: suminf.    0.84245 (5) obj. 0.170577 iterations 0
Cbc0038I Pass  17: suminf.    0.87696 (5) obj. 0.170577 iterations 11
Cbc0038I Pass  18: suminf.    0.87696 (5) obj. 0.170577 iterations 4
Cbc0038I Pass  19: suminf.    0.84245 (5) obj. 0.170577 iterations 9
Cbc0038I Pass  20: suminf.    1.19848 (10) obj. -5.92158 iterations 38
Cbc0038I Pass  21: suminf.    1.19848 (10) obj. -5.92158 iterations 17
Cbc0038I Pass  22: suminf.    1.05511 (5) obj. 0.170577 iterations 16
Cbc0038I Pass  23: suminf.    0.75783 (5) obj. 0.170577 iterations 3
Cbc0038I Pass  24: suminf.    0.69906 (9) obj. 0.170577 iterations 22
Cbc0038I Pass  25: suminf.    0.69906 (9) obj. 0.170577 iterations 0
Cbc0038I Pass  26: suminf.    0.67172 (4) obj. 0.170577 iterations 26
Cbc0038I Pass  27: suminf.    0.42152 (3) obj. 0.170577 iterations 4
Cbc0038I Pass  28: suminf.    0.85232 (4) obj. 0.170577 iterations 6
Cbc0038I Pass  29: suminf.    0.58701 (2) obj. 0.170577 iterations 5
Cbc0038I Pass  30: suminf.    1.66229 (13) obj. 0.170577 iterations 23
Cbc0038I Pass  31: suminf.    1.45847 (13) obj. 0.170577 iterations 11
Cbc0038I Pass  32: suminf.    0.66902 (3) obj. 0.170577 iterations 15
Cbc0038I Pass  33: suminf.    0.42152 (3) obj. 0.170577 iterations 9
Cbc0038I Rounding solution of 4.70265 is better than previous of 5.83491

Cbc0038I Before mini branch and bound, 75 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 35 rows 46 columns
Cbc0038I Mini branch and bound improved solution from 4.70265 to 1.47974 (0.09 seconds)
Cbc0038I Round again with cutoff of -10.025
Cbc0038I Pass  33: suminf.    2.64524 (36) obj. -37.7454 iterations 0
Cbc0038I Pass  34: suminf.    2.64524 (36) obj. -37.7454 iterations 1
Cbc0038I Pass  35: suminf.    0.54841 (13) obj. -10.025 iterations 28
Cbc0038I Pass  36: suminf.    0.48736 (12) obj. -10.3529 iterations 2
Cbc0038I Pass  37: suminf.    1.41144 (12) obj. -10.025 iterations 20
Cbc0038I Pass  38: suminf.    1.41144 (12) obj. -10.025 iterations 2
Cbc0038I Pass  39: suminf.    1.80620 (8) obj. -10.025 iterations 22
Cbc0038I Pass  40: suminf.    1.80620 (8) obj. -10.025 iterations 2
Cbc0038I Pass  41: suminf.    1.86975 (8) obj. -10.025 iterations 8
Cbc0038I Pass  42: suminf.    1.86975 (8) obj. -10.025 iterations 1
Cbc0038I Pass  43: suminf.    1.34926 (7) obj. -10.025 iterations 11
Cbc0038I Pass  44: suminf.    0.83467 (7) obj. -10.025 iterations 5
Cbc0038I Pass  45: suminf.    1.96779 (8) obj. -10.025 iterations 8
Cbc0038I Pass  46: suminf.    1.96779 (8) obj. -10.025 iterations 0
Cbc0038I Pass  47: suminf.    1.25624 (7) obj. -10.025 iterations 6
Cbc0038I Pass  48: suminf.    1.25624 (7) obj. -10.025 iterations 0
Cbc0038I Pass  49: suminf.    1.96779 (8) obj. -10.025 iterations 12
Cbc0038I Pass  50: suminf.    1.95921 (17) obj. -10.025 iterations 30
Cbc0038I Pass  51: suminf.    1.95921 (17) obj. -10.025 iterations 4
Cbc0038I Pass  52: suminf.    2.37722 (11) obj. -10.025 iterations 24
Cbc0038I Pass  53: suminf.    2.37722 (11) obj. -10.025 iterations 0
Cbc0038I Pass  54: suminf.    2.15149 (10) obj. -10.025 iterations 9
Cbc0038I Pass  55: suminf.    2.15149 (10) obj. -10.025 iterations 0
Cbc0038I Pass  56: suminf.    2.40098 (10) obj. -10.025 iterations 11
Cbc0038I Pass  57: suminf.    1.78429 (10) obj. -10.025 iterations 12
Cbc0038I Pass  58: suminf.    1.34926 (8) obj. -10.025 iterations 8
Cbc0038I Pass  59: suminf.    1.13572 (8) obj. -10.025 iterations 7
Cbc0038I Pass  60: suminf.    1.98497 (9) obj. -10.025 iterations 9
Cbc0038I Pass  61: suminf.    1.63877 (13) obj. -10.025 iterations 26
Cbc0038I Pass  62: suminf.    1.63877 (13) obj. -10.025 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 83 integers at bound fixed and 0 continuous
Cbc0038I Full problem 135 rows 147 columns, reduced to 14 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.12 seconds)
Cbc0038I After 0.12 seconds - Feasibility pump exiting with objective of 1.47974 - took 0.08 seconds
Cbc0012I Integer solution of 1.479737 found by feasibility pump after 0 iterations and 0 nodes (0.12 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 27 rows 32 columns
Cbc0031I 81 added rows had average density of 33.82716
Cbc0013I At root node, 81 cuts changed objective from -50.807496 to -14.773946 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 21928 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.169 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1986 row cuts average 142.8 elements, 0 column cuts (0 active)  in 0.254 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 45 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 1119 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.189 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1661 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.176 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 433 row cuts average 84.6 elements, 0 column cuts (0 active)  in 0.076 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 125 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.303 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 1.479737 best solution, best possible -14.773946 (2.59 seconds)
Cbc0012I Integer solution of -4.950456 found by rounding after 7472 iterations and 1 nodes (2.61 seconds)
Cbc0004I Integer solution of -7.403356 found after 7516 iterations and 1 nodes (2.61 seconds)
Cbc0010I After 4 nodes, 3 on tree, -7.403356 best solution, best possible -13.85934 (3.32 seconds)
Cbc0010I After 32 nodes, 10 on tree, -7.403356 best solution, best possible -13.85934 (4.03 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 62 rows 75 columns
Cbc0010I After 87 nodes, 8 on tree, -7.403356 best solution, best possible -13.85934 (4.74 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 62 rows 75 columns
Cbc0010I After 143 nodes, 2 on tree, -7.403356 best solution, best possible -13.858285 (5.52 seconds)
Cbc0010I After 147 nodes, 6 on tree, -7.403356 best solution, best possible -13.858285 (6.27 seconds)
Cbc0010I After 186 nodes, 5 on tree, -7.403356 best solution, best possible -13.858285 (7.00 seconds)
Cbc0010I After 195 nodes, 4 on tree, -7.403356 best solution, best possible -13.858285 (7.70 seconds)
Cbc0038I Full problem 135 rows 147 columns, reduced to 71 rows 92 columns
Cbc0010I After 209 nodes, 2 on tree, -7.403356 best solution, best possible -13.711943 (8.47 seconds)
Cbc0010I After 245 nodes, 2 on tree, -7.403356 best solution, best possible -13.711943 (9.26 seconds)
Cbc0001I Search completed - best objective -7.403356000000002, took 20203 iterations and 250 nodes (9.41 seconds)
Cbc0032I Strong branching done 3002 times (71268 iterations), fathomed 19 nodes and fixed 11 variables
Cbc0035I Maximum depth 25, 580 variables fixed on reduced cost
Total time (CPU seconds):       9.09   (Wallclock seconds):       9.43

