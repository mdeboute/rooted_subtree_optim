Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 137 (-18) rows, 75 (-3) columns and 416 (-37) elements
Clp1000I sum of infeasibilities 2.81037e-06 - average 2.05137e-08, 9 fixed columns
Coin0506I Presolve 119 (-18) rows, 66 (-9) columns and 362 (-54) elements
Clp0029I End of values pass after 66 iterations
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Coin0511I After Postsolve, objective 31.21535, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Coin0511I After Postsolve, objective 31.21535, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 31.21535027 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 137 rows, 75 columns (74 integer (74 of which binary)) and 416 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.192%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 47 integers unsatisfied sum - 8.59381
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 7.68006 iterations 54
Cbc0038I Solution found of 7.68006
Cbc0038I Relaxing continuous gives 7.68006
Cbc0038I Rounding solution of -2.52826 is better than previous of 7.68006

Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0038I Mini branch and bound improved solution from -2.52826 to -2.933 (0.05 seconds)
Cbc0038I Round again with cutoff of -5.76133
Cbc0038I Pass   2: suminf.    1.64056 (9) obj. -5.76133 iterations 12
Cbc0038I Pass   3: suminf.    1.27164 (5) obj. -5.76133 iterations 10
Cbc0038I Pass   4: suminf.    1.16404 (5) obj. -5.76133 iterations 3
Cbc0038I Pass   5: suminf.    0.75319 (5) obj. -5.76133 iterations 10
Cbc0038I Pass   6: suminf.    1.41619 (5) obj. -5.76133 iterations 5
Cbc0038I Pass   7: suminf.    1.22270 (4) obj. -5.76133 iterations 1
Cbc0038I Pass   8: suminf.    1.15940 (4) obj. -5.76133 iterations 6
Cbc0038I Pass   9: suminf.    1.15940 (4) obj. -5.76133 iterations 0
Cbc0038I Pass  10: suminf.    1.22270 (4) obj. -5.76133 iterations 1
Cbc0038I Pass  11: suminf.    2.17734 (6) obj. -5.76133 iterations 20
Cbc0038I Pass  12: suminf.    1.00694 (5) obj. -5.76133 iterations 7
Cbc0038I Pass  13: suminf.    1.00694 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  14: suminf.    1.66102 (5) obj. -5.76133 iterations 15
Cbc0038I Pass  15: suminf.    1.50630 (6) obj. -5.76133 iterations 10
Cbc0038I Pass  16: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  17: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I Pass  18: suminf.    1.76061 (5) obj. -5.76133 iterations 0
Cbc0038I Pass  19: suminf.    1.57922 (5) obj. -5.76133 iterations 6
Cbc0038I Pass  20: suminf.    1.50286 (5) obj. -5.76133 iterations 2
Cbc0038I Pass  21: suminf.    1.47590 (4) obj. -5.76133 iterations 10
Cbc0038I Pass  22: suminf.    1.50630 (6) obj. -5.76133 iterations 9
Cbc0038I Pass  23: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  24: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I Pass  25: suminf.    1.76061 (5) obj. -5.76133 iterations 0
Cbc0038I Pass  26: suminf.    1.57922 (5) obj. -5.76133 iterations 6
Cbc0038I Pass  27: suminf.    1.50286 (5) obj. -5.76133 iterations 2
Cbc0038I Pass  28: suminf.    1.47590 (4) obj. -5.76133 iterations 10
Cbc0038I Pass  29: suminf.    1.50630 (6) obj. -5.76133 iterations 9
Cbc0038I Pass  30: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  31: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -2.933 - took 0.07 seconds
Cbc0012I Integer solution of -2.933003 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0031I 24 added rows had average density of 60.041667
Cbc0013I At root node, 24 cuts changed objective from -31.21535 to -24.675405 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14585 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.086 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1732 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.090 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 138 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.086 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 204 row cuts average 74.7 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -2.933003 best solution, best possible -24.675405 (0.99 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 58 rows 34 columns
Cbc0012I Integer solution of -3.43758 found by RINS after 10134 iterations and 42 nodes (1.26 seconds)
Cbc0012I Integer solution of -3.610823 found by rounding after 10664 iterations and 58 nodes (1.29 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 14 rows 13 columns
Cbc0001I Search completed - best objective -3.610823000000003, took 11769 iterations and 110 nodes (1.36 seconds)
Cbc0032I Strong branching done 1036 times (17539 iterations), fathomed 8 nodes and fixed 59 variables
Cbc0035I Maximum depth 32, 221 variables fixed on reduced cost
Total time (CPU seconds):       1.33   (Wallclock seconds):       1.37

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 106 (-48) rows, 117 (-35) columns and 1945 (-1358) elements
Clp1000I sum of infeasibilities 1.69074e-07 - average 1.59503e-09, 17 fixed columns
Coin0506I Presolve 90 (-16) rows, 100 (-17) columns and 1468 (-477) elements
Clp0006I 0  Obj 32.847634 Dual inf 5.1862221 (99)
Clp0014I Perturbing problem by 0.001% of 1.9742719 - largest nonzero change 1.9158413e-05 ( 0.0014083952%) - largest zero change 2.9035072e-05
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Coin0511I After Postsolve, objective 46.444482, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 46.444482
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Coin0511I After Postsolve, objective 46.444482, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 46.44448203 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 106 rows, 117 columns (117 integer (117 of which binary)) and 1949 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.590%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 4.95351
Cbc0038I Pass   1: suminf.    3.84345 (34) obj. -37.5221 iterations 10
Cbc0038I Pass   2: suminf.    0.61826 (7) obj. -4.05115 iterations 27
Cbc0038I Solution found of 6.81883
Cbc0038I Rounding solution of 6.81524 is better than previous of 6.81883

Cbc0038I Before mini branch and bound, 80 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 4 rows 3 columns
Cbc0038I Mini branch and bound improved solution from 6.81524 to 3.89787 (0.03 seconds)
Cbc0038I Round again with cutoff of -0.534081
Cbc0038I Pass   3: suminf.    3.84345 (34) obj. -37.5221 iterations 0
Cbc0038I Pass   4: suminf.    0.65363 (7) obj. -0.534081 iterations 31
Cbc0038I Pass   5: suminf.    0.31894 (3) obj. -0.534081 iterations 11
Cbc0038I Pass   6: suminf.    1.23668 (3) obj. -0.534081 iterations 5
Cbc0038I Pass   7: suminf.    0.51260 (2) obj. -0.534081 iterations 4
Cbc0038I Pass   8: suminf.    1.68992 (11) obj. -0.677622 iterations 28
Cbc0038I Pass   9: suminf.    1.15574 (7) obj. -0.534081 iterations 9
Cbc0038I Pass  10: suminf.    0.87420 (3) obj. -0.534081 iterations 10
Cbc0038I Pass  11: suminf.    0.54100 (2) obj. -0.534081 iterations 10
Cbc0038I Pass  12: suminf.    0.77135 (3) obj. -0.534081 iterations 4
Cbc0038I Pass  13: suminf.    0.39289 (3) obj. -2.42639 iterations 1
Cbc0038I Pass  14: suminf.    0.77759 (2) obj. -0.534081 iterations 6
Cbc0038I Pass  15: suminf.    1.37744 (13) obj. -0.534081 iterations 25
Cbc0038I Pass  16: suminf.    1.26002 (13) obj. -0.534081 iterations 7
Cbc0038I Pass  17: suminf.    0.99772 (6) obj. -0.534081 iterations 30
Cbc0038I Pass  18: suminf.    0.55624 (4) obj. -2.26102 iterations 7
Cbc0038I Pass  19: suminf.    0.37557 (3) obj. -0.534081 iterations 7
Cbc0038I Pass  20: suminf.    0.24007 (3) obj. -0.534081 iterations 2
Cbc0038I Pass  21: suminf.    0.85474 (4) obj. -0.534081 iterations 4
Cbc0038I Pass  22: suminf.    0.85474 (4) obj. -0.534081 iterations 1
Cbc0038I Pass  23: suminf.    1.40464 (12) obj. -6.49173 iterations 26
Cbc0038I Pass  24: suminf.    1.40464 (12) obj. -6.49173 iterations 4
Cbc0038I Pass  25: suminf.    0.37557 (3) obj. -0.534081 iterations 16
Cbc0038I Pass  26: suminf.    0.24007 (3) obj. -0.534081 iterations 2
Cbc0038I Pass  27: suminf.    0.85474 (4) obj. -0.534081 iterations 4
Cbc0038I Pass  28: suminf.    0.85474 (4) obj. -0.534081 iterations 1
Cbc0038I Pass  29: suminf.    0.91953 (11) obj. -0.534081 iterations 21
Cbc0038I Pass  30: suminf.    0.91953 (11) obj. -0.534081 iterations 6
Cbc0038I Pass  31: suminf.    1.24277 (6) obj. -0.534081 iterations 17
Cbc0038I Pass  32: suminf.    1.24277 (6) obj. -0.534081 iterations 0
Cbc0038I Rounding solution of 3.13918 is better than previous of 3.89787

Cbc0038I Before mini branch and bound, 61 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 12 rows 20 columns
Cbc0038I Mini branch and bound improved solution from 3.13918 to 2.19795 (0.05 seconds)
Cbc0038I Round again with cutoff of -8.51141
Cbc0038I Pass  32: suminf.    3.84345 (34) obj. -37.5221 iterations 0
Cbc0038I Pass  33: suminf.    1.50024 (15) obj. -12.9494 iterations 19
Cbc0038I Pass  34: suminf.    1.07543 (6) obj. -8.51141 iterations 26
Cbc0038I Pass  35: suminf.    0.70315 (8) obj. -8.51141 iterations 2
Cbc0038I Pass  36: suminf.    0.91261 (4) obj. -8.51141 iterations 13
Cbc0038I Pass  37: suminf.    0.83172 (4) obj. -8.51141 iterations 3
Cbc0038I Pass  38: suminf.    0.91261 (4) obj. -8.51141 iterations 5
Cbc0038I Pass  39: suminf.    1.46331 (10) obj. -10.2441 iterations 17
Cbc0038I Pass  40: suminf.    1.05642 (8) obj. -9.39886 iterations 5
Cbc0038I Pass  41: suminf.    1.58447 (6) obj. -8.51141 iterations 13
Cbc0038I Pass  42: suminf.    1.24655 (6) obj. -8.51141 iterations 3
Cbc0038I Pass  43: suminf.    1.24655 (6) obj. -8.51141 iterations 1
Cbc0038I Pass  44: suminf.    1.58447 (6) obj. -8.51141 iterations 6
Cbc0038I Pass  45: suminf.    4.45410 (18) obj. -8.51141 iterations 22
Cbc0038I Pass  46: suminf.    1.35428 (12) obj. -8.51141 iterations 11
Cbc0038I Pass  47: suminf.    1.35428 (12) obj. -8.51141 iterations 0
Cbc0038I Pass  48: suminf.    1.90744 (7) obj. -8.51141 iterations 14
Cbc0038I Pass  49: suminf.    1.62977 (8) obj. -8.51141 iterations 2
Cbc0038I Pass  50: suminf.    0.57423 (4) obj. -8.51141 iterations 11
Cbc0038I Pass  51: suminf.    0.57423 (4) obj. -8.51141 iterations 0
Cbc0038I Pass  52: suminf.    1.19463 (4) obj. -8.51141 iterations 4
Cbc0038I Pass  53: suminf.    0.58474 (4) obj. -8.51141 iterations 3
Cbc0038I Pass  54: suminf.    0.57423 (4) obj. -8.51141 iterations 6
Cbc0038I Pass  55: suminf.    2.56310 (15) obj. -8.51141 iterations 21
Cbc0038I Pass  56: suminf.    2.56310 (15) obj. -8.51141 iterations 1
Cbc0038I Pass  57: suminf.    2.24216 (7) obj. -8.51141 iterations 23
Cbc0038I Pass  58: suminf.    1.76891 (8) obj. -8.51141 iterations 7
Cbc0038I Pass  59: suminf.    1.51599 (8) obj. -8.51141 iterations 10
Cbc0038I Pass  60: suminf.    1.51217 (8) obj. -8.51141 iterations 1
Cbc0038I Pass  61: suminf.    0.87162 (6) obj. -8.51141 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 9 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of 2.19795 - took 0.04 seconds
Cbc0012I Integer solution of 2.197947 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 106 rows 117 columns, reduced to 4 rows 4 columns
Cbc0012I Integer solution of 0.60137 found by DiveCoefficient after 4565 iterations and 0 nodes (2.22 seconds)
Cbc0031I 51 added rows had average density of 36.352941
Cbc0013I At root node, 51 cuts changed objective from -40.420717 to -13.714123 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 11370 row cuts average 2.0 elements, 0 column cuts (22 active)  in 0.110 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1814 row cuts average 110.0 elements, 0 column cuts (0 active)  in 0.136 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 38 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 799 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.066 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1133 row cuts average 7.3 elements, 0 column cuts (0 active)  in 0.088 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 358 row cuts average 68.4 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 108 row cuts average 15.2 elements, 0 column cuts (0 active)  in 0.634 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 0.60137 best solution, best possible -13.714123 (2.29 seconds)
Cbc0012I Integer solution of 0.378397 found by rounding after 4652 iterations and 1 nodes (2.30 seconds)
Cbc0016I Integer solution of -2.59318 found by strong branching after 4801 iterations and 1 nodes (2.32 seconds)
Cbc0012I Integer solution of -3.610823 found by DiveCoefficient after 4853 iterations and 2 nodes (2.33 seconds)
Cbc0010I After 23 nodes, 10 on tree, -3.610823 best solution, best possible -13.511147 (3.00 seconds)
Cbc0038I Full problem 106 rows 117 columns, reduced to 45 rows 54 columns
Cbc0038I Full problem 106 rows 117 columns, reduced to 51 rows 59 columns
Cbc0010I After 107 nodes, 7 on tree, -3.610823 best solution, best possible -13.511147 (3.70 seconds)
Cbc0001I Search completed - best objective -3.610823000000003, took 12101 iterations and 182 nodes (4.25 seconds)
Cbc0032I Strong branching done 2044 times (33951 iterations), fathomed 20 nodes and fixed 21 variables
Cbc0035I Maximum depth 21, 369 variables fixed on reduced cost
Total time (CPU seconds):       3.60   (Wallclock seconds):       4.27

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 137 (-18) rows, 75 (-3) columns and 416 (-37) elements
Clp1000I sum of infeasibilities 2.81037e-06 - average 2.05137e-08, 9 fixed columns
Coin0506I Presolve 119 (-18) rows, 66 (-9) columns and 362 (-54) elements
Clp0029I End of values pass after 66 iterations
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Coin0511I After Postsolve, objective 31.21535, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Clp0000I Optimal - objective value 31.21535
Coin0511I After Postsolve, objective 31.21535, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 31.21535027 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 137 rows, 75 columns (74 integer (74 of which binary)) and 416 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.192%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 47 integers unsatisfied sum - 8.59381
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 7.68006 iterations 54
Cbc0038I Solution found of 7.68006
Cbc0038I Relaxing continuous gives 7.68006
Cbc0038I Rounding solution of -2.52826 is better than previous of 7.68006

Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0038I Mini branch and bound improved solution from -2.52826 to -2.933 (0.04 seconds)
Cbc0038I Round again with cutoff of -5.76133
Cbc0038I Pass   2: suminf.    1.64056 (9) obj. -5.76133 iterations 12
Cbc0038I Pass   3: suminf.    1.27164 (5) obj. -5.76133 iterations 10
Cbc0038I Pass   4: suminf.    1.16404 (5) obj. -5.76133 iterations 3
Cbc0038I Pass   5: suminf.    0.75319 (5) obj. -5.76133 iterations 10
Cbc0038I Pass   6: suminf.    1.41619 (5) obj. -5.76133 iterations 5
Cbc0038I Pass   7: suminf.    1.22270 (4) obj. -5.76133 iterations 1
Cbc0038I Pass   8: suminf.    1.15940 (4) obj. -5.76133 iterations 6
Cbc0038I Pass   9: suminf.    1.15940 (4) obj. -5.76133 iterations 0
Cbc0038I Pass  10: suminf.    1.22270 (4) obj. -5.76133 iterations 1
Cbc0038I Pass  11: suminf.    2.17734 (6) obj. -5.76133 iterations 20
Cbc0038I Pass  12: suminf.    1.00694 (5) obj. -5.76133 iterations 7
Cbc0038I Pass  13: suminf.    1.00694 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  14: suminf.    1.66102 (5) obj. -5.76133 iterations 15
Cbc0038I Pass  15: suminf.    1.50630 (6) obj. -5.76133 iterations 10
Cbc0038I Pass  16: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  17: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I Pass  18: suminf.    1.76061 (5) obj. -5.76133 iterations 0
Cbc0038I Pass  19: suminf.    1.57922 (5) obj. -5.76133 iterations 6
Cbc0038I Pass  20: suminf.    1.50286 (5) obj. -5.76133 iterations 2
Cbc0038I Pass  21: suminf.    1.47590 (4) obj. -5.76133 iterations 10
Cbc0038I Pass  22: suminf.    1.50630 (6) obj. -5.76133 iterations 9
Cbc0038I Pass  23: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  24: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I Pass  25: suminf.    1.76061 (5) obj. -5.76133 iterations 0
Cbc0038I Pass  26: suminf.    1.57922 (5) obj. -5.76133 iterations 6
Cbc0038I Pass  27: suminf.    1.50286 (5) obj. -5.76133 iterations 2
Cbc0038I Pass  28: suminf.    1.47590 (4) obj. -5.76133 iterations 10
Cbc0038I Pass  29: suminf.    1.50630 (6) obj. -5.76133 iterations 9
Cbc0038I Pass  30: suminf.    1.40713 (5) obj. -5.76133 iterations 1
Cbc0038I Pass  31: suminf.    1.76061 (5) obj. -5.76133 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -2.933 - took 0.07 seconds
Cbc0012I Integer solution of -2.933003 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 85 rows 48 columns
Cbc0031I 24 added rows had average density of 60.041667
Cbc0013I At root node, 24 cuts changed objective from -31.21535 to -24.675405 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14585 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.097 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1732 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.102 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 138 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.095 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 204 row cuts average 74.7 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -2.933003 best solution, best possible -24.675405 (1.10 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 58 rows 34 columns
Cbc0012I Integer solution of -3.43758 found by RINS after 10134 iterations and 42 nodes (1.42 seconds)
Cbc0012I Integer solution of -3.610823 found by rounding after 10664 iterations and 58 nodes (1.45 seconds)
Cbc0038I Full problem 137 rows 75 columns, reduced to 14 rows 13 columns
Cbc0001I Search completed - best objective -3.610823000000003, took 11769 iterations and 110 nodes (1.52 seconds)
Cbc0032I Strong branching done 1036 times (17539 iterations), fathomed 8 nodes and fixed 59 variables
Cbc0035I Maximum depth 32, 221 variables fixed on reduced cost
Total time (CPU seconds):       1.47   (Wallclock seconds):       1.53

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 106 (-49) rows, 117 (-36) columns and 1945 (-1359) elements
Clp1000I sum of infeasibilities 1.69074e-07 - average 1.59503e-09, 17 fixed columns
Coin0506I Presolve 90 (-16) rows, 100 (-17) columns and 1468 (-477) elements
Clp0006I 0  Obj 32.847634 Dual inf 5.1862221 (99)
Clp0014I Perturbing problem by 0.001% of 1.9742719 - largest nonzero change 1.9158413e-05 ( 0.0014083952%) - largest zero change 2.9035072e-05
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Coin0511I After Postsolve, objective 46.444482, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 46.444482
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Clp0000I Optimal - objective value 46.444482
Coin0511I After Postsolve, objective 46.444482, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 46.44448203 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 106 rows, 117 columns (117 integer (117 of which binary)) and 1949 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.590%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 4.95351
Cbc0038I Pass   1: suminf.    3.84345 (34) obj. -37.5221 iterations 10
Cbc0038I Pass   2: suminf.    0.61826 (7) obj. -4.05115 iterations 27
Cbc0038I Solution found of 6.81883
Cbc0038I Rounding solution of 6.81524 is better than previous of 6.81883

Cbc0038I Before mini branch and bound, 80 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 4 rows 3 columns
Cbc0038I Mini branch and bound improved solution from 6.81524 to 3.89787 (0.03 seconds)
Cbc0038I Round again with cutoff of -0.534081
Cbc0038I Pass   3: suminf.    3.84345 (34) obj. -37.5221 iterations 0
Cbc0038I Pass   4: suminf.    0.65363 (7) obj. -0.534081 iterations 31
Cbc0038I Pass   5: suminf.    0.31894 (3) obj. -0.534081 iterations 11
Cbc0038I Pass   6: suminf.    1.23668 (3) obj. -0.534081 iterations 5
Cbc0038I Pass   7: suminf.    0.51260 (2) obj. -0.534081 iterations 4
Cbc0038I Pass   8: suminf.    1.68992 (11) obj. -0.677622 iterations 28
Cbc0038I Pass   9: suminf.    1.15574 (7) obj. -0.534081 iterations 9
Cbc0038I Pass  10: suminf.    0.87420 (3) obj. -0.534081 iterations 10
Cbc0038I Pass  11: suminf.    0.54100 (2) obj. -0.534081 iterations 10
Cbc0038I Pass  12: suminf.    0.77135 (3) obj. -0.534081 iterations 4
Cbc0038I Pass  13: suminf.    0.39289 (3) obj. -2.42639 iterations 1
Cbc0038I Pass  14: suminf.    0.77759 (2) obj. -0.534081 iterations 6
Cbc0038I Pass  15: suminf.    1.37744 (13) obj. -0.534081 iterations 25
Cbc0038I Pass  16: suminf.    1.26002 (13) obj. -0.534081 iterations 7
Cbc0038I Pass  17: suminf.    0.99772 (6) obj. -0.534081 iterations 30
Cbc0038I Pass  18: suminf.    0.55624 (4) obj. -2.26102 iterations 7
Cbc0038I Pass  19: suminf.    0.37557 (3) obj. -0.534081 iterations 7
Cbc0038I Pass  20: suminf.    0.24007 (3) obj. -0.534081 iterations 2
Cbc0038I Pass  21: suminf.    0.85474 (4) obj. -0.534081 iterations 4
Cbc0038I Pass  22: suminf.    0.85474 (4) obj. -0.534081 iterations 1
Cbc0038I Pass  23: suminf.    1.40464 (12) obj. -6.49173 iterations 26
Cbc0038I Pass  24: suminf.    1.40464 (12) obj. -6.49173 iterations 4
Cbc0038I Pass  25: suminf.    0.37557 (3) obj. -0.534081 iterations 16
Cbc0038I Pass  26: suminf.    0.24007 (3) obj. -0.534081 iterations 2
Cbc0038I Pass  27: suminf.    0.85474 (4) obj. -0.534081 iterations 4
Cbc0038I Pass  28: suminf.    0.85474 (4) obj. -0.534081 iterations 1
Cbc0038I Pass  29: suminf.    0.91953 (11) obj. -0.534081 iterations 21
Cbc0038I Pass  30: suminf.    0.91953 (11) obj. -0.534081 iterations 6
Cbc0038I Pass  31: suminf.    1.24277 (6) obj. -0.534081 iterations 17
Cbc0038I Pass  32: suminf.    1.24277 (6) obj. -0.534081 iterations 0
Cbc0038I Rounding solution of 3.13918 is better than previous of 3.89787

Cbc0038I Before mini branch and bound, 61 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 12 rows 20 columns
Cbc0038I Mini branch and bound improved solution from 3.13918 to 2.19795 (0.05 seconds)
Cbc0038I Round again with cutoff of -8.51141
Cbc0038I Pass  32: suminf.    3.84345 (34) obj. -37.5221 iterations 0
Cbc0038I Pass  33: suminf.    1.50024 (15) obj. -12.9494 iterations 19
Cbc0038I Pass  34: suminf.    1.07543 (6) obj. -8.51141 iterations 26
Cbc0038I Pass  35: suminf.    0.70315 (8) obj. -8.51141 iterations 2
Cbc0038I Pass  36: suminf.    0.91261 (4) obj. -8.51141 iterations 13
Cbc0038I Pass  37: suminf.    0.83172 (4) obj. -8.51141 iterations 3
Cbc0038I Pass  38: suminf.    0.91261 (4) obj. -8.51141 iterations 5
Cbc0038I Pass  39: suminf.    1.46331 (10) obj. -10.2441 iterations 17
Cbc0038I Pass  40: suminf.    1.05642 (8) obj. -9.39886 iterations 5
Cbc0038I Pass  41: suminf.    1.58447 (6) obj. -8.51141 iterations 13
Cbc0038I Pass  42: suminf.    1.24655 (6) obj. -8.51141 iterations 3
Cbc0038I Pass  43: suminf.    1.24655 (6) obj. -8.51141 iterations 1
Cbc0038I Pass  44: suminf.    1.58447 (6) obj. -8.51141 iterations 6
Cbc0038I Pass  45: suminf.    4.45410 (18) obj. -8.51141 iterations 22
Cbc0038I Pass  46: suminf.    1.35428 (12) obj. -8.51141 iterations 11
Cbc0038I Pass  47: suminf.    1.35428 (12) obj. -8.51141 iterations 0
Cbc0038I Pass  48: suminf.    1.90744 (7) obj. -8.51141 iterations 14
Cbc0038I Pass  49: suminf.    1.62977 (8) obj. -8.51141 iterations 2
Cbc0038I Pass  50: suminf.    0.57423 (4) obj. -8.51141 iterations 11
Cbc0038I Pass  51: suminf.    0.57423 (4) obj. -8.51141 iterations 0
Cbc0038I Pass  52: suminf.    1.19463 (4) obj. -8.51141 iterations 4
Cbc0038I Pass  53: suminf.    0.58474 (4) obj. -8.51141 iterations 3
Cbc0038I Pass  54: suminf.    0.57423 (4) obj. -8.51141 iterations 6
Cbc0038I Pass  55: suminf.    2.56310 (15) obj. -8.51141 iterations 21
Cbc0038I Pass  56: suminf.    2.56310 (15) obj. -8.51141 iterations 1
Cbc0038I Pass  57: suminf.    2.24216 (7) obj. -8.51141 iterations 23
Cbc0038I Pass  58: suminf.    1.76891 (8) obj. -8.51141 iterations 7
Cbc0038I Pass  59: suminf.    1.51599 (8) obj. -8.51141 iterations 10
Cbc0038I Pass  60: suminf.    1.51217 (8) obj. -8.51141 iterations 1
Cbc0038I Pass  61: suminf.    0.87162 (6) obj. -8.51141 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 62 integers at bound fixed and 0 continuous
Cbc0038I Full problem 106 rows 117 columns, reduced to 9 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of 2.19795 - took 0.05 seconds
Cbc0012I Integer solution of 2.197947 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 106 rows 117 columns, reduced to 4 rows 4 columns
Cbc0012I Integer solution of 0.60137 found by DiveCoefficient after 4565 iterations and 0 nodes (2.50 seconds)
Cbc0031I 51 added rows had average density of 36.352941
Cbc0013I At root node, 51 cuts changed objective from -40.420717 to -13.714123 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 11370 row cuts average 2.0 elements, 0 column cuts (22 active)  in 0.127 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1814 row cuts average 110.0 elements, 0 column cuts (0 active)  in 0.153 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 38 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 799 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.071 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1133 row cuts average 7.3 elements, 0 column cuts (0 active)  in 0.092 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 358 row cuts average 68.4 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 108 row cuts average 15.2 elements, 0 column cuts (0 active)  in 0.694 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 0.60137 best solution, best possible -13.714123 (2.59 seconds)
Cbc0012I Integer solution of 0.378397 found by rounding after 4652 iterations and 1 nodes (2.59 seconds)
Cbc0016I Integer solution of -2.59318 found by strong branching after 4801 iterations and 1 nodes (2.62 seconds)
Cbc0012I Integer solution of -3.610823 found by DiveCoefficient after 4853 iterations and 2 nodes (2.63 seconds)
Cbc0010I After 17 nodes, 7 on tree, -3.610823 best solution, best possible -13.511147 (3.31 seconds)
Cbc0038I Full problem 106 rows 117 columns, reduced to 45 rows 54 columns
Cbc0038I Full problem 106 rows 117 columns, reduced to 51 rows 59 columns
Cbc0010I After 95 nodes, 6 on tree, -3.610823 best solution, best possible -13.511147 (4.02 seconds)
Cbc0010I After 161 nodes, 8 on tree, -3.610823 best solution, best possible -13.511147 (4.72 seconds)
Cbc0001I Search completed - best objective -3.610823000000003, took 12101 iterations and 182 nodes (4.84 seconds)
Cbc0032I Strong branching done 2044 times (33951 iterations), fathomed 20 nodes and fixed 21 variables
Cbc0035I Maximum depth 21, 369 variables fixed on reduced cost
Total time (CPU seconds):       4.01   (Wallclock seconds):       4.86

