Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 131 (-24) rows, 74 (-4) columns and 402 (-51) elements
Clp1000I sum of infeasibilities 4.92246e-05 - average 3.7576e-07, 22 fixed columns
Coin0506I Presolve 90 (-41) rows, 51 (-23) columns and 275 (-127) elements
Clp0029I End of values pass after 51 iterations
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.40056301 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 131 rows, 74 columns (73 integer (73 of which binary)) and 402 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.170%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 8.19593
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.0593 iterations 48
Cbc0038I Solution found of -25.0593
Cbc0038I Relaxing continuous gives -25.0593
Cbc0038I Rounding solution of -50.9787 is better than previous of -25.0593

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -50.9787 to -64.1421 (0.03 seconds)
Cbc0038I Round again with cutoff of -66.068
Cbc0038I Pass   2: suminf.    2.50878 (8) obj. -66.068 iterations 14
Cbc0038I Pass   3: suminf.    2.24401 (6) obj. -66.068 iterations 8
Cbc0038I Pass   4: suminf.    2.24401 (6) obj. -66.068 iterations 0
Cbc0038I Pass   5: suminf.    1.81491 (5) obj. -66.068 iterations 6
Cbc0038I Pass   6: suminf.    1.44602 (4) obj. -66.068 iterations 6
Cbc0038I Pass   7: suminf.    1.44602 (4) obj. -66.068 iterations 0
Cbc0038I Pass   8: suminf.    2.02156 (5) obj. -66.068 iterations 4
Cbc0038I Pass   9: suminf.    1.31547 (4) obj. -66.068 iterations 3
Cbc0038I Pass  10: suminf.    1.45283 (4) obj. -66.068 iterations 5
Cbc0038I Pass  11: suminf.    3.62767 (11) obj. -66.068 iterations 20
Cbc0038I Pass  12: suminf.    1.69102 (5) obj. -66.068 iterations 23
Cbc0038I Pass  13: suminf.    1.67437 (5) obj. -66.068 iterations 8
Cbc0038I Pass  14: suminf.    0.74623 (2) obj. -66.068 iterations 8
Cbc0038I Pass  15: suminf.    0.74623 (2) obj. -66.068 iterations 0
Cbc0038I Pass  16: suminf.    0.74878 (2) obj. -66.068 iterations 2
Cbc0038I Pass  17: suminf.    2.44498 (6) obj. -66.068 iterations 13
Cbc0038I Pass  18: suminf.    1.92330 (7) obj. -66.068 iterations 13
Cbc0038I Pass  19: suminf.    1.92330 (7) obj. -66.068 iterations 0
Cbc0038I Pass  20: suminf.    2.21185 (5) obj. -66.068 iterations 7
Cbc0038I Pass  21: suminf.    0.92475 (3) obj. -66.068 iterations 5
Cbc0038I Pass  22: suminf.    0.92475 (3) obj. -66.068 iterations 0
Cbc0038I Pass  23: suminf.    1.52127 (4) obj. -66.068 iterations 4
Cbc0038I Pass  24: suminf.    0.92475 (3) obj. -66.068 iterations 4
Cbc0038I Pass  25: suminf.    5.25510 (16) obj. -66.068 iterations 28
Cbc0038I Pass  26: suminf.    0.21336 (4) obj. -66.068 iterations 26
Cbc0038I Pass  27: suminf.    0.21289 (2) obj. -66.068 iterations 3
Cbc0038I Pass  28: suminf.    0.61176 (3) obj. -66.068 iterations 4
Cbc0038I Pass  29: suminf.    0.47853 (2) obj. -66.068 iterations 1
Cbc0038I Pass  30: suminf.    0.21666 (2) obj. -66.068 iterations 3
Cbc0038I Pass  31: suminf.    0.33297 (2) obj. -66.068 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 64 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -64.1421 - took 0.04 seconds
Cbc0012I Integer solution of -64.142104 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0031I 19 added rows had average density of 34.157895
Cbc0013I At root node, 19 cuts changed objective from -83.400563 to -71.11059 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6037 row cuts average 5.3 elements, 3 column cuts (3 active)  in 0.067 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1824 row cuts average 53.4 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 321 row cuts average 6.3 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 154 row cuts average 45.6 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0001I Search completed - best objective -64.14210399999999, took 5701 iterations and 24 nodes (0.62 seconds)
Cbc0032I Strong branching done 352 times (5968 iterations), fathomed 2 nodes and fixed 14 variables
Cbc0035I Maximum depth 6, 101 variables fixed on reduced cost
Total time (CPU seconds):       0.61   (Wallclock seconds):       0.63

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 113 (-41) rows, 128 (-24) columns and 2311 (-992) elements
Clp1000I sum of infeasibilities 2.63814e-07 - average 2.33464e-09, 29 fixed columns
Coin0506I Presolve 90 (-23) rows, 99 (-29) columns and 1250 (-1061) elements
Clp0006I 0  Obj 84.749457 Dual inf 7.0376626 (96)
Clp0029I End of values pass after 99 iterations
Clp0014I Perturbing problem by 0.001% of 2.1851856 - largest nonzero change 1.699018e-05 ( 0.001262127%) - largest zero change 2.8862837e-05
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Coin0511I After Postsolve, objective 98.078101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 98.078101 Dual inf 4.935203 (1)
Clp0014I Perturbing problem by 0.001% of 1.8723242 - largest nonzero change 2.973913e-05 ( 0.0016580886%) - largest zero change 2.8245361e-05
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Coin0511I After Postsolve, objective 98.078101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 98.07810058 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 113 rows, 128 columns (128 integer (128 of which binary)) and 2313 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.639%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 53 integers unsatisfied sum - 4.81918
Cbc0038I Pass   1: suminf.    1.64716 (35) obj. -77.4524 iterations 24
Cbc0038I Pass   2: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass   3: suminf.    0.20988 (7) obj. -37.0009 iterations 28
Cbc0038I Solution found of -29.2421
Cbc0038I Rounding solution of -29.8141 is better than previous of -29.2421

Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 4 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -29.8141 to -33.01 (0.03 seconds)
Cbc0038I Round again with cutoff of -38.6336
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass   5: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass   6: suminf.    0.92519 (25) obj. -57.1577 iterations 10
Cbc0038I Pass   7: suminf.    0.38187 (12) obj. -41.8289 iterations 13
Cbc0038I Pass   8: suminf.    0.60480 (2) obj. -38.6336 iterations 17
Cbc0038I Pass   9: suminf.    0.60480 (2) obj. -38.6336 iterations 3
Cbc0038I Pass  10: suminf.    0.38357 (2) obj. -38.6336 iterations 2
Cbc0038I Pass  11: suminf.    1.55494 (17) obj. -38.6336 iterations 30
Cbc0038I Pass  12: suminf.    1.17942 (16) obj. -38.6336 iterations 6
Cbc0038I Pass  13: suminf.    0.89425 (9) obj. -38.6336 iterations 13
Cbc0038I Pass  14: suminf.    0.89425 (9) obj. -38.6336 iterations 2
Cbc0038I Pass  15: suminf.    1.35033 (8) obj. -38.6336 iterations 13
Cbc0038I Pass  16: suminf.    1.00804 (8) obj. -38.6336 iterations 2
Cbc0038I Pass  17: suminf.    1.19259 (6) obj. -38.6336 iterations 11
Cbc0038I Pass  18: suminf.    0.84652 (6) obj. -38.6336 iterations 3
Cbc0038I Pass  19: suminf.    1.80930 (14) obj. -38.6336 iterations 31
Cbc0038I Pass  20: suminf.    0.83677 (8) obj. -38.6336 iterations 9
Cbc0038I Pass  21: suminf.    0.56302 (4) obj. -38.6336 iterations 11
Cbc0038I Pass  22: suminf.    0.56302 (4) obj. -38.6336 iterations 0
Cbc0038I Pass  23: suminf.    0.63540 (3) obj. -38.6336 iterations 6
Cbc0038I Pass  24: suminf.    0.37096 (3) obj. -40.0318 iterations 2
Cbc0038I Pass  25: suminf.    0.72829 (3) obj. -38.6336 iterations 4
Cbc0038I Pass  26: suminf.    0.67948 (7) obj. -38.6336 iterations 4
Cbc0038I Pass  27: suminf.    0.93246 (9) obj. -38.6336 iterations 8
Cbc0038I Pass  28: suminf.    0.40969 (7) obj. -38.6336 iterations 4
Cbc0038I Pass  29: suminf.    0.61453 (5) obj. -38.6336 iterations 11
Cbc0038I Pass  30: suminf.    0.49977 (9) obj. -38.6336 iterations 5
Cbc0038I Pass  31: suminf.    1.50642 (9) obj. -38.6336 iterations 11
Cbc0038I Pass  32: suminf.    1.04445 (6) obj. -39.5099 iterations 3
Cbc0038I Pass  33: suminf.    0.96445 (6) obj. -38.6336 iterations 8
Cbc0038I Rounding solution of -58.5702 is better than previous of -33.01

Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 49 rows 58 columns
Cbc0038I Mini branch and bound improved solution from -58.5702 to -63.1595 (0.06 seconds)
Cbc0038I Round again with cutoff of -68.3766
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass  34: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass  35: suminf.    2.47047 (32) obj. -68.3766 iterations 44
Cbc0038I Pass  36: suminf.    2.45021 (31) obj. -68.3766 iterations 7
Cbc0038I Pass  37: suminf.    2.56074 (28) obj. -68.3766 iterations 24
Cbc0038I Pass  38: suminf.    2.29126 (28) obj. -68.3766 iterations 7
Cbc0038I Pass  39: suminf.    2.56074 (28) obj. -68.3766 iterations 6
Cbc0038I Pass  40: suminf.    3.09747 (30) obj. -68.3766 iterations 17
Cbc0038I Pass  41: suminf.    2.15187 (30) obj. -68.3766 iterations 12
Cbc0038I Pass  42: suminf.    2.21399 (30) obj. -68.3766 iterations 6
Cbc0038I Pass  43: suminf.    2.09225 (30) obj. -68.3766 iterations 4
Cbc0038I Pass  44: suminf.    2.64368 (30) obj. -68.3766 iterations 9
Cbc0038I Pass  45: suminf.    2.64368 (30) obj. -68.3766 iterations 2
Cbc0038I Pass  46: suminf.    2.70495 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  47: suminf.    2.70495 (30) obj. -68.3766 iterations 3
Cbc0038I Pass  48: suminf.    2.64368 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  49: suminf.    2.85001 (30) obj. -68.3766 iterations 14
Cbc0038I Pass  50: suminf.    2.85001 (30) obj. -68.3766 iterations 3
Cbc0038I Pass  51: suminf.    3.08317 (32) obj. -68.3766 iterations 18
Cbc0038I Pass  52: suminf.    2.62340 (32) obj. -68.3766 iterations 4
Cbc0038I Pass  53: suminf.    3.10395 (31) obj. -68.3766 iterations 6
Cbc0038I Pass  54: suminf.    4.42103 (33) obj. -68.3766 iterations 31
Cbc0038I Pass  55: suminf.    4.33737 (37) obj. -68.3766 iterations 7
Cbc0038I Pass  56: suminf.    3.39799 (30) obj. -68.3766 iterations 13
Cbc0038I Pass  57: suminf.    3.12457 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  58: suminf.    3.39799 (30) obj. -68.3766 iterations 6
Cbc0038I Pass  59: suminf.    4.50071 (34) obj. -68.3766 iterations 26
Cbc0038I Pass  60: suminf.    4.50071 (34) obj. -68.3766 iterations 2
Cbc0038I Pass  61: suminf.    3.58243 (35) obj. -68.3766 iterations 26
Cbc0038I Pass  62: suminf.    2.87726 (33) obj. -68.3766 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 60 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 50 rows 55 columns
Cbc0038I Mini branch and bound improved solution from -63.1595 to -64.1421 (0.08 seconds)
Cbc0038I Round again with cutoff of -74.637
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 4
Cbc0038I Pass  62: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass  63: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass  64: suminf.    1.83613 (26) obj. -74.637 iterations 29
Cbc0038I Pass  65: suminf.    1.46782 (27) obj. -74.637 iterations 6
Cbc0038I Pass  66: suminf.    3.25517 (38) obj. -74.637 iterations 29
Cbc0038I Pass  67: suminf.    3.25517 (38) obj. -74.637 iterations 2
Cbc0038I Pass  68: suminf.    3.20640 (35) obj. -74.637 iterations 11
Cbc0038I Pass  69: suminf.    3.17432 (38) obj. -74.637 iterations 3
Cbc0038I Pass  70: suminf.    3.22567 (35) obj. -74.637 iterations 15
Cbc0038I Pass  71: suminf.    3.19444 (38) obj. -74.637 iterations 3
Cbc0038I Pass  72: suminf.    3.30033 (35) obj. -74.637 iterations 14
Cbc0038I Pass  73: suminf.    2.86876 (35) obj. -74.637 iterations 5
Cbc0038I Pass  74: suminf.    3.30033 (35) obj. -74.637 iterations 12
Cbc0038I Pass  75: suminf.    2.91072 (35) obj. -74.637 iterations 7
Cbc0038I Pass  76: suminf.    3.30033 (35) obj. -74.637 iterations 6
Cbc0038I Pass  77: suminf.    2.90100 (36) obj. -74.637 iterations 12
Cbc0038I Pass  78: suminf.    2.90100 (36) obj. -74.637 iterations 3
Cbc0038I Pass  79: suminf.    2.88618 (36) obj. -74.637 iterations 5
Cbc0038I Pass  80: suminf.    2.88618 (36) obj. -74.637 iterations 2
Cbc0038I Pass  81: suminf.    2.91415 (36) obj. -74.637 iterations 5
Cbc0038I Pass  82: suminf.    2.91415 (36) obj. -74.637 iterations 2
Cbc0038I Pass  83: suminf.    2.88618 (36) obj. -74.637 iterations 3
Cbc0038I Pass  84: suminf.    2.77389 (47) obj. -74.637 iterations 16
Cbc0038I Pass  85: suminf.    2.55436 (46) obj. -74.637 iterations 6
Cbc0038I Pass  86: suminf.    5.06437 (43) obj. -74.637 iterations 19
Cbc0038I Pass  87: suminf.    5.06437 (43) obj. -74.637 iterations 2
Cbc0038I Pass  88: suminf.    5.38948 (44) obj. -74.637 iterations 7
Cbc0038I Pass  89: suminf.    3.46394 (39) obj. -74.637 iterations 9
Cbc0038I Pass  90: suminf.    3.11522 (40) obj. -74.637 iterations 7
Cbc0038I Pass  91: suminf.    3.11731 (39) obj. -74.637 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -64.1421 - took 0.07 seconds
Cbc0012I Integer solution of -64.142104 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 113 rows 128 columns, reduced to 33 rows 37 columns
Cbc0031I 52 added rows had average density of 9.8461538
Cbc0013I At root node, 52 cuts changed objective from -89.244607 to -65.768791 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 1530 row cuts average 10.6 elements, 8 column cuts (38 active)  in 0.022 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 81 row cuts average 45.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 46 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 23 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 195 row cuts average 19.3 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 275 row cuts average 53.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 59 row cuts average 20.2 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -64.142104 best solution, best possible -65.768791 (0.28 seconds)
Cbc0001I Search completed - best objective -64.14210399999999, took 814 iterations and 4 nodes (0.57 seconds)
Cbc0032I Strong branching done 38 times (400 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 32 variables fixed on reduced cost
Total time (CPU seconds):       0.43   (Wallclock seconds):       0.58

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 131 (-24) rows, 74 (-4) columns and 402 (-51) elements
Clp1000I sum of infeasibilities 4.92246e-05 - average 3.7576e-07, 22 fixed columns
Coin0506I Presolve 90 (-41) rows, 51 (-23) columns and 275 (-127) elements
Clp0029I End of values pass after 51 iterations
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Clp0000I Optimal - objective value 83.400563
Coin0511I After Postsolve, objective 83.400563, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 83.40056301 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 131 rows, 74 columns (73 integer (73 of which binary)) and 402 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.170%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 27 integers unsatisfied sum - 8.19593
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.0593 iterations 48
Cbc0038I Solution found of -25.0593
Cbc0038I Relaxing continuous gives -25.0593
Cbc0038I Rounding solution of -50.9787 is better than previous of -25.0593

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -50.9787 to -64.1421 (0.03 seconds)
Cbc0038I Round again with cutoff of -66.068
Cbc0038I Pass   2: suminf.    2.50878 (8) obj. -66.068 iterations 14
Cbc0038I Pass   3: suminf.    2.24401 (6) obj. -66.068 iterations 8
Cbc0038I Pass   4: suminf.    2.24401 (6) obj. -66.068 iterations 0
Cbc0038I Pass   5: suminf.    1.81491 (5) obj. -66.068 iterations 6
Cbc0038I Pass   6: suminf.    1.44602 (4) obj. -66.068 iterations 6
Cbc0038I Pass   7: suminf.    1.44602 (4) obj. -66.068 iterations 0
Cbc0038I Pass   8: suminf.    2.02156 (5) obj. -66.068 iterations 4
Cbc0038I Pass   9: suminf.    1.31547 (4) obj. -66.068 iterations 3
Cbc0038I Pass  10: suminf.    1.45283 (4) obj. -66.068 iterations 5
Cbc0038I Pass  11: suminf.    3.62767 (11) obj. -66.068 iterations 20
Cbc0038I Pass  12: suminf.    1.69102 (5) obj. -66.068 iterations 23
Cbc0038I Pass  13: suminf.    1.67437 (5) obj. -66.068 iterations 8
Cbc0038I Pass  14: suminf.    0.74623 (2) obj. -66.068 iterations 8
Cbc0038I Pass  15: suminf.    0.74623 (2) obj. -66.068 iterations 0
Cbc0038I Pass  16: suminf.    0.74878 (2) obj. -66.068 iterations 2
Cbc0038I Pass  17: suminf.    2.44498 (6) obj. -66.068 iterations 13
Cbc0038I Pass  18: suminf.    1.92330 (7) obj. -66.068 iterations 13
Cbc0038I Pass  19: suminf.    1.92330 (7) obj. -66.068 iterations 0
Cbc0038I Pass  20: suminf.    2.21185 (5) obj. -66.068 iterations 7
Cbc0038I Pass  21: suminf.    0.92475 (3) obj. -66.068 iterations 5
Cbc0038I Pass  22: suminf.    0.92475 (3) obj. -66.068 iterations 0
Cbc0038I Pass  23: suminf.    1.52127 (4) obj. -66.068 iterations 4
Cbc0038I Pass  24: suminf.    0.92475 (3) obj. -66.068 iterations 4
Cbc0038I Pass  25: suminf.    5.25510 (16) obj. -66.068 iterations 28
Cbc0038I Pass  26: suminf.    0.21336 (4) obj. -66.068 iterations 26
Cbc0038I Pass  27: suminf.    0.21289 (2) obj. -66.068 iterations 3
Cbc0038I Pass  28: suminf.    0.61176 (3) obj. -66.068 iterations 4
Cbc0038I Pass  29: suminf.    0.47853 (2) obj. -66.068 iterations 1
Cbc0038I Pass  30: suminf.    0.21666 (2) obj. -66.068 iterations 3
Cbc0038I Pass  31: suminf.    0.33297 (2) obj. -66.068 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 0 continuous
Cbc0038I Full problem 131 rows 74 columns, reduced to 64 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -64.1421 - took 0.04 seconds
Cbc0012I Integer solution of -64.142104 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 131 rows 74 columns, reduced to 46 rows 28 columns
Cbc0031I 19 added rows had average density of 34.157895
Cbc0013I At root node, 19 cuts changed objective from -83.400563 to -71.11059 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6037 row cuts average 5.3 elements, 3 column cuts (3 active)  in 0.076 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1824 row cuts average 53.4 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 321 row cuts average 6.3 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 154 row cuts average 45.6 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0010I After 14 nodes, 3 on tree, -64.142104 best solution, best possible -71.021519 (0.69 seconds)
Cbc0001I Search completed - best objective -64.14210399999999, took 5701 iterations and 24 nodes (0.73 seconds)
Cbc0032I Strong branching done 352 times (5968 iterations), fathomed 2 nodes and fixed 14 variables
Cbc0035I Maximum depth 6, 101 variables fixed on reduced cost
Total time (CPU seconds):       0.70   (Wallclock seconds):       0.74

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 113 (-42) rows, 128 (-25) columns and 2311 (-993) elements
Clp1000I sum of infeasibilities 2.63814e-07 - average 2.33464e-09, 29 fixed columns
Coin0506I Presolve 90 (-23) rows, 99 (-29) columns and 1250 (-1061) elements
Clp0006I 0  Obj 84.749457 Dual inf 7.0376626 (96)
Clp0029I End of values pass after 99 iterations
Clp0014I Perturbing problem by 0.001% of 2.1851856 - largest nonzero change 1.699018e-05 ( 0.001262127%) - largest zero change 2.8862837e-05
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Coin0511I After Postsolve, objective 98.078101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 98.078101 Dual inf 4.935203 (1)
Clp0014I Perturbing problem by 0.001% of 1.8723242 - largest nonzero change 2.973913e-05 ( 0.0016580886%) - largest zero change 2.8245361e-05
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Clp0000I Optimal - objective value 98.078101
Coin0511I After Postsolve, objective 98.078101, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 98.07810058 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 113 rows, 128 columns (128 integer (128 of which binary)) and 2313 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.639%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 53 integers unsatisfied sum - 4.81918
Cbc0038I Pass   1: suminf.    1.64716 (35) obj. -77.4524 iterations 24
Cbc0038I Pass   2: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass   3: suminf.    0.20988 (7) obj. -37.0009 iterations 28
Cbc0038I Solution found of -29.2421
Cbc0038I Rounding solution of -29.8141 is better than previous of -29.2421

Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 4 rows 4 columns
Cbc0038I Mini branch and bound improved solution from -29.8141 to -33.01 (0.03 seconds)
Cbc0038I Round again with cutoff of -38.6336
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass   5: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass   6: suminf.    0.92519 (25) obj. -57.1577 iterations 10
Cbc0038I Pass   7: suminf.    0.38187 (12) obj. -41.8289 iterations 13
Cbc0038I Pass   8: suminf.    0.60480 (2) obj. -38.6336 iterations 17
Cbc0038I Pass   9: suminf.    0.60480 (2) obj. -38.6336 iterations 3
Cbc0038I Pass  10: suminf.    0.38357 (2) obj. -38.6336 iterations 2
Cbc0038I Pass  11: suminf.    1.55494 (17) obj. -38.6336 iterations 30
Cbc0038I Pass  12: suminf.    1.17942 (16) obj. -38.6336 iterations 6
Cbc0038I Pass  13: suminf.    0.89425 (9) obj. -38.6336 iterations 13
Cbc0038I Pass  14: suminf.    0.89425 (9) obj. -38.6336 iterations 2
Cbc0038I Pass  15: suminf.    1.35033 (8) obj. -38.6336 iterations 13
Cbc0038I Pass  16: suminf.    1.00804 (8) obj. -38.6336 iterations 2
Cbc0038I Pass  17: suminf.    1.19259 (6) obj. -38.6336 iterations 11
Cbc0038I Pass  18: suminf.    0.84652 (6) obj. -38.6336 iterations 3
Cbc0038I Pass  19: suminf.    1.80930 (14) obj. -38.6336 iterations 31
Cbc0038I Pass  20: suminf.    0.83677 (8) obj. -38.6336 iterations 9
Cbc0038I Pass  21: suminf.    0.56302 (4) obj. -38.6336 iterations 11
Cbc0038I Pass  22: suminf.    0.56302 (4) obj. -38.6336 iterations 0
Cbc0038I Pass  23: suminf.    0.63540 (3) obj. -38.6336 iterations 6
Cbc0038I Pass  24: suminf.    0.37096 (3) obj. -40.0318 iterations 2
Cbc0038I Pass  25: suminf.    0.72829 (3) obj. -38.6336 iterations 4
Cbc0038I Pass  26: suminf.    0.67948 (7) obj. -38.6336 iterations 4
Cbc0038I Pass  27: suminf.    0.93246 (9) obj. -38.6336 iterations 8
Cbc0038I Pass  28: suminf.    0.40969 (7) obj. -38.6336 iterations 4
Cbc0038I Pass  29: suminf.    0.61453 (5) obj. -38.6336 iterations 11
Cbc0038I Pass  30: suminf.    0.49977 (9) obj. -38.6336 iterations 5
Cbc0038I Pass  31: suminf.    1.50642 (9) obj. -38.6336 iterations 11
Cbc0038I Pass  32: suminf.    1.04445 (6) obj. -39.5099 iterations 3
Cbc0038I Pass  33: suminf.    0.96445 (6) obj. -38.6336 iterations 8
Cbc0038I Rounding solution of -58.5702 is better than previous of -33.01

Cbc0038I Before mini branch and bound, 57 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 49 rows 58 columns
Cbc0038I Mini branch and bound improved solution from -58.5702 to -63.1595 (0.06 seconds)
Cbc0038I Round again with cutoff of -68.3766
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass  34: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass  35: suminf.    2.47047 (32) obj. -68.3766 iterations 44
Cbc0038I Pass  36: suminf.    2.45021 (31) obj. -68.3766 iterations 7
Cbc0038I Pass  37: suminf.    2.56074 (28) obj. -68.3766 iterations 24
Cbc0038I Pass  38: suminf.    2.29126 (28) obj. -68.3766 iterations 7
Cbc0038I Pass  39: suminf.    2.56074 (28) obj. -68.3766 iterations 6
Cbc0038I Pass  40: suminf.    3.09747 (30) obj. -68.3766 iterations 17
Cbc0038I Pass  41: suminf.    2.15187 (30) obj. -68.3766 iterations 12
Cbc0038I Pass  42: suminf.    2.21399 (30) obj. -68.3766 iterations 6
Cbc0038I Pass  43: suminf.    2.09225 (30) obj. -68.3766 iterations 4
Cbc0038I Pass  44: suminf.    2.64368 (30) obj. -68.3766 iterations 9
Cbc0038I Pass  45: suminf.    2.64368 (30) obj. -68.3766 iterations 2
Cbc0038I Pass  46: suminf.    2.70495 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  47: suminf.    2.70495 (30) obj. -68.3766 iterations 3
Cbc0038I Pass  48: suminf.    2.64368 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  49: suminf.    2.85001 (30) obj. -68.3766 iterations 14
Cbc0038I Pass  50: suminf.    2.85001 (30) obj. -68.3766 iterations 3
Cbc0038I Pass  51: suminf.    3.08317 (32) obj. -68.3766 iterations 18
Cbc0038I Pass  52: suminf.    2.62340 (32) obj. -68.3766 iterations 4
Cbc0038I Pass  53: suminf.    3.10395 (31) obj. -68.3766 iterations 6
Cbc0038I Pass  54: suminf.    4.42103 (33) obj. -68.3766 iterations 31
Cbc0038I Pass  55: suminf.    4.33737 (37) obj. -68.3766 iterations 7
Cbc0038I Pass  56: suminf.    3.39799 (30) obj. -68.3766 iterations 13
Cbc0038I Pass  57: suminf.    3.12457 (30) obj. -68.3766 iterations 5
Cbc0038I Pass  58: suminf.    3.39799 (30) obj. -68.3766 iterations 6
Cbc0038I Pass  59: suminf.    4.50071 (34) obj. -68.3766 iterations 26
Cbc0038I Pass  60: suminf.    4.50071 (34) obj. -68.3766 iterations 2
Cbc0038I Pass  61: suminf.    3.58243 (35) obj. -68.3766 iterations 26
Cbc0038I Pass  62: suminf.    2.87726 (33) obj. -68.3766 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 60 integers at bound fixed and 0 continuous
Cbc0038I Full problem 113 rows 128 columns, reduced to 50 rows 55 columns
Cbc0038I Mini branch and bound improved solution from -63.1595 to -64.1421 (0.09 seconds)
Cbc0038I Round again with cutoff of -74.637
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 4
Cbc0038I Pass  62: suminf.    1.64716 (35) obj. -77.4524 iterations 0
Cbc0038I Pass  63: suminf.    1.64716 (35) obj. -77.4524 iterations 1
Cbc0038I Pass  64: suminf.    1.83613 (26) obj. -74.637 iterations 29
Cbc0038I Pass  65: suminf.    1.46782 (27) obj. -74.637 iterations 6
Cbc0038I Pass  66: suminf.    3.25517 (38) obj. -74.637 iterations 29
Cbc0038I Pass  67: suminf.    3.25517 (38) obj. -74.637 iterations 2
Cbc0038I Pass  68: suminf.    3.20640 (35) obj. -74.637 iterations 11
Cbc0038I Pass  69: suminf.    3.17432 (38) obj. -74.637 iterations 3
Cbc0038I Pass  70: suminf.    3.22567 (35) obj. -74.637 iterations 15
Cbc0038I Pass  71: suminf.    3.19444 (38) obj. -74.637 iterations 3
Cbc0038I Pass  72: suminf.    3.30033 (35) obj. -74.637 iterations 14
Cbc0038I Pass  73: suminf.    2.86876 (35) obj. -74.637 iterations 5
Cbc0038I Pass  74: suminf.    3.30033 (35) obj. -74.637 iterations 12
Cbc0038I Pass  75: suminf.    2.91072 (35) obj. -74.637 iterations 7
Cbc0038I Pass  76: suminf.    3.30033 (35) obj. -74.637 iterations 6
Cbc0038I Pass  77: suminf.    2.90100 (36) obj. -74.637 iterations 12
Cbc0038I Pass  78: suminf.    2.90100 (36) obj. -74.637 iterations 3
Cbc0038I Pass  79: suminf.    2.88618 (36) obj. -74.637 iterations 5
Cbc0038I Pass  80: suminf.    2.88618 (36) obj. -74.637 iterations 2
Cbc0038I Pass  81: suminf.    2.91415 (36) obj. -74.637 iterations 5
Cbc0038I Pass  82: suminf.    2.91415 (36) obj. -74.637 iterations 2
Cbc0038I Pass  83: suminf.    2.88618 (36) obj. -74.637 iterations 3
Cbc0038I Pass  84: suminf.    2.77389 (47) obj. -74.637 iterations 16
Cbc0038I Pass  85: suminf.    2.55436 (46) obj. -74.637 iterations 6
Cbc0038I Pass  86: suminf.    5.06437 (43) obj. -74.637 iterations 19
Cbc0038I Pass  87: suminf.    5.06437 (43) obj. -74.637 iterations 2
Cbc0038I Pass  88: suminf.    5.38948 (44) obj. -74.637 iterations 7
Cbc0038I Pass  89: suminf.    3.46394 (39) obj. -74.637 iterations 9
Cbc0038I Pass  90: suminf.    3.11522 (40) obj. -74.637 iterations 7
Cbc0038I Pass  91: suminf.    3.11731 (39) obj. -74.637 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -64.1421 - took 0.08 seconds
Cbc0012I Integer solution of -64.142104 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0038I Full problem 113 rows 128 columns, reduced to 33 rows 37 columns
Cbc0031I 52 added rows had average density of 9.8461538
Cbc0013I At root node, 52 cuts changed objective from -89.244607 to -65.768791 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 1530 row cuts average 10.6 elements, 8 column cuts (38 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 81 row cuts average 45.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 46 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 23 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 195 row cuts average 19.3 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 275 row cuts average 53.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 59 row cuts average 20.2 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -64.142104 best solution, best possible -65.768791 (0.31 seconds)
Cbc0001I Search completed - best objective -64.14210399999999, took 814 iterations and 4 nodes (0.64 seconds)
Cbc0032I Strong branching done 38 times (400 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 32 variables fixed on reduced cost
Total time (CPU seconds):       0.48   (Wallclock seconds):       0.65

