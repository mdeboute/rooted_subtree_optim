Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-17) rows, 50 (-3) columns and 268 (-35) elements
Clp1000I sum of infeasibilities 0.000379591 - average 4.31353e-06, 7 fixed columns
Coin0506I Presolve 76 (-12) rows, 43 (-7) columns and 230 (-38) elements
Clp0029I End of values pass after 43 iterations
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Coin0511I After Postsolve, objective 40.391567, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Coin0511I After Postsolve, objective 40.391567, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 40.39156674 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 50 columns (49 integer (49 of which binary)) and 268 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.703%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 8.94015
Cbc0038I Pass   1: suminf.    0.33333 (1) obj. -13.8528 iterations 26
Cbc0038I Solution found of -10.535
Cbc0038I Relaxing continuous gives -10.535
Cbc0038I Rounding solution of -12.6771 is better than previous of -10.535

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 50 columns, reduced to 40 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -12.6771 to -14.3911 (0.02 seconds)
Cbc0038I Round again with cutoff of -16.9912
Cbc0038I Pass   2: suminf.    0.37552 (3) obj. -16.9912 iterations 2
Cbc0038I Pass   3: suminf.    0.76516 (3) obj. -16.9912 iterations 9
Cbc0038I Pass   4: suminf.    0.33750 (1) obj. -16.9912 iterations 4
Cbc0038I Pass   5: suminf.    0.50938 (2) obj. -16.9912 iterations 2
Cbc0038I Pass   6: suminf.    1.43165 (5) obj. -16.9912 iterations 9
Cbc0038I Pass   7: suminf.    0.54694 (6) obj. -16.9912 iterations 9
Cbc0038I Pass   8: suminf.    0.54694 (6) obj. -16.9912 iterations 0
Cbc0038I Pass   9: suminf.    1.42112 (4) obj. -16.9912 iterations 7
Cbc0038I Pass  10: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  11: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  12: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  13: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  14: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  15: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  16: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  17: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  18: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  19: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  20: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  21: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  22: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  23: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  24: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  25: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  26: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  27: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  28: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  29: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  30: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  31: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 50 columns, reduced to 44 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -14.3911 - took 0.03 seconds
Cbc0012I Integer solution of -14.391101 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 88 rows 50 columns, reduced to 40 rows 24 columns
Cbc0031I 17 added rows had average density of 36.352941
Cbc0013I At root node, 17 cuts changed objective from -40.391567 to -26.125556 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6118 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1042 row cuts average 49.5 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 37 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 106 row cuts average 49.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0012I Integer solution of -14.428091 found by DiveCoefficient after 4805 iterations and 6 nodes (0.48 seconds)
Cbc0004I Integer solution of -15.053372 found after 4896 iterations and 13 nodes (0.49 seconds)
Cbc0001I Search completed - best objective -15.05337206, took 5595 iterations and 40 nodes (0.53 seconds)
Cbc0032I Strong branching done 342 times (4031 iterations), fathomed 2 nodes and fixed 17 variables
Cbc0035I Maximum depth 8, 48 variables fixed on reduced cost
Total time (CPU seconds):       0.52   (Wallclock seconds):       0.54

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 76 (-28) rows, 86 (-16) columns and 1126 (-452) elements
Clp1000I sum of infeasibilities 1.26974e-06 - average 1.67071e-08, 4 fixed columns
Coin0506I Presolve 72 (-4) rows, 82 (-4) columns and 983 (-143) elements
Clp0029I End of values pass after 82 iterations
Clp0014I Perturbing problem by 0.001% of 4.6870451 - largest nonzero change 2.0450413e-05 ( 0.00096271338%) - largest zero change 2.9031261e-05
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Coin0511I After Postsolve, objective 67.049808, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 4.5268345 - largest nonzero change 2.1280525e-05 ( 0.0014401861%) - largest zero change 2.9859383e-05
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Coin0511I After Postsolve, objective 67.049808, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.04980825 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 76 rows, 86 columns (86 integer (86 of which binary)) and 1132 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 7.004%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 32 integers unsatisfied sum - 5.30851
Cbc0038I Pass   1: suminf.    2.15569 (21) obj. -43.4872 iterations 13
Cbc0038I Pass   2: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Solution found of 1.99314
Cbc0038I Rounding solution of -6.04712 is better than previous of 1.99314

Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 11 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -6.04712 to -8.71883 (0.02 seconds)
Cbc0038I Round again with cutoff of -13.8726
Cbc0038I Pass   3: suminf.    2.15569 (21) obj. -43.4872 iterations 0
Cbc0038I Pass   4: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Pass   5: suminf.    0.67438 (10) obj. -13.8726 iterations 12
Cbc0038I Pass   6: suminf.    0.62978 (7) obj. -13.8726 iterations 11
Cbc0038I Pass   7: suminf.    0.22679 (1) obj. -13.8726 iterations 7
Cbc0038I Pass   8: suminf.    0.18367 (1) obj. -14.4762 iterations 1
Cbc0038I Pass   9: suminf.    1.48108 (9) obj. -14.5906 iterations 19
Cbc0038I Pass  10: suminf.    0.89317 (5) obj. -14.9156 iterations 5
Cbc0038I Pass  11: suminf.    0.92149 (6) obj. -13.8726 iterations 7
Cbc0038I Pass  12: suminf.    0.92149 (6) obj. -13.8726 iterations 0
Cbc0038I Pass  13: suminf.    1.79800 (5) obj. -13.8726 iterations 7
Cbc0038I Pass  14: suminf.    0.38927 (3) obj. -13.8726 iterations 11
Cbc0038I Pass  15: suminf.    0.22449 (1) obj. -15.5353 iterations 3
Cbc0038I Pass  16: suminf.    0.34325 (1) obj. -13.8726 iterations 1
Cbc0038I Pass  17: suminf.    1.29380 (9) obj. -18.5449 iterations 19
Cbc0038I Pass  18: suminf.    1.23209 (8) obj. -18.6164 iterations 3
Cbc0038I Pass  19: suminf.    0.92562 (4) obj. -13.8726 iterations 7
Cbc0038I Pass  20: suminf.    0.63450 (4) obj. -13.8726 iterations 2
Cbc0038I Pass  21: suminf.    0.25733 (2) obj. -13.8726 iterations 3
Cbc0038I Pass  22: suminf.    0.25733 (2) obj. -13.8726 iterations 1
Cbc0038I Pass  23: suminf.    1.05941 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  24: suminf.    1.42548 (9) obj. -13.8726 iterations 23
Cbc0038I Pass  25: suminf.    0.74982 (10) obj. -13.8726 iterations 8
Cbc0038I Pass  26: suminf.    0.87021 (4) obj. -13.8726 iterations 12
Cbc0038I Pass  27: suminf.    0.87021 (4) obj. -13.8726 iterations 0
Cbc0038I Pass  28: suminf.    0.78176 (3) obj. -13.8726 iterations 7
Cbc0038I Pass  29: suminf.    0.61532 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  30: suminf.    0.54204 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  31: suminf.    0.54204 (3) obj. -13.8726 iterations 0
Cbc0038I Pass  32: suminf.    0.61532 (3) obj. -13.8726 iterations 5
Cbc0038I Rounding solution of -9.65486 is better than previous of -8.71883

Cbc0038I Before mini branch and bound, 38 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 16 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -9.65486 to -11.2134 (0.03 seconds)
Cbc0038I Round again with cutoff of -23.1492
Cbc0038I Pass  32: suminf.    2.15569 (21) obj. -43.4872 iterations 0
Cbc0038I Pass  33: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Pass  34: suminf.    1.00072 (11) obj. -23.1492 iterations 18
Cbc0038I Pass  35: suminf.    0.87147 (10) obj. -26.5314 iterations 1
Cbc0038I Pass  36: suminf.    0.86854 (3) obj. -23.1492 iterations 17
Cbc0038I Pass  37: suminf.    0.63376 (3) obj. -24.5578 iterations 2
Cbc0038I Pass  38: suminf.    1.72249 (10) obj. -24.7506 iterations 15
Cbc0038I Pass  39: suminf.    1.72249 (10) obj. -24.7506 iterations 1
Cbc0038I Pass  40: suminf.    0.78960 (4) obj. -23.1492 iterations 12
Cbc0038I Pass  41: suminf.    0.75618 (3) obj. -23.1492 iterations 3
Cbc0038I Pass  42: suminf.    0.78270 (3) obj. -23.1492 iterations 5
Cbc0038I Pass  43: suminf.    2.49166 (15) obj. -23.1492 iterations 16
Cbc0038I Pass  44: suminf.    1.78219 (10) obj. -25.6057 iterations 6
Cbc0038I Pass  45: suminf.    0.92296 (4) obj. -23.1492 iterations 15
Cbc0038I Pass  46: suminf.    0.92296 (4) obj. -23.1492 iterations 4
Cbc0038I Pass  47: suminf.    1.15833 (4) obj. -23.1492 iterations 5
Cbc0038I Pass  48: suminf.    1.15833 (4) obj. -23.1492 iterations 3
Cbc0038I Pass  49: suminf.    0.92296 (4) obj. -23.1492 iterations 6
Cbc0038I Pass  50: suminf.    1.67104 (8) obj. -23.1492 iterations 15
Cbc0038I Pass  51: suminf.    1.67104 (8) obj. -23.1492 iterations 1
Cbc0038I Pass  52: suminf.    1.15833 (4) obj. -23.1492 iterations 12
Cbc0038I Pass  53: suminf.    1.39209 (5) obj. -23.1492 iterations 11
Cbc0038I Pass  54: suminf.    1.03714 (5) obj. -23.1492 iterations 7
Cbc0038I Pass  55: suminf.    0.97338 (5) obj. -23.1492 iterations 5
Cbc0038I Pass  56: suminf.    0.97338 (5) obj. -23.1492 iterations 3
Cbc0038I Pass  57: suminf.    1.03714 (5) obj. -23.1492 iterations 3
Cbc0038I Pass  58: suminf.    2.02795 (12) obj. -23.1492 iterations 20
Cbc0038I Pass  59: suminf.    2.02795 (12) obj. -23.1492 iterations 3
Cbc0038I Pass  60: suminf.    1.87562 (7) obj. -23.1492 iterations 19
Cbc0038I Pass  61: suminf.    1.25590 (8) obj. -23.1492 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 11 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -11.2134 - took 0.03 seconds
Cbc0012I Integer solution of -11.213441 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 76 rows 86 columns, reduced to 9 rows 11 columns
Cbc0031I 38 added rows had average density of 19.157895
Cbc0013I At root node, 38 cuts changed objective from -60.255531 to -16.920805 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5661 row cuts average 6.4 elements, 1 column cuts (1 active)  in 0.080 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 549 row cuts average 69.9 elements, 0 column cuts (0 active)  in 0.071 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.046 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 355 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 184 row cuts average 46.4 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 82 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.646 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -11.213441 best solution, best possible -16.920805 (1.63 seconds)
Cbc0012I Integer solution of -11.581761 found by DiveCoefficient after 2479 iterations and 2 nodes (1.92 seconds)
Cbc0012I Integer solution of -11.658351 found by DiveCoefficient after 2490 iterations and 3 nodes (1.94 seconds)
Cbc0012I Integer solution of -12.274721 found by DiveCoefficient after 2509 iterations and 3 nodes (1.97 seconds)
Cbc0012I Integer solution of -14.628821 found by rounding after 2513 iterations and 4 nodes (1.98 seconds)
Cbc0012I Integer solution of -14.935861 found by DiveCoefficient after 2530 iterations and 4 nodes (2.03 seconds)
Cbc0016I Integer solution of -14.993601 found by strong branching after 2630 iterations and 9 nodes (2.16 seconds)
Cbc0012I Integer solution of -15.049601 found by DiveCoefficient after 2690 iterations and 11 nodes (2.28 seconds)
Cbc0010I After 14 nodes, 7 on tree, -15.049601 best solution, best possible -16.920805 (2.35 seconds)
Cbc0012I Integer solution of -15.053372 found by rounding after 2851 iterations and 29 nodes (2.59 seconds)
Cbc0001I Search completed - best objective -15.05337206, took 2985 iterations and 32 nodes (2.63 seconds)
Cbc0032I Strong branching done 338 times (3569 iterations), fathomed 4 nodes and fixed 2 variables
Cbc0035I Maximum depth 10, 54 variables fixed on reduced cost
Total time (CPU seconds):       1.80   (Wallclock seconds):       2.64

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 88 (-17) rows, 50 (-3) columns and 268 (-35) elements
Clp1000I sum of infeasibilities 0.000379591 - average 4.31353e-06, 7 fixed columns
Coin0506I Presolve 76 (-12) rows, 43 (-7) columns and 230 (-38) elements
Clp0029I End of values pass after 43 iterations
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Coin0511I After Postsolve, objective 40.391567, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Clp0000I Optimal - objective value 40.391567
Coin0511I After Postsolve, objective 40.391567, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 40.39156674 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 88 rows, 50 columns (49 integer (49 of which binary)) and 268 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.703%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 23 integers unsatisfied sum - 8.94015
Cbc0038I Pass   1: suminf.    0.33333 (1) obj. -13.8528 iterations 26
Cbc0038I Solution found of -10.535
Cbc0038I Relaxing continuous gives -10.535
Cbc0038I Rounding solution of -12.6771 is better than previous of -10.535

Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 50 columns, reduced to 40 rows 24 columns
Cbc0038I Mini branch and bound improved solution from -12.6771 to -14.3911 (0.02 seconds)
Cbc0038I Round again with cutoff of -16.9912
Cbc0038I Pass   2: suminf.    0.37552 (3) obj. -16.9912 iterations 2
Cbc0038I Pass   3: suminf.    0.76516 (3) obj. -16.9912 iterations 9
Cbc0038I Pass   4: suminf.    0.33750 (1) obj. -16.9912 iterations 4
Cbc0038I Pass   5: suminf.    0.50938 (2) obj. -16.9912 iterations 2
Cbc0038I Pass   6: suminf.    1.43165 (5) obj. -16.9912 iterations 9
Cbc0038I Pass   7: suminf.    0.54694 (6) obj. -16.9912 iterations 9
Cbc0038I Pass   8: suminf.    0.54694 (6) obj. -16.9912 iterations 0
Cbc0038I Pass   9: suminf.    1.42112 (4) obj. -16.9912 iterations 7
Cbc0038I Pass  10: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  11: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  12: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  13: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  14: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  15: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  16: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  17: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  18: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  19: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  20: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  21: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  22: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  23: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  24: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  25: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  26: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  27: suminf.    1.12620 (6) obj. -16.9912 iterations 3
Cbc0038I Pass  28: suminf.    1.10570 (5) obj. -16.9912 iterations 1
Cbc0038I Pass  29: suminf.    1.42112 (4) obj. -16.9912 iterations 4
Cbc0038I Pass  30: suminf.    1.26009 (4) obj. -16.9912 iterations 3
Cbc0038I Pass  31: suminf.    1.76779 (4) obj. -16.9912 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 88 rows 50 columns, reduced to 44 rows 26 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -14.3911 - took 0.03 seconds
Cbc0012I Integer solution of -14.391101 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 88 rows 50 columns, reduced to 40 rows 24 columns
Cbc0031I 17 added rows had average density of 36.352941
Cbc0013I At root node, 17 cuts changed objective from -40.391567 to -26.125556 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6118 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.043 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1042 row cuts average 49.5 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.047 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 37 row cuts average 5.1 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 106 row cuts average 49.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0012I Integer solution of -14.428091 found by DiveCoefficient after 4805 iterations and 6 nodes (0.51 seconds)
Cbc0004I Integer solution of -15.053372 found after 4896 iterations and 13 nodes (0.51 seconds)
Cbc0001I Search completed - best objective -15.05337206, took 5595 iterations and 40 nodes (0.57 seconds)
Cbc0032I Strong branching done 342 times (4031 iterations), fathomed 2 nodes and fixed 17 variables
Cbc0035I Maximum depth 8, 48 variables fixed on reduced cost
Total time (CPU seconds):       0.55   (Wallclock seconds):       0.58

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 76 (-29) rows, 86 (-17) columns and 1126 (-453) elements
Clp1000I sum of infeasibilities 1.26974e-06 - average 1.67071e-08, 4 fixed columns
Coin0506I Presolve 72 (-4) rows, 82 (-4) columns and 983 (-143) elements
Clp0029I End of values pass after 82 iterations
Clp0014I Perturbing problem by 0.001% of 4.6870451 - largest nonzero change 2.0450413e-05 ( 0.00096271338%) - largest zero change 2.9031261e-05
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Coin0511I After Postsolve, objective 67.049808, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 4.5268345 - largest nonzero change 2.1280525e-05 ( 0.0014401861%) - largest zero change 2.9859383e-05
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Clp0000I Optimal - objective value 67.049808
Coin0511I After Postsolve, objective 67.049808, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.04980825 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 76 rows, 86 columns (86 integer (86 of which binary)) and 1132 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 7.004%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 32 integers unsatisfied sum - 5.30851
Cbc0038I Pass   1: suminf.    2.15569 (21) obj. -43.4872 iterations 13
Cbc0038I Pass   2: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Solution found of 1.99314
Cbc0038I Rounding solution of -6.04712 is better than previous of 1.99314

Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 11 rows 13 columns
Cbc0038I Mini branch and bound improved solution from -6.04712 to -8.71883 (0.03 seconds)
Cbc0038I Round again with cutoff of -13.8726
Cbc0038I Pass   3: suminf.    2.15569 (21) obj. -43.4872 iterations 0
Cbc0038I Pass   4: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Pass   5: suminf.    0.67438 (10) obj. -13.8726 iterations 12
Cbc0038I Pass   6: suminf.    0.62978 (7) obj. -13.8726 iterations 11
Cbc0038I Pass   7: suminf.    0.22679 (1) obj. -13.8726 iterations 7
Cbc0038I Pass   8: suminf.    0.18367 (1) obj. -14.4762 iterations 1
Cbc0038I Pass   9: suminf.    1.48108 (9) obj. -14.5906 iterations 19
Cbc0038I Pass  10: suminf.    0.89317 (5) obj. -14.9156 iterations 5
Cbc0038I Pass  11: suminf.    0.92149 (6) obj. -13.8726 iterations 7
Cbc0038I Pass  12: suminf.    0.92149 (6) obj. -13.8726 iterations 0
Cbc0038I Pass  13: suminf.    1.79800 (5) obj. -13.8726 iterations 7
Cbc0038I Pass  14: suminf.    0.38927 (3) obj. -13.8726 iterations 11
Cbc0038I Pass  15: suminf.    0.22449 (1) obj. -15.5353 iterations 3
Cbc0038I Pass  16: suminf.    0.34325 (1) obj. -13.8726 iterations 1
Cbc0038I Pass  17: suminf.    1.29380 (9) obj. -18.5449 iterations 19
Cbc0038I Pass  18: suminf.    1.23209 (8) obj. -18.6164 iterations 3
Cbc0038I Pass  19: suminf.    0.92562 (4) obj. -13.8726 iterations 7
Cbc0038I Pass  20: suminf.    0.63450 (4) obj. -13.8726 iterations 2
Cbc0038I Pass  21: suminf.    0.25733 (2) obj. -13.8726 iterations 3
Cbc0038I Pass  22: suminf.    0.25733 (2) obj. -13.8726 iterations 1
Cbc0038I Pass  23: suminf.    1.05941 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  24: suminf.    1.42548 (9) obj. -13.8726 iterations 23
Cbc0038I Pass  25: suminf.    0.74982 (10) obj. -13.8726 iterations 8
Cbc0038I Pass  26: suminf.    0.87021 (4) obj. -13.8726 iterations 12
Cbc0038I Pass  27: suminf.    0.87021 (4) obj. -13.8726 iterations 0
Cbc0038I Pass  28: suminf.    0.78176 (3) obj. -13.8726 iterations 7
Cbc0038I Pass  29: suminf.    0.61532 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  30: suminf.    0.54204 (3) obj. -13.8726 iterations 3
Cbc0038I Pass  31: suminf.    0.54204 (3) obj. -13.8726 iterations 0
Cbc0038I Pass  32: suminf.    0.61532 (3) obj. -13.8726 iterations 5
Cbc0038I Rounding solution of -9.65486 is better than previous of -8.71883

Cbc0038I Before mini branch and bound, 38 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 16 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -9.65486 to -11.2134 (0.04 seconds)
Cbc0038I Round again with cutoff of -23.1492
Cbc0038I Pass  32: suminf.    2.15569 (21) obj. -43.4872 iterations 0
Cbc0038I Pass  33: suminf.    2.15569 (21) obj. -43.4872 iterations 1
Cbc0038I Pass  34: suminf.    1.00072 (11) obj. -23.1492 iterations 18
Cbc0038I Pass  35: suminf.    0.87147 (10) obj. -26.5314 iterations 1
Cbc0038I Pass  36: suminf.    0.86854 (3) obj. -23.1492 iterations 17
Cbc0038I Pass  37: suminf.    0.63376 (3) obj. -24.5578 iterations 2
Cbc0038I Pass  38: suminf.    1.72249 (10) obj. -24.7506 iterations 15
Cbc0038I Pass  39: suminf.    1.72249 (10) obj. -24.7506 iterations 1
Cbc0038I Pass  40: suminf.    0.78960 (4) obj. -23.1492 iterations 12
Cbc0038I Pass  41: suminf.    0.75618 (3) obj. -23.1492 iterations 3
Cbc0038I Pass  42: suminf.    0.78270 (3) obj. -23.1492 iterations 5
Cbc0038I Pass  43: suminf.    2.49166 (15) obj. -23.1492 iterations 16
Cbc0038I Pass  44: suminf.    1.78219 (10) obj. -25.6057 iterations 6
Cbc0038I Pass  45: suminf.    0.92296 (4) obj. -23.1492 iterations 15
Cbc0038I Pass  46: suminf.    0.92296 (4) obj. -23.1492 iterations 4
Cbc0038I Pass  47: suminf.    1.15833 (4) obj. -23.1492 iterations 5
Cbc0038I Pass  48: suminf.    1.15833 (4) obj. -23.1492 iterations 3
Cbc0038I Pass  49: suminf.    0.92296 (4) obj. -23.1492 iterations 6
Cbc0038I Pass  50: suminf.    1.67104 (8) obj. -23.1492 iterations 15
Cbc0038I Pass  51: suminf.    1.67104 (8) obj. -23.1492 iterations 1
Cbc0038I Pass  52: suminf.    1.15833 (4) obj. -23.1492 iterations 12
Cbc0038I Pass  53: suminf.    1.39209 (5) obj. -23.1492 iterations 11
Cbc0038I Pass  54: suminf.    1.03714 (5) obj. -23.1492 iterations 7
Cbc0038I Pass  55: suminf.    0.97338 (5) obj. -23.1492 iterations 5
Cbc0038I Pass  56: suminf.    0.97338 (5) obj. -23.1492 iterations 3
Cbc0038I Pass  57: suminf.    1.03714 (5) obj. -23.1492 iterations 3
Cbc0038I Pass  58: suminf.    2.02795 (12) obj. -23.1492 iterations 20
Cbc0038I Pass  59: suminf.    2.02795 (12) obj. -23.1492 iterations 3
Cbc0038I Pass  60: suminf.    1.87562 (7) obj. -23.1492 iterations 19
Cbc0038I Pass  61: suminf.    1.25590 (8) obj. -23.1492 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 86 columns, reduced to 11 rows 19 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -11.2134 - took 0.03 seconds
Cbc0012I Integer solution of -11.213441 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 76 rows 86 columns, reduced to 9 rows 11 columns
Cbc0031I 38 added rows had average density of 19.157895
Cbc0013I At root node, 38 cuts changed objective from -60.255531 to -16.920805 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5661 row cuts average 6.4 elements, 1 column cuts (1 active)  in 0.088 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 549 row cuts average 69.9 elements, 0 column cuts (0 active)  in 0.076 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 2.8 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.050 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 355 row cuts average 8.3 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 184 row cuts average 46.4 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 82 row cuts average 13.5 elements, 0 column cuts (0 active)  in 0.712 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -11.213441 best solution, best possible -16.920805 (1.87 seconds)
Cbc0012I Integer solution of -11.581761 found by DiveCoefficient after 2479 iterations and 2 nodes (2.18 seconds)
Cbc0012I Integer solution of -11.658351 found by DiveCoefficient after 2490 iterations and 3 nodes (2.19 seconds)
Cbc0012I Integer solution of -12.274721 found by DiveCoefficient after 2509 iterations and 3 nodes (2.22 seconds)
Cbc0012I Integer solution of -14.628821 found by rounding after 2513 iterations and 4 nodes (2.23 seconds)
Cbc0012I Integer solution of -14.935861 found by DiveCoefficient after 2530 iterations and 4 nodes (2.30 seconds)
Cbc0016I Integer solution of -14.993601 found by strong branching after 2630 iterations and 9 nodes (2.43 seconds)
Cbc0012I Integer solution of -15.049601 found by DiveCoefficient after 2690 iterations and 11 nodes (2.56 seconds)
Cbc0010I After 12 nodes, 7 on tree, -15.049601 best solution, best possible -16.920805 (2.59 seconds)
Cbc0012I Integer solution of -15.053372 found by rounding after 2851 iterations and 29 nodes (2.88 seconds)
Cbc0001I Search completed - best objective -15.05337206, took 2985 iterations and 32 nodes (2.94 seconds)
Cbc0032I Strong branching done 338 times (3569 iterations), fathomed 4 nodes and fixed 2 variables
Cbc0035I Maximum depth 10, 54 variables fixed on reduced cost
Total time (CPU seconds):       1.94   (Wallclock seconds):       2.95

