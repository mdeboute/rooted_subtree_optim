Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 175 (-30) rows, 100 (-3) columns and 542 (-61) elements
Clp1000I sum of infeasibilities 3.27547e-06 - average 1.8717e-08, 11 fixed columns
Coin0506I Presolve 153 (-22) rows, 89 (-11) columns and 476 (-66) elements
Clp0029I End of values pass after 89 iterations
Clp0014I Perturbing problem by 0.001% of 1.5755947 - largest nonzero change 0 ( 0%) - largest zero change 2.3379487e-05
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Coin0511I After Postsolve, objective 38.576444, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Coin0511I After Postsolve, objective 38.576444, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 38.57644402 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 174 rows, 100 columns (99 integer (99 of which binary)) and 551 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.955%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 52 integers unsatisfied sum - 7.45237
Cbc0038I Solution found of 2.25821
Cbc0038I Relaxing continuous gives -4.36491
Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0038I Mini branch and bound improved solution from -4.36491 to -7.80265 (0.05 seconds)
Cbc0038I Round again with cutoff of -10.8537
Cbc0038I Pass   1: suminf.    1.14846 (37) obj. -10.8537 iterations 75
Cbc0038I Pass   2: suminf.    1.03742 (5) obj. -10.8537 iterations 43
Cbc0038I Pass   3: suminf.    0.64855 (6) obj. -10.8537 iterations 5
Cbc0038I Pass   4: suminf.    1.05872 (4) obj. -10.8537 iterations 11
Cbc0038I Pass   5: suminf.    0.95118 (5) obj. -10.8537 iterations 2
Cbc0038I Pass   6: suminf.    1.83783 (6) obj. -10.8537 iterations 12
Cbc0038I Pass   7: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass   8: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass   9: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  10: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  11: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  12: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  13: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  14: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I Pass  15: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass  16: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass  17: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  18: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  19: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  20: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  21: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  22: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I Pass  23: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass  24: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass  25: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  26: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  27: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  28: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  29: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  30: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 174 rows 100 columns, reduced to 100 rows 60 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -7.80265 - took 0.09 seconds
Cbc0012I Integer solution of -7.80265 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0031I 29 added rows had average density of 60.413793
Cbc0013I At root node, 29 cuts changed objective from -38.312474 to -32.1272 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 16514 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.138 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1699 row cuts average 100.0 elements, 0 column cuts (0 active)  in 0.146 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.135 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 173 row cuts average 99.8 elements, 0 column cuts (0 active)  in 0.067 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -7.80265 best solution, best possible -32.1272 (1.51 seconds)
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0038I Full problem 174 rows 100 columns, reduced to 4 rows 5 columns
Cbc0001I Search completed - best objective -7.80265, took 13325 iterations and 102 nodes (2.07 seconds)
Cbc0032I Strong branching done 1074 times (23349 iterations), fathomed 7 nodes and fixed 35 variables
Cbc0035I Maximum depth 40, 358 variables fixed on reduced cost
Total time (CPU seconds):       1.98   (Wallclock seconds):       2.09

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 124 (-80) rows, 147 (-55) columns and 2635 (-3018) elements
Clp1000I sum of infeasibilities 4.06945e-06 - average 3.28181e-08, 27 fixed columns
Coin0506I Presolve 98 (-26) rows, 119 (-28) columns and 1891 (-744) elements
Clp0006I 0  Obj 42.316263 Dual inf 8.8156764 (116)
Clp0029I End of values pass after 119 iterations
Clp0014I Perturbing problem by 0.001% of 1.9166989 - largest nonzero change 1.7960916e-05 ( 0.0015823696%) - largest zero change 2.9430822e-05
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Coin0511I After Postsolve, objective 51.812813, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 51.812813
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Coin0511I After Postsolve, objective 51.812813, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 51.81281317 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 123 rows, 147 columns (147 integer (147 of which binary)) and 2640 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.703%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 43 integers unsatisfied sum - 5.35666
Cbc0038I Pass   1: suminf.    3.15023 (38) obj. -38.3325 iterations 25
Cbc0038I Pass   2: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   3: suminf.    0.25154 (5) obj. -0.758915 iterations 30
Cbc0038I Solution found of 3.98955
Cbc0038I Rounding solution of 1.74678 is better than previous of 3.98955

Cbc0038I Before mini branch and bound, 103 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 15 rows 16 columns
Cbc0038I Mini branch and bound improved solution from 1.74678 to -4.83484 (0.04 seconds)
Cbc0038I Round again with cutoff of -8.2554
Cbc0038I Pass   4: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   5: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   6: suminf.    1.05090 (17) obj. -14.7423 iterations 18
Cbc0038I Pass   7: suminf.    0.99120 (10) obj. -8.2554 iterations 16
Cbc0038I Pass   8: suminf.    0.85263 (3) obj. -8.2554 iterations 28
Cbc0038I Pass   9: suminf.    0.81933 (4) obj. -8.2554 iterations 6
Cbc0038I Pass  10: suminf.    1.23085 (4) obj. -8.2554 iterations 11
Cbc0038I Pass  11: suminf.    1.23085 (4) obj. -8.2554 iterations 0
Cbc0038I Pass  12: suminf.    0.81933 (4) obj. -8.2554 iterations 16
Cbc0038I Pass  13: suminf.    2.19516 (19) obj. -8.2554 iterations 29
Cbc0038I Pass  14: suminf.    1.88542 (19) obj. -8.2554 iterations 3
Cbc0038I Pass  15: suminf.    1.57109 (16) obj. -8.2554 iterations 48
Cbc0038I Pass  16: suminf.    1.42205 (17) obj. -8.2554 iterations 1
Cbc0038I Pass  17: suminf.    1.67593 (11) obj. -8.2554 iterations 18
Cbc0038I Pass  18: suminf.    1.29610 (11) obj. -8.2554 iterations 4
Cbc0038I Pass  19: suminf.    2.50901 (16) obj. -8.2554 iterations 22
Cbc0038I Pass  20: suminf.    1.00239 (17) obj. -8.2554 iterations 3
Cbc0038I Pass  21: suminf.    0.86357 (15) obj. -8.2554 iterations 13
Cbc0038I Pass  22: suminf.    1.88950 (12) obj. -8.2554 iterations 19
Cbc0038I Pass  23: suminf.    1.46590 (13) obj. -8.2554 iterations 5
Cbc0038I Pass  24: suminf.    2.54285 (15) obj. -8.2554 iterations 21
Cbc0038I Pass  25: suminf.    2.54285 (15) obj. -8.2554 iterations 0
Cbc0038I Pass  26: suminf.    2.61044 (13) obj. -8.2554 iterations 17
Cbc0038I Pass  27: suminf.    2.40945 (15) obj. -8.2554 iterations 9
Cbc0038I Pass  28: suminf.    2.72635 (13) obj. -8.2554 iterations 12
Cbc0038I Pass  29: suminf.    1.72813 (16) obj. -8.2554 iterations 29
Cbc0038I Pass  30: suminf.    1.18962 (17) obj. -8.2554 iterations 15
Cbc0038I Pass  31: suminf.    2.36420 (13) obj. -8.2554 iterations 16
Cbc0038I Pass  32: suminf.    1.13684 (16) obj. -8.2554 iterations 13
Cbc0038I Pass  33: suminf.    0.85876 (15) obj. -8.2554 iterations 11
Cbc0038I Rounding solution of -5.44522 is better than previous of -4.83484

Cbc0038I Before mini branch and bound, 87 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 20 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I Round again with cutoff of -14.4122
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass  34: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass  35: suminf.    0.93925 (7) obj. -14.4122 iterations 60
Cbc0038I Pass  36: suminf.    0.76057 (6) obj. -14.4122 iterations 7
Cbc0038I Pass  37: suminf.    1.14031 (6) obj. -14.4122 iterations 12
Cbc0038I Pass  38: suminf.    1.12524 (7) obj. -14.4122 iterations 5
Cbc0038I Pass  39: suminf.    1.12338 (7) obj. -14.4122 iterations 9
Cbc0038I Pass  40: suminf.    1.12338 (7) obj. -14.4122 iterations 7
Cbc0038I Pass  41: suminf.    1.12524 (7) obj. -14.4122 iterations 9
Cbc0038I Pass  42: suminf.    1.18656 (12) obj. -14.4122 iterations 20
Cbc0038I Pass  43: suminf.    1.18656 (12) obj. -14.4122 iterations 3
Cbc0038I Pass  44: suminf.    1.50979 (8) obj. -14.4122 iterations 21
Cbc0038I Pass  45: suminf.    0.89722 (7) obj. -14.4122 iterations 3
Cbc0038I Pass  46: suminf.    1.00226 (7) obj. -14.4122 iterations 6
Cbc0038I Pass  47: suminf.    2.07080 (13) obj. -14.4122 iterations 33
Cbc0038I Pass  48: suminf.    1.65471 (14) obj. -14.4122 iterations 12
Cbc0038I Pass  49: suminf.    2.27725 (23) obj. -14.4122 iterations 26
Cbc0038I Pass  50: suminf.    2.25183 (23) obj. -14.4122 iterations 1
Cbc0038I Pass  51: suminf.    3.35271 (18) obj. -14.4122 iterations 20
Cbc0038I Pass  52: suminf.    3.20400 (22) obj. -14.4122 iterations 11
Cbc0038I Pass  53: suminf.    3.26411 (18) obj. -14.4122 iterations 21
Cbc0038I Pass  54: suminf.    3.08938 (22) obj. -14.4122 iterations 13
Cbc0038I Pass  55: suminf.    3.45054 (19) obj. -14.4122 iterations 12
Cbc0038I Pass  56: suminf.    3.23600 (22) obj. -14.4122 iterations 10
Cbc0038I Pass  57: suminf.    3.50225 (19) obj. -14.4122 iterations 20
Cbc0038I Pass  58: suminf.    3.27119 (22) obj. -14.4122 iterations 11
Cbc0038I Pass  59: suminf.    3.45054 (19) obj. -14.4122 iterations 12
Cbc0038I Pass  60: suminf.    2.70884 (19) obj. -14.4122 iterations 15
Cbc0038I Pass  61: suminf.    2.54580 (23) obj. -14.4122 iterations 11
Cbc0038I Pass  62: suminf.    3.03651 (20) obj. -14.4122 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 88 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 22 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -5.44522 - took 0.06 seconds
Cbc0012I Integer solution of -5.445224 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 123 rows 147 columns, reduced to 13 rows 14 columns
Cbc0031I 51 added rows had average density of 62.176471
Cbc0013I At root node, 51 cuts changed objective from -39.039547 to -13.193678 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8546 row cuts average 6.7 elements, 0 column cuts (17 active)  in 0.174 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1580 row cuts average 131.5 elements, 0 column cuts (0 active)  in 0.174 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 37 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 666 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.054 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1583 row cuts average 10.9 elements, 0 column cuts (0 active)  in 0.110 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 361 row cuts average 90.2 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 131 row cuts average 24.8 elements, 0 column cuts (0 active)  in 0.527 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -5.445224 best solution, best possible -13.193678 (2.44 seconds)
Cbc0012I Integer solution of -5.499534 found by rounding after 5111 iterations and 19 nodes (2.84 seconds)
Cbc0012I Integer solution of -6.3089 found by rounding after 5737 iterations and 41 nodes (2.96 seconds)
Cbc0038I Full problem 123 rows 147 columns, reduced to 3 rows 5 columns
Cbc0012I Integer solution of -6.80265 found by RINS after 5737 iterations and 41 nodes (2.97 seconds)
Cbc0016I Integer solution of -6.85856 found by strong branching after 6079 iterations and 57 nodes (3.03 seconds)
Cbc0004I Integer solution of -7.80265 found after 6196 iterations and 61 nodes (3.05 seconds)
Cbc0001I Search completed - best objective -7.80265, took 6712 iterations and 70 nodes (3.08 seconds)
Cbc0032I Strong branching done 708 times (9298 iterations), fathomed 9 nodes and fixed 13 variables
Cbc0035I Maximum depth 19, 230 variables fixed on reduced cost
Total time (CPU seconds):       2.38   (Wallclock seconds):       3.10

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 175 (-30) rows, 100 (-3) columns and 542 (-61) elements
Clp1000I sum of infeasibilities 3.27547e-06 - average 1.8717e-08, 11 fixed columns
Coin0506I Presolve 153 (-22) rows, 89 (-11) columns and 476 (-66) elements
Clp0029I End of values pass after 89 iterations
Clp0014I Perturbing problem by 0.001% of 1.5755947 - largest nonzero change 0 ( 0%) - largest zero change 2.3379487e-05
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Coin0511I After Postsolve, objective 38.576444, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Clp0000I Optimal - objective value 38.576444
Coin0511I After Postsolve, objective 38.576444, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 38.57644402 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 174 rows, 100 columns (99 integer (99 of which binary)) and 551 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.955%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 52 integers unsatisfied sum - 7.45237
Cbc0038I Solution found of 2.25821
Cbc0038I Relaxing continuous gives -4.36491
Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0038I Mini branch and bound improved solution from -4.36491 to -7.80265 (0.05 seconds)
Cbc0038I Round again with cutoff of -10.8537
Cbc0038I Pass   1: suminf.    1.14846 (37) obj. -10.8537 iterations 75
Cbc0038I Pass   2: suminf.    1.03742 (5) obj. -10.8537 iterations 43
Cbc0038I Pass   3: suminf.    0.64855 (6) obj. -10.8537 iterations 5
Cbc0038I Pass   4: suminf.    1.05872 (4) obj. -10.8537 iterations 11
Cbc0038I Pass   5: suminf.    0.95118 (5) obj. -10.8537 iterations 2
Cbc0038I Pass   6: suminf.    1.83783 (6) obj. -10.8537 iterations 12
Cbc0038I Pass   7: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass   8: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass   9: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  10: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  11: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  12: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  13: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  14: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I Pass  15: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass  16: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass  17: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  18: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  19: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  20: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  21: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  22: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I Pass  23: suminf.    1.83783 (6) obj. -10.8537 iterations 0
Cbc0038I Pass  24: suminf.    1.29091 (5) obj. -10.8537 iterations 8
Cbc0038I Pass  25: suminf.    1.29091 (5) obj. -10.8537 iterations 2
Cbc0038I Pass  26: suminf.    1.04609 (5) obj. -10.8537 iterations 9
Cbc0038I Pass  27: suminf.    0.94501 (4) obj. -10.8537 iterations 1
Cbc0038I Pass  28: suminf.    1.13384 (5) obj. -10.8537 iterations 6
Cbc0038I Pass  29: suminf.    1.13384 (5) obj. -10.8537 iterations 0
Cbc0038I Pass  30: suminf.    1.83783 (6) obj. -10.8537 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 174 rows 100 columns, reduced to 100 rows 60 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of -7.80265 - took 0.09 seconds
Cbc0012I Integer solution of -7.80265 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0031I 29 added rows had average density of 60.413793
Cbc0013I At root node, 29 cuts changed objective from -38.312474 to -32.1272 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 16514 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.129 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1699 row cuts average 100.0 elements, 0 column cuts (0 active)  in 0.137 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.133 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 173 row cuts average 99.8 elements, 0 column cuts (0 active)  in 0.059 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -7.80265 best solution, best possible -32.1272 (1.37 seconds)
Cbc0038I Full problem 174 rows 100 columns, reduced to 89 rows 53 columns
Cbc0038I Full problem 174 rows 100 columns, reduced to 4 rows 5 columns
Cbc0001I Search completed - best objective -7.80265, took 13325 iterations and 102 nodes (1.90 seconds)
Cbc0032I Strong branching done 1074 times (23349 iterations), fathomed 7 nodes and fixed 35 variables
Cbc0035I Maximum depth 40, 358 variables fixed on reduced cost
Total time (CPU seconds):       1.84   (Wallclock seconds):       1.92

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 124 (-81) rows, 147 (-56) columns and 2635 (-3019) elements
Clp1000I sum of infeasibilities 4.06945e-06 - average 3.28181e-08, 27 fixed columns
Coin0506I Presolve 98 (-26) rows, 119 (-28) columns and 1891 (-744) elements
Clp0006I 0  Obj 42.316263 Dual inf 8.8156764 (116)
Clp0029I End of values pass after 119 iterations
Clp0014I Perturbing problem by 0.001% of 1.9166989 - largest nonzero change 1.7960916e-05 ( 0.0015823696%) - largest zero change 2.9430822e-05
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Coin0511I After Postsolve, objective 51.812813, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 51.812813
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Clp0000I Optimal - objective value 51.812813
Coin0511I After Postsolve, objective 51.812813, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 51.81281317 - 0 iterations time 0.032, Presolve 0.00, Idiot 0.03

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 6 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 123 rows, 147 columns (147 integer (147 of which binary)) and 2640 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.703%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 43 integers unsatisfied sum - 5.35666
Cbc0038I Pass   1: suminf.    3.15023 (38) obj. -38.3325 iterations 25
Cbc0038I Pass   2: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   3: suminf.    0.25154 (5) obj. -0.758915 iterations 30
Cbc0038I Solution found of 3.98955
Cbc0038I Rounding solution of 1.74678 is better than previous of 3.98955

Cbc0038I Before mini branch and bound, 103 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 15 rows 16 columns
Cbc0038I Mini branch and bound improved solution from 1.74678 to -4.83484 (0.05 seconds)
Cbc0038I Round again with cutoff of -8.2554
Cbc0038I Pass   4: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   5: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass   6: suminf.    1.05090 (17) obj. -14.7423 iterations 18
Cbc0038I Pass   7: suminf.    0.99120 (10) obj. -8.2554 iterations 16
Cbc0038I Pass   8: suminf.    0.85263 (3) obj. -8.2554 iterations 28
Cbc0038I Pass   9: suminf.    0.81933 (4) obj. -8.2554 iterations 6
Cbc0038I Pass  10: suminf.    1.23085 (4) obj. -8.2554 iterations 11
Cbc0038I Pass  11: suminf.    1.23085 (4) obj. -8.2554 iterations 0
Cbc0038I Pass  12: suminf.    0.81933 (4) obj. -8.2554 iterations 16
Cbc0038I Pass  13: suminf.    2.19516 (19) obj. -8.2554 iterations 29
Cbc0038I Pass  14: suminf.    1.88542 (19) obj. -8.2554 iterations 3
Cbc0038I Pass  15: suminf.    1.57109 (16) obj. -8.2554 iterations 48
Cbc0038I Pass  16: suminf.    1.42205 (17) obj. -8.2554 iterations 1
Cbc0038I Pass  17: suminf.    1.67593 (11) obj. -8.2554 iterations 18
Cbc0038I Pass  18: suminf.    1.29610 (11) obj. -8.2554 iterations 4
Cbc0038I Pass  19: suminf.    2.50901 (16) obj. -8.2554 iterations 22
Cbc0038I Pass  20: suminf.    1.00239 (17) obj. -8.2554 iterations 3
Cbc0038I Pass  21: suminf.    0.86357 (15) obj. -8.2554 iterations 13
Cbc0038I Pass  22: suminf.    1.88950 (12) obj. -8.2554 iterations 19
Cbc0038I Pass  23: suminf.    1.46590 (13) obj. -8.2554 iterations 5
Cbc0038I Pass  24: suminf.    2.54285 (15) obj. -8.2554 iterations 21
Cbc0038I Pass  25: suminf.    2.54285 (15) obj. -8.2554 iterations 0
Cbc0038I Pass  26: suminf.    2.61044 (13) obj. -8.2554 iterations 17
Cbc0038I Pass  27: suminf.    2.40945 (15) obj. -8.2554 iterations 9
Cbc0038I Pass  28: suminf.    2.72635 (13) obj. -8.2554 iterations 12
Cbc0038I Pass  29: suminf.    1.72813 (16) obj. -8.2554 iterations 29
Cbc0038I Pass  30: suminf.    1.18962 (17) obj. -8.2554 iterations 15
Cbc0038I Pass  31: suminf.    2.36420 (13) obj. -8.2554 iterations 16
Cbc0038I Pass  32: suminf.    1.13684 (16) obj. -8.2554 iterations 13
Cbc0038I Pass  33: suminf.    0.85876 (15) obj. -8.2554 iterations 11
Cbc0038I Rounding solution of -5.44522 is better than previous of -4.83484

Cbc0038I Before mini branch and bound, 87 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 20 rows 25 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I Round again with cutoff of -14.4122
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass  34: suminf.    3.15023 (38) obj. -38.3325 iterations 0
Cbc0038I Pass  35: suminf.    0.93925 (7) obj. -14.4122 iterations 60
Cbc0038I Pass  36: suminf.    0.76057 (6) obj. -14.4122 iterations 7
Cbc0038I Pass  37: suminf.    1.14031 (6) obj. -14.4122 iterations 12
Cbc0038I Pass  38: suminf.    1.12524 (7) obj. -14.4122 iterations 5
Cbc0038I Pass  39: suminf.    1.12338 (7) obj. -14.4122 iterations 9
Cbc0038I Pass  40: suminf.    1.12338 (7) obj. -14.4122 iterations 7
Cbc0038I Pass  41: suminf.    1.12524 (7) obj. -14.4122 iterations 9
Cbc0038I Pass  42: suminf.    1.18656 (12) obj. -14.4122 iterations 20
Cbc0038I Pass  43: suminf.    1.18656 (12) obj. -14.4122 iterations 3
Cbc0038I Pass  44: suminf.    1.50979 (8) obj. -14.4122 iterations 21
Cbc0038I Pass  45: suminf.    0.89722 (7) obj. -14.4122 iterations 3
Cbc0038I Pass  46: suminf.    1.00226 (7) obj. -14.4122 iterations 6
Cbc0038I Pass  47: suminf.    2.07080 (13) obj. -14.4122 iterations 33
Cbc0038I Pass  48: suminf.    1.65471 (14) obj. -14.4122 iterations 12
Cbc0038I Pass  49: suminf.    2.27725 (23) obj. -14.4122 iterations 26
Cbc0038I Pass  50: suminf.    2.25183 (23) obj. -14.4122 iterations 1
Cbc0038I Pass  51: suminf.    3.35271 (18) obj. -14.4122 iterations 20
Cbc0038I Pass  52: suminf.    3.20400 (22) obj. -14.4122 iterations 11
Cbc0038I Pass  53: suminf.    3.26411 (18) obj. -14.4122 iterations 21
Cbc0038I Pass  54: suminf.    3.08938 (22) obj. -14.4122 iterations 13
Cbc0038I Pass  55: suminf.    3.45054 (19) obj. -14.4122 iterations 12
Cbc0038I Pass  56: suminf.    3.23600 (22) obj. -14.4122 iterations 10
Cbc0038I Pass  57: suminf.    3.50225 (19) obj. -14.4122 iterations 20
Cbc0038I Pass  58: suminf.    3.27119 (22) obj. -14.4122 iterations 11
Cbc0038I Pass  59: suminf.    3.45054 (19) obj. -14.4122 iterations 12
Cbc0038I Pass  60: suminf.    2.70884 (19) obj. -14.4122 iterations 15
Cbc0038I Pass  61: suminf.    2.54580 (23) obj. -14.4122 iterations 11
Cbc0038I Pass  62: suminf.    3.03651 (20) obj. -14.4122 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 88 integers at bound fixed and 0 continuous
Cbc0038I Full problem 123 rows 147 columns, reduced to 22 rows 30 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I After 0.11 seconds - Feasibility pump exiting with objective of -5.44522 - took 0.07 seconds
Cbc0012I Integer solution of -5.445224 found by feasibility pump after 0 iterations and 0 nodes (0.11 seconds)
Cbc0038I Full problem 123 rows 147 columns, reduced to 13 rows 14 columns
Cbc0031I 51 added rows had average density of 62.176471
Cbc0013I At root node, 51 cuts changed objective from -39.039547 to -13.193678 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 8546 row cuts average 6.7 elements, 0 column cuts (17 active)  in 0.186 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1580 row cuts average 131.5 elements, 0 column cuts (0 active)  in 0.195 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 37 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 666 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1583 row cuts average 10.9 elements, 0 column cuts (0 active)  in 0.119 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 361 row cuts average 90.2 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 131 row cuts average 24.8 elements, 0 column cuts (0 active)  in 0.584 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -5.445224 best solution, best possible -13.193678 (2.74 seconds)
Cbc0012I Integer solution of -5.499534 found by rounding after 5111 iterations and 19 nodes (3.21 seconds)
Cbc0012I Integer solution of -6.3089 found by rounding after 5737 iterations and 41 nodes (3.34 seconds)
Cbc0038I Full problem 123 rows 147 columns, reduced to 3 rows 5 columns
Cbc0012I Integer solution of -6.80265 found by RINS after 5737 iterations and 41 nodes (3.35 seconds)
Cbc0016I Integer solution of -6.85856 found by strong branching after 6079 iterations and 57 nodes (3.44 seconds)
Cbc0010I After 57 nodes, 9 on tree, -6.85856 best solution, best possible -13.193678 (3.44 seconds)
Cbc0004I Integer solution of -7.80265 found after 6196 iterations and 61 nodes (3.47 seconds)
Cbc0001I Search completed - best objective -7.80265, took 6712 iterations and 70 nodes (3.51 seconds)
Cbc0032I Strong branching done 708 times (9298 iterations), fathomed 9 nodes and fixed 13 variables
Cbc0035I Maximum depth 19, 230 variables fixed on reduced cost
Total time (CPU seconds):       2.67   (Wallclock seconds):       3.54

