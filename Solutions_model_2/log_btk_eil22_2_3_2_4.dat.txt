Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 16 (-31) rows, 12 (-12) columns and 50 (-79) elements
Clp1000I sum of infeasibilities 1.221e-07 - average 7.63127e-09, 3 fixed columns
Coin0506I Presolve 11 (-5) rows, 9 (-3) columns and 34 (-16) elements
Clp0029I End of values pass after 8 iterations
Clp0014I Perturbing problem by 0.001% of 0.3428296 - largest nonzero change 0 ( 0%) - largest zero change 1.0940741e-05
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Coin0511I After Postsolve, objective 68.684689, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Coin0511I After Postsolve, objective 68.684689, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 68.68468908 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 16 rows, 12 columns (11 integer (11 of which binary)) and 50 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.667%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.30724
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.6667 iterations 4
Cbc0038I Solution found of -25.6667
Cbc0038I Relaxing continuous gives -25.6667
Cbc0038I Rounding solution of -26 is better than previous of -25.6667

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 12 columns, reduced to 5 rows 4 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -30.2605
Cbc0038I Pass   2: suminf.    0.12820 (2) obj. -30.2605 iterations 1
Cbc0038I Pass   3: suminf.    0.29550 (2) obj. -30.2605 iterations 3
Cbc0038I Pass   4: suminf.    0.25574 (1) obj. -30.2605 iterations 1
Cbc0038I Pass   5: suminf.    0.48009 (1) obj. -30.2605 iterations 1
Cbc0038I Pass   6: suminf.    1.16301 (3) obj. -30.2605 iterations 3
Cbc0038I Pass   7: suminf.    0.36177 (1) obj. -30.2605 iterations 2
Cbc0038I Pass   8: suminf.    0.07388 (2) obj. -30.2605 iterations 2
Cbc0038I Pass   9: suminf.    0.85552 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  10: suminf.    0.85552 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  11: suminf.    1.04272 (4) obj. -30.2605 iterations 3
Cbc0038I Pass  12: suminf.    0.96003 (4) obj. -30.2605 iterations 2
Cbc0038I Pass  13: suminf.    0.71424 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  14: suminf.    0.73624 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  15: suminf.    0.84532 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  16: suminf.    0.84532 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  17: suminf.    0.41967 (2) obj. -30.2605 iterations 2
Cbc0038I Pass  18: suminf.    0.90064 (2) obj. -30.2605 iterations 2
Cbc0038I Pass  19: suminf.    0.92094 (4) obj. -30.2605 iterations 2
Cbc0038I Pass  20: suminf.    0.90064 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  21: suminf.    1.43159 (4) obj. -30.2605 iterations 4
Cbc0038I Pass  22: suminf.    1.41332 (4) obj. -30.2605 iterations 1
Cbc0038I Pass  23: suminf.    0.84384 (3) obj. -30.2605 iterations 5
Cbc0038I Pass  24: suminf.    0.75597 (3) obj. -30.2605 iterations 1
Cbc0038I Pass  25: suminf.    0.72355 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  26: suminf.    0.07388 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  27: suminf.    0.85552 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  28: suminf.    0.85552 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  29: suminf.    0.36177 (1) obj. -30.2605 iterations 1
Cbc0038I Pass  30: suminf.    0.36177 (1) obj. -30.2605 iterations 0
Cbc0038I Pass  31: suminf.    1.22395 (3) obj. -30.2605 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 12 columns, reduced to 13 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -26 - took 0.01 seconds
Cbc0012I Integer solution of -26.000033 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 16 rows 12 columns, reduced to 7 rows 5 columns
Cbc0031I 6 added rows had average density of 10.166667
Cbc0013I At root node, 6 cuts changed objective from -68.603423 to -30.134018 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 182 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 288 row cuts average 10.8 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 25 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 5 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 134 row cuts average 8.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 14 row cuts average 10.4 elements, 0 column cuts (0 active)  in 0.821 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -26.000033 best solution, best possible -30.134018 (1.47 seconds)
Cbc0001I Search completed - best objective -26.000033, took 859 iterations and 2 nodes (1.47 seconds)
Cbc0032I Strong branching done 16 times (76 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 4 variables fixed on reduced cost
Total time (CPU seconds):       0.91   (Wallclock seconds):       1.47

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 31 (-15) rows, 37 (-7) columns and 239 (-121) elements
Clp1000I sum of infeasibilities 0 - average 0, 11 fixed columns
Coin0506I Presolve 25 (-6) rows, 26 (-11) columns and 113 (-126) elements
Clp0006I 0  Obj 130.3189 Dual inf 3.224496 (25)
Clp0029I End of values pass after 26 iterations
Clp0000I Optimal - objective value 171.28791
Clp0000I Optimal - objective value 171.28791
Coin0511I After Postsolve, objective 171.28791, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 171.28791 Dual inf 54.353701 (2)
Clp0014I Perturbing problem by 0.001% of 1.6588588 - largest nonzero change 0 ( 0%) - largest zero change 2.5816127e-05
Clp0000I Optimal - objective value 178.97083
Clp0000I Optimal - objective value 178.97083
Clp0000I Optimal - objective value 178.97083
Coin0511I After Postsolve, objective 178.97083, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 178.9708325 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 26 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 14 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 29 rows, 37 columns (37 integer (37 of which binary)) and 246 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 8.108%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 22 integers unsatisfied sum - 5.27634
Cbc0038I Pass   1: suminf.    0.09091 (1) obj. -103 iterations 23
Cbc0038I Solution found of -13
Cbc0038I Rounding solution of -41.3333 is better than previous of -13

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 37 columns, reduced to 10 rows 9 columns
Cbc0038I Mini branch and bound improved solution from -41.3333 to -54 (0.01 seconds)
Cbc0038I Round again with cutoff of -61.4708
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.09091 (1) obj. -103 iterations 0
Cbc0038I Pass   3: suminf.    0.48960 (1) obj. -61.4708 iterations 3
Cbc0038I Pass   4: suminf.    3.05883 (10) obj. -61.4708 iterations 9
Cbc0038I Pass   5: suminf.    2.01494 (5) obj. -61.4708 iterations 5
Cbc0038I Pass   6: suminf.    2.55825 (7) obj. -61.4708 iterations 3
Cbc0038I Pass   7: suminf.    1.89626 (5) obj. -61.4708 iterations 3
Cbc0038I Pass   8: suminf.    1.62647 (6) obj. -61.4708 iterations 8
Cbc0038I Pass   9: suminf.    1.62647 (6) obj. -61.4708 iterations 1
Cbc0038I Pass  10: suminf.    0.44444 (1) obj. -72.4444 iterations 5
Cbc0038I Pass  11: suminf.    0.37856 (1) obj. -61.4708 iterations 1
Cbc0038I Pass  12: suminf.    1.14252 (3) obj. -61.4708 iterations 7
Cbc0038I Pass  13: suminf.    1.14252 (3) obj. -61.4708 iterations 1
Cbc0038I Pass  14: suminf.    0.56667 (2) obj. -64.5692 iterations 6
Cbc0038I Pass  15: suminf.    0.68547 (3) obj. -61.4708 iterations 3
Cbc0038I Pass  16: suminf.    0.44153 (2) obj. -61.4708 iterations 4
Cbc0038I Pass  17: suminf.    0.44444 (1) obj. -71.4444 iterations 3
Cbc0038I Pass  18: suminf.    0.39469 (1) obj. -61.4708 iterations 1
Cbc0038I Pass  19: suminf.    3.02354 (7) obj. -61.4708 iterations 13
Cbc0038I Pass  20: suminf.    2.59194 (8) obj. -61.4708 iterations 2
Cbc0038I Pass  21: suminf.    2.58072 (9) obj. -61.4708 iterations 1
Cbc0038I Pass  22: suminf.    0.81682 (3) obj. -90.2967 iterations 9
Cbc0038I Pass  23: suminf.    0.21963 (4) obj. -102.114 iterations 4
Cbc0038I Pass  24: suminf.    1.17375 (4) obj. -61.4708 iterations 5
Cbc0038I Pass  25: suminf.    5.23115 (12) obj. -61.4708 iterations 11
Cbc0038I Pass  26: suminf.    3.58809 (10) obj. -61.4708 iterations 2
Cbc0038I Pass  27: suminf.    2.08759 (7) obj. -61.4708 iterations 5
Cbc0038I Pass  28: suminf.    0.58005 (2) obj. -61.4708 iterations 7
Cbc0038I Pass  29: suminf.    0.12306 (1) obj. -61.4708 iterations 1
Cbc0038I Pass  30: suminf.    0.21963 (4) obj. -102.114 iterations 4
Cbc0038I Pass  31: suminf.    1.17375 (4) obj. -61.4708 iterations 5
Cbc0038I Rounding solution of -54.3333 is better than previous of -54

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 37 columns, reduced to 11 rows 13 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -74.9182
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.09091 (1) obj. -103 iterations 0
Cbc0038I Pass  32: suminf.    0.37456 (1) obj. -74.9182 iterations 2
Cbc0038I Pass  33: suminf.    4.01952 (11) obj. -74.9182 iterations 12
Cbc0038I Pass  34: suminf.    2.77466 (12) obj. -74.9182 iterations 4
Cbc0038I Pass  35: suminf.    2.49490 (8) obj. -74.9182 iterations 2
Cbc0038I Pass  36: suminf.    1.64674 (6) obj. -74.9182 iterations 8
Cbc0038I Pass  37: suminf.    1.30038 (6) obj. -74.9182 iterations 10
Cbc0038I Pass  38: suminf.    1.26182 (5) obj. -74.9182 iterations 6
Cbc0038I Pass  39: suminf.    0.97401 (3) obj. -74.9182 iterations 5
Cbc0038I Pass  40: suminf.    0.59435 (5) obj. -74.9182 iterations 3
Cbc0038I Pass  41: suminf.    0.51220 (4) obj. -74.9182 iterations 1
Cbc0038I Pass  42: suminf.    0.76524 (4) obj. -74.9182 iterations 2
Cbc0038I Pass  43: suminf.    1.07705 (7) obj. -74.9182 iterations 5
Cbc0038I Pass  44: suminf.    0.94810 (3) obj. -74.9182 iterations 1
Cbc0038I Pass  45: suminf.    0.88205 (4) obj. -74.9182 iterations 5
Cbc0038I Pass  46: suminf.    0.74160 (5) obj. -74.9182 iterations 6
Cbc0038I Pass  47: suminf.    0.51220 (4) obj. -74.9182 iterations 1
Cbc0038I Pass  48: suminf.    0.76524 (4) obj. -74.9182 iterations 2
Cbc0038I Pass  49: suminf.    1.16219 (4) obj. -74.9182 iterations 7
Cbc0038I Pass  50: suminf.    0.96118 (4) obj. -74.9182 iterations 4
Cbc0038I Pass  51: suminf.    0.45861 (4) obj. -74.9182 iterations 4
Cbc0038I Pass  52: suminf.    0.45861 (4) obj. -74.9182 iterations 0
Cbc0038I Pass  53: suminf.    0.97112 (4) obj. -74.9182 iterations 5
Cbc0038I Pass  54: suminf.    2.62897 (10) obj. -74.9182 iterations 7
Cbc0038I Pass  55: suminf.    2.31728 (9) obj. -74.9182 iterations 2
Cbc0038I Pass  56: suminf.    0.36066 (1) obj. -74.9182 iterations 8
Cbc0038I Pass  57: suminf.    0.36066 (1) obj. -74.9182 iterations 2
Cbc0038I Pass  58: suminf.    0.09091 (1) obj. -103 iterations 6
Cbc0038I Pass  59: suminf.    0.37456 (1) obj. -74.9182 iterations 2
Cbc0038I Pass  60: suminf.    1.93665 (7) obj. -74.9182 iterations 8
Cbc0038I Rounding solution of -74.3333 is better than previous of -54.3333

Cbc0038I Before mini branch and bound, 9 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 37 columns, reduced to 25 rows 28 columns
Cbc0038I Mini branch and bound improved solution from -74.3333 to -79.3333 (0.02 seconds)
Cbc0038I Round again with cutoff of -94.1457
Cbc0038I Reduced cost fixing fixed 4 variables on major pass 4
Cbc0038I Pass  60: suminf.    0.09091 (1) obj. -103 iterations 0
Cbc0038I Pass  61: suminf.    0.18035 (1) obj. -94.1457 iterations 2
Cbc0038I Pass  62: suminf.    1.15388 (8) obj. -94.1457 iterations 6
Cbc0038I Pass  63: suminf.    0.34052 (5) obj. -94.1457 iterations 3
Cbc0038I Pass  64: suminf.    0.41202 (4) obj. -94.1457 iterations 6
Cbc0038I Pass  65: suminf.    1.24977 (4) obj. -94.1457 iterations 6
Cbc0038I Pass  66: suminf.    0.47401 (1) obj. -94.1457 iterations 6
Cbc0038I Pass  67: suminf.    0.09091 (1) obj. -103 iterations 4
Cbc0038I Pass  68: suminf.    0.18035 (1) obj. -94.1457 iterations 2
Cbc0038I Pass  69: suminf.    2.71772 (9) obj. -94.1457 iterations 9
Cbc0038I Pass  70: suminf.    0.95347 (5) obj. -94.1457 iterations 5
Cbc0038I Pass  71: suminf.    0.48541 (4) obj. -94.1457 iterations 1
Cbc0038I Pass  72: suminf.    0.52741 (4) obj. -94.1457 iterations 4
Cbc0038I Pass  73: suminf.    0.51165 (4) obj. -94.1457 iterations 1
Cbc0038I Pass  74: suminf.    3.43963 (9) obj. -94.1457 iterations 7
Cbc0038I Pass  75: suminf.    1.34832 (4) obj. -94.1457 iterations 4
Cbc0038I Pass  76: suminf.    0.48485 (2) obj. -103.788 iterations 3
Cbc0038I Pass  77: suminf.    0.09091 (1) obj. -103 iterations 2
Cbc0038I Pass  78: suminf.    0.18035 (1) obj. -94.1457 iterations 2
Cbc0038I Pass  79: suminf.    2.05475 (6) obj. -94.1457 iterations 6
Cbc0038I Pass  80: suminf.    4.74949 (13) obj. -94.1457 iterations 8
Cbc0038I Pass  81: suminf.    0.77432 (3) obj. -94.1457 iterations 9
Cbc0038I Pass  82: suminf.    2.94589 (9) obj. -94.1457 iterations 7
Cbc0038I Pass  83: suminf.    0.09091 (1) obj. -103 iterations 7
Cbc0038I Pass  84: suminf.    0.75868 (5) obj. -94.1457 iterations 7
Cbc0038I Pass  85: suminf.    0.48541 (4) obj. -94.1457 iterations 3
Cbc0038I Pass  86: suminf.    0.52741 (4) obj. -94.1457 iterations 4
Cbc0038I Pass  87: suminf.    2.14854 (8) obj. -94.1457 iterations 5
Cbc0038I Pass  88: suminf.    3.96536 (12) obj. -94.1457 iterations 5
Cbc0038I Pass  89: suminf.    0.91943 (5) obj. -94.1457 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 29 rows 37 columns, reduced to 24 rows 28 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -79.3333 - took 0.02 seconds
Cbc0012I Integer solution of -79.3333 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 29 rows 37 columns, reduced to 24 rows 24 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 3 added rows had average density of 8.3333333
Cbc0013I At root node, 3 cuts changed objective from -128.70758 to -88.651995 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 45 row cuts average 2.0 elements, 20 column cuts (20 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 2 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 2 row cuts average 15.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0001I Search completed - best objective -79.33330000000001, took 24 iterations and 0 nodes (0.05 seconds)
Cbc0035I Maximum depth 0, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.05

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 16 (-31) rows, 12 (-12) columns and 50 (-79) elements
Clp1000I sum of infeasibilities 1.221e-07 - average 7.63127e-09, 3 fixed columns
Coin0506I Presolve 11 (-5) rows, 9 (-3) columns and 34 (-16) elements
Clp0029I End of values pass after 8 iterations
Clp0014I Perturbing problem by 0.001% of 0.3428296 - largest nonzero change 0 ( 0%) - largest zero change 1.0940741e-05
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Coin0511I After Postsolve, objective 68.684689, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Clp0000I Optimal - objective value 68.684689
Coin0511I After Postsolve, objective 68.684689, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 68.68468908 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 16 rows, 12 columns (11 integer (11 of which binary)) and 50 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 4.667%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.30724
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -25.6667 iterations 4
Cbc0038I Solution found of -25.6667
Cbc0038I Relaxing continuous gives -25.6667
Cbc0038I Rounding solution of -26 is better than previous of -25.6667

Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 12 columns, reduced to 5 rows 4 columns
Cbc0038I Mini branch and bound did not improve solution (0.00 seconds)
Cbc0038I Round again with cutoff of -30.2605
Cbc0038I Pass   2: suminf.    0.12820 (2) obj. -30.2605 iterations 1
Cbc0038I Pass   3: suminf.    0.29550 (2) obj. -30.2605 iterations 3
Cbc0038I Pass   4: suminf.    0.25574 (1) obj. -30.2605 iterations 1
Cbc0038I Pass   5: suminf.    0.48009 (1) obj. -30.2605 iterations 1
Cbc0038I Pass   6: suminf.    1.16301 (3) obj. -30.2605 iterations 3
Cbc0038I Pass   7: suminf.    0.36177 (1) obj. -30.2605 iterations 2
Cbc0038I Pass   8: suminf.    0.07388 (2) obj. -30.2605 iterations 2
Cbc0038I Pass   9: suminf.    0.85552 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  10: suminf.    0.85552 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  11: suminf.    1.04272 (4) obj. -30.2605 iterations 3
Cbc0038I Pass  12: suminf.    0.96003 (4) obj. -30.2605 iterations 2
Cbc0038I Pass  13: suminf.    0.71424 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  14: suminf.    0.73624 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  15: suminf.    0.84532 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  16: suminf.    0.84532 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  17: suminf.    0.41967 (2) obj. -30.2605 iterations 2
Cbc0038I Pass  18: suminf.    0.90064 (2) obj. -30.2605 iterations 2
Cbc0038I Pass  19: suminf.    0.92094 (4) obj. -30.2605 iterations 2
Cbc0038I Pass  20: suminf.    0.90064 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  21: suminf.    1.43159 (4) obj. -30.2605 iterations 4
Cbc0038I Pass  22: suminf.    1.41332 (4) obj. -30.2605 iterations 1
Cbc0038I Pass  23: suminf.    0.84384 (3) obj. -30.2605 iterations 5
Cbc0038I Pass  24: suminf.    0.75597 (3) obj. -30.2605 iterations 1
Cbc0038I Pass  25: suminf.    0.72355 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  26: suminf.    0.07388 (2) obj. -30.2605 iterations 3
Cbc0038I Pass  27: suminf.    0.85552 (2) obj. -30.2605 iterations 1
Cbc0038I Pass  28: suminf.    0.85552 (2) obj. -30.2605 iterations 0
Cbc0038I Pass  29: suminf.    0.36177 (1) obj. -30.2605 iterations 1
Cbc0038I Pass  30: suminf.    0.36177 (1) obj. -30.2605 iterations 0
Cbc0038I Pass  31: suminf.    1.22395 (3) obj. -30.2605 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16 rows 12 columns, reduced to 13 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -26 - took 0.01 seconds
Cbc0012I Integer solution of -26.000033 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 16 rows 12 columns, reduced to 7 rows 5 columns
Cbc0031I 6 added rows had average density of 10.166667
Cbc0013I At root node, 6 cuts changed objective from -68.603423 to -30.134018 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 182 row cuts average 3.1 elements, 2 column cuts (2 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 288 row cuts average 10.8 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 25 row cuts average 5.3 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 5 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 134 row cuts average 8.4 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 14 row cuts average 10.4 elements, 0 column cuts (0 active)  in 0.795 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -26.000033 best solution, best possible -30.134018 (1.42 seconds)
Cbc0001I Search completed - best objective -26.000033, took 859 iterations and 2 nodes (1.42 seconds)
Cbc0032I Strong branching done 16 times (76 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 4 variables fixed on reduced cost
Total time (CPU seconds):       0.89   (Wallclock seconds):       1.42

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 26 (-21) rows, 32 (-13) columns and 152 (-209) elements
Clp1000I sum of infeasibilities 1.11022e-15 - average 4.27009e-17, 7 fixed columns
Coin0506I Presolve 23 (-3) rows, 25 (-7) columns and 67 (-85) elements
Clp0006I 0  Obj 99.741807 Dual inf 1.7629455 (24)
Clp0029I End of values pass after 25 iterations
Clp0000I Optimal - objective value 101.72873
Clp0000I Optimal - objective value 101.72873
Coin0511I After Postsolve, objective 101.72873, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 101.72873
Clp0000I Optimal - objective value 101.72873
Clp0000I Optimal - objective value 101.72873
Clp0000I Optimal - objective value 101.72873
Coin0511I After Postsolve, objective 101.72873, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 101.7287344 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 26 rows, 32 columns (32 integer (32 of which binary)) and 158 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.635%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 4.41367
Cbc0038I Pass   1: suminf.    0.58730 (3) obj. -24.9048 iterations 5
Cbc0038I Pass   2: suminf.    0.58730 (3) obj. -24.9048 iterations 0
Cbc0038I Solution found of -13
Cbc0038I Rounding solution of -18 is better than previous of -13

Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 32 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound improved solution from -18 to -20.6667 (0.01 seconds)
Cbc0038I Round again with cutoff of -25.4665
Cbc0038I Pass   3: suminf.    0.61493 (5) obj. -25.4665 iterations 2
Cbc0038I Pass   4: suminf.    0.61493 (5) obj. -25.4665 iterations 0
Cbc0038I Pass   5: suminf.    0.91304 (2) obj. -31.5652 iterations 5
Cbc0038I Pass   6: suminf.    0.61311 (2) obj. -25.4665 iterations 1
Cbc0038I Pass   7: suminf.    2.76062 (10) obj. -25.4665 iterations 6
Cbc0038I Pass   8: suminf.    2.46083 (10) obj. -25.4665 iterations 1
Cbc0038I Pass   9: suminf.    0.93122 (3) obj. -25.4665 iterations 11
Cbc0038I Pass  10: suminf.    0.21966 (2) obj. -25.4665 iterations 1
Cbc0038I Pass  11: suminf.    0.52174 (2) obj. -31.6087 iterations 2
Cbc0038I Pass  12: suminf.    0.58311 (2) obj. -25.4665 iterations 2
Cbc0038I Pass  13: suminf.    0.48000 (1) obj. -28.84 iterations 1
Cbc0038I Pass  14: suminf.    1.96430 (10) obj. -25.4665 iterations 11
Cbc0038I Pass  15: suminf.    1.96430 (10) obj. -25.4665 iterations 0
Cbc0038I Pass  16: suminf.    0.33333 (1) obj. -32 iterations 11
Cbc0038I Solution found of -26
Cbc0038I Before mini branch and bound, 10 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 32 columns, reduced to 18 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -34.5328
Cbc0038I Pass  17: suminf.    1.06081 (5) obj. -34.5328 iterations 0
Cbc0038I Pass  18: suminf.    1.06081 (5) obj. -34.5328 iterations 0
Cbc0038I Pass  19: suminf.    1.24220 (3) obj. -34.5328 iterations 5
Cbc0038I Pass  20: suminf.    1.24220 (3) obj. -34.5328 iterations 0
Cbc0038I Pass  21: suminf.    1.06763 (3) obj. -37.9678 iterations 1
Cbc0038I Pass  22: suminf.    0.89870 (3) obj. -34.5328 iterations 1
Cbc0038I Pass  23: suminf.    1.31122 (7) obj. -34.5328 iterations 2
Cbc0038I Pass  24: suminf.    0.94788 (3) obj. -34.5328 iterations 1
Cbc0038I Pass  25: suminf.    1.35311 (3) obj. -34.5328 iterations 2
Cbc0038I Pass  26: suminf.    1.35311 (3) obj. -34.5328 iterations 0
Cbc0038I Pass  27: suminf.    1.06763 (3) obj. -36.9678 iterations 1
Cbc0038I Pass  28: suminf.    1.82309 (11) obj. -34.5328 iterations 6
Cbc0038I Pass  29: suminf.    0.94893 (11) obj. -34.5328 iterations 1
Cbc0038I Pass  30: suminf.    0.94893 (11) obj. -34.5328 iterations 0
Cbc0038I Pass  31: suminf.    0.98775 (3) obj. -34.5328 iterations 13
Cbc0038I Pass  32: suminf.    0.78576 (3) obj. -34.5328 iterations 1
Cbc0038I Pass  33: suminf.    1.05115 (3) obj. -34.5328 iterations 3
Cbc0038I Pass  34: suminf.    1.70478 (5) obj. -34.5328 iterations 6
Cbc0038I Pass  35: suminf.    1.54667 (4) obj. -44.6696 iterations 1
Cbc0038I Pass  36: suminf.    1.11111 (3) obj. -37.5556 iterations 1
Cbc0038I Pass  37: suminf.    0.95698 (3) obj. -34.5328 iterations 5
Cbc0038I Pass  38: suminf.    0.91787 (3) obj. -35.182 iterations 1
Cbc0038I Pass  39: suminf.    0.88595 (3) obj. -34.5328 iterations 1
Cbc0038I Pass  40: suminf.    0.95775 (3) obj. -34.5328 iterations 3
Cbc0038I Pass  41: suminf.    3.53134 (12) obj. -34.5328 iterations 9
Cbc0038I Pass  42: suminf.    1.97537 (7) obj. -34.5328 iterations 4
Cbc0038I Pass  43: suminf.    1.97537 (7) obj. -34.5328 iterations 0
Cbc0038I Pass  44: suminf.    1.40219 (5) obj. -34.5328 iterations 5
Cbc0038I Pass  45: suminf.    1.40182 (5) obj. -34.5328 iterations 1
Cbc0038I Pass  46: suminf.    1.62352 (5) obj. -34.5328 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 0 continuous
Cbc0038I Full problem 26 rows 32 columns, reduced to 17 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -26 - took 0.01 seconds
Cbc0012I Integer solution of -26.000033 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 12 added rows had average density of 4.3333333
Cbc0013I At root node, 12 cuts changed objective from -68.663433 to -29.957349 in 2 passes
Cbc0014I Cut generator 0 (Probing) - 31 row cuts average 1.9 elements, 9 column cuts (9 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 12 row cuts average 9.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 11 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 7 row cuts average 3.4 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 23 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 4 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0001I Search completed - best objective -26.000033, took 30 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.04

