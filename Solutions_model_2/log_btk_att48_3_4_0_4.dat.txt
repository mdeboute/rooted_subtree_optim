Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 66 (-33) rows, 38 (-12) columns and 167 (-118) elements
Clp0000I Optimal - objective value 39699.282
Coin0511I After Postsolve, objective 39699.282, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 39699.28202 - 23 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 66 rows, 38 columns (37 integer (37 of which binary)) and 167 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.221%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 2
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -35642.6 iterations 14
Cbc0038I Solution found of -35642.6
Cbc0038I Relaxing continuous gives -35642.6
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 10 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -35642.6 to -37995.1 (0.01 seconds)
Cbc0038I Round again with cutoff of -38165.5
Cbc0038I Reduced cost fixing fixed 15 variables on major pass 2
Cbc0038I Pass   2: suminf.    2.00000 (4) obj. -39603.6 iterations 2
Cbc0038I Pass   3: suminf.    1.37807 (4) obj. -38165.5 iterations 5
Cbc0038I Pass   4: suminf.    1.37807 (4) obj. -38165.5 iterations 2
Cbc0038I Pass   5: suminf.    1.37807 (4) obj. -38165.5 iterations 2
Cbc0038I Pass   6: suminf.    1.37807 (4) obj. -38165.5 iterations 3
Cbc0038I Pass   7: suminf.    0.80358 (4) obj. -38165.5 iterations 9
Cbc0038I Pass   8: suminf.    0.80358 (4) obj. -38165.5 iterations 4
Cbc0038I Pass   9: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  10: suminf.    0.53572 (4) obj. -38165.5 iterations 5
Cbc0038I Pass  11: suminf.    1.00000 (4) obj. -39239 iterations 5
Cbc0038I Pass  12: suminf.    1.00000 (3) obj. -38566.8 iterations 9
Cbc0038I Pass  13: suminf.    0.68767 (4) obj. -38165.5 iterations 6
Cbc0038I Pass  14: suminf.    1.00000 (3) obj. -38165.5 iterations 5
Cbc0038I Pass  15: suminf.    1.00000 (6) obj. -38165.5 iterations 8
Cbc0038I Pass  16: suminf.    0.79895 (8) obj. -38165.5 iterations 8
Cbc0038I Pass  17: suminf.    0.53572 (4) obj. -38165.5 iterations 4
Cbc0038I Pass  18: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  19: suminf.    0.50351 (7) obj. -38165.5 iterations 8
Cbc0038I Pass  20: suminf.    0.00000 (0) obj. -38416.7 iterations 8
Cbc0038I Solution found of -38416.7
Cbc0038I Relaxing continuous gives -38416.7
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 12 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -38673.2
Cbc0038I Reduced cost fixing fixed 18 variables on major pass 3
Cbc0038I Pass  21: suminf.    2.00000 (4) obj. -39603.6 iterations 0
Cbc0038I Pass  22: suminf.    1.59766 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  23: suminf.    0.77150 (5) obj. -38673.2 iterations 3
Cbc0038I Pass  24: suminf.    0.75532 (4) obj. -38673.2 iterations 2
Cbc0038I Pass  25: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  26: suminf.    2.15357 (8) obj. -38673.2 iterations 12
Cbc0038I Pass  27: suminf.    0.77150 (5) obj. -38673.2 iterations 8
Cbc0038I Pass  28: suminf.    1.00000 (6) obj. -38673.2 iterations 9
Cbc0038I Pass  29: suminf.    1.00000 (4) obj. -39205.8 iterations 6
Cbc0038I Pass  30: suminf.    1.23032 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  31: suminf.    1.00000 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  32: suminf.    1.46065 (5) obj. -38673.2 iterations 5
Cbc0038I Pass  33: suminf.    1.00000 (4) obj. -38673.2 iterations 6
Cbc0038I Pass  34: suminf.    0.23935 (2) obj. -38673.2 iterations 6
Cbc0038I Pass  35: suminf.    0.00000 (0) obj. -39464.4 iterations 10
Cbc0038I Solution found of -39464.4
Cbc0038I Relaxing continuous gives -39464.4
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 14 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -39534.8
Cbc0038I Reduced cost fixing fixed 20 variables on major pass 4
Cbc0038I Pass  36: suminf.    2.00000 (4) obj. -39603.6 iterations 0
Cbc0038I Pass  37: suminf.    1.97028 (4) obj. -39534.8 iterations 5
Cbc0038I Pass  38: suminf.    1.98646 (5) obj. -39534.8 iterations 2
Cbc0038I Pass  39: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  40: suminf.    1.98646 (5) obj. -39534.8 iterations 5
Cbc0038I Pass  41: suminf.    2.00000 (4) obj. -39603.6 iterations 9
Cbc0038I Pass  42: suminf.    2.00000 (8) obj. -39534.8 iterations 11
Cbc0038I Pass  43: suminf.    2.00000 (8) obj. -39534.8 iterations 4
Cbc0038I Pass  44: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  45: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  46: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  47: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  48: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  49: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  50: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  51: suminf.    0.23857 (6) obj. -39534.8 iterations 4
Cbc0038I Pass  52: suminf.    0.23857 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  53: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  54: suminf.    2.00000 (8) obj. -39534.8 iterations 7
Cbc0038I Pass  55: suminf.    2.00000 (4) obj. -39534.8 iterations 8
Cbc0038I Pass  56: suminf.    2.00000 (9) obj. -39534.8 iterations 9
Cbc0038I Pass  57: suminf.    2.00000 (4) obj. -39603.6 iterations 8
Cbc0038I Pass  58: suminf.    1.97028 (4) obj. -39534.8 iterations 5
Cbc0038I Pass  59: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  60: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  61: suminf.    1.98646 (5) obj. -39534.8 iterations 1
Cbc0038I Pass  62: suminf.    0.18905 (6) obj. -39534.8 iterations 12
Cbc0038I Pass  63: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  64: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  65: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 14 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -39464.4 - took 0.04 seconds
Cbc0012I Integer solution of -39464.36 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 66 rows 38 columns, reduced to 11 rows 11 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from -39699.282 to -39699.282 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 5 column cuts (5 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -39464.36, took 0 iterations and 0 nodes (0.02 seconds)
Cbc0035I Maximum depth 0, 20 variables fixed on reduced cost
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.02

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 76 (-22) rows, 84 (-12) columns and 961 (-452) elements
Clp1000I sum of infeasibilities 8.09392e-09 - average 1.06499e-10, 78 fixed columns
Coin0506I Presolve 5 (-71) rows, 6 (-78) columns and 14 (-947) elements
Clp0029I End of values pass after 6 iterations
Clp0000I Optimal - objective value 36896.565
Clp0000I Optimal - objective value 36896.565
Coin0511I After Postsolve, objective 36896.565, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.8018709 - largest nonzero change 2.3155777e-05 ( 0.0016756202%) - largest zero change 2.9394864e-05
Clp0000I Optimal - objective value 41758.639
Clp0000I Optimal - objective value 41758.639
Clp0000I Optimal - objective value 41758.639
Coin0511I After Postsolve, objective 41758.639, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 41758.63876 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 76 rows, 84 columns (84 integer (84 of which binary)) and 963 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.572%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 34 integers unsatisfied sum - 9.82696
Cbc0038I Pass   1: suminf.    2.49946 (22) obj. -22357.6 iterations 19
Cbc0038I Pass   2: suminf.    2.49946 (22) obj. -22357.6 iterations 1
Cbc0038I Pass   3: suminf.    0.41444 (6) obj. -21356.5 iterations 16
Cbc0038I Solution found of -20920.9
Cbc0038I Rounding solution of -22868.6 is better than previous of -20920.9

Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 12 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -22868.6 to -36732 (0.02 seconds)
Cbc0038I Round again with cutoff of -37163
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    6.74289 (30) obj. -37163 iterations 9
Cbc0038I Pass   5: suminf.    3.89064 (19) obj. -38027.3 iterations 18
Cbc0038I Pass   6: suminf.    0.32712 (7) obj. -37163 iterations 25
Cbc0038I Pass   7: suminf.    2.00000 (5) obj. -37163 iterations 9
Cbc0038I Pass   8: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass   9: suminf.    0.14804 (4) obj. -37163 iterations 4
Cbc0038I Pass  10: suminf.    0.14804 (4) obj. -37163 iterations 0
Cbc0038I Pass  11: suminf.    1.20536 (9) obj. -37163 iterations 13
Cbc0038I Pass  12: suminf.    1.20536 (9) obj. -37163 iterations 2
Cbc0038I Pass  13: suminf.    0.28756 (2) obj. -37163 iterations 9
Cbc0038I Pass  14: suminf.    0.22588 (4) obj. -37163 iterations 2
Cbc0038I Pass  15: suminf.    2.00000 (5) obj. -37163 iterations 4
Cbc0038I Pass  16: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass  17: suminf.    0.22588 (4) obj. -37163 iterations 3
Cbc0038I Pass  18: suminf.    3.13036 (11) obj. -37163 iterations 23
Cbc0038I Pass  19: suminf.    3.13036 (11) obj. -37163 iterations 1
Cbc0038I Pass  20: suminf.    2.00000 (4) obj. -37621.9 iterations 11
Cbc0038I Pass  21: suminf.    0.32319 (4) obj. -37163 iterations 3
Cbc0038I Pass  22: suminf.    0.32319 (4) obj. -37163 iterations 0
Cbc0038I Pass  23: suminf.    2.00000 (5) obj. -37163 iterations 6
Cbc0038I Pass  24: suminf.    0.32319 (4) obj. -37163 iterations 5
Cbc0038I Pass  25: suminf.    3.39005 (13) obj. -37163 iterations 20
Cbc0038I Pass  26: suminf.    3.05841 (12) obj. -37163 iterations 3
Cbc0038I Pass  27: suminf.    0.42978 (4) obj. -37163 iterations 14
Cbc0038I Pass  28: suminf.    2.00000 (5) obj. -37163 iterations 12
Cbc0038I Pass  29: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass  30: suminf.    0.31541 (4) obj. -37163 iterations 3
Cbc0038I Pass  31: suminf.    0.31541 (4) obj. -37163 iterations 0
Cbc0038I Pass  32: suminf.    1.32665 (8) obj. -37163 iterations 12
Cbc0038I Pass  33: suminf.    1.32665 (8) obj. -37163 iterations 0
Cbc0038I Rounding solution of -36926.7 is better than previous of -36732

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 16 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -36926.7 to -38416.7 (0.04 seconds)
Cbc0038I Round again with cutoff of -38941.9
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 3
Cbc0038I Pass  33: suminf.    7.01728 (34) obj. -38941.9 iterations 4
Cbc0038I Pass  34: suminf.    7.01728 (34) obj. -38941.9 iterations 0
Cbc0038I Pass  35: suminf.    1.65884 (10) obj. -38941.9 iterations 29
Cbc0038I Pass  36: suminf.    1.24181 (5) obj. -38941.9 iterations 13
Cbc0038I Pass  37: suminf.    0.91735 (4) obj. -38941.9 iterations 7
Cbc0038I Pass  38: suminf.    2.61227 (13) obj. -38941.9 iterations 12
Cbc0038I Pass  39: suminf.    2.61227 (13) obj. -38941.9 iterations 1
Cbc0038I Pass  40: suminf.    2.00000 (5) obj. -38941.9 iterations 35
Cbc0038I Pass  41: suminf.    1.81116 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  42: suminf.    1.81116 (4) obj. -38941.9 iterations 0
Cbc0038I Pass  43: suminf.    2.35393 (9) obj. -38941.9 iterations 15
Cbc0038I Pass  44: suminf.    2.35393 (9) obj. -38941.9 iterations 1
Cbc0038I Pass  45: suminf.    1.17349 (5) obj. -38941.9 iterations 14
Cbc0038I Pass  46: suminf.    0.94070 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  47: suminf.    2.19260 (10) obj. -38941.9 iterations 7
Cbc0038I Pass  48: suminf.    2.19260 (10) obj. -38941.9 iterations 0
Cbc0038I Pass  49: suminf.    1.12541 (5) obj. -38941.9 iterations 12
Cbc0038I Pass  50: suminf.    0.95713 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  51: suminf.    2.75159 (11) obj. -38941.9 iterations 16
Cbc0038I Pass  52: suminf.    2.60224 (10) obj. -38941.9 iterations 6
Cbc0038I Pass  53: suminf.    1.07986 (5) obj. -38941.9 iterations 11
Cbc0038I Pass  54: suminf.    0.97270 (4) obj. -38941.9 iterations 5
Cbc0038I Pass  55: suminf.    2.93370 (11) obj. -38941.9 iterations 14
Cbc0038I Pass  56: suminf.    2.93370 (11) obj. -38941.9 iterations 2
Cbc0038I Pass  57: suminf.    1.11782 (5) obj. -38941.9 iterations 15
Cbc0038I Pass  58: suminf.    0.95973 (4) obj. -38941.9 iterations 4
Cbc0038I Pass  59: suminf.    2.74882 (11) obj. -38941.9 iterations 11
Cbc0038I Pass  60: suminf.    2.74882 (11) obj. -38941.9 iterations 2
Cbc0038I Pass  61: suminf.    1.09884 (5) obj. -38941.9 iterations 12
Cbc0038I Pass  62: suminf.    0.96621 (4) obj. -38941.9 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 10 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -38416.7 - took 0.04 seconds
Cbc0012I Integer solution of -38416.74 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 76 rows 84 columns, reduced to 10 rows 11 columns
Cbc0012I Integer solution of -39464.36 found by DiveCoefficient after 31 iterations and 0 nodes (0.07 seconds)
Cbc0031I 2 added rows had average density of 14
Cbc0013I At root node, 2 cuts changed objective from -40853.281 to -39464.36 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 294 row cuts average 12.7 elements, 34 column cuts (34 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -39464.36, took 31 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 66 (-33) rows, 38 (-12) columns and 167 (-118) elements
Clp0000I Optimal - objective value 39699.282
Coin0511I After Postsolve, objective 39699.282, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 39699.28202 - 23 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 66 rows, 38 columns (37 integer (37 of which binary)) and 167 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.221%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 8 integers unsatisfied sum - 2
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -35642.6 iterations 14
Cbc0038I Solution found of -35642.6
Cbc0038I Relaxing continuous gives -35642.6
Cbc0038I Before mini branch and bound, 27 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 10 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -35642.6 to -37995.1 (0.01 seconds)
Cbc0038I Round again with cutoff of -38165.5
Cbc0038I Reduced cost fixing fixed 15 variables on major pass 2
Cbc0038I Pass   2: suminf.    2.00000 (4) obj. -39603.6 iterations 2
Cbc0038I Pass   3: suminf.    1.37807 (4) obj. -38165.5 iterations 5
Cbc0038I Pass   4: suminf.    1.37807 (4) obj. -38165.5 iterations 2
Cbc0038I Pass   5: suminf.    1.37807 (4) obj. -38165.5 iterations 2
Cbc0038I Pass   6: suminf.    1.37807 (4) obj. -38165.5 iterations 3
Cbc0038I Pass   7: suminf.    0.80358 (4) obj. -38165.5 iterations 9
Cbc0038I Pass   8: suminf.    0.80358 (4) obj. -38165.5 iterations 4
Cbc0038I Pass   9: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  10: suminf.    0.53572 (4) obj. -38165.5 iterations 5
Cbc0038I Pass  11: suminf.    1.00000 (4) obj. -39239 iterations 5
Cbc0038I Pass  12: suminf.    1.00000 (3) obj. -38566.8 iterations 9
Cbc0038I Pass  13: suminf.    0.68767 (4) obj. -38165.5 iterations 6
Cbc0038I Pass  14: suminf.    1.00000 (3) obj. -38165.5 iterations 5
Cbc0038I Pass  15: suminf.    1.00000 (6) obj. -38165.5 iterations 8
Cbc0038I Pass  16: suminf.    0.79895 (8) obj. -38165.5 iterations 8
Cbc0038I Pass  17: suminf.    0.53572 (4) obj. -38165.5 iterations 4
Cbc0038I Pass  18: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  19: suminf.    0.50351 (7) obj. -38165.5 iterations 8
Cbc0038I Pass  20: suminf.    0.00000 (0) obj. -38416.7 iterations 8
Cbc0038I Solution found of -38416.7
Cbc0038I Relaxing continuous gives -38416.7
Cbc0038I Before mini branch and bound, 25 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 12 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -38673.2
Cbc0038I Reduced cost fixing fixed 18 variables on major pass 3
Cbc0038I Pass  21: suminf.    2.00000 (4) obj. -39603.6 iterations 0
Cbc0038I Pass  22: suminf.    1.59766 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  23: suminf.    0.77150 (5) obj. -38673.2 iterations 3
Cbc0038I Pass  24: suminf.    0.75532 (4) obj. -38673.2 iterations 2
Cbc0038I Pass  25: suminf.    1.00000 (4) obj. -39239 iterations 4
Cbc0038I Pass  26: suminf.    2.15357 (8) obj. -38673.2 iterations 12
Cbc0038I Pass  27: suminf.    0.77150 (5) obj. -38673.2 iterations 8
Cbc0038I Pass  28: suminf.    1.00000 (6) obj. -38673.2 iterations 9
Cbc0038I Pass  29: suminf.    1.00000 (4) obj. -39205.8 iterations 6
Cbc0038I Pass  30: suminf.    1.23032 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  31: suminf.    1.00000 (4) obj. -38673.2 iterations 5
Cbc0038I Pass  32: suminf.    1.46065 (5) obj. -38673.2 iterations 5
Cbc0038I Pass  33: suminf.    1.00000 (4) obj. -38673.2 iterations 6
Cbc0038I Pass  34: suminf.    0.23935 (2) obj. -38673.2 iterations 6
Cbc0038I Pass  35: suminf.    0.00000 (0) obj. -39464.4 iterations 10
Cbc0038I Solution found of -39464.4
Cbc0038I Relaxing continuous gives -39464.4
Cbc0038I Before mini branch and bound, 24 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 14 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of -39534.8
Cbc0038I Reduced cost fixing fixed 20 variables on major pass 4
Cbc0038I Pass  36: suminf.    2.00000 (4) obj. -39603.6 iterations 0
Cbc0038I Pass  37: suminf.    1.97028 (4) obj. -39534.8 iterations 5
Cbc0038I Pass  38: suminf.    1.98646 (5) obj. -39534.8 iterations 2
Cbc0038I Pass  39: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  40: suminf.    1.98646 (5) obj. -39534.8 iterations 5
Cbc0038I Pass  41: suminf.    2.00000 (4) obj. -39603.6 iterations 9
Cbc0038I Pass  42: suminf.    2.00000 (8) obj. -39534.8 iterations 11
Cbc0038I Pass  43: suminf.    2.00000 (8) obj. -39534.8 iterations 4
Cbc0038I Pass  44: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  45: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  46: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  47: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  48: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  49: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  50: suminf.    0.18905 (6) obj. -39534.8 iterations 0
Cbc0038I Pass  51: suminf.    0.23857 (6) obj. -39534.8 iterations 4
Cbc0038I Pass  52: suminf.    0.23857 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  53: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  54: suminf.    2.00000 (8) obj. -39534.8 iterations 7
Cbc0038I Pass  55: suminf.    2.00000 (4) obj. -39534.8 iterations 8
Cbc0038I Pass  56: suminf.    2.00000 (9) obj. -39534.8 iterations 9
Cbc0038I Pass  57: suminf.    2.00000 (4) obj. -39603.6 iterations 8
Cbc0038I Pass  58: suminf.    1.97028 (4) obj. -39534.8 iterations 5
Cbc0038I Pass  59: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  60: suminf.    1.97028 (4) obj. -39534.8 iterations 2
Cbc0038I Pass  61: suminf.    1.98646 (5) obj. -39534.8 iterations 1
Cbc0038I Pass  62: suminf.    0.18905 (6) obj. -39534.8 iterations 12
Cbc0038I Pass  63: suminf.    0.18905 (6) obj. -39534.8 iterations 2
Cbc0038I Pass  64: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I Pass  65: suminf.    0.18905 (6) obj. -39534.8 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 26 integers at bound fixed and 0 continuous
Cbc0038I Full problem 66 rows 38 columns, reduced to 14 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -39464.4 - took 0.02 seconds
Cbc0012I Integer solution of -39464.36 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 66 rows 38 columns, reduced to 11 rows 11 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0013I At root node, 0 cuts changed objective from -39699.282 to -39699.282 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 0.0 elements, 5 column cuts (5 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -39464.36, took 0 iterations and 0 nodes (0.03 seconds)
Cbc0035I Maximum depth 0, 20 variables fixed on reduced cost
Total time (CPU seconds):       0.03   (Wallclock seconds):       0.03

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 76 (-23) rows, 84 (-13) columns and 961 (-453) elements
Clp1000I sum of infeasibilities 8.09392e-09 - average 1.06499e-10, 78 fixed columns
Coin0506I Presolve 5 (-71) rows, 6 (-78) columns and 14 (-947) elements
Clp0029I End of values pass after 6 iterations
Clp0000I Optimal - objective value 36896.565
Clp0000I Optimal - objective value 36896.565
Coin0511I After Postsolve, objective 36896.565, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.8018709 - largest nonzero change 2.3155777e-05 ( 0.0016756202%) - largest zero change 2.9394864e-05
Clp0000I Optimal - objective value 41758.639
Clp0000I Optimal - objective value 41758.639
Clp0000I Optimal - objective value 41758.639
Coin0511I After Postsolve, objective 41758.639, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 41758.63876 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 76 rows, 84 columns (84 integer (84 of which binary)) and 963 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.572%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 34 integers unsatisfied sum - 9.82696
Cbc0038I Pass   1: suminf.    2.49946 (22) obj. -22357.6 iterations 19
Cbc0038I Pass   2: suminf.    2.49946 (22) obj. -22357.6 iterations 1
Cbc0038I Pass   3: suminf.    0.41444 (6) obj. -21356.5 iterations 16
Cbc0038I Solution found of -20920.9
Cbc0038I Rounding solution of -22868.6 is better than previous of -20920.9

Cbc0038I Before mini branch and bound, 47 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 12 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -22868.6 to -36732 (0.02 seconds)
Cbc0038I Round again with cutoff of -37163
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    6.74289 (30) obj. -37163 iterations 9
Cbc0038I Pass   5: suminf.    3.89064 (19) obj. -38027.3 iterations 18
Cbc0038I Pass   6: suminf.    0.32712 (7) obj. -37163 iterations 25
Cbc0038I Pass   7: suminf.    2.00000 (5) obj. -37163 iterations 9
Cbc0038I Pass   8: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass   9: suminf.    0.14804 (4) obj. -37163 iterations 4
Cbc0038I Pass  10: suminf.    0.14804 (4) obj. -37163 iterations 0
Cbc0038I Pass  11: suminf.    1.20536 (9) obj. -37163 iterations 13
Cbc0038I Pass  12: suminf.    1.20536 (9) obj. -37163 iterations 2
Cbc0038I Pass  13: suminf.    0.28756 (2) obj. -37163 iterations 9
Cbc0038I Pass  14: suminf.    0.22588 (4) obj. -37163 iterations 2
Cbc0038I Pass  15: suminf.    2.00000 (5) obj. -37163 iterations 4
Cbc0038I Pass  16: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass  17: suminf.    0.22588 (4) obj. -37163 iterations 3
Cbc0038I Pass  18: suminf.    3.13036 (11) obj. -37163 iterations 23
Cbc0038I Pass  19: suminf.    3.13036 (11) obj. -37163 iterations 1
Cbc0038I Pass  20: suminf.    2.00000 (4) obj. -37621.9 iterations 11
Cbc0038I Pass  21: suminf.    0.32319 (4) obj. -37163 iterations 3
Cbc0038I Pass  22: suminf.    0.32319 (4) obj. -37163 iterations 0
Cbc0038I Pass  23: suminf.    2.00000 (5) obj. -37163 iterations 6
Cbc0038I Pass  24: suminf.    0.32319 (4) obj. -37163 iterations 5
Cbc0038I Pass  25: suminf.    3.39005 (13) obj. -37163 iterations 20
Cbc0038I Pass  26: suminf.    3.05841 (12) obj. -37163 iterations 3
Cbc0038I Pass  27: suminf.    0.42978 (4) obj. -37163 iterations 14
Cbc0038I Pass  28: suminf.    2.00000 (5) obj. -37163 iterations 12
Cbc0038I Pass  29: suminf.    2.00000 (5) obj. -37163 iterations 0
Cbc0038I Pass  30: suminf.    0.31541 (4) obj. -37163 iterations 3
Cbc0038I Pass  31: suminf.    0.31541 (4) obj. -37163 iterations 0
Cbc0038I Pass  32: suminf.    1.32665 (8) obj. -37163 iterations 12
Cbc0038I Pass  33: suminf.    1.32665 (8) obj. -37163 iterations 0
Cbc0038I Rounding solution of -36926.7 is better than previous of -36732

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 16 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -36926.7 to -38416.7 (0.04 seconds)
Cbc0038I Round again with cutoff of -38941.9
Cbc0038I Reduced cost fixing fixed 13 variables on major pass 3
Cbc0038I Pass  33: suminf.    7.01728 (34) obj. -38941.9 iterations 4
Cbc0038I Pass  34: suminf.    7.01728 (34) obj. -38941.9 iterations 0
Cbc0038I Pass  35: suminf.    1.65884 (10) obj. -38941.9 iterations 29
Cbc0038I Pass  36: suminf.    1.24181 (5) obj. -38941.9 iterations 13
Cbc0038I Pass  37: suminf.    0.91735 (4) obj. -38941.9 iterations 7
Cbc0038I Pass  38: suminf.    2.61227 (13) obj. -38941.9 iterations 12
Cbc0038I Pass  39: suminf.    2.61227 (13) obj. -38941.9 iterations 1
Cbc0038I Pass  40: suminf.    2.00000 (5) obj. -38941.9 iterations 35
Cbc0038I Pass  41: suminf.    1.81116 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  42: suminf.    1.81116 (4) obj. -38941.9 iterations 0
Cbc0038I Pass  43: suminf.    2.35393 (9) obj. -38941.9 iterations 15
Cbc0038I Pass  44: suminf.    2.35393 (9) obj. -38941.9 iterations 1
Cbc0038I Pass  45: suminf.    1.17349 (5) obj. -38941.9 iterations 14
Cbc0038I Pass  46: suminf.    0.94070 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  47: suminf.    2.19260 (10) obj. -38941.9 iterations 7
Cbc0038I Pass  48: suminf.    2.19260 (10) obj. -38941.9 iterations 0
Cbc0038I Pass  49: suminf.    1.12541 (5) obj. -38941.9 iterations 12
Cbc0038I Pass  50: suminf.    0.95713 (4) obj. -38941.9 iterations 6
Cbc0038I Pass  51: suminf.    2.75159 (11) obj. -38941.9 iterations 16
Cbc0038I Pass  52: suminf.    2.60224 (10) obj. -38941.9 iterations 6
Cbc0038I Pass  53: suminf.    1.07986 (5) obj. -38941.9 iterations 11
Cbc0038I Pass  54: suminf.    0.97270 (4) obj. -38941.9 iterations 5
Cbc0038I Pass  55: suminf.    2.93370 (11) obj. -38941.9 iterations 14
Cbc0038I Pass  56: suminf.    2.93370 (11) obj. -38941.9 iterations 2
Cbc0038I Pass  57: suminf.    1.11782 (5) obj. -38941.9 iterations 15
Cbc0038I Pass  58: suminf.    0.95973 (4) obj. -38941.9 iterations 4
Cbc0038I Pass  59: suminf.    2.74882 (11) obj. -38941.9 iterations 11
Cbc0038I Pass  60: suminf.    2.74882 (11) obj. -38941.9 iterations 2
Cbc0038I Pass  61: suminf.    1.09884 (5) obj. -38941.9 iterations 12
Cbc0038I Pass  62: suminf.    0.96621 (4) obj. -38941.9 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 76 rows 84 columns, reduced to 10 rows 12 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -38416.7 - took 0.04 seconds
Cbc0012I Integer solution of -38416.74 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 76 rows 84 columns, reduced to 10 rows 11 columns
Cbc0012I Integer solution of -39464.36 found by DiveCoefficient after 31 iterations and 0 nodes (0.07 seconds)
Cbc0031I 2 added rows had average density of 14
Cbc0013I At root node, 2 cuts changed objective from -40853.281 to -39464.36 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 294 row cuts average 12.7 elements, 34 column cuts (34 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 2 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 9.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0001I Search completed - best objective -39464.36, took 31 iterations and 0 nodes (0.07 seconds)
Cbc0035I Maximum depth 0, 6 variables fixed on reduced cost
Total time (CPU seconds):       0.07   (Wallclock seconds):       0.07

