Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 122 (-33) rows, 70 (-8) columns and 376 (-77) elements
Clp1000I sum of infeasibilities 3.49575e-05 - average 2.86537e-07, 24 fixed columns
Coin0506I Presolve 75 (-47) rows, 44 (-26) columns and 230 (-146) elements
Clp0029I End of values pass after 44 iterations
Clp0014I Perturbing problem by 0.001% of 2.284645 - largest nonzero change 0 ( 0%) - largest zero change 2.5735924e-05
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 55.49776462 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 122 rows, 70 columns (69 integer (69 of which binary)) and 377 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.236%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 5.9046
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -5.28638 iterations 31
Cbc0038I Solution found of -5.28638
Cbc0038I Relaxing continuous gives -5.28638
Cbc0038I Rounding solution of -28.1234 is better than previous of -5.28638

Cbc0038I Before mini branch and bound, 45 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 42 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -28.1234 to -28.3789 (0.03 seconds)
Cbc0038I Round again with cutoff of -31.0909
Cbc0038I Pass   2: suminf.    1.82618 (5) obj. -31.0909 iterations 8
Cbc0038I Pass   3: suminf.    0.92146 (3) obj. -31.0909 iterations 3
Cbc0038I Pass   4: suminf.    0.64705 (2) obj. -31.0909 iterations 4
Cbc0038I Pass   5: suminf.    0.66903 (2) obj. -31.0909 iterations 1
Cbc0038I Pass   6: suminf.    0.62954 (2) obj. -31.0909 iterations 3
Cbc0038I Pass   7: suminf.    3.08140 (13) obj. -31.0909 iterations 16
Cbc0038I Pass   8: suminf.    1.04997 (5) obj. -31.0909 iterations 14
Cbc0038I Pass   9: suminf.    0.92765 (4) obj. -31.0909 iterations 2
Cbc0038I Pass  10: suminf.    0.92900 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  11: suminf.    0.92900 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  12: suminf.    0.67300 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  13: suminf.    0.63065 (3) obj. -31.0909 iterations 1
Cbc0038I Pass  14: suminf.    1.61951 (4) obj. -31.0909 iterations 7
Cbc0038I Pass  15: suminf.    0.95284 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  16: suminf.    0.66408 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  17: suminf.    0.59810 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  18: suminf.    2.56803 (8) obj. -31.0909 iterations 18
Cbc0038I Pass  19: suminf.    1.52589 (6) obj. -31.0909 iterations 6
Cbc0038I Pass  20: suminf.    1.25024 (6) obj. -31.0909 iterations 3
Cbc0038I Pass  21: suminf.    1.67672 (4) obj. -31.0909 iterations 18
Cbc0038I Pass  22: suminf.    1.67672 (4) obj. -31.0909 iterations 0
Cbc0038I Pass  23: suminf.    0.71591 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  24: suminf.    0.63116 (3) obj. -31.0909 iterations 4
Cbc0038I Pass  25: suminf.    3.00328 (8) obj. -31.0909 iterations 10
Cbc0038I Pass  26: suminf.    1.75327 (7) obj. -31.0909 iterations 7
Cbc0038I Pass  27: suminf.    0.77362 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  28: suminf.    0.77362 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  29: suminf.    0.66505 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  30: suminf.    0.47094 (2) obj. -31.0909 iterations 1
Cbc0038I Pass  31: suminf.    0.77362 (3) obj. -31.0909 iterations 3
Cbc0038I Rounding solution of -29.3172 is better than previous of -28.3789

Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 48 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -29.3172 to -29.9648 (0.05 seconds)
Cbc0038I Round again with cutoff of -35.9723
Cbc0038I Pass  31: suminf.    2.28355 (6) obj. -35.9723 iterations 1
Cbc0038I Pass  32: suminf.    1.27515 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  33: suminf.    1.09761 (4) obj. -35.9723 iterations 7
Cbc0038I Pass  34: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  35: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  36: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  37: suminf.    2.92213 (8) obj. -35.9723 iterations 18
Cbc0038I Pass  38: suminf.    2.03726 (7) obj. -35.9723 iterations 12
Cbc0038I Pass  39: suminf.    1.12269 (4) obj. -35.9723 iterations 15
Cbc0038I Pass  40: suminf.    1.09761 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  41: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  42: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  43: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  44: suminf.    2.43895 (8) obj. -35.9723 iterations 13
Cbc0038I Pass  45: suminf.    0.96158 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  46: suminf.    0.88681 (3) obj. -35.9723 iterations 10
Cbc0038I Pass  47: suminf.    0.73146 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  48: suminf.    1.40890 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  49: suminf.    0.88681 (3) obj. -35.9723 iterations 1
Cbc0038I Pass  50: suminf.    2.82756 (8) obj. -35.9723 iterations 20
Cbc0038I Pass  51: suminf.    1.24283 (4) obj. -35.9723 iterations 12
Cbc0038I Pass  52: suminf.    1.24283 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  53: suminf.    1.48130 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  54: suminf.    1.18382 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  55: suminf.    1.40695 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  56: suminf.    1.40695 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  57: suminf.    1.61397 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  58: suminf.    0.96933 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  59: suminf.    1.40695 (4) obj. -35.9723 iterations 3
Cbc0038I Pass  60: suminf.    2.60221 (8) obj. -35.9723 iterations 15
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 60 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -29.9648 - took 0.06 seconds
Cbc0012I Integer solution of -29.96485 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 43 rows 26 columns
Cbc0031I 21 added rows had average density of 48.142857
Cbc0013I At root node, 21 cuts changed objective from -55.497765 to -46.520432 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6777 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.060 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1088 row cuts average 70.0 elements, 0 column cuts (0 active)  in 0.056 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 139 row cuts average 69.7 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0010I After 21 nodes, 11 on tree, -29.96485 best solution, best possible -46.520432 (0.67 seconds)
Cbc0012I Integer solution of -30.09255 found by rounding after 6338 iterations and 32 nodes (0.68 seconds)
Cbc0016I Integer solution of -30.41854 found by strong branching after 6345 iterations and 34 nodes (0.68 seconds)
Cbc0012I Integer solution of -30.98242 found by rounding after 6394 iterations and 36 nodes (0.69 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 10 rows 10 columns
Cbc0001I Search completed - best objective -30.98242, took 6859 iterations and 50 nodes (0.72 seconds)
Cbc0032I Strong branching done 472 times (7868 iterations), fathomed 3 nodes and fixed 25 variables
Cbc0035I Maximum depth 13, 197 variables fixed on reduced cost
Total time (CPU seconds):       0.70   (Wallclock seconds):       0.73

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 90 (-64) rows, 106 (-46) columns and 1729 (-1574) elements
Clp1000I sum of infeasibilities 1.90454e-07 - average 2.11616e-09, 65 fixed columns
Coin0506I Presolve 30 (-60) rows, 41 (-65) columns and 136 (-1593) elements
Clp0006I 0  Obj 17.857311 Dual inf 1.1238332 (40)
Clp0029I End of values pass after 41 iterations
Clp0014I Perturbing problem by 0.001% of 3.7666654 - largest nonzero change 0 ( 0%) - largest zero change 2.5242541e-05
Clp0000I Optimal - objective value 18.511752
Clp0000I Optimal - objective value 18.511752
Coin0511I After Postsolve, objective 18.511752, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 18.511752 Dual inf 36.305088 (37)
Clp0014I Perturbing problem by 0.001% of 1.8050088 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 67.821063
Clp0000I Optimal - objective value 67.821063
Clp0000I Optimal - objective value 67.821063
Coin0511I After Postsolve, objective 67.821063, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.82106257 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 38 strengthened rows, 0 substitutions
Cgl0004I processed model has 93 rows, 109 columns (109 integer (109 of which binary)) and 1749 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.820%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 34 integers unsatisfied sum - 3.14236
Cbc0038I Pass   1: suminf.    1.90503 (30) obj. -51.6358 iterations 11
Cbc0038I Pass   2: suminf.    0.62758 (13) obj. -22.9234 iterations 17
Cbc0038I Solution found of -6.77545
Cbc0038I Rounding solution of -15.6257 is better than previous of -6.77545

Cbc0038I Before mini branch and bound, 75 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 109 columns, reduced to 2 rows 3 columns
Cbc0038I Mini branch and bound improved solution from -15.6257 to -16.238 (0.03 seconds)
Cbc0038I Round again with cutoff of -20.4446
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    1.90503 (30) obj. -51.6358 iterations 0
Cbc0038I Pass   4: suminf.    0.68795 (9) obj. -20.4446 iterations 23
Cbc0038I Pass   5: suminf.    0.22142 (1) obj. -20.4446 iterations 20
Cbc0038I Pass   6: suminf.    0.53934 (2) obj. -22.969 iterations 2
Cbc0038I Pass   7: suminf.    0.22142 (1) obj. -20.4446 iterations 2
Cbc0038I Pass   8: suminf.    1.18370 (13) obj. -20.4446 iterations 23
Cbc0038I Pass   9: suminf.    0.71390 (8) obj. -20.4446 iterations 6
Cbc0038I Pass  10: suminf.    0.63870 (3) obj. -20.4446 iterations 12
Cbc0038I Pass  11: suminf.    0.44751 (3) obj. -20.4446 iterations 7
Cbc0038I Pass  12: suminf.    1.05925 (4) obj. -20.4446 iterations 10
Cbc0038I Pass  13: suminf.    0.76805 (2) obj. -20.4446 iterations 6
Cbc0038I Pass  14: suminf.    0.11503 (2) obj. -22.2531 iterations 6
Cbc0038I Pass  15: suminf.    0.08696 (1) obj. -21.9467 iterations 1
Cbc0038I Pass  16: suminf.    2.56443 (19) obj. -20.4446 iterations 40
Cbc0038I Pass  17: suminf.    2.21417 (18) obj. -20.4446 iterations 4
Cbc0038I Pass  18: suminf.    1.25661 (6) obj. -20.4446 iterations 26
Cbc0038I Pass  19: suminf.    0.87643 (8) obj. -21.0098 iterations 5
Cbc0038I Pass  20: suminf.    0.87206 (6) obj. -20.4446 iterations 9
Cbc0038I Pass  21: suminf.    0.80022 (7) obj. -20.4446 iterations 4
Cbc0038I Pass  22: suminf.    2.33669 (11) obj. -20.4446 iterations 10
Cbc0038I Pass  23: suminf.    2.13831 (10) obj. -20.4446 iterations 1
Cbc0038I Pass  24: suminf.    2.05824 (10) obj. -20.4446 iterations 7
Cbc0038I Pass  25: suminf.    1.14191 (7) obj. -20.4446 iterations 2
Cbc0038I Pass  26: suminf.    0.75993 (9) obj. -21.0667 iterations 4
Cbc0038I Pass  27: suminf.    1.95743 (8) obj. -20.4446 iterations 10
Cbc0038I Pass  28: suminf.    1.13951 (7) obj. -20.4446 iterations 1
Cbc0038I Pass  29: suminf.    0.87586 (7) obj. -20.4446 iterations 1
Cbc0038I Pass  30: suminf.    1.63152 (7) obj. -20.4446 iterations 9
Cbc0038I Pass  31: suminf.    1.01045 (7) obj. -20.4446 iterations 6
Cbc0038I Pass  32: suminf.    1.02287 (7) obj. -20.4446 iterations 5
Cbc0038I Rounding solution of -22.4626 is better than previous of -16.238

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 109 columns, reduced to 36 rows 44 columns
Cbc0038I Mini branch and bound improved solution from -22.4626 to -26.846 (0.07 seconds)
Cbc0038I Round again with cutoff of -33.1374
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    1.90503 (30) obj. -51.6358 iterations 0
Cbc0038I Pass  33: suminf.    1.13024 (11) obj. -33.1374 iterations 35
Cbc0038I Pass  34: suminf.    1.13024 (11) obj. -33.1374 iterations 0
Cbc0038I Pass  35: suminf.    1.05525 (8) obj. -33.1374 iterations 18
Cbc0038I Pass  36: suminf.    0.98549 (8) obj. -33.2769 iterations 1
Cbc0038I Pass  37: suminf.    0.95518 (10) obj. -33.1374 iterations 14
Cbc0038I Pass  38: suminf.    0.94879 (9) obj. -33.1374 iterations 4
Cbc0038I Pass  39: suminf.    1.25361 (8) obj. -33.1374 iterations 9
Cbc0038I Pass  40: suminf.    1.18063 (8) obj. -33.1374 iterations 1
Cbc0038I Pass  41: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  42: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  43: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  44: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  45: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  46: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  47: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  48: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  49: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  50: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  51: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  52: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  53: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  54: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  55: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  56: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  57: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  58: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  59: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  60: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  61: suminf.    1.55622 (10) obj. -33.1374 iterations 13
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of -26.846 - took 0.06 seconds
Cbc0012I Integer solution of -26.84596 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 93 rows 109 columns, reduced to 13 rows 16 columns
Cbc0031I 59 added rows had average density of 24.067797
Cbc0013I At root node, 59 cuts changed objective from -58.3028 to -36.361187 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13114 row cuts average 7.6 elements, 4 column cuts (4 active)  in 0.141 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1670 row cuts average 97.0 elements, 0 column cuts (0 active)  in 0.112 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 27 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 377 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 870 row cuts average 13.7 elements, 0 column cuts (0 active)  in 0.075 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 359 row cuts average 57.4 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 150 row cuts average 20.6 elements, 0 column cuts (0 active)  in 0.658 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -26.84596 best solution, best possible -36.361187 (2.33 seconds)
Cbc0012I Integer solution of -27.48462 found by rounding after 3988 iterations and 1 nodes (2.34 seconds)
Cbc0012I Integer solution of -28.506652 found by DiveCoefficient after 4125 iterations and 2 nodes (2.51 seconds)
Cbc0012I Integer solution of -29.317222 found by rounding after 4128 iterations and 3 nodes (2.53 seconds)
Cbc0012I Integer solution of -29.506652 found by DiveCoefficient after 4138 iterations and 3 nodes (2.56 seconds)
Cbc0016I Integer solution of -30.98242 found by strong branching after 4238 iterations and 9 nodes (2.84 seconds)
Cbc0010I After 12 nodes, 1 on tree, -30.98242 best solution, best possible -35.75144 (3.22 seconds)
Cbc0010I After 24 nodes, 6 on tree, -30.98242 best solution, best possible -35.75144 (3.94 seconds)
Cbc0038I Full problem 93 rows 109 columns, reduced to 58 rows 67 columns
Cbc0010I After 45 nodes, 2 on tree, -30.98242 best solution, best possible -35.75144 (5.04 seconds)
Cbc0038I Full problem 152 rows 109 columns, reduced to 79 rows 95 columns
Cbc0044I Reduced cost fixing - 79 rows, 95 columns - restarting search
Cbc0012I Integer solution of -30.98242 found by Previous solution after 0 iterations and 0 nodes (5.39 seconds)
Cbc0038I Full problem 79 rows 95 columns, reduced to 32 rows 39 columns
Cbc0031I 56 added rows had average density of 24.017857
Cbc0013I At root node, 56 cuts changed objective from -57.635395 to -36.330239 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5426 row cuts average 3.8 elements, 1 column cuts (1 active)  in 0.064 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 335 row cuts average 92.2 elements, 0 column cuts (0 active)  in 0.099 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 162 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.026 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 470 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 659 row cuts average 8.8 elements, 0 column cuts (0 active)  in 0.069 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 100 row cuts average 30.5 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 95 row cuts average 17.0 elements, 0 column cuts (0 active)  in 0.670 seconds - new frequency is 1
Cbc0014I Cut generator 10 (Stored from first) - 518 row cuts average 22.9 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, -30.98242 best solution, best possible -36.330239 (7.19 seconds)
Cbc0001I Search completed - best objective -30.98242, took 4556 iterations and 16 nodes (8.08 seconds)
Cbc0032I Strong branching done 388 times (8302 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 6, 36 variables fixed on reduced cost
Cbc0038I Probing was tried 154 times and created 5644 cuts of which 0 were active after adding rounds of cuts (0.084 seconds)
Cbc0038I Gomory was tried 153 times and created 335 cuts of which 0 were active after adding rounds of cuts (0.107 seconds)
Cbc0038I Knapsack was tried 153 times and created 326 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)
Cbc0038I Clique was tried 153 times and created 750 cuts of which 0 were active after adding rounds of cuts (0.026 seconds)
Cbc0038I OddWheel was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.058 seconds)
Cbc0038I MixedIntegerRounding2 was tried 153 times and created 765 cuts of which 0 were active after adding rounds of cuts (0.080 seconds)
Cbc0038I FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I TwoMirCuts was tried 153 times and created 173 cuts of which 0 were active after adding rounds of cuts (0.083 seconds)
Cbc0038I ZeroHalf was tried 153 times and created 149 cuts of which 0 were active after adding rounds of cuts (0.989 seconds)
Cbc0038I Stored from first was tried 153 times and created 618 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective -30.98242, took 11012 iterations and 66 nodes (8.09 seconds)
Cbc0032I Strong branching done 874 times (17202 iterations), fathomed 7 nodes and fixed 3 variables
Cbc0035I Maximum depth 14, 113 variables fixed on reduced cost
Total time (CPU seconds):       5.73   (Wallclock seconds):       8.11

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 122 (-33) rows, 70 (-8) columns and 376 (-77) elements
Clp1000I sum of infeasibilities 3.49575e-05 - average 2.86537e-07, 24 fixed columns
Coin0506I Presolve 75 (-47) rows, 44 (-26) columns and 230 (-146) elements
Clp0029I End of values pass after 44 iterations
Clp0014I Perturbing problem by 0.001% of 2.284645 - largest nonzero change 0 ( 0%) - largest zero change 2.5735924e-05
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Clp0000I Optimal - objective value 55.497765
Coin0511I After Postsolve, objective 55.497765, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 55.49776462 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 122 rows, 70 columns (69 integer (69 of which binary)) and 377 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.236%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 24 integers unsatisfied sum - 5.9046
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -5.28638 iterations 31
Cbc0038I Solution found of -5.28638
Cbc0038I Relaxing continuous gives -5.28638
Cbc0038I Rounding solution of -28.1234 is better than previous of -5.28638

Cbc0038I Before mini branch and bound, 45 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 42 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -28.1234 to -28.3789 (0.03 seconds)
Cbc0038I Round again with cutoff of -31.0909
Cbc0038I Pass   2: suminf.    1.82618 (5) obj. -31.0909 iterations 8
Cbc0038I Pass   3: suminf.    0.92146 (3) obj. -31.0909 iterations 3
Cbc0038I Pass   4: suminf.    0.64705 (2) obj. -31.0909 iterations 4
Cbc0038I Pass   5: suminf.    0.66903 (2) obj. -31.0909 iterations 1
Cbc0038I Pass   6: suminf.    0.62954 (2) obj. -31.0909 iterations 3
Cbc0038I Pass   7: suminf.    3.08140 (13) obj. -31.0909 iterations 16
Cbc0038I Pass   8: suminf.    1.04997 (5) obj. -31.0909 iterations 14
Cbc0038I Pass   9: suminf.    0.92765 (4) obj. -31.0909 iterations 2
Cbc0038I Pass  10: suminf.    0.92900 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  11: suminf.    0.92900 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  12: suminf.    0.67300 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  13: suminf.    0.63065 (3) obj. -31.0909 iterations 1
Cbc0038I Pass  14: suminf.    1.61951 (4) obj. -31.0909 iterations 7
Cbc0038I Pass  15: suminf.    0.95284 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  16: suminf.    0.66408 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  17: suminf.    0.59810 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  18: suminf.    2.56803 (8) obj. -31.0909 iterations 18
Cbc0038I Pass  19: suminf.    1.52589 (6) obj. -31.0909 iterations 6
Cbc0038I Pass  20: suminf.    1.25024 (6) obj. -31.0909 iterations 3
Cbc0038I Pass  21: suminf.    1.67672 (4) obj. -31.0909 iterations 18
Cbc0038I Pass  22: suminf.    1.67672 (4) obj. -31.0909 iterations 0
Cbc0038I Pass  23: suminf.    0.71591 (3) obj. -31.0909 iterations 3
Cbc0038I Pass  24: suminf.    0.63116 (3) obj. -31.0909 iterations 4
Cbc0038I Pass  25: suminf.    3.00328 (8) obj. -31.0909 iterations 10
Cbc0038I Pass  26: suminf.    1.75327 (7) obj. -31.0909 iterations 7
Cbc0038I Pass  27: suminf.    0.77362 (3) obj. -31.0909 iterations 9
Cbc0038I Pass  28: suminf.    0.77362 (3) obj. -31.0909 iterations 0
Cbc0038I Pass  29: suminf.    0.66505 (3) obj. -31.0909 iterations 2
Cbc0038I Pass  30: suminf.    0.47094 (2) obj. -31.0909 iterations 1
Cbc0038I Pass  31: suminf.    0.77362 (3) obj. -31.0909 iterations 3
Cbc0038I Rounding solution of -29.3172 is better than previous of -28.3789

Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 48 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -29.3172 to -29.9648 (0.05 seconds)
Cbc0038I Round again with cutoff of -35.9723
Cbc0038I Pass  31: suminf.    2.28355 (6) obj. -35.9723 iterations 1
Cbc0038I Pass  32: suminf.    1.27515 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  33: suminf.    1.09761 (4) obj. -35.9723 iterations 7
Cbc0038I Pass  34: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  35: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  36: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  37: suminf.    2.92213 (8) obj. -35.9723 iterations 18
Cbc0038I Pass  38: suminf.    2.03726 (7) obj. -35.9723 iterations 12
Cbc0038I Pass  39: suminf.    1.12269 (4) obj. -35.9723 iterations 15
Cbc0038I Pass  40: suminf.    1.09761 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  41: suminf.    1.09761 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  42: suminf.    1.08420 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  43: suminf.    1.27515 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  44: suminf.    2.43895 (8) obj. -35.9723 iterations 13
Cbc0038I Pass  45: suminf.    0.96158 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  46: suminf.    0.88681 (3) obj. -35.9723 iterations 10
Cbc0038I Pass  47: suminf.    0.73146 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  48: suminf.    1.40890 (4) obj. -35.9723 iterations 9
Cbc0038I Pass  49: suminf.    0.88681 (3) obj. -35.9723 iterations 1
Cbc0038I Pass  50: suminf.    2.82756 (8) obj. -35.9723 iterations 20
Cbc0038I Pass  51: suminf.    1.24283 (4) obj. -35.9723 iterations 12
Cbc0038I Pass  52: suminf.    1.24283 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  53: suminf.    1.48130 (4) obj. -35.9723 iterations 4
Cbc0038I Pass  54: suminf.    1.18382 (4) obj. -35.9723 iterations 5
Cbc0038I Pass  55: suminf.    1.40695 (4) obj. -35.9723 iterations 6
Cbc0038I Pass  56: suminf.    1.40695 (4) obj. -35.9723 iterations 0
Cbc0038I Pass  57: suminf.    1.61397 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  58: suminf.    0.96933 (4) obj. -35.9723 iterations 2
Cbc0038I Pass  59: suminf.    1.40695 (4) obj. -35.9723 iterations 3
Cbc0038I Pass  60: suminf.    2.60221 (8) obj. -35.9723 iterations 15
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 70 columns, reduced to 60 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -29.9648 - took 0.07 seconds
Cbc0012I Integer solution of -29.96485 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 43 rows 26 columns
Cbc0031I 21 added rows had average density of 48.142857
Cbc0013I At root node, 21 cuts changed objective from -55.497765 to -46.520432 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6777 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.061 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1088 row cuts average 70.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 139 row cuts average 69.7 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0010I After 7 nodes, 8 on tree, -29.96485 best solution, best possible -46.520432 (0.68 seconds)
Cbc0012I Integer solution of -30.09255 found by rounding after 6338 iterations and 32 nodes (0.73 seconds)
Cbc0016I Integer solution of -30.41854 found by strong branching after 6345 iterations and 34 nodes (0.73 seconds)
Cbc0012I Integer solution of -30.98242 found by rounding after 6394 iterations and 36 nodes (0.73 seconds)
Cbc0038I Full problem 122 rows 70 columns, reduced to 10 rows 10 columns
Cbc0001I Search completed - best objective -30.98242, took 6859 iterations and 50 nodes (0.76 seconds)
Cbc0032I Strong branching done 472 times (7868 iterations), fathomed 3 nodes and fixed 25 variables
Cbc0035I Maximum depth 13, 197 variables fixed on reduced cost
Total time (CPU seconds):       0.73   (Wallclock seconds):       0.77

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 90 (-65) rows, 106 (-47) columns and 1729 (-1575) elements
Clp1000I sum of infeasibilities 1.90454e-07 - average 2.11616e-09, 65 fixed columns
Coin0506I Presolve 30 (-60) rows, 41 (-65) columns and 136 (-1593) elements
Clp0006I 0  Obj 17.857311 Dual inf 1.1238332 (40)
Clp0029I End of values pass after 41 iterations
Clp0014I Perturbing problem by 0.001% of 3.7666654 - largest nonzero change 0 ( 0%) - largest zero change 2.5242541e-05
Clp0000I Optimal - objective value 18.511752
Clp0000I Optimal - objective value 18.511752
Coin0511I After Postsolve, objective 18.511752, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 18.511752 Dual inf 36.305088 (37)
Clp0014I Perturbing problem by 0.001% of 1.8050088 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 67.821063
Clp0000I Optimal - objective value 67.821063
Clp0000I Optimal - objective value 67.821063
Coin0511I After Postsolve, objective 67.821063, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 67.82106257 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 38 strengthened rows, 0 substitutions
Cgl0004I processed model has 93 rows, 109 columns (109 integer (109 of which binary)) and 1749 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.820%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 34 integers unsatisfied sum - 3.14236
Cbc0038I Pass   1: suminf.    1.90503 (30) obj. -51.6358 iterations 11
Cbc0038I Pass   2: suminf.    0.62758 (13) obj. -22.9234 iterations 17
Cbc0038I Solution found of -6.77545
Cbc0038I Rounding solution of -15.6257 is better than previous of -6.77545

Cbc0038I Before mini branch and bound, 75 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 109 columns, reduced to 2 rows 3 columns
Cbc0038I Mini branch and bound improved solution from -15.6257 to -16.238 (0.03 seconds)
Cbc0038I Round again with cutoff of -20.4446
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    1.90503 (30) obj. -51.6358 iterations 0
Cbc0038I Pass   4: suminf.    0.68795 (9) obj. -20.4446 iterations 23
Cbc0038I Pass   5: suminf.    0.22142 (1) obj. -20.4446 iterations 20
Cbc0038I Pass   6: suminf.    0.53934 (2) obj. -22.969 iterations 2
Cbc0038I Pass   7: suminf.    0.22142 (1) obj. -20.4446 iterations 2
Cbc0038I Pass   8: suminf.    1.18370 (13) obj. -20.4446 iterations 23
Cbc0038I Pass   9: suminf.    0.71390 (8) obj. -20.4446 iterations 6
Cbc0038I Pass  10: suminf.    0.63870 (3) obj. -20.4446 iterations 12
Cbc0038I Pass  11: suminf.    0.44751 (3) obj. -20.4446 iterations 7
Cbc0038I Pass  12: suminf.    1.05925 (4) obj. -20.4446 iterations 10
Cbc0038I Pass  13: suminf.    0.76805 (2) obj. -20.4446 iterations 6
Cbc0038I Pass  14: suminf.    0.11503 (2) obj. -22.2531 iterations 6
Cbc0038I Pass  15: suminf.    0.08696 (1) obj. -21.9467 iterations 1
Cbc0038I Pass  16: suminf.    2.56443 (19) obj. -20.4446 iterations 40
Cbc0038I Pass  17: suminf.    2.21417 (18) obj. -20.4446 iterations 4
Cbc0038I Pass  18: suminf.    1.25661 (6) obj. -20.4446 iterations 26
Cbc0038I Pass  19: suminf.    0.87643 (8) obj. -21.0098 iterations 5
Cbc0038I Pass  20: suminf.    0.87206 (6) obj. -20.4446 iterations 9
Cbc0038I Pass  21: suminf.    0.80022 (7) obj. -20.4446 iterations 4
Cbc0038I Pass  22: suminf.    2.33669 (11) obj. -20.4446 iterations 10
Cbc0038I Pass  23: suminf.    2.13831 (10) obj. -20.4446 iterations 1
Cbc0038I Pass  24: suminf.    2.05824 (10) obj. -20.4446 iterations 7
Cbc0038I Pass  25: suminf.    1.14191 (7) obj. -20.4446 iterations 2
Cbc0038I Pass  26: suminf.    0.75993 (9) obj. -21.0667 iterations 4
Cbc0038I Pass  27: suminf.    1.95743 (8) obj. -20.4446 iterations 10
Cbc0038I Pass  28: suminf.    1.13951 (7) obj. -20.4446 iterations 1
Cbc0038I Pass  29: suminf.    0.87586 (7) obj. -20.4446 iterations 1
Cbc0038I Pass  30: suminf.    1.63152 (7) obj. -20.4446 iterations 9
Cbc0038I Pass  31: suminf.    1.01045 (7) obj. -20.4446 iterations 6
Cbc0038I Pass  32: suminf.    1.02287 (7) obj. -20.4446 iterations 5
Cbc0038I Rounding solution of -22.4626 is better than previous of -16.238

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 109 columns, reduced to 36 rows 44 columns
Cbc0038I Mini branch and bound improved solution from -22.4626 to -26.846 (0.07 seconds)
Cbc0038I Round again with cutoff of -33.1374
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    1.90503 (30) obj. -51.6358 iterations 0
Cbc0038I Pass  33: suminf.    1.13024 (11) obj. -33.1374 iterations 35
Cbc0038I Pass  34: suminf.    1.13024 (11) obj. -33.1374 iterations 0
Cbc0038I Pass  35: suminf.    1.05525 (8) obj. -33.1374 iterations 18
Cbc0038I Pass  36: suminf.    0.98549 (8) obj. -33.2769 iterations 1
Cbc0038I Pass  37: suminf.    0.95518 (10) obj. -33.1374 iterations 14
Cbc0038I Pass  38: suminf.    0.94879 (9) obj. -33.1374 iterations 4
Cbc0038I Pass  39: suminf.    1.25361 (8) obj. -33.1374 iterations 9
Cbc0038I Pass  40: suminf.    1.18063 (8) obj. -33.1374 iterations 1
Cbc0038I Pass  41: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  42: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  43: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  44: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  45: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  46: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  47: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  48: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  49: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  50: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  51: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  52: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  53: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  54: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  55: suminf.    1.55622 (10) obj. -33.1374 iterations 12
Cbc0038I Pass  56: suminf.    1.55622 (10) obj. -33.1374 iterations 1
Cbc0038I Pass  57: suminf.    1.25361 (8) obj. -33.1374 iterations 15
Cbc0038I Pass  58: suminf.    1.18063 (8) obj. -33.1374 iterations 3
Cbc0038I Pass  59: suminf.    1.58795 (9) obj. -33.1374 iterations 7
Cbc0038I Pass  60: suminf.    1.58795 (9) obj. -33.1374 iterations 0
Cbc0038I Pass  61: suminf.    1.55622 (10) obj. -33.1374 iterations 13
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -26.846 - took 0.06 seconds
Cbc0012I Integer solution of -26.84596 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0038I Full problem 93 rows 109 columns, reduced to 13 rows 16 columns
Cbc0031I 59 added rows had average density of 24.067797
Cbc0013I At root node, 59 cuts changed objective from -58.3028 to -36.361187 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 13114 row cuts average 7.6 elements, 4 column cuts (4 active)  in 0.155 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1670 row cuts average 97.0 elements, 0 column cuts (0 active)  in 0.122 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 27 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 377 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.072 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 870 row cuts average 13.7 elements, 0 column cuts (0 active)  in 0.078 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 359 row cuts average 57.4 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 150 row cuts average 20.6 elements, 0 column cuts (0 active)  in 0.689 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -26.84596 best solution, best possible -36.361187 (2.45 seconds)
Cbc0012I Integer solution of -27.48462 found by rounding after 3988 iterations and 1 nodes (2.47 seconds)
Cbc0012I Integer solution of -28.506652 found by DiveCoefficient after 4125 iterations and 2 nodes (2.66 seconds)
Cbc0012I Integer solution of -29.317222 found by rounding after 4128 iterations and 3 nodes (2.67 seconds)
Cbc0012I Integer solution of -29.506652 found by DiveCoefficient after 4138 iterations and 3 nodes (2.71 seconds)
Cbc0016I Integer solution of -30.98242 found by strong branching after 4238 iterations and 9 nodes (3.02 seconds)
Cbc0010I After 12 nodes, 1 on tree, -30.98242 best solution, best possible -35.75144 (3.43 seconds)
Cbc0010I After 22 nodes, 5 on tree, -30.98242 best solution, best possible -35.75144 (4.15 seconds)
Cbc0010I After 44 nodes, 2 on tree, -30.98242 best solution, best possible -35.75144 (5.02 seconds)
Cbc0038I Full problem 93 rows 109 columns, reduced to 58 rows 67 columns
Cbc0010I After 47 nodes, 4 on tree, -30.98242 best solution, best possible -35.75144 (5.76 seconds)
Cbc0038I Full problem 152 rows 109 columns, reduced to 79 rows 95 columns
Cbc0044I Reduced cost fixing - 79 rows, 95 columns - restarting search
Cbc0012I Integer solution of -30.98242 found by Previous solution after 0 iterations and 0 nodes (5.95 seconds)
Cbc0038I Full problem 79 rows 95 columns, reduced to 32 rows 39 columns
Cbc0031I 56 added rows had average density of 24.017857
Cbc0013I At root node, 56 cuts changed objective from -57.635395 to -36.330239 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 5426 row cuts average 3.8 elements, 1 column cuts (1 active)  in 0.075 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 335 row cuts average 92.2 elements, 0 column cuts (0 active)  in 0.115 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 162 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 470 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 659 row cuts average 8.8 elements, 0 column cuts (0 active)  in 0.074 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 100 row cuts average 30.5 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 95 row cuts average 17.0 elements, 0 column cuts (0 active)  in 0.726 seconds - new frequency is 1
Cbc0014I Cut generator 10 (Stored from first) - 518 row cuts average 22.9 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, -30.98242 best solution, best possible -36.330239 (7.98 seconds)
Cbc0001I Search completed - best objective -30.98242, took 4556 iterations and 16 nodes (8.98 seconds)
Cbc0032I Strong branching done 388 times (8302 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 6, 36 variables fixed on reduced cost
Cbc0038I Probing was tried 154 times and created 5644 cuts of which 0 were active after adding rounds of cuts (0.098 seconds)
Cbc0038I Gomory was tried 153 times and created 335 cuts of which 0 were active after adding rounds of cuts (0.124 seconds)
Cbc0038I Knapsack was tried 153 times and created 326 cuts of which 0 were active after adding rounds of cuts (0.045 seconds)
Cbc0038I Clique was tried 153 times and created 750 cuts of which 0 were active after adding rounds of cuts (0.029 seconds)
Cbc0038I OddWheel was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.064 seconds)
Cbc0038I MixedIntegerRounding2 was tried 153 times and created 765 cuts of which 0 were active after adding rounds of cuts (0.087 seconds)
Cbc0038I FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I TwoMirCuts was tried 153 times and created 173 cuts of which 0 were active after adding rounds of cuts (0.095 seconds)
Cbc0038I ZeroHalf was tried 153 times and created 149 cuts of which 0 were active after adding rounds of cuts (1.072 seconds)
Cbc0038I Stored from first was tried 153 times and created 618 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective -30.98242, took 11012 iterations and 66 nodes (8.99 seconds)
Cbc0032I Strong branching done 874 times (17202 iterations), fathomed 7 nodes and fixed 3 variables
Cbc0035I Maximum depth 14, 113 variables fixed on reduced cost
Total time (CPU seconds):       6.31   (Wallclock seconds):       9.01

