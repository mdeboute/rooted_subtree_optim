Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 480 (-47) rows, 250 (-14) columns and 1435 (-110) elements
Clp1000I sum of infeasibilities 1.89548e-05 - average 3.94892e-08, 107 fixed columns
Coin0506I Presolve 259 (-221) rows, 137 (-113) columns and 777 (-658) elements
Clp0029I End of values pass after 137 iterations
Clp0014I Perturbing problem by 0.001% of 1.9689849 - largest nonzero change 0 ( 0%) - largest zero change 2.9788091e-05
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Coin0511I After Postsolve, objective 794.50977, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Coin0511I After Postsolve, objective 794.50977, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 794.5097652 - 0 iterations time 0.052, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 480 rows, 250 columns (249 integer (249 of which binary)) and 1435 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.382%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 35 integers unsatisfied sum - 9.8482
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -37.3779 iterations 104
Cbc0038I Solution found of -37.3779
Cbc0038I Relaxing continuous gives -37.3779
Cbc0038I Rounding solution of -324.454 is better than previous of -37.3779

Cbc0038I Before mini branch and bound, 214 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 62 rows 36 columns
Cbc0038I Mini branch and bound improved solution from -324.454 to -662.127 (0.05 seconds)
Cbc0038I Round again with cutoff of -675.366
Cbc0038I Pass   2: suminf.    5.26899 (15) obj. -675.366 iterations 45
Cbc0038I Pass   3: suminf.    3.54703 (11) obj. -675.366 iterations 25
Cbc0038I Pass   4: suminf.    2.23537 (6) obj. -675.366 iterations 26
Cbc0038I Pass   5: suminf.    1.82160 (7) obj. -675.366 iterations 21
Cbc0038I Pass   6: suminf.    1.80684 (7) obj. -675.366 iterations 20
Cbc0038I Pass   7: suminf.    1.33273 (6) obj. -675.366 iterations 24
Cbc0038I Pass   8: suminf.    0.60740 (6) obj. -675.366 iterations 19
Cbc0038I Pass   9: suminf.    1.67417 (7) obj. -675.366 iterations 34
Cbc0038I Pass  10: suminf.    1.11732 (6) obj. -675.366 iterations 15
Cbc0038I Pass  11: suminf.    1.37396 (6) obj. -675.366 iterations 39
Cbc0038I Pass  12: suminf.    1.37396 (6) obj. -675.366 iterations 0
Cbc0038I Pass  13: suminf.    1.43721 (6) obj. -675.366 iterations 31
Cbc0038I Pass  14: suminf.    2.38125 (7) obj. -675.366 iterations 23
Cbc0038I Pass  15: suminf.    2.15720 (8) obj. -675.366 iterations 17
Cbc0038I Pass  16: suminf.    1.06235 (8) obj. -675.366 iterations 17
Cbc0038I Pass  17: suminf.    1.01422 (8) obj. -675.366 iterations 7
Cbc0038I Pass  18: suminf.    1.09187 (4) obj. -675.366 iterations 38
Cbc0038I Pass  19: suminf.    0.30235 (2) obj. -675.366 iterations 15
Cbc0038I Pass  20: suminf.    1.07249 (6) obj. -675.366 iterations 13
Cbc0038I Pass  21: suminf.    0.73355 (4) obj. -675.366 iterations 26
Cbc0038I Pass  22: suminf.    0.57767 (2) obj. -675.366 iterations 8
Cbc0038I Pass  23: suminf.    0.50383 (2) obj. -675.366 iterations 1
Cbc0038I Pass  24: suminf.    0.95957 (4) obj. -675.366 iterations 7
Cbc0038I Pass  25: suminf.    0.89666 (5) obj. -675.366 iterations 14
Cbc0038I Pass  26: suminf.    0.85096 (5) obj. -675.366 iterations 9
Cbc0038I Pass  27: suminf.    0.99351 (6) obj. -675.366 iterations 25
Cbc0038I Pass  28: suminf.    0.59873 (7) obj. -675.366 iterations 15
Cbc0038I Pass  29: suminf.    1.67568 (5) obj. -675.366 iterations 29
Cbc0038I Pass  30: suminf.    1.36155 (6) obj. -675.366 iterations 11
Cbc0038I Pass  31: suminf.    0.73355 (4) obj. -675.366 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 207 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 74 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -662.127 to -669.955 (0.10 seconds)
Cbc0038I Round again with cutoff of -699.194
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    5.57865 (16) obj. -699.194 iterations 13
Cbc0038I Pass  32: suminf.    3.81058 (13) obj. -699.194 iterations 19
Cbc0038I Pass  33: suminf.    1.81619 (9) obj. -699.194 iterations 28
Cbc0038I Pass  34: suminf.    1.81512 (9) obj. -699.194 iterations 4
Cbc0038I Pass  35: suminf.    1.75362 (9) obj. -699.194 iterations 34
Cbc0038I Pass  36: suminf.    1.56897 (8) obj. -699.194 iterations 1
Cbc0038I Pass  37: suminf.    1.94189 (7) obj. -699.194 iterations 27
Cbc0038I Pass  38: suminf.    0.94278 (4) obj. -699.194 iterations 6
Cbc0038I Pass  39: suminf.    2.00387 (8) obj. -699.194 iterations 22
Cbc0038I Pass  40: suminf.    1.62369 (8) obj. -699.194 iterations 17
Cbc0038I Pass  41: suminf.    2.92332 (12) obj. -699.194 iterations 28
Cbc0038I Pass  42: suminf.    2.29741 (8) obj. -699.194 iterations 8
Cbc0038I Pass  43: suminf.    2.10782 (7) obj. -699.194 iterations 1
Cbc0038I Pass  44: suminf.    1.42735 (5) obj. -699.194 iterations 22
Cbc0038I Pass  45: suminf.    0.43903 (6) obj. -699.194 iterations 6
Cbc0038I Pass  46: suminf.    0.43903 (6) obj. -699.194 iterations 0
Cbc0038I Pass  47: suminf.    2.06302 (6) obj. -699.194 iterations 52
Cbc0038I Pass  48: suminf.    2.06302 (6) obj. -699.194 iterations 1
Cbc0038I Pass  49: suminf.    1.11477 (7) obj. -699.194 iterations 12
Cbc0038I Pass  50: suminf.    0.98319 (7) obj. -699.194 iterations 31
Cbc0038I Pass  51: suminf.    0.78290 (3) obj. -699.194 iterations 31
Cbc0038I Pass  52: suminf.    0.76804 (4) obj. -699.194 iterations 8
Cbc0038I Pass  53: suminf.    2.93978 (9) obj. -699.194 iterations 14
Cbc0038I Pass  54: suminf.    2.67422 (11) obj. -699.194 iterations 38
Cbc0038I Pass  55: suminf.    2.11294 (6) obj. -699.194 iterations 19
Cbc0038I Pass  56: suminf.    2.02985 (10) obj. -699.194 iterations 20
Cbc0038I Pass  57: suminf.    3.18238 (11) obj. -699.194 iterations 38
Cbc0038I Pass  58: suminf.    1.75362 (9) obj. -699.194 iterations 5
Cbc0038I Pass  59: suminf.    1.56897 (8) obj. -699.194 iterations 1
Cbc0038I Pass  60: suminf.    1.94189 (7) obj. -699.194 iterations 27
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 207 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 75 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -669.955 to -681.897 (0.16 seconds)
Cbc0038I Round again with cutoff of -727.789
Cbc0038I Reduced cost fixing fixed 7 variables on major pass 4
Cbc0038I Pass  60: suminf.    6.42025 (18) obj. -727.789 iterations 10
Cbc0038I Pass  61: suminf.    6.25810 (16) obj. -727.789 iterations 14
Cbc0038I Pass  62: suminf.    4.53299 (15) obj. -727.789 iterations 28
Cbc0038I Pass  63: suminf.    5.06696 (14) obj. -727.789 iterations 20
Cbc0038I Pass  64: suminf.    3.48561 (13) obj. -727.789 iterations 21
Cbc0038I Pass  65: suminf.    2.71941 (12) obj. -727.789 iterations 1
Cbc0038I Pass  66: suminf.    1.69897 (12) obj. -727.789 iterations 59
Cbc0038I Pass  67: suminf.    1.15635 (4) obj. -727.789 iterations 29
Cbc0038I Pass  68: suminf.    1.12744 (7) obj. -727.789 iterations 6
Cbc0038I Pass  69: suminf.    3.48077 (11) obj. -727.789 iterations 42
Cbc0038I Pass  70: suminf.    2.42972 (10) obj. -727.789 iterations 19
Cbc0038I Pass  71: suminf.    4.27494 (12) obj. -727.789 iterations 26
Cbc0038I Pass  72: suminf.    1.92199 (10) obj. -727.789 iterations 36
Cbc0038I Pass  73: suminf.    1.92199 (10) obj. -727.789 iterations 2
Cbc0038I Pass  74: suminf.    4.48360 (12) obj. -727.789 iterations 19
Cbc0038I Pass  75: suminf.    3.99536 (12) obj. -727.789 iterations 14
Cbc0038I Pass  76: suminf.    1.48170 (9) obj. -727.789 iterations 47
Cbc0038I Pass  77: suminf.    1.48170 (9) obj. -727.789 iterations 0
Cbc0038I Pass  78: suminf.    3.28625 (11) obj. -727.789 iterations 40
Cbc0038I Pass  79: suminf.    2.08139 (9) obj. -727.789 iterations 14
Cbc0038I Pass  80: suminf.    2.89676 (15) obj. -727.789 iterations 43
Cbc0038I Pass  81: suminf.    2.68823 (10) obj. -727.789 iterations 14
Cbc0038I Pass  82: suminf.    2.59165 (11) obj. -727.789 iterations 32
Cbc0038I Pass  83: suminf.    1.71517 (7) obj. -727.789 iterations 8
Cbc0038I Pass  84: suminf.    1.46482 (11) obj. -727.789 iterations 21
Cbc0038I Pass  85: suminf.    2.55055 (14) obj. -727.789 iterations 41
Cbc0038I Pass  86: suminf.    2.36266 (13) obj. -727.789 iterations 20
Cbc0038I Pass  87: suminf.    3.25025 (14) obj. -727.789 iterations 43
Cbc0038I Pass  88: suminf.    2.71941 (12) obj. -727.789 iterations 12
Cbc0038I Pass  89: suminf.    1.69897 (12) obj. -727.789 iterations 60
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 205 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 79 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.22 seconds)
Cbc0038I After 0.22 seconds - Feasibility pump exiting with objective of -681.897 - took 0.20 seconds
Cbc0012I Integer solution of -681.89702 found by feasibility pump after 0 iterations and 0 nodes (0.22 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 62 rows 36 columns
Cbc0031I 11 added rows had average density of 193.54545
Cbc0013I At root node, 11 cuts changed objective from -794.50977 to -754.13273 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3506 row cuts average 3.2 elements, 8 column cuts (8 active)  in 0.312 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 822 row cuts average 234.5 elements, 0 column cuts (0 active)  in 0.138 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.099 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 141 row cuts average 236.9 elements, 0 column cuts (0 active)  in 0.078 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -681.89702 best solution, best possible -754.12888 (1.35 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 17 rows 17 columns
Cbc0012I Integer solution of -685.3827 found by RINS after 4537 iterations and 43 nodes (1.68 seconds)
Cbc0012I Integer solution of -685.643 found by DiveCoefficient after 5084 iterations and 67 nodes (1.73 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 8 rows 9 columns
Cbc0012I Integer solution of -686.0446 found by rounding after 7560 iterations and 180 nodes (1.96 seconds)
Cbc0012I Integer solution of -690.4339 found by DiveCoefficient after 8669 iterations and 239 nodes (2.05 seconds)
Cbc0010I After 243 nodes, 11 on tree, -690.4339 best solution, best possible -754.12888 (2.05 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 9814 iterations and 276 nodes (2.13 seconds)
Cbc0032I Strong branching done 1514 times (18324 iterations), fathomed 76 nodes and fixed 120 variables
Cbc0035I Maximum depth 26, 2491 variables fixed on reduced cost
Total time (CPU seconds):       2.07   (Wallclock seconds):       2.14

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 352 (-174) rows, 370 (-154) columns and 16308 (-19428) elements
Clp1000I sum of infeasibilities 6.78512e-06 - average 1.92759e-08, 258 fixed columns
Coin0506I Presolve 96 (-256) rows, 108 (-262) columns and 396 (-15912) elements
Clp0006I 0  Obj 639.4295 Dual inf 23742.843 (105)
Clp0029I End of values pass after 66 iterations
Clp0014I Perturbing problem by 0.001% of 0.22191616 - largest nonzero change 2.925202e-05 ( 0.0025627714%) - largest zero change 2.9971005e-05
Clp0000I Optimal - objective value 649.73201
Clp0000I Optimal - objective value 649.73201
Coin0511I After Postsolve, objective 649.73201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 649.73201 Dual inf 473.05225 (130)
Clp0014I Perturbing problem by 0.001% of 2.0198682 - largest nonzero change 2.6602917e-05 ( 0.0020816521%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 846.85028
Clp0000I Optimal - objective value 846.85028
Clp0000I Optimal - objective value 846.85028
Coin0511I After Postsolve, objective 846.85028, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 846.850281 - 0 iterations time 0.122, Presolve 0.00, Idiot 0.11

Starting MIP optimization
Cgl0004I processed model has 352 rows, 370 columns (370 integer (370 of which binary)) and 16308 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 5.781%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 109 integers unsatisfied sum - 4.79472
Cbc0038I Pass   1: suminf.    2.46789 (90) obj. -702.39 iterations 60
Cbc0038I Pass   2: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass   3: suminf.    1.88995 (73) obj. -651.139 iterations 17
Cbc0038I Pass   4: suminf.    1.53267 (61) obj. -633.672 iterations 12
Cbc0038I Pass   5: suminf.    1.18563 (49) obj. -616.192 iterations 12
Cbc0038I Pass   6: suminf.    0.54354 (25) obj. -588.939 iterations 24
Cbc0038I Solution found of -562.521
Cbc0038I Rounding solution of -631.217 is better than previous of -562.521

Cbc0038I Before mini branch and bound, 260 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 17 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -631.217 to -643.788 (0.14 seconds)
Cbc0038I Round again with cutoff of -664.065
Cbc0038I Pass   7: suminf.    2.46789 (90) obj. -702.39 iterations 0
Cbc0038I Pass   8: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass   9: suminf.    2.01931 (74) obj. -664.065 iterations 25
Cbc0038I Pass  10: suminf.    1.50797 (59) obj. -734.472 iterations 24
Cbc0038I Pass  11: suminf.    0.92504 (42) obj. -664.065 iterations 31
Cbc0038I Pass  12: suminf.    0.79219 (24) obj. -664.065 iterations 28
Cbc0038I Pass  13: suminf.    0.72585 (23) obj. -664.065 iterations 4
Cbc0038I Pass  14: suminf.    0.50204 (13) obj. -664.065 iterations 21
Cbc0038I Pass  15: suminf.    0.46825 (13) obj. -664.065 iterations 17
Cbc0038I Pass  16: suminf.    1.00464 (3) obj. -664.065 iterations 26
Cbc0038I Pass  17: suminf.    1.00464 (3) obj. -664.065 iterations 6
Cbc0038I Pass  18: suminf.    0.87476 (5) obj. -664.065 iterations 26
Cbc0038I Pass  19: suminf.    0.52344 (2) obj. -681.977 iterations 14
Cbc0038I Pass  20: suminf.    0.35487 (2) obj. -664.065 iterations 3
Cbc0038I Pass  21: suminf.    0.47226 (2) obj. -681.011 iterations 2
Cbc0038I Pass  22: suminf.    2.19973 (28) obj. -664.065 iterations 56
Cbc0038I Pass  23: suminf.    1.50899 (24) obj. -664.702 iterations 12
Cbc0038I Pass  24: suminf.    1.49663 (25) obj. -664.065 iterations 12
Cbc0038I Pass  25: suminf.    0.70221 (11) obj. -664.065 iterations 29
Cbc0038I Pass  26: suminf.    0.59527 (10) obj. -664.065 iterations 7
Cbc0038I Pass  27: suminf.    1.00181 (5) obj. -664.065 iterations 12
Cbc0038I Pass  28: suminf.    0.69033 (4) obj. -664.065 iterations 15
Cbc0038I Pass  29: suminf.    1.30060 (4) obj. -664.065 iterations 11
Cbc0038I Pass  30: suminf.    0.41150 (2) obj. -664.065 iterations 8
Cbc0038I Pass  31: suminf.    0.18705 (3) obj. -664.065 iterations 15
Cbc0038I Pass  32: suminf.    0.80141 (4) obj. -664.065 iterations 12
Cbc0038I Pass  33: suminf.    0.65708 (4) obj. -664.065 iterations 10
Cbc0038I Pass  34: suminf.    0.16044 (5) obj. -664.065 iterations 37
Cbc0038I Pass  35: suminf.    0.55453 (4) obj. -664.065 iterations 19
Cbc0038I Pass  36: suminf.    0.32258 (1) obj. -666.853 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 243 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 118 rows 124 columns
Cbc0038I Mini branch and bound improved solution from -643.788 to -661.262 (0.28 seconds)
Cbc0038I Round again with cutoff of -700.562
Cbc0038I Pass  36: suminf.    2.46789 (90) obj. -702.39 iterations 0
Cbc0038I Pass  37: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass  38: suminf.    1.98910 (63) obj. -700.562 iterations 36
Cbc0038I Pass  39: suminf.    1.63641 (63) obj. -740.285 iterations 9
Cbc0038I Pass  40: suminf.    1.65464 (51) obj. -700.562 iterations 26
Cbc0038I Pass  41: suminf.    0.80754 (26) obj. -700.562 iterations 43
Cbc0038I Pass  42: suminf.    0.66472 (25) obj. -700.562 iterations 31
Cbc0038I Pass  43: suminf.    1.29303 (5) obj. -700.562 iterations 56
Cbc0038I Pass  44: suminf.    0.84205 (7) obj. -700.562 iterations 15
Cbc0038I Pass  45: suminf.    2.20535 (8) obj. -700.562 iterations 37
Cbc0038I Pass  46: suminf.    2.15520 (6) obj. -700.562 iterations 11
Cbc0038I Pass  47: suminf.    1.27920 (5) obj. -700.562 iterations 25
Cbc0038I Pass  48: suminf.    0.76288 (4) obj. -700.562 iterations 7
Cbc0038I Pass  49: suminf.    0.49207 (5) obj. -700.562 iterations 28
Cbc0038I Pass  50: suminf.    0.83405 (6) obj. -700.562 iterations 27
Cbc0038I Pass  51: suminf.    0.41790 (6) obj. -700.562 iterations 34
Cbc0038I Pass  52: suminf.    0.49019 (5) obj. -700.562 iterations 9
Cbc0038I Pass  53: suminf.    0.21799 (5) obj. -700.562 iterations 6
Cbc0038I Pass  54: suminf.    0.83392 (5) obj. -700.562 iterations 10
Cbc0038I Pass  55: suminf.    0.83392 (5) obj. -700.562 iterations 8
Cbc0038I Pass  56: suminf.    2.91386 (34) obj. -700.562 iterations 43
Cbc0038I Pass  57: suminf.    2.83122 (33) obj. -700.562 iterations 10
Cbc0038I Pass  58: suminf.    2.18794 (12) obj. -700.562 iterations 61
Cbc0038I Pass  59: suminf.    2.00459 (12) obj. -700.562 iterations 14
Cbc0038I Pass  60: suminf.    1.00203 (7) obj. -700.562 iterations 29
Cbc0038I Pass  61: suminf.    0.66532 (6) obj. -700.562 iterations 15
Cbc0038I Pass  62: suminf.    1.39871 (8) obj. -700.562 iterations 25
Cbc0038I Pass  63: suminf.    1.33444 (5) obj. -700.562 iterations 12
Cbc0038I Pass  64: suminf.    1.59078 (5) obj. -700.562 iterations 40
Cbc0038I Pass  65: suminf.    1.45933 (6) obj. -700.562 iterations 16
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 240 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 120 rows 126 columns
Cbc0038I Mini branch and bound improved solution from -661.262 to -665.977 (0.44 seconds)
Cbc0038I Round again with cutoff of -744.359
Cbc0038I Pass  65: suminf.    3.60546 (105) obj. -744.359 iterations 5
Cbc0038I Pass  66: suminf.    2.34492 (73) obj. -744.359 iterations 35
Cbc0038I Pass  67: suminf.    2.02143 (73) obj. -782.544 iterations 10
Cbc0038I Pass  68: suminf.    1.97354 (64) obj. -744.359 iterations 27
Cbc0038I Pass  69: suminf.    1.73617 (67) obj. -744.359 iterations 14
Cbc0038I Pass  70: suminf.    1.64562 (54) obj. -744.359 iterations 51
Cbc0038I Pass  71: suminf.    1.39834 (55) obj. -744.359 iterations 20
Cbc0038I Pass  72: suminf.    1.72066 (50) obj. -744.359 iterations 61
Cbc0038I Pass  73: suminf.    1.63943 (40) obj. -744.359 iterations 11
Cbc0038I Pass  74: suminf.    2.11071 (37) obj. -744.359 iterations 56
Cbc0038I Pass  75: suminf.    2.11071 (37) obj. -744.359 iterations 10
Cbc0038I Pass  76: suminf.    1.57131 (23) obj. -744.359 iterations 67
Cbc0038I Pass  77: suminf.    1.27841 (23) obj. -744.359 iterations 20
Cbc0038I Pass  78: suminf.    1.57620 (20) obj. -744.359 iterations 55
Cbc0038I Pass  79: suminf.    1.17693 (20) obj. -744.359 iterations 31
Cbc0038I Pass  80: suminf.    1.28932 (14) obj. -744.359 iterations 60
Cbc0038I Pass  81: suminf.    1.23128 (15) obj. -744.359 iterations 11
Cbc0038I Pass  82: suminf.    1.59158 (14) obj. -744.359 iterations 54
Cbc0038I Pass  83: suminf.    1.59158 (14) obj. -744.359 iterations 5
Cbc0038I Pass  84: suminf.    1.41823 (13) obj. -744.359 iterations 18
Cbc0038I Pass  85: suminf.    1.33550 (14) obj. -744.359 iterations 8
Cbc0038I Pass  86: suminf.    1.76924 (14) obj. -744.359 iterations 58
Cbc0038I Pass  87: suminf.    1.76924 (14) obj. -744.359 iterations 6
Cbc0038I Pass  88: suminf.    1.48426 (13) obj. -744.359 iterations 47
Cbc0038I Pass  89: suminf.    1.00649 (13) obj. -744.359 iterations 31
Cbc0038I Pass  90: suminf.    1.41823 (13) obj. -744.359 iterations 41
Cbc0038I Pass  91: suminf.    1.33550 (14) obj. -744.359 iterations 10
Cbc0038I Pass  92: suminf.    1.76924 (14) obj. -744.359 iterations 55
Cbc0038I Pass  93: suminf.    1.76924 (14) obj. -744.359 iterations 6
Cbc0038I Pass  94: suminf.    1.41823 (13) obj. -744.359 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 255 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 20 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.58 seconds)
Cbc0038I After 0.58 seconds - Feasibility pump exiting with objective of -665.977 - took 0.47 seconds
Cbc0012I Integer solution of -665.9767 found by feasibility pump after 0 iterations and 0 nodes (0.58 seconds)
Cbc0038I Full problem 352 rows 370 columns, reduced to 29 rows 32 columns
Cbc0012I Integer solution of -667.9767 found by RINS after 0 iterations and 0 nodes (0.64 seconds)
Cbc0031I 134 added rows had average density of 72.208955
Cbc0013I At root node, 134 cuts changed objective from -846.55145 to -732.52673 in 34 passes
Cbc0014I Cut generator 0 (Probing) - 4440 row cuts average 4.3 elements, 21 column cuts (21 active)  in 0.212 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 100 row cuts average 125.7 elements, 0 column cuts (0 active)  in 0.132 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 84 row cuts average 2.7 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 519 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.125 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1540 row cuts average 32.3 elements, 0 column cuts (0 active)  in 0.101 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 494 row cuts average 174.5 elements, 0 column cuts (0 active)  in 0.173 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 138 row cuts average 33.5 elements, 0 column cuts (0 active)  in 0.055 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -667.9767 best solution, best possible -732.52673 (1.99 seconds)
Cbc0010I After 10 nodes, 7 on tree, -667.9767 best solution, best possible -732.52673 (2.71 seconds)
Cbc0010I After 31 nodes, 7 on tree, -667.9767 best solution, best possible -732.52673 (3.43 seconds)
Cbc0038I Full problem 352 rows 370 columns, reduced to 145 rows 154 columns
Cbc0012I Integer solution of -690.4339 found by RINS after 3100 iterations and 41 nodes (4.64 seconds)
Cbc0010I After 41 nodes, 6 on tree, -690.4339 best solution, best possible -732.52673 (4.64 seconds)
Cbc0038I Full problem 486 rows 370 columns, reduced to 285 rows 302 columns
Cbc0044I Reduced cost fixing - 285 rows, 302 columns - restarting search
Cbc0012I Integer solution of -690.4339 found by Previous solution after 0 iterations and 0 nodes (5.08 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 81 rows 85 columns
Cbc0031I 135 added rows had average density of 54.177778
Cbc0013I At root node, 135 cuts changed objective from -843.60962 to -731.91778 in 30 passes
Cbc0014I Cut generator 0 (Probing) - 4721 row cuts average 2.9 elements, 14 column cuts (14 active)  in 0.106 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 83 row cuts average 124.6 elements, 0 column cuts (0 active)  in 0.102 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 62 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 456 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.110 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1100 row cuts average 15.8 elements, 0 column cuts (0 active)  in 0.065 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 147 row cuts average 87.9 elements, 0 column cuts (0 active)  in 0.134 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 78 row cuts average 30.8 elements, 0 column cuts (0 active)  in 0.067 seconds - new frequency is 1
Cbc0014I Cut generator 10 (Stored from first) - 490 row cuts average 24.0 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, -690.4339 best solution, best possible -731.91778 (6.48 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 96 rows 104 columns
Cbc0010I After 41 nodes, 9 on tree, -690.4339 best solution, best possible -731.91778 (7.65 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 53 rows 58 columns
Cbc0010I After 118 nodes, 14 on tree, -690.4339 best solution, best possible -731.91778 (8.65 seconds)
Cbc0010I After 180 nodes, 37 on tree, -690.4339 best solution, best possible -731.91778 (9.66 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 25 rows 31 columns
Cbc0010I After 259 nodes, 48 on tree, -690.4339 best solution, best possible -731.91778 (10.66 seconds)
Cbc0010I After 381 nodes, 45 on tree, -690.4339 best solution, best possible -731.91778 (11.67 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 24 rows 30 columns
Cbc0038I Full problem 285 rows 302 columns, reduced to 96 rows 103 columns
Cbc0010I After 500 nodes, 15 on tree, -690.4339 best solution, best possible -731.91778 (12.98 seconds)
Cbc0010I After 579 nodes, 21 on tree, -690.4339 best solution, best possible -731.91778 (14.01 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 25 rows 29 columns
Cbc0010I After 678 nodes, 25 on tree, -690.4339 best solution, best possible -731.91778 (15.01 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 93 rows 100 columns
Cbc0010I After 756 nodes, 19 on tree, -690.4339 best solution, best possible -731.91778 (16.04 seconds)
Cbc0010I After 831 nodes, 8 on tree, -690.4339 best solution, best possible -731.91778 (17.05 seconds)
Cbc0010I After 902 nodes, 22 on tree, -690.4339 best solution, best possible -731.91778 (18.07 seconds)
Cbc0010I After 1011 nodes, 27 on tree, -690.4339 best solution, best possible -731.91778 (19.09 seconds)
Cbc0010I After 1151 nodes, 12 on tree, -690.4339 best solution, best possible -731.91778 (20.10 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 48 rows 53 columns
Cbc0010I After 1255 nodes, 4 on tree, -690.4339 best solution, best possible -731.91778 (21.18 seconds)
Cbc0010I After 1323 nodes, 6 on tree, -690.4339 best solution, best possible -731.91778 (22.20 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 48990 iterations and 1360 nodes (22.60 seconds)
Cbc0032I Strong branching done 2776 times (48169 iterations), fathomed 25 nodes and fixed 132 variables
Cbc0035I Maximum depth 34, 4516 variables fixed on reduced cost
Cbc0038I Probing was tried 1029 times and created 23273 cuts of which 0 were active after adding rounds of cuts (0.739 seconds)
Cbc0038I Gomory was tried 881 times and created 134 cuts of which 0 were active after adding rounds of cuts (0.306 seconds)
Cbc0038I Knapsack was tried 881 times and created 6810 cuts of which 0 were active after adding rounds of cuts (0.766 seconds)
Cbc0038I Clique was tried 881 times and created 5487 cuts of which 0 were active after adding rounds of cuts (0.224 seconds)
Cbc0038I OddWheel was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.110 seconds)
Cbc0038I MixedIntegerRounding2 was tried 881 times and created 9787 cuts of which 0 were active after adding rounds of cuts (0.827 seconds)
Cbc0038I FlowCover was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I TwoMirCuts was tried 881 times and created 938 cuts of which 0 were active after adding rounds of cuts (0.359 seconds)
Cbc0038I ZeroHalf was tried 881 times and created 2235 cuts of which 0 were active after adding rounds of cuts (3.755 seconds)
Cbc0038I Stored from first was tried 881 times and created 3307 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 52644 iterations and 1410 nodes (22.61 seconds)
Cbc0032I Strong branching done 826 times (14455 iterations), fathomed 3 nodes and fixed 17 variables
Cbc0035I Maximum depth 13, 334 variables fixed on reduced cost
Total time (CPU seconds):       17.41   (Wallclock seconds):       22.63

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 480 (-47) rows, 250 (-14) columns and 1435 (-110) elements
Clp1000I sum of infeasibilities 1.89548e-05 - average 3.94892e-08, 107 fixed columns
Coin0506I Presolve 259 (-221) rows, 137 (-113) columns and 777 (-658) elements
Clp0029I End of values pass after 137 iterations
Clp0014I Perturbing problem by 0.001% of 1.9689849 - largest nonzero change 0 ( 0%) - largest zero change 2.9788091e-05
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Coin0511I After Postsolve, objective 794.50977, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Clp0000I Optimal - objective value 794.50977
Coin0511I After Postsolve, objective 794.50977, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 794.5097652 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.05

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 480 rows, 250 columns (249 integer (249 of which binary)) and 1435 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.382%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 35 integers unsatisfied sum - 9.8482
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -37.3779 iterations 104
Cbc0038I Solution found of -37.3779
Cbc0038I Relaxing continuous gives -37.3779
Cbc0038I Rounding solution of -324.454 is better than previous of -37.3779

Cbc0038I Before mini branch and bound, 214 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 62 rows 36 columns
Cbc0038I Mini branch and bound improved solution from -324.454 to -662.127 (0.05 seconds)
Cbc0038I Round again with cutoff of -675.366
Cbc0038I Pass   2: suminf.    5.26899 (15) obj. -675.366 iterations 45
Cbc0038I Pass   3: suminf.    3.54703 (11) obj. -675.366 iterations 25
Cbc0038I Pass   4: suminf.    2.23537 (6) obj. -675.366 iterations 26
Cbc0038I Pass   5: suminf.    1.82160 (7) obj. -675.366 iterations 21
Cbc0038I Pass   6: suminf.    1.80684 (7) obj. -675.366 iterations 20
Cbc0038I Pass   7: suminf.    1.33273 (6) obj. -675.366 iterations 24
Cbc0038I Pass   8: suminf.    0.60740 (6) obj. -675.366 iterations 19
Cbc0038I Pass   9: suminf.    1.67417 (7) obj. -675.366 iterations 34
Cbc0038I Pass  10: suminf.    1.11732 (6) obj. -675.366 iterations 15
Cbc0038I Pass  11: suminf.    1.37396 (6) obj. -675.366 iterations 39
Cbc0038I Pass  12: suminf.    1.37396 (6) obj. -675.366 iterations 0
Cbc0038I Pass  13: suminf.    1.43721 (6) obj. -675.366 iterations 31
Cbc0038I Pass  14: suminf.    2.38125 (7) obj. -675.366 iterations 23
Cbc0038I Pass  15: suminf.    2.15720 (8) obj. -675.366 iterations 17
Cbc0038I Pass  16: suminf.    1.06235 (8) obj. -675.366 iterations 17
Cbc0038I Pass  17: suminf.    1.01422 (8) obj. -675.366 iterations 7
Cbc0038I Pass  18: suminf.    1.09187 (4) obj. -675.366 iterations 38
Cbc0038I Pass  19: suminf.    0.30235 (2) obj. -675.366 iterations 15
Cbc0038I Pass  20: suminf.    1.07249 (6) obj. -675.366 iterations 13
Cbc0038I Pass  21: suminf.    0.73355 (4) obj. -675.366 iterations 26
Cbc0038I Pass  22: suminf.    0.57767 (2) obj. -675.366 iterations 8
Cbc0038I Pass  23: suminf.    0.50383 (2) obj. -675.366 iterations 1
Cbc0038I Pass  24: suminf.    0.95957 (4) obj. -675.366 iterations 7
Cbc0038I Pass  25: suminf.    0.89666 (5) obj. -675.366 iterations 14
Cbc0038I Pass  26: suminf.    0.85096 (5) obj. -675.366 iterations 9
Cbc0038I Pass  27: suminf.    0.99351 (6) obj. -675.366 iterations 25
Cbc0038I Pass  28: suminf.    0.59873 (7) obj. -675.366 iterations 15
Cbc0038I Pass  29: suminf.    1.67568 (5) obj. -675.366 iterations 29
Cbc0038I Pass  30: suminf.    1.36155 (6) obj. -675.366 iterations 11
Cbc0038I Pass  31: suminf.    0.73355 (4) obj. -675.366 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 207 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 74 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -662.127 to -669.955 (0.10 seconds)
Cbc0038I Round again with cutoff of -699.194
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    5.57865 (16) obj. -699.194 iterations 13
Cbc0038I Pass  32: suminf.    3.81058 (13) obj. -699.194 iterations 19
Cbc0038I Pass  33: suminf.    1.81619 (9) obj. -699.194 iterations 28
Cbc0038I Pass  34: suminf.    1.81512 (9) obj. -699.194 iterations 4
Cbc0038I Pass  35: suminf.    1.75362 (9) obj. -699.194 iterations 34
Cbc0038I Pass  36: suminf.    1.56897 (8) obj. -699.194 iterations 1
Cbc0038I Pass  37: suminf.    1.94189 (7) obj. -699.194 iterations 27
Cbc0038I Pass  38: suminf.    0.94278 (4) obj. -699.194 iterations 6
Cbc0038I Pass  39: suminf.    2.00387 (8) obj. -699.194 iterations 22
Cbc0038I Pass  40: suminf.    1.62369 (8) obj. -699.194 iterations 17
Cbc0038I Pass  41: suminf.    2.92332 (12) obj. -699.194 iterations 28
Cbc0038I Pass  42: suminf.    2.29741 (8) obj. -699.194 iterations 8
Cbc0038I Pass  43: suminf.    2.10782 (7) obj. -699.194 iterations 1
Cbc0038I Pass  44: suminf.    1.42735 (5) obj. -699.194 iterations 22
Cbc0038I Pass  45: suminf.    0.43903 (6) obj. -699.194 iterations 6
Cbc0038I Pass  46: suminf.    0.43903 (6) obj. -699.194 iterations 0
Cbc0038I Pass  47: suminf.    2.06302 (6) obj. -699.194 iterations 52
Cbc0038I Pass  48: suminf.    2.06302 (6) obj. -699.194 iterations 1
Cbc0038I Pass  49: suminf.    1.11477 (7) obj. -699.194 iterations 12
Cbc0038I Pass  50: suminf.    0.98319 (7) obj. -699.194 iterations 31
Cbc0038I Pass  51: suminf.    0.78290 (3) obj. -699.194 iterations 31
Cbc0038I Pass  52: suminf.    0.76804 (4) obj. -699.194 iterations 8
Cbc0038I Pass  53: suminf.    2.93978 (9) obj. -699.194 iterations 14
Cbc0038I Pass  54: suminf.    2.67422 (11) obj. -699.194 iterations 38
Cbc0038I Pass  55: suminf.    2.11294 (6) obj. -699.194 iterations 19
Cbc0038I Pass  56: suminf.    2.02985 (10) obj. -699.194 iterations 20
Cbc0038I Pass  57: suminf.    3.18238 (11) obj. -699.194 iterations 38
Cbc0038I Pass  58: suminf.    1.75362 (9) obj. -699.194 iterations 5
Cbc0038I Pass  59: suminf.    1.56897 (8) obj. -699.194 iterations 1
Cbc0038I Pass  60: suminf.    1.94189 (7) obj. -699.194 iterations 27
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 207 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 75 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -669.955 to -681.897 (0.16 seconds)
Cbc0038I Round again with cutoff of -727.789
Cbc0038I Reduced cost fixing fixed 7 variables on major pass 4
Cbc0038I Pass  60: suminf.    6.42025 (18) obj. -727.789 iterations 10
Cbc0038I Pass  61: suminf.    6.25810 (16) obj. -727.789 iterations 14
Cbc0038I Pass  62: suminf.    4.53299 (15) obj. -727.789 iterations 28
Cbc0038I Pass  63: suminf.    5.06696 (14) obj. -727.789 iterations 20
Cbc0038I Pass  64: suminf.    3.48561 (13) obj. -727.789 iterations 21
Cbc0038I Pass  65: suminf.    2.71941 (12) obj. -727.789 iterations 1
Cbc0038I Pass  66: suminf.    1.69897 (12) obj. -727.789 iterations 59
Cbc0038I Pass  67: suminf.    1.15635 (4) obj. -727.789 iterations 29
Cbc0038I Pass  68: suminf.    1.12744 (7) obj. -727.789 iterations 6
Cbc0038I Pass  69: suminf.    3.48077 (11) obj. -727.789 iterations 42
Cbc0038I Pass  70: suminf.    2.42972 (10) obj. -727.789 iterations 19
Cbc0038I Pass  71: suminf.    4.27494 (12) obj. -727.789 iterations 26
Cbc0038I Pass  72: suminf.    1.92199 (10) obj. -727.789 iterations 36
Cbc0038I Pass  73: suminf.    1.92199 (10) obj. -727.789 iterations 2
Cbc0038I Pass  74: suminf.    4.48360 (12) obj. -727.789 iterations 19
Cbc0038I Pass  75: suminf.    3.99536 (12) obj. -727.789 iterations 14
Cbc0038I Pass  76: suminf.    1.48170 (9) obj. -727.789 iterations 47
Cbc0038I Pass  77: suminf.    1.48170 (9) obj. -727.789 iterations 0
Cbc0038I Pass  78: suminf.    3.28625 (11) obj. -727.789 iterations 40
Cbc0038I Pass  79: suminf.    2.08139 (9) obj. -727.789 iterations 14
Cbc0038I Pass  80: suminf.    2.89676 (15) obj. -727.789 iterations 43
Cbc0038I Pass  81: suminf.    2.68823 (10) obj. -727.789 iterations 14
Cbc0038I Pass  82: suminf.    2.59165 (11) obj. -727.789 iterations 32
Cbc0038I Pass  83: suminf.    1.71517 (7) obj. -727.789 iterations 8
Cbc0038I Pass  84: suminf.    1.46482 (11) obj. -727.789 iterations 21
Cbc0038I Pass  85: suminf.    2.55055 (14) obj. -727.789 iterations 41
Cbc0038I Pass  86: suminf.    2.36266 (13) obj. -727.789 iterations 20
Cbc0038I Pass  87: suminf.    3.25025 (14) obj. -727.789 iterations 43
Cbc0038I Pass  88: suminf.    2.71941 (12) obj. -727.789 iterations 12
Cbc0038I Pass  89: suminf.    1.69897 (12) obj. -727.789 iterations 60
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 205 integers at bound fixed and 0 continuous
Cbc0038I Full problem 480 rows 250 columns, reduced to 79 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.22 seconds)
Cbc0038I After 0.22 seconds - Feasibility pump exiting with objective of -681.897 - took 0.20 seconds
Cbc0012I Integer solution of -681.89702 found by feasibility pump after 0 iterations and 0 nodes (0.22 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 62 rows 36 columns
Cbc0031I 11 added rows had average density of 193.54545
Cbc0013I At root node, 11 cuts changed objective from -794.50977 to -754.13273 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3506 row cuts average 3.2 elements, 8 column cuts (8 active)  in 0.308 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 822 row cuts average 234.5 elements, 0 column cuts (0 active)  in 0.134 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.096 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 141 row cuts average 236.9 elements, 0 column cuts (0 active)  in 0.079 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -681.89702 best solution, best possible -754.12888 (1.32 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 17 rows 17 columns
Cbc0012I Integer solution of -685.3827 found by RINS after 4537 iterations and 43 nodes (1.67 seconds)
Cbc0012I Integer solution of -685.643 found by DiveCoefficient after 5084 iterations and 67 nodes (1.71 seconds)
Cbc0038I Full problem 480 rows 250 columns, reduced to 8 rows 9 columns
Cbc0012I Integer solution of -686.0446 found by rounding after 7560 iterations and 180 nodes (1.93 seconds)
Cbc0012I Integer solution of -690.4339 found by DiveCoefficient after 8669 iterations and 239 nodes (2.02 seconds)
Cbc0010I After 243 nodes, 11 on tree, -690.4339 best solution, best possible -754.12888 (2.03 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 9814 iterations and 276 nodes (2.10 seconds)
Cbc0032I Strong branching done 1514 times (18324 iterations), fathomed 76 nodes and fixed 120 variables
Cbc0035I Maximum depth 26, 2491 variables fixed on reduced cost
Total time (CPU seconds):       2.05   (Wallclock seconds):       2.12

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 352 (-175) rows, 370 (-155) columns and 16308 (-19429) elements
Clp1000I sum of infeasibilities 6.78512e-06 - average 1.92759e-08, 258 fixed columns
Coin0506I Presolve 96 (-256) rows, 108 (-262) columns and 396 (-15912) elements
Clp0006I 0  Obj 639.4295 Dual inf 23742.843 (105)
Clp0029I End of values pass after 66 iterations
Clp0014I Perturbing problem by 0.001% of 0.22191616 - largest nonzero change 2.925202e-05 ( 0.0025627714%) - largest zero change 2.9971005e-05
Clp0000I Optimal - objective value 649.73201
Clp0000I Optimal - objective value 649.73201
Coin0511I After Postsolve, objective 649.73201, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 649.73201 Dual inf 473.05225 (130)
Clp0014I Perturbing problem by 0.001% of 2.0198682 - largest nonzero change 2.6602917e-05 ( 0.0020816521%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 846.85028
Clp0000I Optimal - objective value 846.85028
Clp0000I Optimal - objective value 846.85028
Coin0511I After Postsolve, objective 846.85028, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 846.850281 - 0 iterations time 0.122, Presolve 0.00, Idiot 0.11

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 352 rows, 370 columns (370 integer (370 of which binary)) and 16308 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 5.781%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 109 integers unsatisfied sum - 4.79472
Cbc0038I Pass   1: suminf.    2.46789 (90) obj. -702.39 iterations 60
Cbc0038I Pass   2: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass   3: suminf.    1.88995 (73) obj. -651.139 iterations 17
Cbc0038I Pass   4: suminf.    1.53267 (61) obj. -633.672 iterations 12
Cbc0038I Pass   5: suminf.    1.18563 (49) obj. -616.192 iterations 12
Cbc0038I Pass   6: suminf.    0.54354 (25) obj. -588.939 iterations 24
Cbc0038I Solution found of -562.521
Cbc0038I Rounding solution of -631.217 is better than previous of -562.521

Cbc0038I Before mini branch and bound, 260 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 17 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -631.217 to -643.788 (0.14 seconds)
Cbc0038I Round again with cutoff of -664.065
Cbc0038I Pass   7: suminf.    2.46789 (90) obj. -702.39 iterations 0
Cbc0038I Pass   8: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass   9: suminf.    2.01931 (74) obj. -664.065 iterations 25
Cbc0038I Pass  10: suminf.    1.50797 (59) obj. -734.472 iterations 24
Cbc0038I Pass  11: suminf.    0.92504 (42) obj. -664.065 iterations 31
Cbc0038I Pass  12: suminf.    0.79219 (24) obj. -664.065 iterations 28
Cbc0038I Pass  13: suminf.    0.72585 (23) obj. -664.065 iterations 4
Cbc0038I Pass  14: suminf.    0.50204 (13) obj. -664.065 iterations 21
Cbc0038I Pass  15: suminf.    0.46825 (13) obj. -664.065 iterations 17
Cbc0038I Pass  16: suminf.    1.00464 (3) obj. -664.065 iterations 26
Cbc0038I Pass  17: suminf.    1.00464 (3) obj. -664.065 iterations 6
Cbc0038I Pass  18: suminf.    0.87476 (5) obj. -664.065 iterations 26
Cbc0038I Pass  19: suminf.    0.52344 (2) obj. -681.977 iterations 14
Cbc0038I Pass  20: suminf.    0.35487 (2) obj. -664.065 iterations 3
Cbc0038I Pass  21: suminf.    0.47226 (2) obj. -681.011 iterations 2
Cbc0038I Pass  22: suminf.    2.19973 (28) obj. -664.065 iterations 56
Cbc0038I Pass  23: suminf.    1.50899 (24) obj. -664.702 iterations 12
Cbc0038I Pass  24: suminf.    1.49663 (25) obj. -664.065 iterations 12
Cbc0038I Pass  25: suminf.    0.70221 (11) obj. -664.065 iterations 29
Cbc0038I Pass  26: suminf.    0.59527 (10) obj. -664.065 iterations 7
Cbc0038I Pass  27: suminf.    1.00181 (5) obj. -664.065 iterations 12
Cbc0038I Pass  28: suminf.    0.69033 (4) obj. -664.065 iterations 15
Cbc0038I Pass  29: suminf.    1.30060 (4) obj. -664.065 iterations 11
Cbc0038I Pass  30: suminf.    0.41150 (2) obj. -664.065 iterations 8
Cbc0038I Pass  31: suminf.    0.18705 (3) obj. -664.065 iterations 15
Cbc0038I Pass  32: suminf.    0.80141 (4) obj. -664.065 iterations 12
Cbc0038I Pass  33: suminf.    0.65708 (4) obj. -664.065 iterations 10
Cbc0038I Pass  34: suminf.    0.16044 (5) obj. -664.065 iterations 37
Cbc0038I Pass  35: suminf.    0.55453 (4) obj. -664.065 iterations 19
Cbc0038I Pass  36: suminf.    0.32258 (1) obj. -666.853 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 243 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 118 rows 124 columns
Cbc0038I Mini branch and bound improved solution from -643.788 to -661.262 (0.28 seconds)
Cbc0038I Round again with cutoff of -700.562
Cbc0038I Pass  36: suminf.    2.46789 (90) obj. -702.39 iterations 0
Cbc0038I Pass  37: suminf.    2.46789 (90) obj. -702.39 iterations 1
Cbc0038I Pass  38: suminf.    1.98910 (63) obj. -700.562 iterations 36
Cbc0038I Pass  39: suminf.    1.63641 (63) obj. -740.285 iterations 9
Cbc0038I Pass  40: suminf.    1.65464 (51) obj. -700.562 iterations 26
Cbc0038I Pass  41: suminf.    0.80754 (26) obj. -700.562 iterations 43
Cbc0038I Pass  42: suminf.    0.66472 (25) obj. -700.562 iterations 31
Cbc0038I Pass  43: suminf.    1.29303 (5) obj. -700.562 iterations 56
Cbc0038I Pass  44: suminf.    0.84205 (7) obj. -700.562 iterations 15
Cbc0038I Pass  45: suminf.    2.20535 (8) obj. -700.562 iterations 37
Cbc0038I Pass  46: suminf.    2.15520 (6) obj. -700.562 iterations 11
Cbc0038I Pass  47: suminf.    1.27920 (5) obj. -700.562 iterations 25
Cbc0038I Pass  48: suminf.    0.76288 (4) obj. -700.562 iterations 7
Cbc0038I Pass  49: suminf.    0.49207 (5) obj. -700.562 iterations 28
Cbc0038I Pass  50: suminf.    0.83405 (6) obj. -700.562 iterations 27
Cbc0038I Pass  51: suminf.    0.41790 (6) obj. -700.562 iterations 34
Cbc0038I Pass  52: suminf.    0.49019 (5) obj. -700.562 iterations 9
Cbc0038I Pass  53: suminf.    0.21799 (5) obj. -700.562 iterations 6
Cbc0038I Pass  54: suminf.    0.83392 (5) obj. -700.562 iterations 10
Cbc0038I Pass  55: suminf.    0.83392 (5) obj. -700.562 iterations 8
Cbc0038I Pass  56: suminf.    2.91386 (34) obj. -700.562 iterations 43
Cbc0038I Pass  57: suminf.    2.83122 (33) obj. -700.562 iterations 10
Cbc0038I Pass  58: suminf.    2.18794 (12) obj. -700.562 iterations 61
Cbc0038I Pass  59: suminf.    2.00459 (12) obj. -700.562 iterations 14
Cbc0038I Pass  60: suminf.    1.00203 (7) obj. -700.562 iterations 29
Cbc0038I Pass  61: suminf.    0.66532 (6) obj. -700.562 iterations 15
Cbc0038I Pass  62: suminf.    1.39871 (8) obj. -700.562 iterations 25
Cbc0038I Pass  63: suminf.    1.33444 (5) obj. -700.562 iterations 12
Cbc0038I Pass  64: suminf.    1.59078 (5) obj. -700.562 iterations 40
Cbc0038I Pass  65: suminf.    1.45933 (6) obj. -700.562 iterations 16
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 240 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 120 rows 126 columns
Cbc0038I Mini branch and bound improved solution from -661.262 to -665.977 (0.44 seconds)
Cbc0038I Round again with cutoff of -744.359
Cbc0038I Pass  65: suminf.    3.60546 (105) obj. -744.359 iterations 5
Cbc0038I Pass  66: suminf.    2.34492 (73) obj. -744.359 iterations 35
Cbc0038I Pass  67: suminf.    2.02143 (73) obj. -782.544 iterations 10
Cbc0038I Pass  68: suminf.    1.97354 (64) obj. -744.359 iterations 27
Cbc0038I Pass  69: suminf.    1.73617 (67) obj. -744.359 iterations 14
Cbc0038I Pass  70: suminf.    1.64562 (54) obj. -744.359 iterations 51
Cbc0038I Pass  71: suminf.    1.39834 (55) obj. -744.359 iterations 20
Cbc0038I Pass  72: suminf.    1.72066 (50) obj. -744.359 iterations 61
Cbc0038I Pass  73: suminf.    1.63943 (40) obj. -744.359 iterations 11
Cbc0038I Pass  74: suminf.    2.11071 (37) obj. -744.359 iterations 56
Cbc0038I Pass  75: suminf.    2.11071 (37) obj. -744.359 iterations 10
Cbc0038I Pass  76: suminf.    1.57131 (23) obj. -744.359 iterations 67
Cbc0038I Pass  77: suminf.    1.27841 (23) obj. -744.359 iterations 20
Cbc0038I Pass  78: suminf.    1.57620 (20) obj. -744.359 iterations 55
Cbc0038I Pass  79: suminf.    1.17693 (20) obj. -744.359 iterations 31
Cbc0038I Pass  80: suminf.    1.28932 (14) obj. -744.359 iterations 60
Cbc0038I Pass  81: suminf.    1.23128 (15) obj. -744.359 iterations 11
Cbc0038I Pass  82: suminf.    1.59158 (14) obj. -744.359 iterations 54
Cbc0038I Pass  83: suminf.    1.59158 (14) obj. -744.359 iterations 5
Cbc0038I Pass  84: suminf.    1.41823 (13) obj. -744.359 iterations 18
Cbc0038I Pass  85: suminf.    1.33550 (14) obj. -744.359 iterations 8
Cbc0038I Pass  86: suminf.    1.76924 (14) obj. -744.359 iterations 58
Cbc0038I Pass  87: suminf.    1.76924 (14) obj. -744.359 iterations 6
Cbc0038I Pass  88: suminf.    1.48426 (13) obj. -744.359 iterations 47
Cbc0038I Pass  89: suminf.    1.00649 (13) obj. -744.359 iterations 31
Cbc0038I Pass  90: suminf.    1.41823 (13) obj. -744.359 iterations 41
Cbc0038I Pass  91: suminf.    1.33550 (14) obj. -744.359 iterations 10
Cbc0038I Pass  92: suminf.    1.76924 (14) obj. -744.359 iterations 55
Cbc0038I Pass  93: suminf.    1.76924 (14) obj. -744.359 iterations 6
Cbc0038I Pass  94: suminf.    1.41823 (13) obj. -744.359 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 255 integers at bound fixed and 0 continuous
Cbc0038I Full problem 352 rows 370 columns, reduced to 20 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.59 seconds)
Cbc0038I After 0.59 seconds - Feasibility pump exiting with objective of -665.977 - took 0.47 seconds
Cbc0012I Integer solution of -665.9767 found by feasibility pump after 0 iterations and 0 nodes (0.59 seconds)
Cbc0038I Full problem 352 rows 370 columns, reduced to 29 rows 32 columns
Cbc0012I Integer solution of -667.9767 found by RINS after 0 iterations and 0 nodes (0.65 seconds)
Cbc0031I 134 added rows had average density of 72.208955
Cbc0013I At root node, 134 cuts changed objective from -846.55145 to -732.52673 in 34 passes
Cbc0014I Cut generator 0 (Probing) - 4440 row cuts average 4.3 elements, 21 column cuts (21 active)  in 0.216 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 100 row cuts average 125.7 elements, 0 column cuts (0 active)  in 0.137 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 84 row cuts average 2.7 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 519 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.132 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1540 row cuts average 32.3 elements, 0 column cuts (0 active)  in 0.104 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 494 row cuts average 174.5 elements, 0 column cuts (0 active)  in 0.174 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 138 row cuts average 33.5 elements, 0 column cuts (0 active)  in 0.057 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -667.9767 best solution, best possible -732.52673 (2.04 seconds)
Cbc0010I After 10 nodes, 7 on tree, -667.9767 best solution, best possible -732.52673 (2.75 seconds)
Cbc0010I After 31 nodes, 7 on tree, -667.9767 best solution, best possible -732.52673 (3.46 seconds)
Cbc0038I Full problem 352 rows 370 columns, reduced to 145 rows 154 columns
Cbc0012I Integer solution of -690.4339 found by RINS after 3100 iterations and 41 nodes (4.68 seconds)
Cbc0010I After 41 nodes, 6 on tree, -690.4339 best solution, best possible -732.52673 (4.68 seconds)
Cbc0038I Full problem 486 rows 370 columns, reduced to 285 rows 302 columns
Cbc0044I Reduced cost fixing - 285 rows, 302 columns - restarting search
Cbc0012I Integer solution of -690.4339 found by Previous solution after 0 iterations and 0 nodes (5.14 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 81 rows 85 columns
Cbc0031I 135 added rows had average density of 54.177778
Cbc0013I At root node, 135 cuts changed objective from -843.60962 to -731.91778 in 30 passes
Cbc0014I Cut generator 0 (Probing) - 4721 row cuts average 2.9 elements, 14 column cuts (14 active)  in 0.104 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 83 row cuts average 124.6 elements, 0 column cuts (0 active)  in 0.102 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 62 row cuts average 3.5 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 456 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.111 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1100 row cuts average 15.8 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 147 row cuts average 87.9 elements, 0 column cuts (0 active)  in 0.136 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 78 row cuts average 30.8 elements, 0 column cuts (0 active)  in 0.098 seconds - new frequency is 1
Cbc0014I Cut generator 10 (Stored from first) - 490 row cuts average 24.0 elements, 0 column cuts (0 active)
Cbc0010I After 0 nodes, 1 on tree, -690.4339 best solution, best possible -731.91778 (6.60 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 96 rows 104 columns
Cbc0010I After 41 nodes, 9 on tree, -690.4339 best solution, best possible -731.91778 (7.83 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 53 rows 58 columns
Cbc0010I After 118 nodes, 14 on tree, -690.4339 best solution, best possible -731.91778 (8.84 seconds)
Cbc0010I After 183 nodes, 38 on tree, -690.4339 best solution, best possible -731.91778 (9.85 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 25 rows 31 columns
Cbc0010I After 260 nodes, 47 on tree, -690.4339 best solution, best possible -731.91778 (10.86 seconds)
Cbc0010I After 381 nodes, 45 on tree, -690.4339 best solution, best possible -731.91778 (11.86 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 24 rows 30 columns
Cbc0038I Full problem 285 rows 302 columns, reduced to 96 rows 103 columns
Cbc0010I After 500 nodes, 15 on tree, -690.4339 best solution, best possible -731.91778 (13.20 seconds)
Cbc0010I After 579 nodes, 21 on tree, -690.4339 best solution, best possible -731.91778 (14.23 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 25 rows 29 columns
Cbc0010I After 677 nodes, 24 on tree, -690.4339 best solution, best possible -731.91778 (15.24 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 93 rows 100 columns
Cbc0010I After 751 nodes, 19 on tree, -690.4339 best solution, best possible -731.91778 (16.24 seconds)
Cbc0010I After 830 nodes, 8 on tree, -690.4339 best solution, best possible -731.91778 (17.25 seconds)
Cbc0010I After 898 nodes, 21 on tree, -690.4339 best solution, best possible -731.91778 (18.26 seconds)
Cbc0010I After 1008 nodes, 24 on tree, -690.4339 best solution, best possible -731.91778 (19.27 seconds)
Cbc0010I After 1136 nodes, 11 on tree, -690.4339 best solution, best possible -731.91778 (20.27 seconds)
Cbc0038I Full problem 285 rows 302 columns, reduced to 48 rows 53 columns
Cbc0010I After 1243 nodes, 10 on tree, -690.4339 best solution, best possible -731.91778 (21.28 seconds)
Cbc0010I After 1310 nodes, 11 on tree, -690.4339 best solution, best possible -731.91778 (22.29 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 48990 iterations and 1360 nodes (22.83 seconds)
Cbc0032I Strong branching done 2776 times (48169 iterations), fathomed 25 nodes and fixed 132 variables
Cbc0035I Maximum depth 34, 4516 variables fixed on reduced cost
Cbc0038I Probing was tried 1029 times and created 23273 cuts of which 0 were active after adding rounds of cuts (0.738 seconds)
Cbc0038I Gomory was tried 881 times and created 134 cuts of which 0 were active after adding rounds of cuts (0.305 seconds)
Cbc0038I Knapsack was tried 881 times and created 6810 cuts of which 0 were active after adding rounds of cuts (0.765 seconds)
Cbc0038I Clique was tried 881 times and created 5487 cuts of which 0 were active after adding rounds of cuts (0.224 seconds)
Cbc0038I OddWheel was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.111 seconds)
Cbc0038I MixedIntegerRounding2 was tried 881 times and created 9787 cuts of which 0 were active after adding rounds of cuts (0.821 seconds)
Cbc0038I FlowCover was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Cbc0038I TwoMirCuts was tried 881 times and created 938 cuts of which 0 were active after adding rounds of cuts (0.361 seconds)
Cbc0038I ZeroHalf was tried 881 times and created 2235 cuts of which 0 were active after adding rounds of cuts (3.803 seconds)
Cbc0038I Stored from first was tried 881 times and created 3307 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Cbc0001I Search completed - best objective -690.4339000000001, took 52644 iterations and 1410 nodes (22.84 seconds)
Cbc0032I Strong branching done 826 times (14455 iterations), fathomed 3 nodes and fixed 17 variables
Cbc0035I Maximum depth 13, 334 variables fixed on reduced cost
Total time (CPU seconds):       17.53   (Wallclock seconds):       22.86

