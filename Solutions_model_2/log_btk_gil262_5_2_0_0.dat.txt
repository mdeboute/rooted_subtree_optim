Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 503 (-24) rows, 260 (-4) columns and 1494 (-51) elements
Clp1000I sum of infeasibilities 0.000831041 - average 1.65217e-06, 129 fixed columns
Coin0506I Presolve 247 (-256) rows, 131 (-129) columns and 735 (-759) elements
Clp0029I End of values pass after 131 iterations
Clp0014I Perturbing problem by 0.001% of 0.16566957 - largest nonzero change 0 ( 0%) - largest zero change 2.7577903e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.1330272 - largest nonzero change 0 ( 0%) - largest zero change 2.9223017e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 175.936999 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.06

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 503 rows, 260 columns (259 integer (259 of which binary)) and 1494 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 98 integers unsatisfied sum - 11.3294
Cbc0038I Solution found of -0.908628
Cbc0038I Relaxing continuous gives -16.8548
Cbc0038I Before mini branch and bound, 161 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 187 rows 99 columns
Cbc0038I Mini branch and bound improved solution from -16.8548 to -114.698 (0.09 seconds)
Cbc0038I Round again with cutoff of -120.822
Cbc0038I Pass   1: suminf.    5.38323 (67) obj. -120.822 iterations 199
Cbc0038I Pass   2: suminf.    3.15699 (10) obj. -120.822 iterations 90
Cbc0038I Pass   3: suminf.    2.24480 (14) obj. -120.822 iterations 33
Cbc0038I Pass   4: suminf.    2.18013 (10) obj. -120.822 iterations 19
Cbc0038I Pass   5: suminf.    2.75842 (12) obj. -120.822 iterations 46
Cbc0038I Pass   6: suminf.    2.16677 (15) obj. -120.822 iterations 36
Cbc0038I Pass   7: suminf.    2.16677 (15) obj. -120.822 iterations 0
Cbc0038I Pass   8: suminf.    2.30206 (10) obj. -120.822 iterations 25
Cbc0038I Pass   9: suminf.    1.79023 (9) obj. -120.822 iterations 52
Cbc0038I Pass  10: suminf.    2.78571 (9) obj. -120.822 iterations 15
Cbc0038I Pass  11: suminf.    4.75714 (13) obj. -120.822 iterations 36
Cbc0038I Pass  12: suminf.    2.23798 (10) obj. -120.822 iterations 37
Cbc0038I Pass  13: suminf.    1.97610 (7) obj. -120.822 iterations 45
Cbc0038I Pass  14: suminf.    1.37097 (7) obj. -120.822 iterations 31
Cbc0038I Pass  15: suminf.    2.12512 (7) obj. -120.822 iterations 14
Cbc0038I Pass  16: suminf.    1.37097 (7) obj. -120.822 iterations 24
Cbc0038I Pass  17: suminf.    5.10030 (25) obj. -120.822 iterations 54
Cbc0038I Pass  18: suminf.    2.80486 (16) obj. -120.822 iterations 84
Cbc0038I Pass  19: suminf.    2.60622 (10) obj. -120.822 iterations 13
Cbc0038I Pass  20: suminf.    2.60571 (13) obj. -120.822 iterations 6
Cbc0038I Pass  21: suminf.    3.17888 (11) obj. -120.822 iterations 32
Cbc0038I Pass  22: suminf.    2.51529 (11) obj. -120.822 iterations 33
Cbc0038I Pass  23: suminf.    3.13389 (10) obj. -120.822 iterations 22
Cbc0038I Pass  24: suminf.    2.26656 (10) obj. -120.822 iterations 22
Cbc0038I Pass  25: suminf.    2.26656 (10) obj. -120.822 iterations 0
Cbc0038I Pass  26: suminf.    3.13389 (10) obj. -120.822 iterations 15
Cbc0038I Pass  27: suminf.    3.65497 (16) obj. -120.822 iterations 41
Cbc0038I Pass  28: suminf.    1.60106 (8) obj. -120.822 iterations 65
Cbc0038I Pass  29: suminf.    2.39490 (8) obj. -120.822 iterations 11
Cbc0038I Pass  30: suminf.    1.85609 (13) obj. -120.822 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 122 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 262 rows 138 columns - 5 fixed gives 228, 132 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 226 rows 131 columns
Cbc0038I Mini branch and bound improved solution from -114.698 to -116.709 (0.15 seconds)
Cbc0038I Round again with cutoff of -131.845
Cbc0038I Pass  30: suminf.    5.95398 (67) obj. -131.845 iterations 0
Cbc0038I Pass  31: suminf.    3.33682 (14) obj. -131.845 iterations 103
Cbc0038I Pass  32: suminf.    2.73284 (11) obj. -131.845 iterations 7
Cbc0038I Pass  33: suminf.    3.97084 (23) obj. -131.845 iterations 80
Cbc0038I Pass  34: suminf.    3.54972 (22) obj. -131.845 iterations 29
Cbc0038I Pass  35: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  36: suminf.    3.53510 (19) obj. -131.845 iterations 35
Cbc0038I Pass  37: suminf.    3.49475 (16) obj. -131.845 iterations 38
Cbc0038I Pass  38: suminf.    3.84951 (15) obj. -131.845 iterations 28
Cbc0038I Pass  39: suminf.    3.54972 (22) obj. -131.845 iterations 54
Cbc0038I Pass  40: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  41: suminf.    3.58836 (14) obj. -131.845 iterations 49
Cbc0038I Pass  42: suminf.    3.37748 (18) obj. -131.845 iterations 30
Cbc0038I Pass  43: suminf.    3.34848 (14) obj. -131.845 iterations 22
Cbc0038I Pass  44: suminf.    3.73089 (15) obj. -131.845 iterations 40
Cbc0038I Pass  45: suminf.    3.16256 (13) obj. -131.845 iterations 47
Cbc0038I Pass  46: suminf.    3.66879 (14) obj. -131.845 iterations 27
Cbc0038I Pass  47: suminf.    2.57238 (12) obj. -131.845 iterations 36
Cbc0038I Pass  48: suminf.    3.25289 (15) obj. -131.845 iterations 72
Cbc0038I Pass  49: suminf.    3.22243 (18) obj. -131.845 iterations 41
Cbc0038I Pass  50: suminf.    3.65525 (16) obj. -131.845 iterations 29
Cbc0038I Pass  51: suminf.    3.16256 (13) obj. -131.845 iterations 32
Cbc0038I Pass  52: suminf.    3.75704 (13) obj. -131.845 iterations 48
Cbc0038I Pass  53: suminf.    3.31042 (13) obj. -131.845 iterations 33
Cbc0038I Pass  54: suminf.    6.17734 (32) obj. -131.845 iterations 67
Cbc0038I Pass  55: suminf.    3.81053 (18) obj. -131.845 iterations 79
Cbc0038I Pass  56: suminf.    5.57745 (18) obj. -131.845 iterations 46
Cbc0038I Pass  57: suminf.    4.12039 (24) obj. -131.845 iterations 77
Cbc0038I Pass  58: suminf.    4.12039 (24) obj. -131.845 iterations 0
Cbc0038I Pass  59: suminf.    3.14217 (16) obj. -131.845 iterations 46
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 124 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 258 rows 136 columns - 8 fixed gives 210, 128 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 98 rows 60 columns
Cbc0038I Mini branch and bound did not improve solution (0.21 seconds)
Cbc0038I After 0.21 seconds - Feasibility pump exiting with objective of -116.709 - took 0.19 seconds
Cbc0012I Integer solution of -116.70857 found by feasibility pump after 0 iterations and 0 nodes (0.21 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 188 rows 100 columns
Cbc0031I 29 added rows had average density of 186.55172
Cbc0013I At root node, 29 cuts changed objective from -175.937 to -161.0112 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 42184 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.510 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3114 row cuts average 255.7 elements, 0 column cuts (0 active)  in 0.442 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.098 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 13 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.471 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 179 row cuts average 252.8 elements, 0 column cuts (0 active)  in 0.200 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -116.70857 best solution, best possible -161.0112 (5.00 seconds)
Cbc0010I After 19 nodes, 10 on tree, -116.70857 best solution, best possible -161.0112 (5.71 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 145 rows 78 columns
Cbc0038I Full problem 503 rows 260 columns, reduced to 146 rows 79 columns
Cbc0010I After 107 nodes, 13 on tree, -116.70857 best solution, best possible -161.0112 (6.41 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 3 rows 6 columns
Cbc0012I Integer solution of -117.31592 found by RINS after 23927 iterations and 200 nodes (6.66 seconds)
Cbc0001I Search completed - best objective -117.31592, took 25823 iterations and 230 nodes (6.77 seconds)
Cbc0032I Strong branching done 1838 times (48718 iterations), fathomed 42 nodes and fixed 99 variables
Cbc0035I Maximum depth 50, 852 variables fixed on reduced cost
Total time (CPU seconds):       6.63   (Wallclock seconds):       6.82

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 392 (-134) rows, 407 (-117) columns and 20592 (-15144) elements
Clp1000I sum of infeasibilities 3.40072e-06 - average 8.6753e-09, 272 fixed columns
Coin0506I Presolve 123 (-269) rows, 135 (-272) columns and 497 (-20095) elements
Clp0006I 0  Obj -37.786921 Dual inf 6634.1225 (134)
Clp0029I End of values pass after 95 iterations
Clp0014I Perturbing problem by 0.001% of 0.16382524 - largest nonzero change 2.9975962e-05 ( 0.0027250874%) - largest zero change 2.9464328e-05
Clp0000I Optimal - objective value -33.037957
Clp0000I Optimal - objective value -33.037957
Coin0511I After Postsolve, objective -33.037957, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj -33.037957 Dual inf 391.86718 (156)
Clp0014I Perturbing problem by 0.001% of 2.0320225 - largest nonzero change 2.954135e-05 ( 0.0026133635%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 215.06105
Clp0000I Optimal - objective value 215.06105
Clp0000I Optimal - objective value 215.06105
Coin0511I After Postsolve, objective 215.06105, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 215.0610501 - 0 iterations time 0.172, Presolve 0.00, Idiot 0.17

Starting MIP optimization
Cgl0004I processed model has 392 rows, 407 columns (407 integer (407 of which binary)) and 20592 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 6.065%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 140 integers unsatisfied sum - 6.49764
Cbc0038I Pass   1: suminf.    3.44084 (102) obj. -177.072 iterations 97
Cbc0038I Pass   2: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass   3: suminf.    2.69284 (83) obj. -138.749 iterations 19
Cbc0038I Pass   4: suminf.    1.90726 (61) obj. -105.964 iterations 22
Cbc0038I Pass   5: suminf.    1.36348 (45) obj. -81.8141 iterations 16
Cbc0038I Pass   6: suminf.    0.58443 (21) obj. -46.0165 iterations 24
Cbc0038I Pass   7: suminf.    0.05525 (3) obj. -22.7256 iterations 18
Cbc0038I Solution found of -16.8259
Cbc0038I Rounding solution of -30.1936 is better than previous of -16.8259

Cbc0038I Before mini branch and bound, 265 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 39 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I Round again with cutoff of -48.6745
Cbc0038I Pass   8: suminf.    3.44084 (102) obj. -177.072 iterations 0
Cbc0038I Pass   9: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass  10: suminf.    2.91552 (89) obj. -146.452 iterations 13
Cbc0038I Pass  11: suminf.    2.47459 (77) obj. -128.148 iterations 12
Cbc0038I Pass  12: suminf.    1.66614 (54) obj. -97.2742 iterations 23
Cbc0038I Pass  13: suminf.    0.83888 (29) obj. -57.635 iterations 25
Cbc0038I Pass  14: suminf.    0.74152 (12) obj. -48.6745 iterations 22
Cbc0038I Pass  15: suminf.    0.63904 (12) obj. -51.5926 iterations 3
Cbc0038I Pass  16: suminf.    1.27223 (5) obj. -48.6745 iterations 35
Cbc0038I Pass  17: suminf.    0.80995 (3) obj. -49.8947 iterations 7
Cbc0038I Pass  18: suminf.    0.65251 (3) obj. -48.6745 iterations 4
Cbc0038I Pass  19: suminf.    0.58371 (25) obj. -48.6745 iterations 25
Cbc0038I Pass  20: suminf.    0.93583 (10) obj. -48.6745 iterations 108
Cbc0038I Pass  21: suminf.    0.91721 (9) obj. -48.6745 iterations 2
Cbc0038I Pass  22: suminf.    0.60847 (6) obj. -48.6745 iterations 33
Cbc0038I Pass  23: suminf.    0.30707 (5) obj. -48.6745 iterations 32
Cbc0038I Pass  24: suminf.    0.60847 (6) obj. -48.6745 iterations 37
Cbc0038I Pass  25: suminf.    2.53173 (30) obj. -48.6745 iterations 96
Cbc0038I Pass  26: suminf.    1.67683 (29) obj. -48.6745 iterations 12
Cbc0038I Pass  27: suminf.    1.45259 (28) obj. -48.6745 iterations 2
Cbc0038I Pass  28: suminf.    0.57561 (8) obj. -48.6745 iterations 59
Cbc0038I Pass  29: suminf.    0.40558 (8) obj. -48.6745 iterations 10
Cbc0038I Pass  30: suminf.    0.57407 (8) obj. -48.6745 iterations 20
Cbc0038I Pass  31: suminf.    0.49222 (9) obj. -48.6745 iterations 12
Cbc0038I Pass  32: suminf.    0.57788 (6) obj. -48.6745 iterations 43
Cbc0038I Pass  33: suminf.    0.36323 (6) obj. -48.6745 iterations 40
Cbc0038I Pass  34: suminf.    0.60847 (7) obj. -48.6745 iterations 34
Cbc0038I Pass  35: suminf.    4.04029 (35) obj. -48.6745 iterations 86
Cbc0038I Pass  36: suminf.    2.08660 (30) obj. -48.6745 iterations 16
Cbc0038I Pass  37: suminf.    1.59276 (31) obj. -48.6745 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 240 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 151 rows 161 columns - 33 fixed gives 117, 127 - still too large
Cbc0038I Full problem 392 rows 407 columns, reduced to 46 rows 56 columns
Cbc0038I Mini branch and bound improved solution from -16.8259 to -37.9072 (0.28 seconds)
Cbc0038I Round again with cutoff of -81.9399
Cbc0038I Pass  37: suminf.    3.44084 (102) obj. -177.072 iterations 0
Cbc0038I Pass  38: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass  39: suminf.    2.91552 (89) obj. -146.452 iterations 13
Cbc0038I Pass  40: suminf.    1.94204 (62) obj. -106.93 iterations 27
Cbc0038I Pass  41: suminf.    1.76154 (36) obj. -81.9399 iterations 35
Cbc0038I Pass  42: suminf.    1.52576 (35) obj. -81.9399 iterations 54
Cbc0038I Pass  43: suminf.    1.65111 (40) obj. -81.9399 iterations 54
Cbc0038I Pass  44: suminf.    1.60286 (39) obj. -81.9399 iterations 10
Cbc0038I Pass  45: suminf.    1.24132 (28) obj. -81.9399 iterations 72
Cbc0038I Pass  46: suminf.    1.10426 (28) obj. -81.9399 iterations 35
Cbc0038I Pass  47: suminf.    1.30581 (28) obj. -81.9399 iterations 44
Cbc0038I Pass  48: suminf.    1.29351 (28) obj. -81.9399 iterations 12
Cbc0038I Pass  49: suminf.    1.12348 (21) obj. -81.9399 iterations 44
Cbc0038I Pass  50: suminf.    1.12699 (21) obj. -81.9399 iterations 15
Cbc0038I Pass  51: suminf.    1.23695 (18) obj. -81.9399 iterations 39
Cbc0038I Pass  52: suminf.    1.23331 (19) obj. -81.9399 iterations 20
Cbc0038I Pass  53: suminf.    1.22177 (19) obj. -81.9399 iterations 19
Cbc0038I Pass  54: suminf.    1.22177 (19) obj. -81.9399 iterations 11
Cbc0038I Pass  55: suminf.    1.23695 (18) obj. -81.9399 iterations 42
Cbc0038I Pass  56: suminf.    2.38894 (38) obj. -81.9399 iterations 67
Cbc0038I Pass  57: suminf.    1.56387 (34) obj. -81.9399 iterations 20
Cbc0038I Pass  58: suminf.    1.76852 (31) obj. -81.9399 iterations 42
Cbc0038I Pass  59: suminf.    1.40650 (30) obj. -81.9399 iterations 23
Cbc0038I Pass  60: suminf.    1.67505 (22) obj. -81.9399 iterations 61
Cbc0038I Pass  61: suminf.    1.37800 (23) obj. -81.9399 iterations 16
Cbc0038I Pass  62: suminf.    1.31866 (19) obj. -81.9399 iterations 38
Cbc0038I Pass  63: suminf.    1.31509 (20) obj. -81.9399 iterations 7
Cbc0038I Pass  64: suminf.    1.32029 (19) obj. -81.9399 iterations 24
Cbc0038I Pass  65: suminf.    1.31668 (20) obj. -81.9399 iterations 8
Cbc0038I Pass  66: suminf.    1.31866 (19) obj. -81.9399 iterations 49
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 248 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 43 rows 55 columns
Cbc0038I Mini branch and bound did not improve solution (0.38 seconds)
Cbc0038I After 0.38 seconds - Feasibility pump exiting with objective of -37.9072 - took 0.26 seconds
Cbc0012I Integer solution of -37.90717 found by feasibility pump after 0 iterations and 0 nodes (0.38 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 44 rows 48 columns
Cbc0031I 174 added rows had average density of 79.517241
Cbc0013I At root node, 174 cuts changed objective from -215.00171 to -143.7426 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 67344 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.705 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3440 row cuts average 381.0 elements, 0 column cuts (0 active)  in 1.826 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 923 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.144 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 7202 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.452 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.295 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2198 row cuts average 20.9 elements, 0 column cuts (0 active)  in 1.350 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 432 row cuts average 205.4 elements, 0 column cuts (0 active)  in 0.346 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 161 row cuts average 48.1 elements, 0 column cuts (0 active)  in 0.978 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -37.90717 best solution, best possible -143.7426 (14.23 seconds)
Cbc0012I Integer solution of -110.95276 found by rounding after 20029 iterations and 1 nodes (14.30 seconds)
Cbc0010I After 8 nodes, 1 on tree, -110.95276 best solution, best possible -143.13301 (15.52 seconds)
Cbc0010I After 10 nodes, 3 on tree, -110.95276 best solution, best possible -143.13301 (16.70 seconds)
Cbc0010I After 20 nodes, 7 on tree, -110.95276 best solution, best possible -143.13301 (17.44 seconds)
Cbc0012I Integer solution of -113.85562 found by rounding after 23227 iterations and 34 nodes (18.06 seconds)
Cbc0010I After 38 nodes, 16 on tree, -113.85562 best solution, best possible -143.13301 (18.15 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 3 rows 7 columns
Cbc0016I Integer solution of -115.79656 found by strong branching after 23649 iterations and 44 nodes (18.31 seconds)
Cbc0012I Integer solution of -117.31592 found by rounding after 24185 iterations and 62 nodes (18.63 seconds)
Cbc0010I After 87 nodes, 9 on tree, -117.31592 best solution, best possible -143.13301 (18.86 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 77 rows 89 columns
Cbc0010I After 100 nodes, 3 on tree, -117.31592 best solution, best possible -143.13301 (19.86 seconds)
Cbc0010I After 101 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (21.56 seconds)
Cbc0010I After 103 nodes, 6 on tree, -117.31592 best solution, best possible -143.13301 (22.34 seconds)
Cbc0010I After 105 nodes, 7 on tree, -117.31592 best solution, best possible -143.13301 (23.14 seconds)
Cbc0010I After 108 nodes, 9 on tree, -117.31592 best solution, best possible -143.13301 (23.96 seconds)
Cbc0010I After 110 nodes, 8 on tree, -117.31592 best solution, best possible -143.13301 (25.65 seconds)
Cbc0010I After 145 nodes, 18 on tree, -117.31592 best solution, best possible -143.13301 (26.36 seconds)
Cbc0010I After 172 nodes, 16 on tree, -117.31592 best solution, best possible -143.13301 (27.31 seconds)
Cbc0010I After 179 nodes, 17 on tree, -117.31592 best solution, best possible -143.13301 (28.02 seconds)
Cbc0010I After 184 nodes, 17 on tree, -117.31592 best solution, best possible -143.13301 (28.76 seconds)
Cbc0010I After 203 nodes, 18 on tree, -117.31592 best solution, best possible -143.13301 (30.60 seconds)
Cbc0010I After 209 nodes, 19 on tree, -117.31592 best solution, best possible -143.13301 (31.32 seconds)
Cbc0010I After 264 nodes, 24 on tree, -117.31592 best solution, best possible -143.13301 (32.03 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 128 rows 141 columns
Cbc0010I After 295 nodes, 22 on tree, -117.31592 best solution, best possible -143.13301 (33.56 seconds)
Cbc0010I After 318 nodes, 23 on tree, -117.31592 best solution, best possible -143.13301 (34.38 seconds)
Cbc0010I After 336 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (35.12 seconds)
Cbc0010I After 375 nodes, 24 on tree, -117.31592 best solution, best possible -143.13301 (35.89 seconds)
Cbc0010I After 397 nodes, 28 on tree, -117.31592 best solution, best possible -143.13301 (36.60 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 195 rows 211 columns - 11 fixed gives 184, 200 - ok now
Cbc0038I Full problem 392 rows 407 columns, reduced to 184 rows 200 columns
Cbc0010I After 400 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (39.03 seconds)
Cbc0010I After 426 nodes, 34 on tree, -117.31592 best solution, best possible -143.13301 (39.74 seconds)
Cbc0010I After 453 nodes, 34 on tree, -117.31592 best solution, best possible -143.13301 (40.46 seconds)
Cbc0010I After 494 nodes, 35 on tree, -117.31592 best solution, best possible -143.13301 (41.25 seconds)
Cbc0010I After 539 nodes, 37 on tree, -117.31592 best solution, best possible -143.13301 (41.97 seconds)
Cbc0010I After 585 nodes, 36 on tree, -117.31592 best solution, best possible -143.13301 (42.68 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 122 rows 138 columns
Cbc0010I After 600 nodes, 38 on tree, -117.31592 best solution, best possible -143.13301 (43.56 seconds)
Cbc0010I After 636 nodes, 35 on tree, -117.31592 best solution, best possible -143.13301 (44.26 seconds)
Cbc0010I After 658 nodes, 39 on tree, -117.31592 best solution, best possible -143.13301 (44.98 seconds)
Cbc0010I After 689 nodes, 41 on tree, -117.31592 best solution, best possible -143.13301 (45.68 seconds)
Cbc0010I After 733 nodes, 38 on tree, -117.31592 best solution, best possible -143.13301 (46.39 seconds)
Cbc0010I After 784 nodes, 34 on tree, -117.31592 best solution, best possible -143.13301 (47.12 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 194 rows 208 columns - 3 fixed gives 191, 205 - ok now
Cbc0038I Full problem 392 rows 407 columns, reduced to 191 rows 205 columns
Cbc0010I After 800 nodes, 36 on tree, -117.31592 best solution, best possible -143.13301 (49.19 seconds)
Cbc0010I After 834 nodes, 33 on tree, -117.31592 best solution, best possible -143.13301 (49.90 seconds)
Cbc0010I After 876 nodes, 33 on tree, -117.31592 best solution, best possible -143.13301 (50.61 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 188 rows 204 columns
Cbc0010I After 900 nodes, 31 on tree, -117.31592 best solution, best possible -143.13301 (52.58 seconds)
Cbc0010I After 943 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (53.31 seconds)
Cbc0010I After 987 nodes, 25 on tree, -117.31592 best solution, best possible -143.13301 (54.02 seconds)
Cbc0010I After 1041 nodes, 16 on tree, -117.31592 best solution, best possible -143.13301 (54.72 seconds)
Cbc0010I After 1095 nodes, 7 on tree, -117.31592 best solution, best possible -143.13301 (55.44 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 177 rows 190 columns
Cbc0010I After 1100 nodes, 10 on tree, -117.31592 best solution, best possible -143.13301 (56.35 seconds)
Cbc0010I After 1110 nodes, 3 on tree, -117.31592 best solution, best possible -143.13301 (57.66 seconds)
Cbc0010I After 1113 nodes, 6 on tree, -117.31592 best solution, best possible -143.13301 (58.37 seconds)
Cbc0010I After 1115 nodes, 8 on tree, -117.31592 best solution, best possible -143.13301 (59.36 seconds)
Cbc0010I After 1135 nodes, 16 on tree, -117.31592 best solution, best possible -143.13301 (60.08 seconds)
Cbc0010I After 1165 nodes, 10 on tree, -117.31592 best solution, best possible -143.13301 (60.81 seconds)
Cbc0010I After 1193 nodes, 5 on tree, -117.31592 best solution, best possible -143.13301 (61.52 seconds)
Cbc0010I After 1198 nodes, 3 on tree, -117.31592 best solution, best possible -143.13301 (62.54 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 188 rows 199 columns
Cbc0010I After 1200 nodes, 5 on tree, -117.31592 best solution, best possible -143.13301 (65.17 seconds)
Cbc0010I After 1216 nodes, 10 on tree, -117.31592 best solution, best possible -143.13301 (65.88 seconds)
Cbc0010I After 1225 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (66.58 seconds)
Cbc0001I Search completed - best objective -117.31592, took 125298 iterations and 1238 nodes (67.30 seconds)
Cbc0032I Strong branching done 5130 times (119157 iterations), fathomed 42 nodes and fixed 65 variables
Cbc0035I Maximum depth 34, 7144 variables fixed on reduced cost
Total time (CPU seconds):       65.34   (Wallclock seconds):       67.41

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 503 (-24) rows, 260 (-4) columns and 1494 (-51) elements
Clp1000I sum of infeasibilities 0.000831041 - average 1.65217e-06, 129 fixed columns
Coin0506I Presolve 247 (-256) rows, 131 (-129) columns and 735 (-759) elements
Clp0029I End of values pass after 131 iterations
Clp0014I Perturbing problem by 0.001% of 0.16566957 - largest nonzero change 0 ( 0%) - largest zero change 2.7577903e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 0.1330272 - largest nonzero change 0 ( 0%) - largest zero change 2.9223017e-05
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Clp0000I Optimal - objective value 175.937
Coin0511I After Postsolve, objective 175.937, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 175.936999 - 0 iterations time 0.062, Presolve 0.00, Idiot 0.06

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 503 rows, 260 columns (259 integer (259 of which binary)) and 1494 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.370%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 98 integers unsatisfied sum - 11.3294
Cbc0038I Solution found of -0.908628
Cbc0038I Relaxing continuous gives -16.8548
Cbc0038I Before mini branch and bound, 161 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 187 rows 99 columns
Cbc0038I Mini branch and bound improved solution from -16.8548 to -114.698 (0.08 seconds)
Cbc0038I Round again with cutoff of -120.822
Cbc0038I Pass   1: suminf.    5.38323 (67) obj. -120.822 iterations 199
Cbc0038I Pass   2: suminf.    3.15699 (10) obj. -120.822 iterations 90
Cbc0038I Pass   3: suminf.    2.24480 (14) obj. -120.822 iterations 33
Cbc0038I Pass   4: suminf.    2.18013 (10) obj. -120.822 iterations 19
Cbc0038I Pass   5: suminf.    2.75842 (12) obj. -120.822 iterations 46
Cbc0038I Pass   6: suminf.    2.16677 (15) obj. -120.822 iterations 36
Cbc0038I Pass   7: suminf.    2.16677 (15) obj. -120.822 iterations 0
Cbc0038I Pass   8: suminf.    2.30206 (10) obj. -120.822 iterations 25
Cbc0038I Pass   9: suminf.    1.79023 (9) obj. -120.822 iterations 52
Cbc0038I Pass  10: suminf.    2.78571 (9) obj. -120.822 iterations 15
Cbc0038I Pass  11: suminf.    4.75714 (13) obj. -120.822 iterations 36
Cbc0038I Pass  12: suminf.    2.23798 (10) obj. -120.822 iterations 37
Cbc0038I Pass  13: suminf.    1.97610 (7) obj. -120.822 iterations 45
Cbc0038I Pass  14: suminf.    1.37097 (7) obj. -120.822 iterations 31
Cbc0038I Pass  15: suminf.    2.12512 (7) obj. -120.822 iterations 14
Cbc0038I Pass  16: suminf.    1.37097 (7) obj. -120.822 iterations 24
Cbc0038I Pass  17: suminf.    5.10030 (25) obj. -120.822 iterations 54
Cbc0038I Pass  18: suminf.    2.80486 (16) obj. -120.822 iterations 84
Cbc0038I Pass  19: suminf.    2.60622 (10) obj. -120.822 iterations 13
Cbc0038I Pass  20: suminf.    2.60571 (13) obj. -120.822 iterations 6
Cbc0038I Pass  21: suminf.    3.17888 (11) obj. -120.822 iterations 32
Cbc0038I Pass  22: suminf.    2.51529 (11) obj. -120.822 iterations 33
Cbc0038I Pass  23: suminf.    3.13389 (10) obj. -120.822 iterations 22
Cbc0038I Pass  24: suminf.    2.26656 (10) obj. -120.822 iterations 22
Cbc0038I Pass  25: suminf.    2.26656 (10) obj. -120.822 iterations 0
Cbc0038I Pass  26: suminf.    3.13389 (10) obj. -120.822 iterations 15
Cbc0038I Pass  27: suminf.    3.65497 (16) obj. -120.822 iterations 41
Cbc0038I Pass  28: suminf.    1.60106 (8) obj. -120.822 iterations 65
Cbc0038I Pass  29: suminf.    2.39490 (8) obj. -120.822 iterations 11
Cbc0038I Pass  30: suminf.    1.85609 (13) obj. -120.822 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 122 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 262 rows 138 columns - 5 fixed gives 228, 132 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 226 rows 131 columns
Cbc0038I Mini branch and bound improved solution from -114.698 to -116.709 (0.14 seconds)
Cbc0038I Round again with cutoff of -131.845
Cbc0038I Pass  30: suminf.    5.95398 (67) obj. -131.845 iterations 0
Cbc0038I Pass  31: suminf.    3.33682 (14) obj. -131.845 iterations 103
Cbc0038I Pass  32: suminf.    2.73284 (11) obj. -131.845 iterations 7
Cbc0038I Pass  33: suminf.    3.97084 (23) obj. -131.845 iterations 80
Cbc0038I Pass  34: suminf.    3.54972 (22) obj. -131.845 iterations 29
Cbc0038I Pass  35: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  36: suminf.    3.53510 (19) obj. -131.845 iterations 35
Cbc0038I Pass  37: suminf.    3.49475 (16) obj. -131.845 iterations 38
Cbc0038I Pass  38: suminf.    3.84951 (15) obj. -131.845 iterations 28
Cbc0038I Pass  39: suminf.    3.54972 (22) obj. -131.845 iterations 54
Cbc0038I Pass  40: suminf.    3.54972 (22) obj. -131.845 iterations 0
Cbc0038I Pass  41: suminf.    3.58836 (14) obj. -131.845 iterations 49
Cbc0038I Pass  42: suminf.    3.37748 (18) obj. -131.845 iterations 30
Cbc0038I Pass  43: suminf.    3.34848 (14) obj. -131.845 iterations 22
Cbc0038I Pass  44: suminf.    3.73089 (15) obj. -131.845 iterations 40
Cbc0038I Pass  45: suminf.    3.16256 (13) obj. -131.845 iterations 47
Cbc0038I Pass  46: suminf.    3.66879 (14) obj. -131.845 iterations 27
Cbc0038I Pass  47: suminf.    2.57238 (12) obj. -131.845 iterations 36
Cbc0038I Pass  48: suminf.    3.25289 (15) obj. -131.845 iterations 72
Cbc0038I Pass  49: suminf.    3.22243 (18) obj. -131.845 iterations 41
Cbc0038I Pass  50: suminf.    3.65525 (16) obj. -131.845 iterations 29
Cbc0038I Pass  51: suminf.    3.16256 (13) obj. -131.845 iterations 32
Cbc0038I Pass  52: suminf.    3.75704 (13) obj. -131.845 iterations 48
Cbc0038I Pass  53: suminf.    3.31042 (13) obj. -131.845 iterations 33
Cbc0038I Pass  54: suminf.    6.17734 (32) obj. -131.845 iterations 67
Cbc0038I Pass  55: suminf.    3.81053 (18) obj. -131.845 iterations 79
Cbc0038I Pass  56: suminf.    5.57745 (18) obj. -131.845 iterations 46
Cbc0038I Pass  57: suminf.    4.12039 (24) obj. -131.845 iterations 77
Cbc0038I Pass  58: suminf.    4.12039 (24) obj. -131.845 iterations 0
Cbc0038I Pass  59: suminf.    3.14217 (16) obj. -131.845 iterations 46
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 124 integers at bound fixed and 0 continuous
Cbc0038I Full problem 503 rows 260 columns, reduced to 258 rows 136 columns - 8 fixed gives 210, 128 - ok now
Cbc0038I Full problem 503 rows 260 columns, reduced to 98 rows 60 columns
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I After 0.20 seconds - Feasibility pump exiting with objective of -116.709 - took 0.19 seconds
Cbc0012I Integer solution of -116.70857 found by feasibility pump after 0 iterations and 0 nodes (0.20 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 188 rows 100 columns
Cbc0031I 29 added rows had average density of 186.55172
Cbc0013I At root node, 29 cuts changed objective from -175.937 to -161.0112 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 42184 row cuts average 3.2 elements, 1 column cuts (1 active)  in 0.497 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3114 row cuts average 255.7 elements, 0 column cuts (0 active)  in 0.435 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.097 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 13 row cuts average 4.7 elements, 0 column cuts (0 active)  in 0.471 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 179 row cuts average 252.8 elements, 0 column cuts (0 active)  in 0.193 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -116.70857 best solution, best possible -161.0112 (4.90 seconds)
Cbc0010I After 21 nodes, 12 on tree, -116.70857 best solution, best possible -161.0112 (5.63 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 145 rows 78 columns
Cbc0038I Full problem 503 rows 260 columns, reduced to 146 rows 79 columns
Cbc0010I After 122 nodes, 15 on tree, -116.70857 best solution, best possible -161.0112 (6.33 seconds)
Cbc0038I Full problem 503 rows 260 columns, reduced to 3 rows 6 columns
Cbc0012I Integer solution of -117.31592 found by RINS after 23927 iterations and 200 nodes (6.51 seconds)
Cbc0001I Search completed - best objective -117.31592, took 25823 iterations and 230 nodes (6.61 seconds)
Cbc0032I Strong branching done 1838 times (48718 iterations), fathomed 42 nodes and fixed 99 variables
Cbc0035I Maximum depth 50, 852 variables fixed on reduced cost
Total time (CPU seconds):       6.50   (Wallclock seconds):       6.67

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 392 (-135) rows, 407 (-118) columns and 20592 (-15145) elements
Clp1000I sum of infeasibilities 3.40072e-06 - average 8.6753e-09, 272 fixed columns
Coin0506I Presolve 123 (-269) rows, 135 (-272) columns and 497 (-20095) elements
Clp0006I 0  Obj -37.786921 Dual inf 6634.1225 (134)
Clp0029I End of values pass after 95 iterations
Clp0014I Perturbing problem by 0.001% of 0.16382524 - largest nonzero change 2.9975962e-05 ( 0.0027250874%) - largest zero change 2.9464328e-05
Clp0000I Optimal - objective value -33.037957
Clp0000I Optimal - objective value -33.037957
Coin0511I After Postsolve, objective -33.037957, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj -33.037957 Dual inf 391.86718 (156)
Clp0014I Perturbing problem by 0.001% of 2.0320225 - largest nonzero change 2.954135e-05 ( 0.0026133635%) - largest zero change 2.982246e-05
Clp0000I Optimal - objective value 215.06105
Clp0000I Optimal - objective value 215.06105
Clp0000I Optimal - objective value 215.06105
Coin0511I After Postsolve, objective 215.06105, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 215.0610501 - 0 iterations time 0.172, Presolve 0.00, Idiot 0.17

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 392 rows, 407 columns (407 integer (407 of which binary)) and 20592 elements
Coin3009W Conflict graph built in 0.002 seconds, density: 6.065%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 140 integers unsatisfied sum - 6.49764
Cbc0038I Pass   1: suminf.    3.44084 (102) obj. -177.072 iterations 97
Cbc0038I Pass   2: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass   3: suminf.    2.69284 (83) obj. -138.749 iterations 19
Cbc0038I Pass   4: suminf.    1.90726 (61) obj. -105.964 iterations 22
Cbc0038I Pass   5: suminf.    1.36348 (45) obj. -81.8141 iterations 16
Cbc0038I Pass   6: suminf.    0.58443 (21) obj. -46.0165 iterations 24
Cbc0038I Pass   7: suminf.    0.05525 (3) obj. -22.7256 iterations 18
Cbc0038I Solution found of -16.8259
Cbc0038I Rounding solution of -30.1936 is better than previous of -16.8259

Cbc0038I Before mini branch and bound, 265 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 39 rows 41 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I Round again with cutoff of -48.6745
Cbc0038I Pass   8: suminf.    3.44084 (102) obj. -177.072 iterations 0
Cbc0038I Pass   9: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass  10: suminf.    2.91552 (89) obj. -146.452 iterations 13
Cbc0038I Pass  11: suminf.    2.47459 (77) obj. -128.148 iterations 12
Cbc0038I Pass  12: suminf.    1.66614 (54) obj. -97.2742 iterations 23
Cbc0038I Pass  13: suminf.    0.83888 (29) obj. -57.635 iterations 25
Cbc0038I Pass  14: suminf.    0.74152 (12) obj. -48.6745 iterations 22
Cbc0038I Pass  15: suminf.    0.63904 (12) obj. -51.5926 iterations 3
Cbc0038I Pass  16: suminf.    1.27223 (5) obj. -48.6745 iterations 35
Cbc0038I Pass  17: suminf.    0.80995 (3) obj. -49.8947 iterations 7
Cbc0038I Pass  18: suminf.    0.65251 (3) obj. -48.6745 iterations 4
Cbc0038I Pass  19: suminf.    0.58371 (25) obj. -48.6745 iterations 25
Cbc0038I Pass  20: suminf.    0.93583 (10) obj. -48.6745 iterations 108
Cbc0038I Pass  21: suminf.    0.91721 (9) obj. -48.6745 iterations 2
Cbc0038I Pass  22: suminf.    0.60847 (6) obj. -48.6745 iterations 33
Cbc0038I Pass  23: suminf.    0.30707 (5) obj. -48.6745 iterations 32
Cbc0038I Pass  24: suminf.    0.60847 (6) obj. -48.6745 iterations 37
Cbc0038I Pass  25: suminf.    2.53173 (30) obj. -48.6745 iterations 96
Cbc0038I Pass  26: suminf.    1.67683 (29) obj. -48.6745 iterations 12
Cbc0038I Pass  27: suminf.    1.45259 (28) obj. -48.6745 iterations 2
Cbc0038I Pass  28: suminf.    0.57561 (8) obj. -48.6745 iterations 59
Cbc0038I Pass  29: suminf.    0.40558 (8) obj. -48.6745 iterations 10
Cbc0038I Pass  30: suminf.    0.57407 (8) obj. -48.6745 iterations 20
Cbc0038I Pass  31: suminf.    0.49222 (9) obj. -48.6745 iterations 12
Cbc0038I Pass  32: suminf.    0.57788 (6) obj. -48.6745 iterations 43
Cbc0038I Pass  33: suminf.    0.36323 (6) obj. -48.6745 iterations 40
Cbc0038I Pass  34: suminf.    0.60847 (7) obj. -48.6745 iterations 34
Cbc0038I Pass  35: suminf.    4.04029 (35) obj. -48.6745 iterations 86
Cbc0038I Pass  36: suminf.    2.08660 (30) obj. -48.6745 iterations 16
Cbc0038I Pass  37: suminf.    1.59276 (31) obj. -48.6745 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 240 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 151 rows 161 columns - 33 fixed gives 117, 127 - still too large
Cbc0038I Full problem 392 rows 407 columns, reduced to 46 rows 56 columns
Cbc0038I Mini branch and bound improved solution from -16.8259 to -37.9072 (0.28 seconds)
Cbc0038I Round again with cutoff of -81.9399
Cbc0038I Pass  37: suminf.    3.44084 (102) obj. -177.072 iterations 0
Cbc0038I Pass  38: suminf.    3.44084 (102) obj. -177.072 iterations 1
Cbc0038I Pass  39: suminf.    2.91552 (89) obj. -146.452 iterations 13
Cbc0038I Pass  40: suminf.    1.94204 (62) obj. -106.93 iterations 27
Cbc0038I Pass  41: suminf.    1.76154 (36) obj. -81.9399 iterations 35
Cbc0038I Pass  42: suminf.    1.52576 (35) obj. -81.9399 iterations 54
Cbc0038I Pass  43: suminf.    1.65111 (40) obj. -81.9399 iterations 54
Cbc0038I Pass  44: suminf.    1.60286 (39) obj. -81.9399 iterations 10
Cbc0038I Pass  45: suminf.    1.24132 (28) obj. -81.9399 iterations 72
Cbc0038I Pass  46: suminf.    1.10426 (28) obj. -81.9399 iterations 35
Cbc0038I Pass  47: suminf.    1.30581 (28) obj. -81.9399 iterations 44
Cbc0038I Pass  48: suminf.    1.29351 (28) obj. -81.9399 iterations 12
Cbc0038I Pass  49: suminf.    1.12348 (21) obj. -81.9399 iterations 44
Cbc0038I Pass  50: suminf.    1.12699 (21) obj. -81.9399 iterations 15
Cbc0038I Pass  51: suminf.    1.23695 (18) obj. -81.9399 iterations 39
Cbc0038I Pass  52: suminf.    1.23331 (19) obj. -81.9399 iterations 20
Cbc0038I Pass  53: suminf.    1.22177 (19) obj. -81.9399 iterations 19
Cbc0038I Pass  54: suminf.    1.22177 (19) obj. -81.9399 iterations 11
Cbc0038I Pass  55: suminf.    1.23695 (18) obj. -81.9399 iterations 42
Cbc0038I Pass  56: suminf.    2.38894 (38) obj. -81.9399 iterations 67
Cbc0038I Pass  57: suminf.    1.56387 (34) obj. -81.9399 iterations 20
Cbc0038I Pass  58: suminf.    1.76852 (31) obj. -81.9399 iterations 42
Cbc0038I Pass  59: suminf.    1.40650 (30) obj. -81.9399 iterations 23
Cbc0038I Pass  60: suminf.    1.67505 (22) obj. -81.9399 iterations 61
Cbc0038I Pass  61: suminf.    1.37800 (23) obj. -81.9399 iterations 16
Cbc0038I Pass  62: suminf.    1.31866 (19) obj. -81.9399 iterations 38
Cbc0038I Pass  63: suminf.    1.31509 (20) obj. -81.9399 iterations 7
Cbc0038I Pass  64: suminf.    1.32029 (19) obj. -81.9399 iterations 24
Cbc0038I Pass  65: suminf.    1.31668 (20) obj. -81.9399 iterations 8
Cbc0038I Pass  66: suminf.    1.31866 (19) obj. -81.9399 iterations 49
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 248 integers at bound fixed and 0 continuous
Cbc0038I Full problem 392 rows 407 columns, reduced to 43 rows 55 columns
Cbc0038I Mini branch and bound did not improve solution (0.37 seconds)
Cbc0038I After 0.37 seconds - Feasibility pump exiting with objective of -37.9072 - took 0.26 seconds
Cbc0012I Integer solution of -37.90717 found by feasibility pump after 0 iterations and 0 nodes (0.37 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 44 rows 48 columns
Cbc0031I 174 added rows had average density of 79.517241
Cbc0013I At root node, 174 cuts changed objective from -215.00171 to -143.7426 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 67344 row cuts average 2.1 elements, 0 column cuts (0 active)  in 0.691 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 3440 row cuts average 381.0 elements, 0 column cuts (0 active)  in 1.770 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 923 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.141 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 7202 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.450 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.276 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2198 row cuts average 20.9 elements, 0 column cuts (0 active)  in 1.339 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 432 row cuts average 205.4 elements, 0 column cuts (0 active)  in 0.336 seconds - new frequency is -100
Cbc0014I Cut generator 8 (ZeroHalf) - 161 row cuts average 48.1 elements, 0 column cuts (0 active)  in 0.953 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -37.90717 best solution, best possible -143.7426 (13.99 seconds)
Cbc0012I Integer solution of -110.95276 found by rounding after 20029 iterations and 1 nodes (14.05 seconds)
Cbc0010I After 8 nodes, 1 on tree, -110.95276 best solution, best possible -143.13301 (15.30 seconds)
Cbc0010I After 10 nodes, 3 on tree, -110.95276 best solution, best possible -143.13301 (16.47 seconds)
Cbc0010I After 20 nodes, 7 on tree, -110.95276 best solution, best possible -143.13301 (17.20 seconds)
Cbc0012I Integer solution of -113.85562 found by rounding after 23227 iterations and 34 nodes (17.81 seconds)
Cbc0010I After 39 nodes, 17 on tree, -113.85562 best solution, best possible -143.13301 (17.91 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 3 rows 7 columns
Cbc0016I Integer solution of -115.79656 found by strong branching after 23649 iterations and 44 nodes (18.04 seconds)
Cbc0012I Integer solution of -117.31592 found by rounding after 24185 iterations and 62 nodes (18.34 seconds)
Cbc0010I After 92 nodes, 7 on tree, -117.31592 best solution, best possible -143.13301 (18.61 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 77 rows 89 columns
Cbc0010I After 100 nodes, 3 on tree, -117.31592 best solution, best possible -143.13301 (19.50 seconds)
Cbc0010I After 101 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (21.12 seconds)
Cbc0010I After 103 nodes, 6 on tree, -117.31592 best solution, best possible -143.13301 (21.85 seconds)
Cbc0010I After 105 nodes, 7 on tree, -117.31592 best solution, best possible -143.13301 (22.60 seconds)
Cbc0010I After 108 nodes, 9 on tree, -117.31592 best solution, best possible -143.13301 (23.39 seconds)
Cbc0010I After 110 nodes, 8 on tree, -117.31592 best solution, best possible -143.13301 (24.94 seconds)
Cbc0010I After 147 nodes, 17 on tree, -117.31592 best solution, best possible -143.13301 (25.64 seconds)
Cbc0010I After 172 nodes, 16 on tree, -117.31592 best solution, best possible -143.13301 (26.52 seconds)
Cbc0010I After 180 nodes, 18 on tree, -117.31592 best solution, best possible -143.13301 (27.62 seconds)
Cbc0010I After 203 nodes, 18 on tree, -117.31592 best solution, best possible -143.13301 (29.58 seconds)
Cbc0010I After 210 nodes, 19 on tree, -117.31592 best solution, best possible -143.13301 (30.29 seconds)
Cbc0010I After 270 nodes, 24 on tree, -117.31592 best solution, best possible -143.13301 (31.00 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 128 rows 141 columns
Cbc0010I After 295 nodes, 22 on tree, -117.31592 best solution, best possible -143.13301 (32.43 seconds)
Cbc0010I After 318 nodes, 23 on tree, -117.31592 best solution, best possible -143.13301 (33.24 seconds)
Cbc0010I After 337 nodes, 26 on tree, -117.31592 best solution, best possible -143.13301 (33.94 seconds)
Cbc0010I After 375 nodes, 24 on tree, -117.31592 best solution, best possible -143.13301 (34.67 seconds)
Cbc0010I After 399 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (35.39 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 195 rows 211 columns - 11 fixed gives 184, 200 - ok now
Cbc0038I Full problem 392 rows 407 columns, reduced to 184 rows 200 columns
Cbc0010I After 400 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (37.69 seconds)
Cbc0010I After 429 nodes, 33 on tree, -117.31592 best solution, best possible -143.13301 (38.46 seconds)
Cbc0010I After 459 nodes, 34 on tree, -117.31592 best solution, best possible -143.13301 (39.17 seconds)
Cbc0010I After 499 nodes, 36 on tree, -117.31592 best solution, best possible -143.13301 (39.88 seconds)
Cbc0010I After 553 nodes, 35 on tree, -117.31592 best solution, best possible -143.13301 (40.58 seconds)
Cbc0010I After 591 nodes, 37 on tree, -117.31592 best solution, best possible -143.13301 (41.31 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 122 rows 138 columns
Cbc0010I After 601 nodes, 37 on tree, -117.31592 best solution, best possible -143.13301 (42.01 seconds)
Cbc0010I After 637 nodes, 36 on tree, -117.31592 best solution, best possible -143.13301 (42.74 seconds)
Cbc0010I After 660 nodes, 39 on tree, -117.31592 best solution, best possible -143.13301 (43.45 seconds)
Cbc0010I After 695 nodes, 41 on tree, -117.31592 best solution, best possible -143.13301 (44.19 seconds)
Cbc0010I After 745 nodes, 37 on tree, -117.31592 best solution, best possible -143.13301 (44.92 seconds)
Cbc0010I After 794 nodes, 35 on tree, -117.31592 best solution, best possible -143.13301 (45.64 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 194 rows 208 columns - 3 fixed gives 191, 205 - ok now
Cbc0038I Full problem 392 rows 407 columns, reduced to 191 rows 205 columns
Cbc0010I After 800 nodes, 36 on tree, -117.31592 best solution, best possible -143.13301 (47.39 seconds)
Cbc0010I After 841 nodes, 32 on tree, -117.31592 best solution, best possible -143.13301 (48.11 seconds)
Cbc0010I After 883 nodes, 33 on tree, -117.31592 best solution, best possible -143.13301 (48.81 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 188 rows 204 columns
Cbc0010I After 900 nodes, 31 on tree, -117.31592 best solution, best possible -143.13301 (50.60 seconds)
Cbc0010I After 943 nodes, 27 on tree, -117.31592 best solution, best possible -143.13301 (51.30 seconds)
Cbc0010I After 991 nodes, 25 on tree, -117.31592 best solution, best possible -143.13301 (52.02 seconds)
Cbc0010I After 1047 nodes, 13 on tree, -117.31592 best solution, best possible -143.13301 (52.73 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 177 rows 190 columns
Cbc0010I After 1100 nodes, 10 on tree, -117.31592 best solution, best possible -143.13301 (54.18 seconds)
Cbc0010I After 1110 nodes, 3 on tree, -117.31592 best solution, best possible -143.13301 (55.43 seconds)
Cbc0010I After 1114 nodes, 7 on tree, -117.31592 best solution, best possible -143.13301 (56.20 seconds)
Cbc0010I After 1115 nodes, 8 on tree, -117.31592 best solution, best possible -143.13301 (57.06 seconds)
Cbc0010I After 1135 nodes, 16 on tree, -117.31592 best solution, best possible -143.13301 (57.76 seconds)
Cbc0010I After 1165 nodes, 10 on tree, -117.31592 best solution, best possible -143.13301 (58.46 seconds)
Cbc0010I After 1195 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (59.46 seconds)
Cbc0010I After 1199 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (60.28 seconds)
Cbc0038I Full problem 392 rows 407 columns, reduced to 188 rows 199 columns
Cbc0010I After 1200 nodes, 5 on tree, -117.31592 best solution, best possible -143.13301 (62.59 seconds)
Cbc0010I After 1211 nodes, 15 on tree, -117.31592 best solution, best possible -143.13301 (63.30 seconds)
Cbc0010I After 1225 nodes, 4 on tree, -117.31592 best solution, best possible -143.13301 (64.03 seconds)
Cbc0001I Search completed - best objective -117.31592, took 125298 iterations and 1238 nodes (64.74 seconds)
Cbc0032I Strong branching done 5130 times (119157 iterations), fathomed 42 nodes and fixed 65 variables
Cbc0035I Maximum depth 34, 7144 variables fixed on reduced cost
Total time (CPU seconds):       63.15   (Wallclock seconds):       64.85

