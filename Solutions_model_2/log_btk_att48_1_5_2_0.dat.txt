Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 78 (-21) rows, 43 (-7) columns and 234 (-51) elements
Clp1000I sum of infeasibilities 0.00012569 - average 1.61141e-06, 10 fixed columns
Coin0506I Presolve 51 (-27) rows, 30 (-13) columns and 155 (-79) elements
Clp0029I End of values pass after 30 iterations
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Coin0511I After Postsolve, objective 2976.2865, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5909114 - largest nonzero change 1.9868071e-05 ( 0.00013245381%) - largest zero change 2.5816127e-05
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Coin0511I After Postsolve, objective 2976.2865, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2976.286464 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 78 rows, 43 columns (42 integer (42 of which binary)) and 234 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.032%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 25 integers unsatisfied sum - 9.92992
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -922.46 iterations 33
Cbc0038I Solution found of -922.46
Cbc0038I Relaxing continuous gives -922.46
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 43 columns, reduced to 43 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -922.46 to -1414.98 (0.02 seconds)
Cbc0038I Round again with cutoff of -1571.12
Cbc0038I Pass   2: suminf.    1.50302 (9) obj. -1571.12 iterations 12
Cbc0038I Pass   3: suminf.    2.72021 (10) obj. -1571.12 iterations 18
Cbc0038I Pass   4: suminf.    2.69685 (9) obj. -1571.12 iterations 1
Cbc0038I Pass   5: suminf.    1.00000 (5) obj. -1571.12 iterations 10
Cbc0038I Pass   6: suminf.    0.77812 (5) obj. -1571.12 iterations 3
Cbc0038I Pass   7: suminf.    0.77812 (5) obj. -1571.12 iterations 0
Cbc0038I Pass   8: suminf.    1.72309 (5) obj. -1571.12 iterations 6
Cbc0038I Pass   9: suminf.    0.75330 (4) obj. -1571.12 iterations 3
Cbc0038I Pass  10: suminf.    1.64900 (5) obj. -1571.12 iterations 5
Cbc0038I Pass  11: suminf.    2.40047 (11) obj. -1571.12 iterations 10
Cbc0038I Pass  12: suminf.    2.23326 (9) obj. -1571.12 iterations 3
Cbc0038I Pass  13: suminf.    3.77948 (10) obj. -1571.12 iterations 9
Cbc0038I Pass  14: suminf.    2.69209 (8) obj. -1571.12 iterations 3
Cbc0038I Pass  15: suminf.    1.15217 (6) obj. -1571.12 iterations 5
Cbc0038I Pass  16: suminf.    1.93228 (6) obj. -1571.12 iterations 5
Cbc0038I Pass  17: suminf.    1.19457 (7) obj. -1571.12 iterations 2
Cbc0038I Pass  18: suminf.    2.49184 (7) obj. -1571.12 iterations 6
Cbc0038I Pass  19: suminf.    1.34816 (11) obj. -1571.12 iterations 16
Cbc0038I Pass  20: suminf.    1.14521 (8) obj. -1571.12 iterations 4
Cbc0038I Pass  21: suminf.    2.18134 (7) obj. -1571.12 iterations 7
Cbc0038I Pass  22: suminf.    0.84715 (4) obj. -1571.12 iterations 5
Cbc0038I Pass  23: suminf.    0.72039 (5) obj. -1571.12 iterations 4
Cbc0038I Pass  24: suminf.    0.69462 (4) obj. -1571.12 iterations 1
Cbc0038I Pass  25: suminf.    1.24511 (6) obj. -1571.12 iterations 3
Cbc0038I Pass  26: suminf.    2.50297 (9) obj. -1571.12 iterations 10
Cbc0038I Pass  27: suminf.    2.12243 (9) obj. -1571.12 iterations 3
Cbc0038I Pass  28: suminf.    3.43916 (9) obj. -1571.12 iterations 10
Cbc0038I Pass  29: suminf.    2.57674 (7) obj. -1571.12 iterations 3
Cbc0038I Pass  30: suminf.    2.50762 (6) obj. -1571.12 iterations 1
Cbc0038I Pass  31: suminf.    1.68061 (6) obj. -1571.12 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 43 columns, reduced to 52 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -1414.98 - took 0.05 seconds
Cbc0012I Integer solution of -1414.985 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 78 rows 43 columns, reduced to 43 rows 26 columns
Cbc0031I 12 added rows had average density of 38.166667
Cbc0013I At root node, 12 cuts changed objective from -2976.2865 to -1966.0517 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3789 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1014 row cuts average 42.5 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 9 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 111 row cuts average 38.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1414.985, took 4151 iterations and 8 nodes (0.37 seconds)
Cbc0032I Strong branching done 186 times (3089 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 3, 23 variables fixed on reduced cost
Total time (CPU seconds):       0.38   (Wallclock seconds):       0.37

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 83 (-15) rows, 89 (-7) columns and 1176 (-237) elements
Clp1000I sum of infeasibilities 4.45212e-06 - average 5.364e-08, 86 fixed columns
Coin0506I Presolve 1 (-82) rows, 3 (-86) columns and 3 (-1173) elements
Clp0029I End of values pass after 3 iterations
Clp0000I Optimal - objective value 1114.969
Clp0000I Optimal - objective value 1114.969
Coin0511I After Postsolve, objective 1114.969, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.6341646 - largest nonzero change 2.6331912e-05 ( 0.0026331912%) - largest zero change 2.843899e-05
Clp0000I Optimal - objective value 4090.8946
Clp0000I Optimal - objective value 4090.8946
Clp0000I Optimal - objective value 4090.8946
Coin0511I After Postsolve, objective 4090.8946, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4090.89455 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 83 rows, 89 columns (89 integer (89 of which binary)) and 1180 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.917%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 14.5967
Cbc0038I Pass   1: suminf.    1.86898 (17) obj. -1017.42 iterations 18
Cbc0038I Pass   2: suminf.    1.86898 (17) obj. -1017.42 iterations 1
Cbc0038I Pass   3: suminf.    0.25589 (5) obj. 341.355 iterations 12
Cbc0038I Solution found of 588.48
Cbc0038I Rounding solution of -384.07 is better than previous of 588.48

Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 25 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -384.07 to -1204.02 (0.02 seconds)
Cbc0038I Round again with cutoff of -1437.92
Cbc0038I Pass   4: suminf.    3.36779 (35) obj. -1437.92 iterations 5
Cbc0038I Pass   5: suminf.    3.36779 (35) obj. -1437.92 iterations 1
Cbc0038I Pass   6: suminf.    2.22161 (27) obj. -1437.92 iterations 12
Cbc0038I Pass   7: suminf.    2.22161 (27) obj. -1437.92 iterations 1
Cbc0038I Pass   8: suminf.    2.72251 (22) obj. -1437.92 iterations 13
Cbc0038I Pass   9: suminf.    2.72251 (22) obj. -1437.92 iterations 1
Cbc0038I Pass  10: suminf.    2.57660 (13) obj. -1437.92 iterations 12
Cbc0038I Pass  11: suminf.    2.57660 (13) obj. -1437.92 iterations 0
Cbc0038I Pass  12: suminf.    0.88517 (5) obj. -1437.92 iterations 13
Cbc0038I Pass  13: suminf.    0.88517 (5) obj. -1437.92 iterations 0
Cbc0038I Pass  14: suminf.    0.30142 (1) obj. -1437.92 iterations 5
Cbc0038I Pass  15: suminf.    0.30142 (1) obj. -1437.92 iterations 1
Cbc0038I Pass  16: suminf.    0.31707 (1) obj. -1733.97 iterations 1
Cbc0038I Pass  17: suminf.    3.42315 (10) obj. -1437.92 iterations 24
Cbc0038I Pass  18: suminf.    2.93823 (9) obj. -1437.92 iterations 8
Cbc0038I Pass  19: suminf.    2.93823 (9) obj. -1437.92 iterations 1
Cbc0038I Pass  20: suminf.    0.64539 (2) obj. -1437.92 iterations 16
Cbc0038I Pass  21: suminf.    0.64539 (2) obj. -1437.92 iterations 0
Cbc0038I Pass  22: suminf.    0.72031 (2) obj. -1437.92 iterations 10
Cbc0038I Pass  23: suminf.    0.56707 (2) obj. -1556.83 iterations 4
Cbc0038I Pass  24: suminf.    3.80203 (18) obj. -1437.92 iterations 23
Cbc0038I Pass  25: suminf.    2.78414 (17) obj. -1437.92 iterations 4
Cbc0038I Pass  26: suminf.    2.77344 (15) obj. -1437.92 iterations 3
Cbc0038I Pass  27: suminf.    1.35592 (7) obj. -1437.92 iterations 14
Cbc0038I Pass  28: suminf.    0.81992 (4) obj. -1437.92 iterations 3
Cbc0038I Pass  29: suminf.    0.76614 (5) obj. -1437.92 iterations 3
Cbc0038I Pass  30: suminf.    0.75598 (5) obj. -1437.92 iterations 1
Cbc0038I Pass  31: suminf.    0.38390 (1) obj. -1437.92 iterations 7
Cbc0038I Pass  32: suminf.    0.38390 (1) obj. -1437.92 iterations 0
Cbc0038I Pass  33: suminf.    0.31707 (1) obj. -1669.97 iterations 5
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 37 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -1204.02 to -1220.97 (0.03 seconds)
Cbc0038I Round again with cutoff of -1858.95
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    5.92125 (36) obj. -1858.95 iterations 1
Cbc0038I Pass  34: suminf.    5.92125 (36) obj. -1858.95 iterations 0
Cbc0038I Pass  35: suminf.    3.73018 (28) obj. -1858.95 iterations 16
Cbc0038I Pass  36: suminf.    3.73018 (28) obj. -1858.95 iterations 1
Cbc0038I Pass  37: suminf.    0.76027 (2) obj. -1858.95 iterations 36
Cbc0038I Pass  38: suminf.    0.76027 (2) obj. -1858.95 iterations 3
Cbc0038I Pass  39: suminf.    0.67857 (2) obj. -1858.95 iterations 8
Cbc0038I Pass  40: suminf.    0.56707 (2) obj. -1945.47 iterations 5
Cbc0038I Pass  41: suminf.    0.76027 (2) obj. -1858.95 iterations 3
Cbc0038I Pass  42: suminf.    4.45980 (12) obj. -1858.95 iterations 28
Cbc0038I Pass  43: suminf.    3.13704 (9) obj. -1858.95 iterations 18
Cbc0038I Pass  44: suminf.    3.13704 (9) obj. -1858.95 iterations 0
Cbc0038I Pass  45: suminf.    1.68976 (5) obj. -1858.95 iterations 5
Cbc0038I Pass  46: suminf.    1.68976 (5) obj. -1858.95 iterations 0
Cbc0038I Pass  47: suminf.    2.00040 (5) obj. -1858.95 iterations 4
Cbc0038I Pass  48: suminf.    2.00040 (5) obj. -1858.95 iterations 0
Cbc0038I Pass  49: suminf.    4.38907 (16) obj. -1858.95 iterations 23
Cbc0038I Pass  50: suminf.    4.37243 (15) obj. -1858.95 iterations 3
Cbc0038I Pass  51: suminf.    1.36103 (5) obj. -1858.95 iterations 17
Cbc0038I Pass  52: suminf.    1.13286 (3) obj. -1906.1 iterations 6
Cbc0038I Pass  53: suminf.    1.30062 (3) obj. -1858.95 iterations 7
Cbc0038I Pass  54: suminf.    1.30062 (3) obj. -1858.95 iterations 0
Cbc0038I Pass  55: suminf.    0.96564 (3) obj. -1858.95 iterations 2
Cbc0038I Pass  56: suminf.    0.96564 (3) obj. -1858.95 iterations 0
Cbc0038I Pass  57: suminf.    1.30062 (3) obj. -1858.95 iterations 11
Cbc0038I Pass  58: suminf.    5.36510 (16) obj. -1858.95 iterations 20
Cbc0038I Pass  59: suminf.    4.00103 (11) obj. -1858.95 iterations 7
Cbc0038I Pass  60: suminf.    2.60677 (7) obj. -2005.5 iterations 6
Cbc0038I Pass  61: suminf.    2.10677 (6) obj. -1994 iterations 1
Cbc0038I Pass  62: suminf.    1.15132 (3) obj. -1858.95 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 34 rows 43 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -1220.97 - took 0.03 seconds
Cbc0012I Integer solution of -1220.969 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 83 rows 89 columns, reduced to 2 rows 3 columns
Cbc0012I Integer solution of -1414.985 found by DiveCoefficient after 166 iterations and 0 nodes (0.16 seconds)
Cbc0031I 29 added rows had average density of 18.827586
Cbc0013I At root node, 29 cuts changed objective from -3543.0619 to -1414.985 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 661 row cuts average 6.4 elements, 22 column cuts (22 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 78 row cuts average 36.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 14.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 7 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 44 row cuts average 6.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 116 row cuts average 33.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 23 row cuts average 9.7 elements, 0 column cuts (0 active)  in 0.032 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1414.985, took 166 iterations and 0 nodes (0.16 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.11   (Wallclock seconds):       0.17

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 78 (-21) rows, 43 (-7) columns and 234 (-51) elements
Clp1000I sum of infeasibilities 0.00012569 - average 1.61141e-06, 10 fixed columns
Coin0506I Presolve 51 (-27) rows, 30 (-13) columns and 155 (-79) elements
Clp0029I End of values pass after 30 iterations
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Coin0511I After Postsolve, objective 2976.2865, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.5909114 - largest nonzero change 1.9868071e-05 ( 0.00013245381%) - largest zero change 2.5816127e-05
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Clp0000I Optimal - objective value 2976.2865
Coin0511I After Postsolve, objective 2976.2865, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2976.286464 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 78 rows, 43 columns (42 integer (42 of which binary)) and 234 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 2.032%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 25 integers unsatisfied sum - 9.92992
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -922.46 iterations 33
Cbc0038I Solution found of -922.46
Cbc0038I Relaxing continuous gives -922.46
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 43 columns, reduced to 43 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -922.46 to -1414.98 (0.03 seconds)
Cbc0038I Round again with cutoff of -1571.12
Cbc0038I Pass   2: suminf.    1.50302 (9) obj. -1571.12 iterations 12
Cbc0038I Pass   3: suminf.    2.72021 (10) obj. -1571.12 iterations 18
Cbc0038I Pass   4: suminf.    2.69685 (9) obj. -1571.12 iterations 1
Cbc0038I Pass   5: suminf.    1.00000 (5) obj. -1571.12 iterations 10
Cbc0038I Pass   6: suminf.    0.77812 (5) obj. -1571.12 iterations 3
Cbc0038I Pass   7: suminf.    0.77812 (5) obj. -1571.12 iterations 0
Cbc0038I Pass   8: suminf.    1.72309 (5) obj. -1571.12 iterations 6
Cbc0038I Pass   9: suminf.    0.75330 (4) obj. -1571.12 iterations 3
Cbc0038I Pass  10: suminf.    1.64900 (5) obj. -1571.12 iterations 5
Cbc0038I Pass  11: suminf.    2.40047 (11) obj. -1571.12 iterations 10
Cbc0038I Pass  12: suminf.    2.23326 (9) obj. -1571.12 iterations 3
Cbc0038I Pass  13: suminf.    3.77948 (10) obj. -1571.12 iterations 9
Cbc0038I Pass  14: suminf.    2.69209 (8) obj. -1571.12 iterations 3
Cbc0038I Pass  15: suminf.    1.15217 (6) obj. -1571.12 iterations 5
Cbc0038I Pass  16: suminf.    1.93228 (6) obj. -1571.12 iterations 5
Cbc0038I Pass  17: suminf.    1.19457 (7) obj. -1571.12 iterations 2
Cbc0038I Pass  18: suminf.    2.49184 (7) obj. -1571.12 iterations 6
Cbc0038I Pass  19: suminf.    1.34816 (11) obj. -1571.12 iterations 16
Cbc0038I Pass  20: suminf.    1.14521 (8) obj. -1571.12 iterations 4
Cbc0038I Pass  21: suminf.    2.18134 (7) obj. -1571.12 iterations 7
Cbc0038I Pass  22: suminf.    0.84715 (4) obj. -1571.12 iterations 5
Cbc0038I Pass  23: suminf.    0.72039 (5) obj. -1571.12 iterations 4
Cbc0038I Pass  24: suminf.    0.69462 (4) obj. -1571.12 iterations 1
Cbc0038I Pass  25: suminf.    1.24511 (6) obj. -1571.12 iterations 3
Cbc0038I Pass  26: suminf.    2.50297 (9) obj. -1571.12 iterations 10
Cbc0038I Pass  27: suminf.    2.12243 (9) obj. -1571.12 iterations 3
Cbc0038I Pass  28: suminf.    3.43916 (9) obj. -1571.12 iterations 10
Cbc0038I Pass  29: suminf.    2.57674 (7) obj. -1571.12 iterations 3
Cbc0038I Pass  30: suminf.    2.50762 (6) obj. -1571.12 iterations 1
Cbc0038I Pass  31: suminf.    1.68061 (6) obj. -1571.12 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 78 rows 43 columns, reduced to 52 rows 31 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -1414.98 - took 0.06 seconds
Cbc0012I Integer solution of -1414.985 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 78 rows 43 columns, reduced to 43 rows 26 columns
Cbc0031I 12 added rows had average density of 38.166667
Cbc0013I At root node, 12 cuts changed objective from -2976.2865 to -1966.0517 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 3789 row cuts average 3.1 elements, 1 column cuts (1 active)  in 0.032 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1014 row cuts average 42.5 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.035 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 9 row cuts average 4.3 elements, 0 column cuts (0 active)  in 0.021 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 111 row cuts average 38.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1414.985, took 4151 iterations and 8 nodes (0.39 seconds)
Cbc0032I Strong branching done 186 times (3089 iterations), fathomed 1 nodes and fixed 4 variables
Cbc0035I Maximum depth 3, 23 variables fixed on reduced cost
Total time (CPU seconds):       0.40   (Wallclock seconds):       0.39

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 83 (-16) rows, 89 (-8) columns and 1176 (-238) elements
Clp1000I sum of infeasibilities 4.45212e-06 - average 5.364e-08, 86 fixed columns
Coin0506I Presolve 1 (-82) rows, 3 (-86) columns and 3 (-1173) elements
Clp0029I End of values pass after 3 iterations
Clp0000I Optimal - objective value 1114.969
Clp0000I Optimal - objective value 1114.969
Coin0511I After Postsolve, objective 1114.969, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.6341646 - largest nonzero change 2.6331912e-05 ( 0.0026331912%) - largest zero change 2.843899e-05
Clp0000I Optimal - objective value 4090.8946
Clp0000I Optimal - objective value 4090.8946
Clp0000I Optimal - objective value 4090.8946
Coin0511I After Postsolve, objective 4090.8946, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 4090.89455 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 83 rows, 89 columns (89 integer (89 of which binary)) and 1180 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.917%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 14.5967
Cbc0038I Pass   1: suminf.    1.86898 (17) obj. -1017.42 iterations 18
Cbc0038I Pass   2: suminf.    1.86898 (17) obj. -1017.42 iterations 1
Cbc0038I Pass   3: suminf.    0.25589 (5) obj. 341.355 iterations 12
Cbc0038I Solution found of 588.48
Cbc0038I Rounding solution of -384.07 is better than previous of 588.48

Cbc0038I Before mini branch and bound, 41 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 25 rows 30 columns
Cbc0038I Mini branch and bound improved solution from -384.07 to -1204.02 (0.02 seconds)
Cbc0038I Round again with cutoff of -1437.92
Cbc0038I Pass   4: suminf.    3.36779 (35) obj. -1437.92 iterations 5
Cbc0038I Pass   5: suminf.    3.36779 (35) obj. -1437.92 iterations 1
Cbc0038I Pass   6: suminf.    2.22161 (27) obj. -1437.92 iterations 12
Cbc0038I Pass   7: suminf.    2.22161 (27) obj. -1437.92 iterations 1
Cbc0038I Pass   8: suminf.    2.72251 (22) obj. -1437.92 iterations 13
Cbc0038I Pass   9: suminf.    2.72251 (22) obj. -1437.92 iterations 1
Cbc0038I Pass  10: suminf.    2.57660 (13) obj. -1437.92 iterations 12
Cbc0038I Pass  11: suminf.    2.57660 (13) obj. -1437.92 iterations 0
Cbc0038I Pass  12: suminf.    0.88517 (5) obj. -1437.92 iterations 13
Cbc0038I Pass  13: suminf.    0.88517 (5) obj. -1437.92 iterations 0
Cbc0038I Pass  14: suminf.    0.30142 (1) obj. -1437.92 iterations 5
Cbc0038I Pass  15: suminf.    0.30142 (1) obj. -1437.92 iterations 1
Cbc0038I Pass  16: suminf.    0.31707 (1) obj. -1733.97 iterations 1
Cbc0038I Pass  17: suminf.    3.42315 (10) obj. -1437.92 iterations 24
Cbc0038I Pass  18: suminf.    2.93823 (9) obj. -1437.92 iterations 8
Cbc0038I Pass  19: suminf.    2.93823 (9) obj. -1437.92 iterations 1
Cbc0038I Pass  20: suminf.    0.64539 (2) obj. -1437.92 iterations 16
Cbc0038I Pass  21: suminf.    0.64539 (2) obj. -1437.92 iterations 0
Cbc0038I Pass  22: suminf.    0.72031 (2) obj. -1437.92 iterations 10
Cbc0038I Pass  23: suminf.    0.56707 (2) obj. -1556.83 iterations 4
Cbc0038I Pass  24: suminf.    3.80203 (18) obj. -1437.92 iterations 23
Cbc0038I Pass  25: suminf.    2.78414 (17) obj. -1437.92 iterations 4
Cbc0038I Pass  26: suminf.    2.77344 (15) obj. -1437.92 iterations 3
Cbc0038I Pass  27: suminf.    1.35592 (7) obj. -1437.92 iterations 14
Cbc0038I Pass  28: suminf.    0.81992 (4) obj. -1437.92 iterations 3
Cbc0038I Pass  29: suminf.    0.76614 (5) obj. -1437.92 iterations 3
Cbc0038I Pass  30: suminf.    0.75598 (5) obj. -1437.92 iterations 1
Cbc0038I Pass  31: suminf.    0.38390 (1) obj. -1437.92 iterations 7
Cbc0038I Pass  32: suminf.    0.38390 (1) obj. -1437.92 iterations 0
Cbc0038I Pass  33: suminf.    0.31707 (1) obj. -1669.97 iterations 5
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 37 rows 43 columns
Cbc0038I Mini branch and bound improved solution from -1204.02 to -1220.97 (0.03 seconds)
Cbc0038I Round again with cutoff of -1858.95
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    5.92125 (36) obj. -1858.95 iterations 1
Cbc0038I Pass  34: suminf.    5.92125 (36) obj. -1858.95 iterations 0
Cbc0038I Pass  35: suminf.    3.73018 (28) obj. -1858.95 iterations 16
Cbc0038I Pass  36: suminf.    3.73018 (28) obj. -1858.95 iterations 1
Cbc0038I Pass  37: suminf.    0.76027 (2) obj. -1858.95 iterations 36
Cbc0038I Pass  38: suminf.    0.76027 (2) obj. -1858.95 iterations 3
Cbc0038I Pass  39: suminf.    0.67857 (2) obj. -1858.95 iterations 8
Cbc0038I Pass  40: suminf.    0.56707 (2) obj. -1945.47 iterations 5
Cbc0038I Pass  41: suminf.    0.76027 (2) obj. -1858.95 iterations 3
Cbc0038I Pass  42: suminf.    4.45980 (12) obj. -1858.95 iterations 28
Cbc0038I Pass  43: suminf.    3.13704 (9) obj. -1858.95 iterations 18
Cbc0038I Pass  44: suminf.    3.13704 (9) obj. -1858.95 iterations 0
Cbc0038I Pass  45: suminf.    1.68976 (5) obj. -1858.95 iterations 5
Cbc0038I Pass  46: suminf.    1.68976 (5) obj. -1858.95 iterations 0
Cbc0038I Pass  47: suminf.    2.00040 (5) obj. -1858.95 iterations 4
Cbc0038I Pass  48: suminf.    2.00040 (5) obj. -1858.95 iterations 0
Cbc0038I Pass  49: suminf.    4.38907 (16) obj. -1858.95 iterations 23
Cbc0038I Pass  50: suminf.    4.37243 (15) obj. -1858.95 iterations 3
Cbc0038I Pass  51: suminf.    1.36103 (5) obj. -1858.95 iterations 17
Cbc0038I Pass  52: suminf.    1.13286 (3) obj. -1906.1 iterations 6
Cbc0038I Pass  53: suminf.    1.30062 (3) obj. -1858.95 iterations 7
Cbc0038I Pass  54: suminf.    1.30062 (3) obj. -1858.95 iterations 0
Cbc0038I Pass  55: suminf.    0.96564 (3) obj. -1858.95 iterations 2
Cbc0038I Pass  56: suminf.    0.96564 (3) obj. -1858.95 iterations 0
Cbc0038I Pass  57: suminf.    1.30062 (3) obj. -1858.95 iterations 11
Cbc0038I Pass  58: suminf.    5.36510 (16) obj. -1858.95 iterations 20
Cbc0038I Pass  59: suminf.    4.00103 (11) obj. -1858.95 iterations 7
Cbc0038I Pass  60: suminf.    2.60677 (7) obj. -2005.5 iterations 6
Cbc0038I Pass  61: suminf.    2.10677 (6) obj. -1994 iterations 1
Cbc0038I Pass  62: suminf.    1.15132 (3) obj. -1858.95 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 28 integers at bound fixed and 0 continuous
Cbc0038I Full problem 83 rows 89 columns, reduced to 34 rows 43 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -1220.97 - took 0.03 seconds
Cbc0012I Integer solution of -1220.969 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 83 rows 89 columns, reduced to 2 rows 3 columns
Cbc0012I Integer solution of -1414.985 found by DiveCoefficient after 166 iterations and 0 nodes (0.17 seconds)
Cbc0031I 29 added rows had average density of 18.827586
Cbc0013I At root node, 29 cuts changed objective from -3543.0619 to -1414.985 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 661 row cuts average 6.4 elements, 22 column cuts (22 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 78 row cuts average 36.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 14.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 7 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 44 row cuts average 6.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 116 row cuts average 33.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 23 row cuts average 9.7 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1414.985, took 166 iterations and 0 nodes (0.17 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.18

