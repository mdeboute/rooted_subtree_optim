Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 122 (-33) rows, 69 (-9) columns and 374 (-79) elements
Clp0000I Optimal - objective value 2073.8663
Coin0511I After Postsolve, objective 2073.8663, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2073.866256 - 16 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 122 rows, 69 columns (68 integer (68 of which binary)) and 379 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.355%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.771084
Cbc0038I Pass   1: suminf.    0.40741 (1) obj. -1625.93 iterations 5
Cbc0038I Solution found of -1158.5
Cbc0038I Relaxing continuous gives -1158.5
Cbc0038I Rounding solution of -1166.55 is better than previous of -1158.5

Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 5 rows 4 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -1257.28
Cbc0038I Pass   2: suminf.    0.40741 (1) obj. -1625.93 iterations 0
Cbc0038I Pass   3: suminf.    0.08610 (1) obj. -1257.28 iterations 3
Cbc0038I Pass   4: suminf.    0.70922 (4) obj. -1257.28 iterations 12
Cbc0038I Pass   5: suminf.    0.28948 (3) obj. -1257.28 iterations 4
Cbc0038I Pass   6: suminf.    2.09349 (5) obj. -1257.28 iterations 4
Cbc0038I Pass   7: suminf.    0.65219 (3) obj. -1257.28 iterations 4
Cbc0038I Pass   8: suminf.    1.28542 (3) obj. -1257.28 iterations 6
Cbc0038I Pass   9: suminf.    0.18910 (2) obj. -1257.28 iterations 3
Cbc0038I Pass  10: suminf.    0.47704 (3) obj. -1257.28 iterations 11
Cbc0038I Pass  11: suminf.    0.47704 (3) obj. -1257.28 iterations 3
Cbc0038I Pass  12: suminf.    1.06989 (3) obj. -1257.28 iterations 7
Cbc0038I Pass  13: suminf.    0.50277 (3) obj. -1257.28 iterations 1
Cbc0038I Pass  14: suminf.    0.31785 (3) obj. -1257.28 iterations 2
Cbc0038I Pass  15: suminf.    0.31785 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  16: suminf.    0.78286 (4) obj. -1257.28 iterations 10
Cbc0038I Pass  17: suminf.    0.29705 (3) obj. -1257.28 iterations 6
Cbc0038I Pass  18: suminf.    0.60384 (3) obj. -1257.28 iterations 3
Cbc0038I Pass  19: suminf.    1.11188 (8) obj. -1257.28 iterations 13
Cbc0038I Pass  20: suminf.    0.48534 (4) obj. -1257.28 iterations 10
Cbc0038I Pass  21: suminf.    0.38491 (4) obj. -1257.28 iterations 4
Cbc0038I Pass  22: suminf.    0.38491 (4) obj. -1257.28 iterations 0
Cbc0038I Pass  23: suminf.    1.03562 (3) obj. -1257.28 iterations 2
Cbc0038I Pass  24: suminf.    1.03562 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  25: suminf.    0.29570 (3) obj. -1257.28 iterations 1
Cbc0038I Pass  26: suminf.    0.29570 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  27: suminf.    1.07832 (6) obj. -1257.28 iterations 6
Cbc0038I Pass  28: suminf.    0.29567 (3) obj. -1257.28 iterations 7
Cbc0038I Pass  29: suminf.    0.71143 (4) obj. -1257.28 iterations 2
Cbc0038I Pass  30: suminf.    0.83156 (7) obj. -1257.28 iterations 11
Cbc0038I Pass  31: suminf.    0.43406 (4) obj. -1257.28 iterations 10
Cbc0038I Rounding solution of -1170.31 is better than previous of -1166.55

Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 43 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -1170.31 to -1188.84 (0.02 seconds)
Cbc0038I Round again with cutoff of -1420.6
Cbc0038I Pass  31: suminf.    0.40741 (1) obj. -1625.93 iterations 0
Cbc0038I Pass  32: suminf.    0.22845 (1) obj. -1420.6 iterations 3
Cbc0038I Pass  33: suminf.    0.91818 (4) obj. -1420.6 iterations 22
Cbc0038I Pass  34: suminf.    0.73537 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  35: suminf.    1.01240 (4) obj. -1420.6 iterations 3
Cbc0038I Pass  36: suminf.    1.49717 (5) obj. -1420.6 iterations 14
Cbc0038I Pass  37: suminf.    1.49717 (5) obj. -1420.6 iterations 0
Cbc0038I Pass  38: suminf.    0.83914 (3) obj. -1420.6 iterations 13
Cbc0038I Pass  39: suminf.    0.48709 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  40: suminf.    0.73558 (3) obj. -1420.6 iterations 2
Cbc0038I Pass  41: suminf.    0.73558 (3) obj. -1420.6 iterations 0
Cbc0038I Pass  42: suminf.    1.43146 (5) obj. -1420.6 iterations 7
Cbc0038I Pass  43: suminf.    0.73420 (3) obj. -1420.6 iterations 5
Cbc0038I Pass  44: suminf.    0.78631 (3) obj. -1420.6 iterations 3
Cbc0038I Pass  45: suminf.    0.78631 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  46: suminf.    0.73420 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  47: suminf.    1.31939 (6) obj. -1420.6 iterations 11
Cbc0038I Pass  48: suminf.    0.72460 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  49: suminf.    1.24536 (4) obj. -1420.6 iterations 2
Cbc0038I Pass  50: suminf.    1.16422 (6) obj. -1420.6 iterations 6
Cbc0038I Pass  51: suminf.    1.98895 (8) obj. -1420.6 iterations 8
Cbc0038I Pass  52: suminf.    1.04482 (4) obj. -1420.6 iterations 8
Cbc0038I Pass  53: suminf.    0.69937 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  54: suminf.    0.46109 (2) obj. -1420.6 iterations 2
Cbc0038I Pass  55: suminf.    1.16225 (3) obj. -1420.6 iterations 4
Cbc0038I Pass  56: suminf.    0.93084 (4) obj. -1420.6 iterations 13
Cbc0038I Pass  57: suminf.    0.93084 (4) obj. -1420.6 iterations 2
Cbc0038I Pass  58: suminf.    0.60110 (5) obj. -1420.6 iterations 5
Cbc0038I Pass  59: suminf.    0.50016 (3) obj. -1420.6 iterations 3
Cbc0038I Pass  60: suminf.    0.94377 (3) obj. -1420.6 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 41 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -1188.84 - took 0.02 seconds
Cbc0012I Integer solution of -1188.8427 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 122 rows 69 columns, reduced to 7 rows 8 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 6 added rows had average density of 11.833333
Cbc0013I At root node, 6 cuts changed objective from -2073.8663 to -1190.3835 in 7 passes
Cbc0014I Cut generator 0 (Probing) - 14 row cuts average 2.4 elements, 21 column cuts (21 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 30 row cuts average 13.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 10 row cuts average 66.5 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1188.8427, took 55 iterations and 0 nodes (0.12 seconds)
Cbc0035I Maximum depth 0, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.12

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 96 (-58) rows, 110 (-42) columns and 1684 (-1619) elements
Clp1000I sum of infeasibilities 1.26437e-05 - average 1.31706e-07, 106 fixed columns
Coin0506I Presolve 4 (-92) rows, 4 (-106) columns and 10 (-1674) elements
Clp0029I End of values pass after 4 iterations
Clp0000I Optimal - objective value 2066.8663
Clp0000I Optimal - objective value 2066.8663
Coin0511I After Postsolve, objective 2066.8663, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.6748219 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 2139.5515
Clp0000I Optimal - objective value 2139.5515
Clp0000I Optimal - objective value 2139.5515
Coin0511I After Postsolve, objective 2139.5515, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2139.55152 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 36 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 96 rows, 110 columns (110 integer (110 of which binary)) and 1693 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.483%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 5.96473
Cbc0038I Pass   1: suminf.    1.03177 (22) obj. -61.1943 iterations 6
Cbc0038I Pass   2: suminf.    1.03177 (22) obj. -61.1943 iterations 0
Cbc0038I Solution found of -31.6665
Cbc0038I Rounding solution of -32.1078 is better than previous of -31.6665

Cbc0038I Before mini branch and bound, 67 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 21 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -32.1078 to -1172 (0.03 seconds)
Cbc0038I Round again with cutoff of -1266.69
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    3.05969 (39) obj. -1266.69 iterations 1
Cbc0038I Pass   4: suminf.    3.05969 (39) obj. -1266.69 iterations 0
Cbc0038I Pass   5: suminf.    1.78450 (26) obj. -1266.69 iterations 13
Cbc0038I Pass   6: suminf.    0.98925 (15) obj. -1266.69 iterations 11
Cbc0038I Pass   7: suminf.    0.40741 (1) obj. -1625.93 iterations 18
Cbc0038I Pass   8: suminf.    0.09430 (1) obj. -1266.69 iterations 2
Cbc0038I Pass   9: suminf.    1.77174 (13) obj. -1266.69 iterations 27
Cbc0038I Pass  10: suminf.    1.77174 (13) obj. -1266.69 iterations 9
Cbc0038I Pass  11: suminf.    0.18431 (2) obj. -1266.69 iterations 13
Cbc0038I Pass  12: suminf.    0.18431 (2) obj. -1266.69 iterations 0
Cbc0038I Pass  13: suminf.    0.25828 (3) obj. -1266.69 iterations 3
Cbc0038I Pass  14: suminf.    0.25828 (3) obj. -1266.69 iterations 1
Cbc0038I Pass  15: suminf.    0.32507 (3) obj. -1266.69 iterations 1
Cbc0038I Pass  16: suminf.    0.32507 (3) obj. -1266.69 iterations 0
Cbc0038I Pass  17: suminf.    2.24324 (17) obj. -1266.69 iterations 32
Cbc0038I Pass  18: suminf.    1.60086 (15) obj. -1266.69 iterations 9
Cbc0038I Pass  19: suminf.    1.02642 (9) obj. -1266.69 iterations 11
Cbc0038I Pass  20: suminf.    0.78086 (8) obj. -1266.69 iterations 4
Cbc0038I Pass  21: suminf.    0.55083 (4) obj. -1266.69 iterations 9
Cbc0038I Pass  22: suminf.    0.33990 (3) obj. -1266.69 iterations 3
Cbc0038I Pass  23: suminf.    1.23834 (13) obj. -1266.69 iterations 16
Cbc0038I Pass  24: suminf.    1.20750 (13) obj. -1266.69 iterations 4
Cbc0038I Pass  25: suminf.    1.02562 (3) obj. -1266.69 iterations 11
Cbc0038I Pass  26: suminf.    0.22890 (2) obj. -1266.69 iterations 1
Cbc0038I Pass  27: suminf.    0.95849 (10) obj. -1266.69 iterations 19
Cbc0038I Pass  28: suminf.    0.85837 (9) obj. -1266.69 iterations 4
Cbc0038I Pass  29: suminf.    0.39463 (3) obj. -1266.69 iterations 9
Cbc0038I Pass  30: suminf.    0.22220 (2) obj. -1266.69 iterations 1
Cbc0038I Pass  31: suminf.    1.23325 (8) obj. -1266.69 iterations 12
Cbc0038I Pass  32: suminf.    1.23325 (8) obj. -1266.69 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 55 rows 57 columns
Cbc0038I Mini branch and bound improved solution from -1172 to -1187.21 (0.05 seconds)
Cbc0038I Round again with cutoff of -1437.13
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    3.66089 (39) obj. -1437.13 iterations 0
Cbc0038I Pass  33: suminf.    3.66089 (39) obj. -1437.13 iterations 0
Cbc0038I Pass  34: suminf.    2.44321 (28) obj. -1437.13 iterations 11
Cbc0038I Pass  35: suminf.    2.44321 (28) obj. -1437.13 iterations 0
Cbc0038I Pass  36: suminf.    1.20024 (10) obj. -1636.87 iterations 19
Cbc0038I Pass  37: suminf.    0.90972 (10) obj. -1437.13 iterations 1
Cbc0038I Pass  38: suminf.    0.40741 (1) obj. -1625.93 iterations 12
Cbc0038I Pass  39: suminf.    0.24286 (1) obj. -1437.13 iterations 2
Cbc0038I Pass  40: suminf.    1.96581 (15) obj. -1437.13 iterations 16
Cbc0038I Pass  41: suminf.    1.96581 (15) obj. -1437.13 iterations 0
Cbc0038I Pass  42: suminf.    0.53727 (5) obj. -1437.13 iterations 13
Cbc0038I Pass  43: suminf.    0.52055 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  44: suminf.    1.03074 (3) obj. -1437.13 iterations 5
Cbc0038I Pass  45: suminf.    0.51317 (2) obj. -1437.13 iterations 1
Cbc0038I Pass  46: suminf.    0.51317 (2) obj. -1437.13 iterations 0
Cbc0038I Pass  47: suminf.    1.98657 (13) obj. -1437.13 iterations 20
Cbc0038I Pass  48: suminf.    1.98657 (13) obj. -1437.13 iterations 3
Cbc0038I Pass  49: suminf.    0.96804 (5) obj. -1826.41 iterations 9
Cbc0038I Pass  50: suminf.    0.51953 (2) obj. -1437.13 iterations 4
Cbc0038I Pass  51: suminf.    0.31489 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  52: suminf.    0.27075 (3) obj. -1437.13 iterations 1
Cbc0038I Pass  53: suminf.    0.77793 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  54: suminf.    0.77793 (3) obj. -1437.13 iterations 0
Cbc0038I Pass  55: suminf.    1.83980 (10) obj. -1437.13 iterations 20
Cbc0038I Pass  56: suminf.    1.25774 (7) obj. -1437.13 iterations 9
Cbc0038I Pass  57: suminf.    1.13735 (3) obj. -1437.13 iterations 5
Cbc0038I Pass  58: suminf.    0.78910 (3) obj. -1437.13 iterations 1
Cbc0038I Pass  59: suminf.    2.52763 (12) obj. -1437.13 iterations 19
Cbc0038I Pass  60: suminf.    2.04616 (11) obj. -1437.13 iterations 6
Cbc0038I Pass  61: suminf.    1.13903 (3) obj. -1437.13 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 53 rows 55 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -1187.21 - took 0.04 seconds
Cbc0012I Integer solution of -1187.2145 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0038I Full problem 96 rows 110 columns, reduced to 7 rows 6 columns
Cbc0012I Integer solution of -1188.8427 found by DiveCoefficient after 58 iterations and 0 nodes (0.13 seconds)
Cbc0031I 14 added rows had average density of 4.4285714
Cbc0013I At root node, 14 cuts changed objective from -2118.9194 to -1188.8427 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 112 row cuts average 5.4 elements, 17 column cuts (17 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 10 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 14 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 6 row cuts average 35.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1188.8427, took 58 iterations and 0 nodes (0.13 seconds)
Cbc0035I Maximum depth 0, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.14

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 122 (-33) rows, 69 (-9) columns and 374 (-79) elements
Clp0000I Optimal - objective value 2073.8663
Coin0511I After Postsolve, objective 2073.8663, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2073.866256 - 16 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 4 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 122 rows, 69 columns (68 integer (68 of which binary)) and 379 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.355%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 4 integers unsatisfied sum - 0.771084
Cbc0038I Pass   1: suminf.    0.40741 (1) obj. -1625.93 iterations 5
Cbc0038I Solution found of -1158.5
Cbc0038I Relaxing continuous gives -1158.5
Cbc0038I Rounding solution of -1166.55 is better than previous of -1158.5

Cbc0038I Before mini branch and bound, 64 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 5 rows 4 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -1257.28
Cbc0038I Pass   2: suminf.    0.40741 (1) obj. -1625.93 iterations 0
Cbc0038I Pass   3: suminf.    0.08610 (1) obj. -1257.28 iterations 3
Cbc0038I Pass   4: suminf.    0.70922 (4) obj. -1257.28 iterations 12
Cbc0038I Pass   5: suminf.    0.28948 (3) obj. -1257.28 iterations 4
Cbc0038I Pass   6: suminf.    2.09349 (5) obj. -1257.28 iterations 4
Cbc0038I Pass   7: suminf.    0.65219 (3) obj. -1257.28 iterations 4
Cbc0038I Pass   8: suminf.    1.28542 (3) obj. -1257.28 iterations 6
Cbc0038I Pass   9: suminf.    0.18910 (2) obj. -1257.28 iterations 3
Cbc0038I Pass  10: suminf.    0.47704 (3) obj. -1257.28 iterations 11
Cbc0038I Pass  11: suminf.    0.47704 (3) obj. -1257.28 iterations 3
Cbc0038I Pass  12: suminf.    1.06989 (3) obj. -1257.28 iterations 7
Cbc0038I Pass  13: suminf.    0.50277 (3) obj. -1257.28 iterations 1
Cbc0038I Pass  14: suminf.    0.31785 (3) obj. -1257.28 iterations 2
Cbc0038I Pass  15: suminf.    0.31785 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  16: suminf.    0.78286 (4) obj. -1257.28 iterations 10
Cbc0038I Pass  17: suminf.    0.29705 (3) obj. -1257.28 iterations 6
Cbc0038I Pass  18: suminf.    0.60384 (3) obj. -1257.28 iterations 3
Cbc0038I Pass  19: suminf.    1.11188 (8) obj. -1257.28 iterations 13
Cbc0038I Pass  20: suminf.    0.48534 (4) obj. -1257.28 iterations 10
Cbc0038I Pass  21: suminf.    0.38491 (4) obj. -1257.28 iterations 4
Cbc0038I Pass  22: suminf.    0.38491 (4) obj. -1257.28 iterations 0
Cbc0038I Pass  23: suminf.    1.03562 (3) obj. -1257.28 iterations 2
Cbc0038I Pass  24: suminf.    1.03562 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  25: suminf.    0.29570 (3) obj. -1257.28 iterations 1
Cbc0038I Pass  26: suminf.    0.29570 (3) obj. -1257.28 iterations 0
Cbc0038I Pass  27: suminf.    1.07832 (6) obj. -1257.28 iterations 6
Cbc0038I Pass  28: suminf.    0.29567 (3) obj. -1257.28 iterations 7
Cbc0038I Pass  29: suminf.    0.71143 (4) obj. -1257.28 iterations 2
Cbc0038I Pass  30: suminf.    0.83156 (7) obj. -1257.28 iterations 11
Cbc0038I Pass  31: suminf.    0.43406 (4) obj. -1257.28 iterations 10
Cbc0038I Rounding solution of -1170.31 is better than previous of -1166.55

Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 43 rows 26 columns
Cbc0038I Mini branch and bound improved solution from -1170.31 to -1188.84 (0.03 seconds)
Cbc0038I Round again with cutoff of -1420.6
Cbc0038I Pass  31: suminf.    0.40741 (1) obj. -1625.93 iterations 0
Cbc0038I Pass  32: suminf.    0.22845 (1) obj. -1420.6 iterations 3
Cbc0038I Pass  33: suminf.    0.91818 (4) obj. -1420.6 iterations 22
Cbc0038I Pass  34: suminf.    0.73537 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  35: suminf.    1.01240 (4) obj. -1420.6 iterations 3
Cbc0038I Pass  36: suminf.    1.49717 (5) obj. -1420.6 iterations 14
Cbc0038I Pass  37: suminf.    1.49717 (5) obj. -1420.6 iterations 0
Cbc0038I Pass  38: suminf.    0.83914 (3) obj. -1420.6 iterations 13
Cbc0038I Pass  39: suminf.    0.48709 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  40: suminf.    0.73558 (3) obj. -1420.6 iterations 2
Cbc0038I Pass  41: suminf.    0.73558 (3) obj. -1420.6 iterations 0
Cbc0038I Pass  42: suminf.    1.43146 (5) obj. -1420.6 iterations 7
Cbc0038I Pass  43: suminf.    0.73420 (3) obj. -1420.6 iterations 5
Cbc0038I Pass  44: suminf.    0.78631 (3) obj. -1420.6 iterations 3
Cbc0038I Pass  45: suminf.    0.78631 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  46: suminf.    0.73420 (3) obj. -1420.6 iterations 1
Cbc0038I Pass  47: suminf.    1.31939 (6) obj. -1420.6 iterations 11
Cbc0038I Pass  48: suminf.    0.72460 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  49: suminf.    1.24536 (4) obj. -1420.6 iterations 2
Cbc0038I Pass  50: suminf.    1.16422 (6) obj. -1420.6 iterations 6
Cbc0038I Pass  51: suminf.    1.98895 (8) obj. -1420.6 iterations 8
Cbc0038I Pass  52: suminf.    1.04482 (4) obj. -1420.6 iterations 8
Cbc0038I Pass  53: suminf.    0.69937 (3) obj. -1420.6 iterations 8
Cbc0038I Pass  54: suminf.    0.46109 (2) obj. -1420.6 iterations 2
Cbc0038I Pass  55: suminf.    1.16225 (3) obj. -1420.6 iterations 4
Cbc0038I Pass  56: suminf.    0.93084 (4) obj. -1420.6 iterations 13
Cbc0038I Pass  57: suminf.    0.93084 (4) obj. -1420.6 iterations 2
Cbc0038I Pass  58: suminf.    0.60110 (5) obj. -1420.6 iterations 5
Cbc0038I Pass  59: suminf.    0.50016 (3) obj. -1420.6 iterations 3
Cbc0038I Pass  60: suminf.    0.94377 (3) obj. -1420.6 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 43 integers at bound fixed and 0 continuous
Cbc0038I Full problem 122 rows 69 columns, reduced to 41 rows 24 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of -1188.84 - took 0.02 seconds
Cbc0012I Integer solution of -1188.8427 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 122 rows 69 columns, reduced to 7 rows 8 columns
Cbc0006I The LP relaxation is infeasible or too expensive
Cbc0031I 6 added rows had average density of 11.833333
Cbc0013I At root node, 6 cuts changed objective from -2073.8663 to -1190.3835 in 7 passes
Cbc0014I Cut generator 0 (Probing) - 14 row cuts average 2.4 elements, 21 column cuts (21 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 30 row cuts average 13.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 10 row cuts average 66.5 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1188.8427, took 55 iterations and 0 nodes (0.13 seconds)
Cbc0035I Maximum depth 0, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.08   (Wallclock seconds):       0.13

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 96 (-59) rows, 110 (-43) columns and 1684 (-1620) elements
Clp1000I sum of infeasibilities 1.26437e-05 - average 1.31706e-07, 106 fixed columns
Coin0506I Presolve 4 (-92) rows, 4 (-106) columns and 10 (-1674) elements
Clp0029I End of values pass after 4 iterations
Clp0000I Optimal - objective value 2066.8663
Clp0000I Optimal - objective value 2066.8663
Coin0511I After Postsolve, objective 2066.8663, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.6748219 - largest nonzero change 0 ( 0%) - largest zero change 2.9522154e-05
Clp0000I Optimal - objective value 2139.5515
Clp0000I Optimal - objective value 2139.5515
Clp0000I Optimal - objective value 2139.5515
Coin0511I After Postsolve, objective 2139.5515, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2139.55152 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 36 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0004I processed model has 96 rows, 110 columns (110 integer (110 of which binary)) and 1693 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.483%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 5.96473
Cbc0038I Pass   1: suminf.    1.03177 (22) obj. -61.1943 iterations 6
Cbc0038I Pass   2: suminf.    1.03177 (22) obj. -61.1943 iterations 0
Cbc0038I Solution found of -31.6665
Cbc0038I Rounding solution of -32.1078 is better than previous of -31.6665

Cbc0038I Before mini branch and bound, 67 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 21 rows 21 columns
Cbc0038I Mini branch and bound improved solution from -32.1078 to -1172 (0.04 seconds)
Cbc0038I Round again with cutoff of -1266.69
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   3: suminf.    3.05969 (39) obj. -1266.69 iterations 1
Cbc0038I Pass   4: suminf.    3.05969 (39) obj. -1266.69 iterations 0
Cbc0038I Pass   5: suminf.    1.78450 (26) obj. -1266.69 iterations 13
Cbc0038I Pass   6: suminf.    0.98925 (15) obj. -1266.69 iterations 11
Cbc0038I Pass   7: suminf.    0.40741 (1) obj. -1625.93 iterations 18
Cbc0038I Pass   8: suminf.    0.09430 (1) obj. -1266.69 iterations 2
Cbc0038I Pass   9: suminf.    1.77174 (13) obj. -1266.69 iterations 27
Cbc0038I Pass  10: suminf.    1.77174 (13) obj. -1266.69 iterations 9
Cbc0038I Pass  11: suminf.    0.18431 (2) obj. -1266.69 iterations 13
Cbc0038I Pass  12: suminf.    0.18431 (2) obj. -1266.69 iterations 0
Cbc0038I Pass  13: suminf.    0.25828 (3) obj. -1266.69 iterations 3
Cbc0038I Pass  14: suminf.    0.25828 (3) obj. -1266.69 iterations 1
Cbc0038I Pass  15: suminf.    0.32507 (3) obj. -1266.69 iterations 1
Cbc0038I Pass  16: suminf.    0.32507 (3) obj. -1266.69 iterations 0
Cbc0038I Pass  17: suminf.    2.24324 (17) obj. -1266.69 iterations 32
Cbc0038I Pass  18: suminf.    1.60086 (15) obj. -1266.69 iterations 9
Cbc0038I Pass  19: suminf.    1.02642 (9) obj. -1266.69 iterations 11
Cbc0038I Pass  20: suminf.    0.78086 (8) obj. -1266.69 iterations 4
Cbc0038I Pass  21: suminf.    0.55083 (4) obj. -1266.69 iterations 9
Cbc0038I Pass  22: suminf.    0.33990 (3) obj. -1266.69 iterations 3
Cbc0038I Pass  23: suminf.    1.23834 (13) obj. -1266.69 iterations 16
Cbc0038I Pass  24: suminf.    1.20750 (13) obj. -1266.69 iterations 4
Cbc0038I Pass  25: suminf.    1.02562 (3) obj. -1266.69 iterations 11
Cbc0038I Pass  26: suminf.    0.22890 (2) obj. -1266.69 iterations 1
Cbc0038I Pass  27: suminf.    0.95849 (10) obj. -1266.69 iterations 19
Cbc0038I Pass  28: suminf.    0.85837 (9) obj. -1266.69 iterations 4
Cbc0038I Pass  29: suminf.    0.39463 (3) obj. -1266.69 iterations 9
Cbc0038I Pass  30: suminf.    0.22220 (2) obj. -1266.69 iterations 1
Cbc0038I Pass  31: suminf.    1.23325 (8) obj. -1266.69 iterations 12
Cbc0038I Pass  32: suminf.    1.23325 (8) obj. -1266.69 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 55 rows 57 columns
Cbc0038I Mini branch and bound improved solution from -1172 to -1187.21 (0.06 seconds)
Cbc0038I Round again with cutoff of -1437.13
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    3.66089 (39) obj. -1437.13 iterations 0
Cbc0038I Pass  33: suminf.    3.66089 (39) obj. -1437.13 iterations 0
Cbc0038I Pass  34: suminf.    2.44321 (28) obj. -1437.13 iterations 11
Cbc0038I Pass  35: suminf.    2.44321 (28) obj. -1437.13 iterations 0
Cbc0038I Pass  36: suminf.    1.20024 (10) obj. -1636.87 iterations 19
Cbc0038I Pass  37: suminf.    0.90972 (10) obj. -1437.13 iterations 1
Cbc0038I Pass  38: suminf.    0.40741 (1) obj. -1625.93 iterations 12
Cbc0038I Pass  39: suminf.    0.24286 (1) obj. -1437.13 iterations 2
Cbc0038I Pass  40: suminf.    1.96581 (15) obj. -1437.13 iterations 16
Cbc0038I Pass  41: suminf.    1.96581 (15) obj. -1437.13 iterations 0
Cbc0038I Pass  42: suminf.    0.53727 (5) obj. -1437.13 iterations 13
Cbc0038I Pass  43: suminf.    0.52055 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  44: suminf.    1.03074 (3) obj. -1437.13 iterations 5
Cbc0038I Pass  45: suminf.    0.51317 (2) obj. -1437.13 iterations 1
Cbc0038I Pass  46: suminf.    0.51317 (2) obj. -1437.13 iterations 0
Cbc0038I Pass  47: suminf.    1.98657 (13) obj. -1437.13 iterations 20
Cbc0038I Pass  48: suminf.    1.98657 (13) obj. -1437.13 iterations 3
Cbc0038I Pass  49: suminf.    0.96804 (5) obj. -1826.41 iterations 9
Cbc0038I Pass  50: suminf.    0.51953 (2) obj. -1437.13 iterations 4
Cbc0038I Pass  51: suminf.    0.31489 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  52: suminf.    0.27075 (3) obj. -1437.13 iterations 1
Cbc0038I Pass  53: suminf.    0.77793 (3) obj. -1437.13 iterations 2
Cbc0038I Pass  54: suminf.    0.77793 (3) obj. -1437.13 iterations 0
Cbc0038I Pass  55: suminf.    1.83980 (10) obj. -1437.13 iterations 20
Cbc0038I Pass  56: suminf.    1.25774 (7) obj. -1437.13 iterations 9
Cbc0038I Pass  57: suminf.    1.13735 (3) obj. -1437.13 iterations 5
Cbc0038I Pass  58: suminf.    0.78910 (3) obj. -1437.13 iterations 1
Cbc0038I Pass  59: suminf.    2.52763 (12) obj. -1437.13 iterations 19
Cbc0038I Pass  60: suminf.    2.04616 (11) obj. -1437.13 iterations 6
Cbc0038I Pass  61: suminf.    1.13903 (3) obj. -1437.13 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 53 integers at bound fixed and 0 continuous
Cbc0038I Full problem 96 rows 110 columns, reduced to 53 rows 55 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -1187.21 - took 0.05 seconds
Cbc0012I Integer solution of -1187.2145 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 96 rows 110 columns, reduced to 7 rows 6 columns
Cbc0012I Integer solution of -1188.8427 found by DiveCoefficient after 58 iterations and 0 nodes (0.14 seconds)
Cbc0031I 14 added rows had average density of 4.4285714
Cbc0013I At root node, 14 cuts changed objective from -2118.9194 to -1188.8427 in 5 passes
Cbc0014I Cut generator 0 (Probing) - 112 row cuts average 5.4 elements, 17 column cuts (17 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 6.5 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 10 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 14 row cuts average 4.4 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 6 row cuts average 35.0 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0001I Search completed - best objective -1188.8427, took 58 iterations and 0 nodes (0.15 seconds)
Cbc0035I Maximum depth 0, 37 variables fixed on reduced cost
Total time (CPU seconds):       0.11   (Wallclock seconds):       0.15

