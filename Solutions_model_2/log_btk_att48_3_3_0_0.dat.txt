Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 84 (-15) rows, 46 (-4) columns and 252 (-33) elements
Clp1000I sum of infeasibilities 1.30664e-05 - average 1.55552e-07, 5 fixed columns
Coin0506I Presolve 71 (-13) rows, 40 (-6) columns and 214 (-38) elements
Clp0029I End of values pass after 40 iterations
Clp0014I Perturbing problem by 0.001% of 21.673615 - largest nonzero change 0 ( 0%) - largest zero change 1.702643e-05
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1819.302008 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 84 rows, 46 columns (45 integer (45 of which binary)) and 252 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.917%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 5.09106
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 268.274 iterations 17
Cbc0038I Solution found of 268.274
Cbc0038I Relaxing continuous gives 268.274
Cbc0038I Rounding solution of 151.03 is better than previous of 268.274

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound improved solution from 151.03 to -510.709 (0.01 seconds)
Cbc0038I Round again with cutoff of -641.568
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.54012 (2) obj. -641.568 iterations 2
Cbc0038I Pass   3: suminf.    0.64563 (3) obj. -641.568 iterations 4
Cbc0038I Pass   4: suminf.    0.50176 (4) obj. -641.568 iterations 3
Cbc0038I Pass   5: suminf.    1.24474 (3) obj. -641.568 iterations 4
Cbc0038I Pass   6: suminf.    1.10995 (4) obj. -641.568 iterations 1
Cbc0038I Pass   7: suminf.    0.72017 (4) obj. -641.568 iterations 2
Cbc0038I Pass   8: suminf.    0.72017 (4) obj. -641.568 iterations 0
Cbc0038I Pass   9: suminf.    1.10995 (4) obj. -641.568 iterations 4
Cbc0038I Pass  10: suminf.    2.42807 (8) obj. -641.568 iterations 11
Cbc0038I Pass  11: suminf.    1.16743 (4) obj. -641.568 iterations 8
Cbc0038I Pass  12: suminf.    0.41096 (5) obj. -641.568 iterations 5
Cbc0038I Pass  13: suminf.    0.24149 (3) obj. -641.568 iterations 5
Cbc0038I Pass  14: suminf.    0.73391 (2) obj. -641.568 iterations 2
Cbc0038I Pass  15: suminf.    0.25970 (1) obj. -641.568 iterations 1
Cbc0038I Pass  16: suminf.    0.37869 (2) obj. -641.568 iterations 2
Cbc0038I Pass  17: suminf.    2.71290 (9) obj. -641.568 iterations 15
Cbc0038I Pass  18: suminf.    1.00000 (3) obj. -641.568 iterations 15
Cbc0038I Pass  19: suminf.    1.00000 (3) obj. -641.568 iterations 0
Cbc0038I Pass  20: suminf.    0.64451 (3) obj. -641.568 iterations 6
Cbc0038I Pass  21: suminf.    0.63948 (2) obj. -641.568 iterations 1
Cbc0038I Pass  22: suminf.    0.68314 (3) obj. -641.568 iterations 2
Cbc0038I Pass  23: suminf.    0.96256 (6) obj. -641.568 iterations 9
Cbc0038I Pass  24: suminf.    0.96256 (6) obj. -641.568 iterations 0
Cbc0038I Pass  25: suminf.    1.16779 (3) obj. -641.568 iterations 7
Cbc0038I Pass  26: suminf.    0.96961 (3) obj. -641.568 iterations 2
Cbc0038I Pass  27: suminf.    1.53369 (7) obj. -641.568 iterations 15
Cbc0038I Pass  28: suminf.    1.00000 (6) obj. -641.568 iterations 6
Cbc0038I Pass  29: suminf.    0.98890 (4) obj. -641.568 iterations 10
Cbc0038I Pass  30: suminf.    0.98386 (3) obj. -641.568 iterations 1
Cbc0038I Pass  31: suminf.    1.15834 (3) obj. -641.568 iterations 1
Cbc0038I Rounding solution of -515.574 is better than previous of -510.709

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 51 rows 35 columns
Cbc0038I Mini branch and bound improved solution from -515.574 to -530.996 (0.03 seconds)
Cbc0038I Round again with cutoff of -877.115
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.85809 (5) obj. -877.115 iterations 2
Cbc0038I Pass  32: suminf.    1.30334 (4) obj. -877.115 iterations 7
Cbc0038I Pass  33: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  34: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  35: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  36: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  37: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  38: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  39: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  40: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  41: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  42: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  43: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  44: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  45: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  46: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  47: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  48: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  49: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  50: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  51: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  52: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  53: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  54: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  55: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  56: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  57: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  58: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  59: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  60: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -530.996 - took 0.03 seconds
Cbc0012I Integer solution of -530.99578 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 84 rows 46 columns, reduced to 21 rows 19 columns
Cbc0031I 20 added rows had average density of 34.25
Cbc0013I At root node, 20 cuts changed objective from -1819.302 to -1103.0726 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6104 row cuts average 3.7 elements, 1 column cuts (1 active)  in 0.047 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1565 row cuts average 43.8 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 157 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 104 row cuts average 38.8 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0001I Search completed - best objective -530.9957840000006, took 5807 iterations and 10 nodes (0.52 seconds)
Cbc0032I Strong branching done 232 times (5190 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 4, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.51   (Wallclock seconds):       0.52

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 85 (-13) rows, 91 (-5) columns and 1216 (-197) elements
Clp1000I sum of infeasibilities 9.4351e-06 - average 1.11001e-07, 78 fixed columns
Coin0506I Presolve 6 (-79) rows, 9 (-82) columns and 25 (-1191) elements
Clp0029I End of values pass after 9 iterations
Clp0014I Perturbing problem by 0.001% of 1.6363727 - largest nonzero change 2.8691903e-05 ( 0.0014345952%) - largest zero change 1.7919265e-05
Clp0000I Optimal - objective value -1477.5842
Clp0000I Optimal - objective value -1477.5842
Coin0511I After Postsolve, objective -1477.5842, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.4597186 - largest nonzero change 3.4435193e-05 ( 0.002086088%) - largest zero change 2.8682824e-05
Clp0000I Optimal - objective value 2691.866
Clp0000I Optimal - objective value 2691.866
Clp0000I Optimal - objective value 2691.866
Coin0511I After Postsolve, objective 2691.866, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2691.865972 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 85 rows, 91 columns (91 integer (91 of which binary)) and 1218 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.822%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 39 integers unsatisfied sum - 8.03602
Cbc0038I Pass   1: suminf.    2.89917 (26) obj. -1264.3 iterations 18
Cbc0038I Pass   2: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass   3: suminf.    0.17060 (4) obj. 105.998 iterations 22
Cbc0038I Solution found of 272.533
Cbc0038I Rounding solution of -98.1638 is better than previous of 272.533

Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 10 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -98.1638 to -273.141 (0.02 seconds)
Cbc0038I Round again with cutoff of -498.444
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    2.89917 (26) obj. -1264.3 iterations 0
Cbc0038I Pass   5: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass   6: suminf.    1.04849 (15) obj. -531.44 iterations 11
Cbc0038I Pass   7: suminf.    0.34480 (6) obj. -498.444 iterations 19
Cbc0038I Pass   8: suminf.    0.33634 (5) obj. -508.401 iterations 1
Cbc0038I Pass   9: suminf.    0.73656 (6) obj. -498.444 iterations 11
Cbc0038I Pass  10: suminf.    0.48535 (5) obj. -713.283 iterations 1
Cbc0038I Pass  11: suminf.    0.70799 (6) obj. -498.444 iterations 8
Cbc0038I Pass  12: suminf.    0.60824 (3) obj. -498.444 iterations 1
Cbc0038I Pass  13: suminf.    0.63561 (3) obj. -498.444 iterations 1
Cbc0038I Pass  14: suminf.    0.63561 (3) obj. -498.444 iterations 0
Cbc0038I Pass  15: suminf.    0.60824 (3) obj. -498.444 iterations 2
Cbc0038I Pass  16: suminf.    1.79321 (8) obj. -498.444 iterations 15
Cbc0038I Pass  17: suminf.    1.47125 (7) obj. -648.48 iterations 9
Cbc0038I Pass  18: suminf.    0.38630 (3) obj. -498.444 iterations 9
Cbc0038I Pass  19: suminf.    0.38630 (3) obj. -498.444 iterations 0
Cbc0038I Pass  20: suminf.    0.41605 (3) obj. -498.444 iterations 1
Cbc0038I Pass  21: suminf.    0.41605 (3) obj. -498.444 iterations 0
Cbc0038I Pass  22: suminf.    0.38630 (3) obj. -498.444 iterations 2
Cbc0038I Pass  23: suminf.    2.90364 (14) obj. -498.444 iterations 29
Cbc0038I Pass  24: suminf.    2.08922 (11) obj. -728.308 iterations 4
Cbc0038I Pass  25: suminf.    0.40017 (3) obj. -498.444 iterations 15
Cbc0038I Pass  26: suminf.    0.30202 (3) obj. -519.547 iterations 3
Cbc0038I Pass  27: suminf.    1.70538 (12) obj. -498.444 iterations 28
Cbc0038I Pass  28: suminf.    1.31190 (11) obj. -498.444 iterations 9
Cbc0038I Pass  29: suminf.    0.69265 (5) obj. -498.444 iterations 11
Cbc0038I Pass  30: suminf.    0.69265 (5) obj. -498.444 iterations 0
Cbc0038I Pass  31: suminf.    0.39949 (5) obj. -498.444 iterations 2
Cbc0038I Pass  32: suminf.    0.39949 (5) obj. -498.444 iterations 0
Cbc0038I Pass  33: suminf.    0.69265 (5) obj. -498.444 iterations 2
Cbc0038I Rounding solution of -525.692 is better than previous of -273.141

Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 30 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I Round again with cutoff of -925.789
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    2.89917 (26) obj. -1264.3 iterations 0
Cbc0038I Pass  34: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass  35: suminf.    1.20498 (15) obj. -925.789 iterations 21
Cbc0038I Pass  36: suminf.    1.19630 (14) obj. -951.948 iterations 1
Cbc0038I Pass  37: suminf.    1.09413 (7) obj. -925.789 iterations 26
Cbc0038I Pass  38: suminf.    1.09413 (7) obj. -925.789 iterations 0
Cbc0038I Pass  39: suminf.    1.30744 (8) obj. -925.789 iterations 8
Cbc0038I Pass  40: suminf.    1.22904 (7) obj. -1018.28 iterations 1
Cbc0038I Pass  41: suminf.    1.43747 (7) obj. -925.789 iterations 6
Cbc0038I Pass  42: suminf.    1.43747 (7) obj. -925.789 iterations 2
Cbc0038I Pass  43: suminf.    1.40834 (7) obj. -925.789 iterations 2
Cbc0038I Pass  44: suminf.    1.40834 (7) obj. -925.789 iterations 1
Cbc0038I Pass  45: suminf.    1.43747 (7) obj. -925.789 iterations 3
Cbc0038I Pass  46: suminf.    2.90805 (14) obj. -925.789 iterations 18
Cbc0038I Pass  47: suminf.    2.90805 (14) obj. -925.789 iterations 3
Cbc0038I Pass  48: suminf.    1.40982 (8) obj. -925.789 iterations 12
Cbc0038I Pass  49: suminf.    1.40982 (8) obj. -925.789 iterations 1
Cbc0038I Pass  50: suminf.    1.73196 (8) obj. -925.789 iterations 3
Cbc0038I Pass  51: suminf.    1.73196 (8) obj. -925.789 iterations 1
Cbc0038I Pass  52: suminf.    1.40982 (8) obj. -925.789 iterations 3
Cbc0038I Pass  53: suminf.    3.80025 (14) obj. -925.789 iterations 13
Cbc0038I Pass  54: suminf.    1.81715 (14) obj. -925.789 iterations 6
Cbc0038I Pass  55: suminf.    1.81715 (14) obj. -925.789 iterations 1
Cbc0038I Pass  56: suminf.    1.04440 (6) obj. -925.789 iterations 13
Cbc0038I Pass  57: suminf.    1.04440 (6) obj. -925.789 iterations 1
Cbc0038I Pass  58: suminf.    1.29137 (6) obj. -925.789 iterations 2
Cbc0038I Pass  59: suminf.    1.29137 (6) obj. -925.789 iterations 0
Cbc0038I Pass  60: suminf.    1.04440 (6) obj. -925.789 iterations 2
Cbc0038I Pass  61: suminf.    2.61882 (12) obj. -925.789 iterations 12
Cbc0038I Pass  62: suminf.    1.84740 (9) obj. -925.789 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 32 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.07 seconds)
Cbc0038I After 0.07 seconds - Feasibility pump exiting with objective of -525.692 - took 0.05 seconds
Cbc0012I Integer solution of -525.69178 found by feasibility pump after 0 iterations and 0 nodes (0.07 seconds)
Cbc0012I Integer solution of -530.99578 found by DiveCoefficient after 112 iterations and 0 nodes (0.09 seconds)
Cbc0031I 38 added rows had average density of 11.131579
Cbc0013I At root node, 38 cuts changed objective from -2526.1758 to -530.99578 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 643 row cuts average 9.4 elements, 20 column cuts (20 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 48 row cuts average 11.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 47 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 62 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 23 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective -530.9957840000006, took 112 iterations and 0 nodes (0.09 seconds)
Cbc0035I Maximum depth 0, 15 variables fixed on reduced cost
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.09

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 84 (-15) rows, 46 (-4) columns and 252 (-33) elements
Clp1000I sum of infeasibilities 1.30664e-05 - average 1.55552e-07, 5 fixed columns
Coin0506I Presolve 71 (-13) rows, 40 (-6) columns and 214 (-38) elements
Clp0029I End of values pass after 40 iterations
Clp0014I Perturbing problem by 0.001% of 21.673615 - largest nonzero change 0 ( 0%) - largest zero change 1.702643e-05
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Clp0000I Optimal - objective value 1819.302
Coin0511I After Postsolve, objective 1819.302, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 1819.302008 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 84 rows, 46 columns (45 integer (45 of which binary)) and 252 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.917%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 14 integers unsatisfied sum - 5.09106
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 268.274 iterations 17
Cbc0038I Solution found of 268.274
Cbc0038I Relaxing continuous gives 268.274
Cbc0038I Rounding solution of 151.03 is better than previous of 268.274

Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound improved solution from 151.03 to -510.709 (0.01 seconds)
Cbc0038I Round again with cutoff of -641.568
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.54012 (2) obj. -641.568 iterations 2
Cbc0038I Pass   3: suminf.    0.64563 (3) obj. -641.568 iterations 4
Cbc0038I Pass   4: suminf.    0.50176 (4) obj. -641.568 iterations 3
Cbc0038I Pass   5: suminf.    1.24474 (3) obj. -641.568 iterations 4
Cbc0038I Pass   6: suminf.    1.10995 (4) obj. -641.568 iterations 1
Cbc0038I Pass   7: suminf.    0.72017 (4) obj. -641.568 iterations 2
Cbc0038I Pass   8: suminf.    0.72017 (4) obj. -641.568 iterations 0
Cbc0038I Pass   9: suminf.    1.10995 (4) obj. -641.568 iterations 4
Cbc0038I Pass  10: suminf.    2.42807 (8) obj. -641.568 iterations 11
Cbc0038I Pass  11: suminf.    1.16743 (4) obj. -641.568 iterations 8
Cbc0038I Pass  12: suminf.    0.41096 (5) obj. -641.568 iterations 5
Cbc0038I Pass  13: suminf.    0.24149 (3) obj. -641.568 iterations 5
Cbc0038I Pass  14: suminf.    0.73391 (2) obj. -641.568 iterations 2
Cbc0038I Pass  15: suminf.    0.25970 (1) obj. -641.568 iterations 1
Cbc0038I Pass  16: suminf.    0.37869 (2) obj. -641.568 iterations 2
Cbc0038I Pass  17: suminf.    2.71290 (9) obj. -641.568 iterations 15
Cbc0038I Pass  18: suminf.    1.00000 (3) obj. -641.568 iterations 15
Cbc0038I Pass  19: suminf.    1.00000 (3) obj. -641.568 iterations 0
Cbc0038I Pass  20: suminf.    0.64451 (3) obj. -641.568 iterations 6
Cbc0038I Pass  21: suminf.    0.63948 (2) obj. -641.568 iterations 1
Cbc0038I Pass  22: suminf.    0.68314 (3) obj. -641.568 iterations 2
Cbc0038I Pass  23: suminf.    0.96256 (6) obj. -641.568 iterations 9
Cbc0038I Pass  24: suminf.    0.96256 (6) obj. -641.568 iterations 0
Cbc0038I Pass  25: suminf.    1.16779 (3) obj. -641.568 iterations 7
Cbc0038I Pass  26: suminf.    0.96961 (3) obj. -641.568 iterations 2
Cbc0038I Pass  27: suminf.    1.53369 (7) obj. -641.568 iterations 15
Cbc0038I Pass  28: suminf.    1.00000 (6) obj. -641.568 iterations 6
Cbc0038I Pass  29: suminf.    0.98890 (4) obj. -641.568 iterations 10
Cbc0038I Pass  30: suminf.    0.98386 (3) obj. -641.568 iterations 1
Cbc0038I Pass  31: suminf.    1.15834 (3) obj. -641.568 iterations 1
Cbc0038I Rounding solution of -515.574 is better than previous of -510.709

Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 51 rows 35 columns
Cbc0038I Mini branch and bound improved solution from -515.574 to -530.996 (0.03 seconds)
Cbc0038I Round again with cutoff of -877.115
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  31: suminf.    0.85809 (5) obj. -877.115 iterations 2
Cbc0038I Pass  32: suminf.    1.30334 (4) obj. -877.115 iterations 7
Cbc0038I Pass  33: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  34: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  35: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  36: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  37: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  38: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  39: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  40: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  41: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  42: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  43: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  44: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  45: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  46: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  47: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  48: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  49: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  50: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  51: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  52: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  53: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  54: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  55: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I Pass  56: suminf.    1.14395 (4) obj. -877.115 iterations 1
Cbc0038I Pass  57: suminf.    1.30334 (4) obj. -877.115 iterations 4
Cbc0038I Pass  58: suminf.    1.28408 (4) obj. -877.115 iterations 2
Cbc0038I Pass  59: suminf.    1.65538 (4) obj. -877.115 iterations 2
Cbc0038I Pass  60: suminf.    1.21718 (5) obj. -877.115 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 31 integers at bound fixed and 0 continuous
Cbc0038I Full problem 84 rows 46 columns, reduced to 19 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -530.996 - took 0.03 seconds
Cbc0012I Integer solution of -530.99578 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 84 rows 46 columns, reduced to 21 rows 19 columns
Cbc0031I 20 added rows had average density of 34.25
Cbc0013I At root node, 20 cuts changed objective from -1819.302 to -1103.0726 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 6104 row cuts average 3.7 elements, 1 column cuts (1 active)  in 0.042 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 1565 row cuts average 43.8 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.043 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 157 row cuts average 5.7 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 104 row cuts average 38.8 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0001I Search completed - best objective -530.9957840000006, took 5807 iterations and 10 nodes (0.49 seconds)
Cbc0032I Strong branching done 232 times (5190 iterations), fathomed 1 nodes and fixed 10 variables
Cbc0035I Maximum depth 4, 28 variables fixed on reduced cost
Total time (CPU seconds):       0.48   (Wallclock seconds):       0.49

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 85 (-14) rows, 91 (-6) columns and 1216 (-198) elements
Clp1000I sum of infeasibilities 9.4351e-06 - average 1.11001e-07, 78 fixed columns
Coin0506I Presolve 6 (-79) rows, 9 (-82) columns and 25 (-1191) elements
Clp0029I End of values pass after 9 iterations
Clp0014I Perturbing problem by 0.001% of 1.6363727 - largest nonzero change 2.8691903e-05 ( 0.0014345952%) - largest zero change 1.7919265e-05
Clp0000I Optimal - objective value -1477.5842
Clp0000I Optimal - objective value -1477.5842
Coin0511I After Postsolve, objective -1477.5842, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.4597186 - largest nonzero change 3.4435193e-05 ( 0.002086088%) - largest zero change 2.8682824e-05
Clp0000I Optimal - objective value 2691.866
Clp0000I Optimal - objective value 2691.866
Clp0000I Optimal - objective value 2691.866
Coin0511I After Postsolve, objective 2691.866, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 2691.865972 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 85 rows, 91 columns (91 integer (91 of which binary)) and 1218 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.822%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 39 integers unsatisfied sum - 8.03602
Cbc0038I Pass   1: suminf.    2.89917 (26) obj. -1264.3 iterations 18
Cbc0038I Pass   2: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass   3: suminf.    0.17060 (4) obj. 105.998 iterations 22
Cbc0038I Solution found of 272.533
Cbc0038I Rounding solution of -98.1638 is better than previous of 272.533

Cbc0038I Before mini branch and bound, 49 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 10 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -98.1638 to -273.141 (0.02 seconds)
Cbc0038I Round again with cutoff of -498.444
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   4: suminf.    2.89917 (26) obj. -1264.3 iterations 0
Cbc0038I Pass   5: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass   6: suminf.    1.04849 (15) obj. -531.44 iterations 11
Cbc0038I Pass   7: suminf.    0.34480 (6) obj. -498.444 iterations 19
Cbc0038I Pass   8: suminf.    0.33634 (5) obj. -508.401 iterations 1
Cbc0038I Pass   9: suminf.    0.73656 (6) obj. -498.444 iterations 11
Cbc0038I Pass  10: suminf.    0.48535 (5) obj. -713.283 iterations 1
Cbc0038I Pass  11: suminf.    0.70799 (6) obj. -498.444 iterations 8
Cbc0038I Pass  12: suminf.    0.60824 (3) obj. -498.444 iterations 1
Cbc0038I Pass  13: suminf.    0.63561 (3) obj. -498.444 iterations 1
Cbc0038I Pass  14: suminf.    0.63561 (3) obj. -498.444 iterations 0
Cbc0038I Pass  15: suminf.    0.60824 (3) obj. -498.444 iterations 2
Cbc0038I Pass  16: suminf.    1.79321 (8) obj. -498.444 iterations 15
Cbc0038I Pass  17: suminf.    1.47125 (7) obj. -648.48 iterations 9
Cbc0038I Pass  18: suminf.    0.38630 (3) obj. -498.444 iterations 9
Cbc0038I Pass  19: suminf.    0.38630 (3) obj. -498.444 iterations 0
Cbc0038I Pass  20: suminf.    0.41605 (3) obj. -498.444 iterations 1
Cbc0038I Pass  21: suminf.    0.41605 (3) obj. -498.444 iterations 0
Cbc0038I Pass  22: suminf.    0.38630 (3) obj. -498.444 iterations 2
Cbc0038I Pass  23: suminf.    2.90364 (14) obj. -498.444 iterations 29
Cbc0038I Pass  24: suminf.    2.08922 (11) obj. -728.308 iterations 4
Cbc0038I Pass  25: suminf.    0.40017 (3) obj. -498.444 iterations 15
Cbc0038I Pass  26: suminf.    0.30202 (3) obj. -519.547 iterations 3
Cbc0038I Pass  27: suminf.    1.70538 (12) obj. -498.444 iterations 28
Cbc0038I Pass  28: suminf.    1.31190 (11) obj. -498.444 iterations 9
Cbc0038I Pass  29: suminf.    0.69265 (5) obj. -498.444 iterations 11
Cbc0038I Pass  30: suminf.    0.69265 (5) obj. -498.444 iterations 0
Cbc0038I Pass  31: suminf.    0.39949 (5) obj. -498.444 iterations 2
Cbc0038I Pass  32: suminf.    0.39949 (5) obj. -498.444 iterations 0
Cbc0038I Pass  33: suminf.    0.69265 (5) obj. -498.444 iterations 2
Cbc0038I Rounding solution of -525.692 is better than previous of -273.141

Cbc0038I Before mini branch and bound, 33 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 30 rows 37 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Round again with cutoff of -925.789
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  33: suminf.    2.89917 (26) obj. -1264.3 iterations 0
Cbc0038I Pass  34: suminf.    2.89917 (26) obj. -1264.3 iterations 1
Cbc0038I Pass  35: suminf.    1.20498 (15) obj. -925.789 iterations 21
Cbc0038I Pass  36: suminf.    1.19630 (14) obj. -951.948 iterations 1
Cbc0038I Pass  37: suminf.    1.09413 (7) obj. -925.789 iterations 26
Cbc0038I Pass  38: suminf.    1.09413 (7) obj. -925.789 iterations 0
Cbc0038I Pass  39: suminf.    1.30744 (8) obj. -925.789 iterations 8
Cbc0038I Pass  40: suminf.    1.22904 (7) obj. -1018.28 iterations 1
Cbc0038I Pass  41: suminf.    1.43747 (7) obj. -925.789 iterations 6
Cbc0038I Pass  42: suminf.    1.43747 (7) obj. -925.789 iterations 2
Cbc0038I Pass  43: suminf.    1.40834 (7) obj. -925.789 iterations 2
Cbc0038I Pass  44: suminf.    1.40834 (7) obj. -925.789 iterations 1
Cbc0038I Pass  45: suminf.    1.43747 (7) obj. -925.789 iterations 3
Cbc0038I Pass  46: suminf.    2.90805 (14) obj. -925.789 iterations 18
Cbc0038I Pass  47: suminf.    2.90805 (14) obj. -925.789 iterations 3
Cbc0038I Pass  48: suminf.    1.40982 (8) obj. -925.789 iterations 12
Cbc0038I Pass  49: suminf.    1.40982 (8) obj. -925.789 iterations 1
Cbc0038I Pass  50: suminf.    1.73196 (8) obj. -925.789 iterations 3
Cbc0038I Pass  51: suminf.    1.73196 (8) obj. -925.789 iterations 1
Cbc0038I Pass  52: suminf.    1.40982 (8) obj. -925.789 iterations 3
Cbc0038I Pass  53: suminf.    3.80025 (14) obj. -925.789 iterations 13
Cbc0038I Pass  54: suminf.    1.81715 (14) obj. -925.789 iterations 6
Cbc0038I Pass  55: suminf.    1.81715 (14) obj. -925.789 iterations 1
Cbc0038I Pass  56: suminf.    1.04440 (6) obj. -925.789 iterations 13
Cbc0038I Pass  57: suminf.    1.04440 (6) obj. -925.789 iterations 1
Cbc0038I Pass  58: suminf.    1.29137 (6) obj. -925.789 iterations 2
Cbc0038I Pass  59: suminf.    1.29137 (6) obj. -925.789 iterations 0
Cbc0038I Pass  60: suminf.    1.04440 (6) obj. -925.789 iterations 2
Cbc0038I Pass  61: suminf.    2.61882 (12) obj. -925.789 iterations 12
Cbc0038I Pass  62: suminf.    1.84740 (9) obj. -925.789 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 34 integers at bound fixed and 0 continuous
Cbc0038I Full problem 85 rows 91 columns, reduced to 32 rows 38 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -525.692 - took 0.05 seconds
Cbc0012I Integer solution of -525.69178 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0012I Integer solution of -530.99578 found by DiveCoefficient after 112 iterations and 0 nodes (0.08 seconds)
Cbc0031I 38 added rows had average density of 11.131579
Cbc0013I At root node, 38 cuts changed objective from -2526.1758 to -530.99578 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 643 row cuts average 9.4 elements, 20 column cuts (20 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 48 row cuts average 11.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 2 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 47 row cuts average 5.8 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 62 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 23 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective -530.9957840000006, took 112 iterations and 0 nodes (0.08 seconds)
Cbc0035I Maximum depth 0, 15 variables fixed on reduced cost
Total time (CPU seconds):       0.08   (Wallclock seconds):       0.09

