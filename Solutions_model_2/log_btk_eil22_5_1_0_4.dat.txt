Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 22 (-25) rows, 14 (-10) columns and 65 (-64) elements
Clp1000I sum of infeasibilities 8.76278e-08 - average 3.98308e-09, 4 fixed columns
Coin0506I Presolve 14 (-8) rows, 10 (-4) columns and 41 (-24) elements
Clp0029I End of values pass after 10 iterations
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 106.5726413 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 22 rows, 14 columns (13 integer (13 of which binary)) and 66 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.419%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.861819
Cbc0038I Pass   1: suminf.    0.12000 (1) obj. -98.84 iterations 6
Cbc0038I Solution found of -61
Cbc0038I Relaxing continuous gives -61
Cbc0038I Rounding solution of -71 is better than previous of -61

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -71 to -89 (0.00 seconds)
Cbc0038I Round again with cutoff of -91.6572
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.12000 (1) obj. -98.84 iterations 0
Cbc0038I Pass   3: suminf.    0.28704 (1) obj. -91.6572 iterations 2
Cbc0038I Pass   4: suminf.    1.38928 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   5: suminf.    0.52987 (2) obj. -91.6572 iterations 2
Cbc0038I Pass   6: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   7: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass   8: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I Pass   9: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  10: suminf.    1.07893 (4) obj. -91.6572 iterations 4
Cbc0038I Pass  11: suminf.    1.22913 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  12: suminf.    1.07893 (4) obj. -91.6572 iterations 1
Cbc0038I Pass  13: suminf.    1.43469 (5) obj. -91.6572 iterations 4
Cbc0038I Pass  14: suminf.    1.43469 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  15: suminf.    2.25854 (5) obj. -91.6572 iterations 3
Cbc0038I Pass  16: suminf.    0.19954 (2) obj. -91.6572 iterations 4
Cbc0038I Pass  17: suminf.    0.19954 (2) obj. -91.6572 iterations 0
Cbc0038I Pass  18: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  19: suminf.    0.19954 (2) obj. -91.6572 iterations 2
Cbc0038I Pass  20: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  21: suminf.    1.12624 (4) obj. -91.6572 iterations 3
Cbc0038I Pass  22: suminf.    0.94146 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  23: suminf.    0.92980 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  24: suminf.    0.44170 (1) obj. -91.6572 iterations 6
Cbc0038I Pass  25: suminf.    0.12000 (1) obj. -91.6572 iterations 2
Cbc0038I Pass  26: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  27: suminf.    0.52987 (2) obj. -91.6572 iterations 6
Cbc0038I Pass  28: suminf.    0.52987 (2) obj. -91.6572 iterations 1
Cbc0038I Pass  29: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass  30: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass  31: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 14 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -89 - took 0.01 seconds
Cbc0012I Integer solution of -89 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0031I 5 added rows had average density of 6.6
Cbc0013I At root node, 22 cuts changed objective from -106.57264 to -89.749177 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 29 row cuts average 3.5 elements, 2 column cuts (2 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 39 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 53 row cuts average 7.6 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89, took 49 iterations and 0 nodes (0.01 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.02   (Wallclock seconds):       0.02

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 28 (-18) rows, 32 (-12) columns and 172 (-188) elements
Clp1000I sum of infeasibilities 1.61697e-09 - average 5.77489e-11, 9 fixed columns
Coin0506I Presolve 12 (-16) rows, 15 (-17) columns and 49 (-123) elements
Clp0029I End of values pass after 15 iterations
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Coin0511I After Postsolve, objective 136.24642, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Coin0511I After Postsolve, objective 136.24642, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 136.2464228 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 28 rows, 32 columns (32 integer (32 of which binary)) and 179 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 7.452%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 9 integers unsatisfied sum - 2.29784
Cbc0038I Pass   1: suminf.    1.03553 (5) obj. -84.0198 iterations 3
Cbc0038I Pass   2: suminf.    1.03553 (5) obj. -84.0198 iterations 1
Cbc0038I Solution found of -71
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 4 rows 5 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -76.1464
Cbc0038I Pass   3: suminf.    1.03553 (5) obj. -84.0198 iterations 0
Cbc0038I Pass   4: suminf.    1.03553 (5) obj. -84.0198 iterations 1
Cbc0038I Pass   5: suminf.    0.22973 (4) obj. -76.1464 iterations 8
Cbc0038I Pass   6: suminf.    0.12000 (1) obj. -98.84 iterations 6
Cbc0038I Pass   7: suminf.    0.35224 (1) obj. -76.1464 iterations 2
Cbc0038I Pass   8: suminf.    0.64609 (3) obj. -76.1464 iterations 6
Cbc0038I Pass   9: suminf.    0.58974 (3) obj. -78.7147 iterations 2
Cbc0038I Pass  10: suminf.    0.07155 (1) obj. -76.1464 iterations 5
Cbc0038I Pass  11: suminf.    0.07155 (1) obj. -76.1464 iterations 0
Cbc0038I Pass  12: suminf.    0.12000 (1) obj. -98.84 iterations 3
Cbc0038I Pass  13: suminf.    0.35224 (1) obj. -76.1464 iterations 2
Cbc0038I Pass  14: suminf.    0.22739 (2) obj. -76.1464 iterations 2
Cbc0038I Pass  15: suminf.    0.22739 (2) obj. -76.1464 iterations 0
Cbc0038I Pass  16: suminf.    0.65391 (5) obj. -76.1464 iterations 8
Cbc0038I Pass  17: suminf.    0.65391 (5) obj. -76.1464 iterations 0
Cbc0038I Pass  18: suminf.    0.12000 (1) obj. -91.84 iterations 5
Cbc0038I Pass  19: suminf.    0.48497 (1) obj. -76.1464 iterations 2
Cbc0038I Pass  20: suminf.    0.66545 (2) obj. -84.3418 iterations 4
Cbc0038I Pass  21: suminf.    0.45441 (2) obj. -76.1464 iterations 2
Cbc0038I Pass  22: suminf.    0.42857 (1) obj. -82.4286 iterations 2
Cbc0038I Pass  23: suminf.    0.28248 (1) obj. -76.1464 iterations 1
Cbc0038I Pass  24: suminf.    0.68264 (3) obj. -76.1464 iterations 7
Cbc0038I Pass  25: suminf.    0.40571 (2) obj. -77.2686 iterations 2
Cbc0038I Pass  26: suminf.    0.14786 (2) obj. -76.1464 iterations 3
Cbc0038I Pass  27: suminf.    0.14786 (2) obj. -76.1464 iterations 0
Cbc0038I Pass  28: suminf.    0.36869 (1) obj. -76.1464 iterations 1
Cbc0038I Pass  29: suminf.    0.12000 (1) obj. -86.84 iterations 1
Cbc0038I Pass  30: suminf.    0.71207 (4) obj. -76.1464 iterations 5
Cbc0038I Pass  31: suminf.    0.56485 (2) obj. -76.1464 iterations 1
Cbc0038I Pass  32: suminf.    0.28667 (2) obj. -88.5067 iterations 2
Cbc0038I Rounding solution of -74 is better than previous of -71

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 8 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -74 to -78 (0.01 seconds)
Cbc0038I Round again with cutoff of -85.893
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    1.15390 (9) obj. -85.893 iterations 1
Cbc0038I Pass  33: suminf.    1.14367 (9) obj. -85.893 iterations 2
Cbc0038I Pass  34: suminf.    0.65608 (4) obj. -85.893 iterations 13
Cbc0038I Pass  35: suminf.    0.60860 (2) obj. -85.893 iterations 1
Cbc0038I Pass  36: suminf.    0.12000 (1) obj. -98.84 iterations 3
Cbc0038I Pass  37: suminf.    0.42109 (1) obj. -85.893 iterations 1
Cbc0038I Pass  38: suminf.    1.63339 (6) obj. -85.893 iterations 10
Cbc0038I Pass  39: suminf.    1.29458 (5) obj. -86.8129 iterations 3
Cbc0038I Pass  40: suminf.    0.55518 (2) obj. -85.893 iterations 5
Cbc0038I Pass  41: suminf.    0.12000 (1) obj. -92.84 iterations 2
Cbc0038I Pass  42: suminf.    0.28156 (1) obj. -85.893 iterations 1
Cbc0038I Pass  43: suminf.    1.91070 (6) obj. -85.893 iterations 11
Cbc0038I Pass  44: suminf.    1.59105 (5) obj. -85.893 iterations 1
Cbc0038I Pass  45: suminf.    0.16528 (1) obj. -85.893 iterations 6
Cbc0038I Pass  46: suminf.    0.12000 (1) obj. -87.84 iterations 1
Cbc0038I Pass  47: suminf.    0.44901 (3) obj. -85.893 iterations 7
Cbc0038I Pass  48: suminf.    0.44000 (2) obj. -86.2 iterations 1
Cbc0038I Pass  49: suminf.    0.25162 (2) obj. -85.893 iterations 2
Cbc0038I Pass  50: suminf.    0.25162 (2) obj. -85.893 iterations 0
Cbc0038I Pass  51: suminf.    0.28156 (1) obj. -85.893 iterations 1
Cbc0038I Pass  52: suminf.    0.12000 (1) obj. -92.84 iterations 1
Cbc0038I Pass  53: suminf.    0.74345 (4) obj. -85.893 iterations 5
Cbc0038I Pass  54: suminf.    0.63939 (3) obj. -87.0376 iterations 1
Cbc0038I Pass  55: suminf.    0.48838 (2) obj. -85.893 iterations 3
Cbc0038I Pass  56: suminf.    0.12000 (1) obj. -88.84 iterations 1
Cbc0038I Pass  57: suminf.    0.18854 (1) obj. -85.893 iterations 1
Cbc0038I Pass  58: suminf.    1.12489 (4) obj. -85.893 iterations 4
Cbc0038I Pass  59: suminf.    0.82545 (3) obj. -87.96 iterations 2
Cbc0038I Pass  60: suminf.    1.10514 (4) obj. -85.893 iterations 7
Cbc0038I Pass  61: suminf.    0.82545 (3) obj. -91.96 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 8 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -78 - took 0.01 seconds
Cbc0012I Integer solution of -78 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 28 rows 32 columns, reduced to 5 rows 7 columns
Cbc0012I Integer solution of -89 found by DiveCoefficient after 13 iterations and 0 nodes (0.06 seconds)
Cbc0031I 4 added rows had average density of 6.25
Cbc0013I At root node, 4 cuts changed objective from -113.46524 to -89 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 43 row cuts average 4.1 elements, 12 column cuts (12 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 13 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 23 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89, took 13 iterations and 0 nodes (0.06 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.07

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 22 (-25) rows, 14 (-10) columns and 65 (-64) elements
Clp1000I sum of infeasibilities 8.76278e-08 - average 3.98308e-09, 4 fixed columns
Coin0506I Presolve 14 (-8) rows, 10 (-4) columns and 41 (-24) elements
Clp0029I End of values pass after 10 iterations
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Clp0000I Optimal - objective value 106.57264
Coin0511I After Postsolve, objective 106.57264, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 106.5726413 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 1 strengthened rows, 0 substitutions
Cgl0004I processed model has 22 rows, 14 columns (13 integer (13 of which binary)) and 66 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 5.419%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 5 integers unsatisfied sum - 0.861819
Cbc0038I Pass   1: suminf.    0.12000 (1) obj. -98.84 iterations 6
Cbc0038I Solution found of -61
Cbc0038I Relaxing continuous gives -61
Cbc0038I Rounding solution of -71 is better than previous of -61

Cbc0038I Before mini branch and bound, 8 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound improved solution from -71 to -89 (0.00 seconds)
Cbc0038I Round again with cutoff of -91.6572
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.12000 (1) obj. -98.84 iterations 0
Cbc0038I Pass   3: suminf.    0.28704 (1) obj. -91.6572 iterations 2
Cbc0038I Pass   4: suminf.    1.38928 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   5: suminf.    0.52987 (2) obj. -91.6572 iterations 2
Cbc0038I Pass   6: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass   7: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass   8: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I Pass   9: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  10: suminf.    1.07893 (4) obj. -91.6572 iterations 4
Cbc0038I Pass  11: suminf.    1.22913 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  12: suminf.    1.07893 (4) obj. -91.6572 iterations 1
Cbc0038I Pass  13: suminf.    1.43469 (5) obj. -91.6572 iterations 4
Cbc0038I Pass  14: suminf.    1.43469 (5) obj. -91.6572 iterations 1
Cbc0038I Pass  15: suminf.    2.25854 (5) obj. -91.6572 iterations 3
Cbc0038I Pass  16: suminf.    0.19954 (2) obj. -91.6572 iterations 4
Cbc0038I Pass  17: suminf.    0.19954 (2) obj. -91.6572 iterations 0
Cbc0038I Pass  18: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  19: suminf.    0.19954 (2) obj. -91.6572 iterations 2
Cbc0038I Pass  20: suminf.    0.37840 (3) obj. -91.6572 iterations 3
Cbc0038I Pass  21: suminf.    1.12624 (4) obj. -91.6572 iterations 3
Cbc0038I Pass  22: suminf.    0.94146 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  23: suminf.    0.92980 (4) obj. -91.6572 iterations 2
Cbc0038I Pass  24: suminf.    0.44170 (1) obj. -91.6572 iterations 6
Cbc0038I Pass  25: suminf.    0.12000 (1) obj. -91.6572 iterations 2
Cbc0038I Pass  26: suminf.    0.28704 (1) obj. -91.6572 iterations 1
Cbc0038I Pass  27: suminf.    0.52987 (2) obj. -91.6572 iterations 6
Cbc0038I Pass  28: suminf.    0.52987 (2) obj. -91.6572 iterations 1
Cbc0038I Pass  29: suminf.    0.75877 (4) obj. -91.6572 iterations 5
Cbc0038I Pass  30: suminf.    0.41143 (1) obj. -91.6572 iterations 5
Cbc0038I Pass  31: suminf.    0.12000 (1) obj. -98.84 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4 integers at bound fixed and 0 continuous
Cbc0038I Full problem 22 rows 14 columns, reduced to 14 rows 10 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I After 0.01 seconds - Feasibility pump exiting with objective of -89 - took 0.01 seconds
Cbc0012I Integer solution of -89 found by feasibility pump after 0 iterations and 0 nodes (0.01 seconds)
Cbc0038I Full problem 22 rows 14 columns, reduced to 7 rows 6 columns
Cbc0031I 5 added rows had average density of 6.6
Cbc0013I At root node, 22 cuts changed objective from -106.57264 to -89.749177 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 29 row cuts average 3.5 elements, 2 column cuts (2 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 39 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 53 row cuts average 7.6 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89, took 49 iterations and 0 nodes (0.01 seconds)
Cbc0035I Maximum depth 0, 3 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.02

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 28 (-19) rows, 32 (-13) columns and 172 (-189) elements
Clp1000I sum of infeasibilities 1.61697e-09 - average 5.77489e-11, 9 fixed columns
Coin0506I Presolve 12 (-16) rows, 15 (-17) columns and 49 (-123) elements
Clp0029I End of values pass after 15 iterations
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Coin0511I After Postsolve, objective 136.24642, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Clp0000I Optimal - objective value 136.24642
Coin0511I After Postsolve, objective 136.24642, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 136.2464228 - 0 iterations time 0.002, Presolve 0.00, Idiot 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 3 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 28 rows, 32 columns (32 integer (32 of which binary)) and 179 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 7.452%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 9 integers unsatisfied sum - 2.29784
Cbc0038I Pass   1: suminf.    1.03553 (5) obj. -84.0198 iterations 3
Cbc0038I Pass   2: suminf.    1.03553 (5) obj. -84.0198 iterations 1
Cbc0038I Solution found of -71
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 4 rows 5 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of -76.1464
Cbc0038I Pass   3: suminf.    1.03553 (5) obj. -84.0198 iterations 0
Cbc0038I Pass   4: suminf.    1.03553 (5) obj. -84.0198 iterations 1
Cbc0038I Pass   5: suminf.    0.22973 (4) obj. -76.1464 iterations 8
Cbc0038I Pass   6: suminf.    0.12000 (1) obj. -98.84 iterations 6
Cbc0038I Pass   7: suminf.    0.35224 (1) obj. -76.1464 iterations 2
Cbc0038I Pass   8: suminf.    0.64609 (3) obj. -76.1464 iterations 6
Cbc0038I Pass   9: suminf.    0.58974 (3) obj. -78.7147 iterations 2
Cbc0038I Pass  10: suminf.    0.07155 (1) obj. -76.1464 iterations 5
Cbc0038I Pass  11: suminf.    0.07155 (1) obj. -76.1464 iterations 0
Cbc0038I Pass  12: suminf.    0.12000 (1) obj. -98.84 iterations 3
Cbc0038I Pass  13: suminf.    0.35224 (1) obj. -76.1464 iterations 2
Cbc0038I Pass  14: suminf.    0.22739 (2) obj. -76.1464 iterations 2
Cbc0038I Pass  15: suminf.    0.22739 (2) obj. -76.1464 iterations 0
Cbc0038I Pass  16: suminf.    0.65391 (5) obj. -76.1464 iterations 8
Cbc0038I Pass  17: suminf.    0.65391 (5) obj. -76.1464 iterations 0
Cbc0038I Pass  18: suminf.    0.12000 (1) obj. -91.84 iterations 5
Cbc0038I Pass  19: suminf.    0.48497 (1) obj. -76.1464 iterations 2
Cbc0038I Pass  20: suminf.    0.66545 (2) obj. -84.3418 iterations 4
Cbc0038I Pass  21: suminf.    0.45441 (2) obj. -76.1464 iterations 2
Cbc0038I Pass  22: suminf.    0.42857 (1) obj. -82.4286 iterations 2
Cbc0038I Pass  23: suminf.    0.28248 (1) obj. -76.1464 iterations 1
Cbc0038I Pass  24: suminf.    0.68264 (3) obj. -76.1464 iterations 7
Cbc0038I Pass  25: suminf.    0.40571 (2) obj. -77.2686 iterations 2
Cbc0038I Pass  26: suminf.    0.14786 (2) obj. -76.1464 iterations 3
Cbc0038I Pass  27: suminf.    0.14786 (2) obj. -76.1464 iterations 0
Cbc0038I Pass  28: suminf.    0.36869 (1) obj. -76.1464 iterations 1
Cbc0038I Pass  29: suminf.    0.12000 (1) obj. -86.84 iterations 1
Cbc0038I Pass  30: suminf.    0.71207 (4) obj. -76.1464 iterations 5
Cbc0038I Pass  31: suminf.    0.56485 (2) obj. -76.1464 iterations 1
Cbc0038I Pass  32: suminf.    0.28667 (2) obj. -88.5067 iterations 2
Cbc0038I Rounding solution of -74 is better than previous of -71

Cbc0038I Before mini branch and bound, 12 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 8 rows 11 columns
Cbc0038I Mini branch and bound improved solution from -74 to -78 (0.01 seconds)
Cbc0038I Round again with cutoff of -85.893
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  32: suminf.    1.15390 (9) obj. -85.893 iterations 1
Cbc0038I Pass  33: suminf.    1.14367 (9) obj. -85.893 iterations 2
Cbc0038I Pass  34: suminf.    0.65608 (4) obj. -85.893 iterations 13
Cbc0038I Pass  35: suminf.    0.60860 (2) obj. -85.893 iterations 1
Cbc0038I Pass  36: suminf.    0.12000 (1) obj. -98.84 iterations 3
Cbc0038I Pass  37: suminf.    0.42109 (1) obj. -85.893 iterations 1
Cbc0038I Pass  38: suminf.    1.63339 (6) obj. -85.893 iterations 10
Cbc0038I Pass  39: suminf.    1.29458 (5) obj. -86.8129 iterations 3
Cbc0038I Pass  40: suminf.    0.55518 (2) obj. -85.893 iterations 5
Cbc0038I Pass  41: suminf.    0.12000 (1) obj. -92.84 iterations 2
Cbc0038I Pass  42: suminf.    0.28156 (1) obj. -85.893 iterations 1
Cbc0038I Pass  43: suminf.    1.91070 (6) obj. -85.893 iterations 11
Cbc0038I Pass  44: suminf.    1.59105 (5) obj. -85.893 iterations 1
Cbc0038I Pass  45: suminf.    0.16528 (1) obj. -85.893 iterations 6
Cbc0038I Pass  46: suminf.    0.12000 (1) obj. -87.84 iterations 1
Cbc0038I Pass  47: suminf.    0.44901 (3) obj. -85.893 iterations 7
Cbc0038I Pass  48: suminf.    0.44000 (2) obj. -86.2 iterations 1
Cbc0038I Pass  49: suminf.    0.25162 (2) obj. -85.893 iterations 2
Cbc0038I Pass  50: suminf.    0.25162 (2) obj. -85.893 iterations 0
Cbc0038I Pass  51: suminf.    0.28156 (1) obj. -85.893 iterations 1
Cbc0038I Pass  52: suminf.    0.12000 (1) obj. -92.84 iterations 1
Cbc0038I Pass  53: suminf.    0.74345 (4) obj. -85.893 iterations 5
Cbc0038I Pass  54: suminf.    0.63939 (3) obj. -87.0376 iterations 1
Cbc0038I Pass  55: suminf.    0.48838 (2) obj. -85.893 iterations 3
Cbc0038I Pass  56: suminf.    0.12000 (1) obj. -88.84 iterations 1
Cbc0038I Pass  57: suminf.    0.18854 (1) obj. -85.893 iterations 1
Cbc0038I Pass  58: suminf.    1.12489 (4) obj. -85.893 iterations 4
Cbc0038I Pass  59: suminf.    0.82545 (3) obj. -87.96 iterations 2
Cbc0038I Pass  60: suminf.    1.10514 (4) obj. -85.893 iterations 7
Cbc0038I Pass  61: suminf.    0.82545 (3) obj. -91.96 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 11 integers at bound fixed and 0 continuous
Cbc0038I Full problem 28 rows 32 columns, reduced to 8 rows 11 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I After 0.02 seconds - Feasibility pump exiting with objective of -78 - took 0.01 seconds
Cbc0012I Integer solution of -78 found by feasibility pump after 0 iterations and 0 nodes (0.02 seconds)
Cbc0038I Full problem 28 rows 32 columns, reduced to 5 rows 7 columns
Cbc0012I Integer solution of -89 found by DiveCoefficient after 13 iterations and 0 nodes (0.06 seconds)
Cbc0031I 4 added rows had average density of 6.25
Cbc0013I At root node, 4 cuts changed objective from -113.46524 to -89 in 4 passes
Cbc0014I Cut generator 0 (Probing) - 43 row cuts average 4.1 elements, 12 column cuts (12 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 13 row cuts average 7.9 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 5.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 1 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 23 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 1 row cuts average 14.0 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is -100
Cbc0001I Search completed - best objective -89, took 13 iterations and 0 nodes (0.06 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.04   (Wallclock seconds):       0.06

