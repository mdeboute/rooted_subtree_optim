Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 115 (-40) rows, 65 (-13) columns and 352 (-101) elements
Clp1000I sum of infeasibilities 4.38304e-05 - average 3.81134e-07, 28 fixed columns
Coin0506I Presolve 54 (-61) rows, 32 (-33) columns and 165 (-187) elements
Clp0029I End of values pass after 32 iterations
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Coin0511I After Postsolve, objective 90.151638, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Coin0511I After Postsolve, objective 90.151638, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 90.15163759 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 115 rows, 65 columns (64 integer (64 of which binary)) and 352 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.327%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 5.68188
Cbc0038I Pass   1: suminf.    0.35714 (1) obj. -70.2155 iterations 16
Cbc0038I Solution found of -63.9183
Cbc0038I Relaxing continuous gives -63.9183
Cbc0038I Rounding solution of -66.157 is better than previous of -63.9183

Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 26 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -66.157 to -70.577 (0.02 seconds)
Cbc0038I Round again with cutoff of -72.5346
Cbc0038I Pass   2: suminf.    0.49679 (3) obj. -72.5346 iterations 1
Cbc0038I Pass   3: suminf.    0.35993 (2) obj. -72.5346 iterations 2
Cbc0038I Pass   4: suminf.    0.44144 (3) obj. -72.5346 iterations 2
Cbc0038I Pass   5: suminf.    0.40565 (2) obj. -72.5346 iterations 3
Cbc0038I Pass   6: suminf.    4.28457 (12) obj. -72.5346 iterations 14
Cbc0038I Pass   7: suminf.    1.57018 (8) obj. -72.5346 iterations 7
Cbc0038I Pass   8: suminf.    1.12257 (6) obj. -72.5346 iterations 2
Cbc0038I Pass   9: suminf.    0.96559 (4) obj. -72.5346 iterations 11
Cbc0038I Pass  10: suminf.    0.48959 (3) obj. -72.5346 iterations 4
Cbc0038I Pass  11: suminf.    0.96559 (4) obj. -72.5346 iterations 3
Cbc0038I Pass  12: suminf.    2.03846 (8) obj. -72.5346 iterations 12
Cbc0038I Pass  13: suminf.    0.85365 (5) obj. -72.5346 iterations 6
Cbc0038I Pass  14: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  15: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  16: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  17: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  18: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  19: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  20: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  21: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  22: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  23: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  24: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  25: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  26: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  27: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  28: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  29: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  30: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  31: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 37 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -70.577 to -74.1265 (0.03 seconds)
Cbc0038I Round again with cutoff of -77.3316
Cbc0038I Pass  31: suminf.    0.64286 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  32: suminf.    0.64286 (3) obj. -77.3316 iterations 0
Cbc0038I Pass  33: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  34: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  35: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  36: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  37: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  38: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  39: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  40: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  41: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  42: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  43: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  44: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  45: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  46: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  47: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  48: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  49: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  50: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  51: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  52: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  53: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  54: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  55: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  56: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  57: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  58: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  59: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  60: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 26 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -74.1265 - took 0.03 seconds
Cbc0012I Integer solution of -74.126471 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 115 rows 65 columns, reduced to 29 rows 19 columns
Cbc0031I 13 added rows had average density of 27.538462
Cbc0013I At root node, 13 cuts changed objective from -90.151638 to -78.877855 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 306 row cuts average 3.1 elements, 9 column cuts (9 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 24 row cuts average 59.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 95 row cuts average 48.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0012I Integer solution of -74.329841 found by DiveCoefficient after 376 iterations and 10 nodes (0.10 seconds)
Cbc0012I Integer solution of -74.747571 found by rounding after 389 iterations and 11 nodes (0.10 seconds)
Cbc0001I Search completed - best objective -74.74757069999998, took 515 iterations and 16 nodes (0.11 seconds)
Cbc0032I Strong branching done 80 times (696 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 7, 83 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.11

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 93 (-61) rows, 106 (-46) columns and 1661 (-1642) elements
Clp1000I sum of infeasibilities 4.91726e-08 - average 5.28737e-10, 30 fixed columns
Coin0506I Presolve 63 (-30) rows, 76 (-30) columns and 839 (-822) elements
Clp0029I End of values pass after 76 iterations
Clp0014I Perturbing problem by 0.001% of 2.0785389 - largest nonzero change 2.9510155e-05 ( 0.0016580886%) - largest zero change 2.9053431e-05
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Coin0511I After Postsolve, objective 125.97021, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.9939145 - largest nonzero change 2.3081006e-05 ( 0.0015420975%) - largest zero change 2.8981471e-05
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Coin0511I After Postsolve, objective 125.97021, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 125.9702147 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 93 rows, 106 columns (106 integer (106 of which binary)) and 1663 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.865%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 9.31395
Cbc0038I Pass   1: suminf.    3.13917 (30) obj. -82.7476 iterations 10
Cbc0038I Pass   2: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   3: suminf.    1.91648 (20) obj. -70.4626 iterations 10
Cbc0038I Pass   4: suminf.    0.82620 (10) obj. -58.0013 iterations 10
Cbc0038I Solution found of -46.9816
Cbc0038I Rounding solution of -52.8122 is better than previous of -46.9816

Cbc0038I Before mini branch and bound, 61 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 12 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -52.8122 to -72.0973 (0.03 seconds)
Cbc0038I Round again with cutoff of -76.7712
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   5: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   6: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   7: suminf.    1.90512 (18) obj. -76.7712 iterations 28
Cbc0038I Pass   8: suminf.    1.79826 (18) obj. -76.7712 iterations 1
Cbc0038I Pass   9: suminf.    1.83120 (8) obj. -76.7712 iterations 14
Cbc0038I Pass  10: suminf.    1.81199 (9) obj. -76.7712 iterations 3
Cbc0038I Pass  11: suminf.    0.55243 (3) obj. -76.7712 iterations 12
Cbc0038I Pass  12: suminf.    0.49601 (2) obj. -76.7712 iterations 2
Cbc0038I Pass  13: suminf.    0.35082 (2) obj. -78.9839 iterations 1
Cbc0038I Pass  14: suminf.    0.21693 (2) obj. -76.7712 iterations 1
Cbc0038I Pass  15: suminf.    0.55243 (3) obj. -76.7712 iterations 4
Cbc0038I Pass  16: suminf.    2.29988 (14) obj. -76.7712 iterations 27
Cbc0038I Pass  17: suminf.    2.28734 (13) obj. -76.7712 iterations 12
Cbc0038I Pass  18: suminf.    0.86048 (2) obj. -76.7712 iterations 16
Cbc0038I Pass  19: suminf.    0.65574 (2) obj. -77.5901 iterations 2
Cbc0038I Pass  20: suminf.    3.70091 (19) obj. -76.7712 iterations 40
Cbc0038I Pass  21: suminf.    3.36029 (17) obj. -76.7712 iterations 7
Cbc0038I Pass  22: suminf.    0.82553 (5) obj. -76.7712 iterations 26
Cbc0038I Pass  23: suminf.    0.73028 (6) obj. -76.7712 iterations 2
Cbc0038I Pass  24: suminf.    1.32716 (6) obj. -76.7712 iterations 9
Cbc0038I Pass  25: suminf.    1.08738 (4) obj. -76.7712 iterations 3
Cbc0038I Pass  26: suminf.    0.53803 (2) obj. -76.7712 iterations 8
Cbc0038I Pass  27: suminf.    0.38021 (2) obj. -76.7712 iterations 5
Cbc0038I Pass  28: suminf.    0.33382 (2) obj. -76.7712 iterations 4
Cbc0038I Pass  29: suminf.    0.90486 (3) obj. -76.7712 iterations 5
Cbc0038I Pass  30: suminf.    0.90486 (3) obj. -76.7712 iterations 3
Cbc0038I Pass  31: suminf.    0.40739 (3) obj. -76.7712 iterations 3
Cbc0038I Pass  32: suminf.    0.40739 (3) obj. -76.7712 iterations 0
Cbc0038I Pass  33: suminf.    0.90486 (3) obj. -76.7712 iterations 5
Cbc0038I Pass  34: suminf.    2.62174 (11) obj. -76.7712 iterations 16
Cbc0038I Rounding solution of -73.3469 is better than previous of -72.0973

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 51 rows 59 columns
Cbc0038I Mini branch and bound improved solution from -73.3469 to -74.1265 (0.06 seconds)
Cbc0038I Round again with cutoff of -85.184
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  34: suminf.    3.42918 (34) obj. -85.184 iterations 1
Cbc0038I Pass  35: suminf.    3.42918 (34) obj. -85.184 iterations 1
Cbc0038I Pass  36: suminf.    2.41235 (20) obj. -85.184 iterations 20
Cbc0038I Pass  37: suminf.    2.34317 (20) obj. -85.4608 iterations 5
Cbc0038I Pass  38: suminf.    2.79239 (14) obj. -85.184 iterations 19
Cbc0038I Pass  39: suminf.    2.76268 (15) obj. -85.184 iterations 3
Cbc0038I Pass  40: suminf.    1.04821 (6) obj. -85.184 iterations 29
Cbc0038I Pass  41: suminf.    1.00408 (6) obj. -85.184 iterations 2
Cbc0038I Pass  42: suminf.    0.93576 (6) obj. -85.184 iterations 6
Cbc0038I Pass  43: suminf.    0.93576 (6) obj. -85.184 iterations 0
Cbc0038I Pass  44: suminf.    1.00408 (6) obj. -85.184 iterations 6
Cbc0038I Pass  45: suminf.    3.26263 (15) obj. -85.184 iterations 19
Cbc0038I Pass  46: suminf.    2.75561 (12) obj. -85.184 iterations 3
Cbc0038I Pass  47: suminf.    1.81749 (6) obj. -85.184 iterations 16
Cbc0038I Pass  48: suminf.    1.35609 (7) obj. -85.184 iterations 1
Cbc0038I Pass  49: suminf.    1.82984 (7) obj. -85.184 iterations 6
Cbc0038I Pass  50: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  51: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  52: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  53: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I Pass  54: suminf.    1.82984 (7) obj. -85.184 iterations 4
Cbc0038I Pass  55: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  56: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  57: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  58: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I Pass  59: suminf.    1.82984 (7) obj. -85.184 iterations 4
Cbc0038I Pass  60: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  61: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  62: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  63: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 14 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -74.1265 - took 0.05 seconds
Cbc0012I Integer solution of -74.126471 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 93 rows 106 columns, reduced to 3 rows 5 columns
Cbc0031I 35 added rows had average density of 9.4
Cbc0013I At root node, 35 cuts changed objective from -118.83549 to -76.392053 in 13 passes
Cbc0014I Cut generator 0 (Probing) - 552 row cuts average 2.0 elements, 25 column cuts (25 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 57 row cuts average 42.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 5 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 55 row cuts average 12.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 132 row cuts average 41.5 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 19 row cuts average 28.7 elements, 0 column cuts (0 active)  in 0.091 seconds - new frequency is 1
Cbc0010I After 4 nodes, 3 on tree, -74.126471 best solution, best possible -76.21898 (0.58 seconds)
Cbc0012I Integer solution of -74.329841 found by rounding after 405 iterations and 6 nodes (0.67 seconds)
Cbc0012I Integer solution of -74.747571 found by rounding after 510 iterations and 12 nodes (0.89 seconds)
Cbc0001I Search completed - best objective -74.74757069999998, took 552 iterations and 14 nodes (0.95 seconds)
Cbc0032I Strong branching done 106 times (662 iterations), fathomed 1 nodes and fixed 8 variables
Cbc0035I Maximum depth 6, 79 variables fixed on reduced cost
Total time (CPU seconds):       0.58   (Wallclock seconds):       0.96

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 115 (-40) rows, 65 (-13) columns and 352 (-101) elements
Clp1000I sum of infeasibilities 4.38304e-05 - average 3.81134e-07, 28 fixed columns
Coin0506I Presolve 54 (-61) rows, 32 (-33) columns and 165 (-187) elements
Clp0029I End of values pass after 32 iterations
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Coin0511I After Postsolve, objective 90.151638, infeasibilities - dual 0 (0), primal 0 (0)
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Clp0000I Optimal - objective value 90.151638
Coin0511I After Postsolve, objective 90.151638, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 90.15163759 - 0 iterations time 0.012, Presolve 0.00, Idiot 0.01

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 115 rows, 65 columns (64 integer (64 of which binary)) and 352 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 1.327%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 16 integers unsatisfied sum - 5.68188
Cbc0038I Pass   1: suminf.    0.35714 (1) obj. -70.2155 iterations 16
Cbc0038I Solution found of -63.9183
Cbc0038I Relaxing continuous gives -63.9183
Cbc0038I Rounding solution of -66.157 is better than previous of -63.9183

Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 26 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -66.157 to -70.577 (0.01 seconds)
Cbc0038I Round again with cutoff of -72.5346
Cbc0038I Pass   2: suminf.    0.49679 (3) obj. -72.5346 iterations 1
Cbc0038I Pass   3: suminf.    0.35993 (2) obj. -72.5346 iterations 2
Cbc0038I Pass   4: suminf.    0.44144 (3) obj. -72.5346 iterations 2
Cbc0038I Pass   5: suminf.    0.40565 (2) obj. -72.5346 iterations 3
Cbc0038I Pass   6: suminf.    4.28457 (12) obj. -72.5346 iterations 14
Cbc0038I Pass   7: suminf.    1.57018 (8) obj. -72.5346 iterations 7
Cbc0038I Pass   8: suminf.    1.12257 (6) obj. -72.5346 iterations 2
Cbc0038I Pass   9: suminf.    0.96559 (4) obj. -72.5346 iterations 11
Cbc0038I Pass  10: suminf.    0.48959 (3) obj. -72.5346 iterations 4
Cbc0038I Pass  11: suminf.    0.96559 (4) obj. -72.5346 iterations 3
Cbc0038I Pass  12: suminf.    2.03846 (8) obj. -72.5346 iterations 12
Cbc0038I Pass  13: suminf.    0.85365 (5) obj. -72.5346 iterations 6
Cbc0038I Pass  14: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  15: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  16: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  17: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  18: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  19: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  20: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  21: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  22: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  23: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  24: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  25: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  26: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I Pass  27: suminf.    1.63968 (7) obj. -72.5346 iterations 5
Cbc0038I Pass  28: suminf.    0.85365 (5) obj. -72.5346 iterations 2
Cbc0038I Pass  29: suminf.    0.30647 (4) obj. -72.5346 iterations 1
Cbc0038I Pass  30: suminf.    1.26167 (6) obj. -72.5346 iterations 7
Cbc0038I Pass  31: suminf.    1.11763 (5) obj. -72.5346 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 40 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 37 rows 25 columns
Cbc0038I Mini branch and bound improved solution from -70.577 to -74.1265 (0.03 seconds)
Cbc0038I Round again with cutoff of -77.3316
Cbc0038I Pass  31: suminf.    0.64286 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  32: suminf.    0.64286 (3) obj. -77.3316 iterations 0
Cbc0038I Pass  33: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  34: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  35: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  36: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  37: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  38: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  39: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  40: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  41: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  42: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  43: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  44: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  45: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  46: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  47: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  48: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  49: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  50: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  51: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  52: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  53: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  54: suminf.    0.51917 (3) obj. -77.3316 iterations 4
Cbc0038I Pass  55: suminf.    0.22426 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  56: suminf.    0.75622 (3) obj. -77.3316 iterations 9
Cbc0038I Pass  57: suminf.    0.66414 (3) obj. -77.3316 iterations 1
Cbc0038I Pass  58: suminf.    0.86053 (3) obj. -77.3316 iterations 3
Cbc0038I Pass  59: suminf.    0.70538 (3) obj. -77.3316 iterations 2
Cbc0038I Pass  60: suminf.    0.64286 (3) obj. -77.3316 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 115 rows 65 columns, reduced to 26 rows 17 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -74.1265 - took 0.03 seconds
Cbc0012I Integer solution of -74.126471 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 115 rows 65 columns, reduced to 29 rows 19 columns
Cbc0031I 13 added rows had average density of 27.538462
Cbc0013I At root node, 13 cuts changed objective from -90.151638 to -78.877855 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 306 row cuts average 3.1 elements, 9 column cuts (9 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 24 row cuts average 59.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 6 row cuts average 4.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 95 row cuts average 48.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0012I Integer solution of -74.329841 found by DiveCoefficient after 376 iterations and 10 nodes (0.09 seconds)
Cbc0012I Integer solution of -74.747571 found by rounding after 389 iterations and 11 nodes (0.09 seconds)
Cbc0001I Search completed - best objective -74.74757069999998, took 515 iterations and 16 nodes (0.10 seconds)
Cbc0032I Strong branching done 80 times (696 iterations), fathomed 0 nodes and fixed 2 variables
Cbc0035I Maximum depth 7, 83 variables fixed on reduced cost
Total time (CPU seconds):       0.10   (Wallclock seconds):       0.10

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 93 (-62) rows, 106 (-47) columns and 1661 (-1643) elements
Clp1000I sum of infeasibilities 4.91726e-08 - average 5.28737e-10, 30 fixed columns
Coin0506I Presolve 63 (-30) rows, 76 (-30) columns and 839 (-822) elements
Clp0029I End of values pass after 76 iterations
Clp0014I Perturbing problem by 0.001% of 2.0785389 - largest nonzero change 2.9510155e-05 ( 0.0016580886%) - largest zero change 2.9053431e-05
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Coin0511I After Postsolve, objective 125.97021, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 1.9939145 - largest nonzero change 2.3081006e-05 ( 0.0015420975%) - largest zero change 2.8981471e-05
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Clp0000I Optimal - objective value 125.97021
Coin0511I After Postsolve, objective 125.97021, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 125.9702147 - 0 iterations time 0.022, Presolve 0.00, Idiot 0.02

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0003I 0 fixed, 0 tightened bounds, 2 strengthened rows, 0 substitutions
Cgl0004I processed model has 93 rows, 106 columns (106 integer (106 of which binary)) and 1663 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.865%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 42 integers unsatisfied sum - 9.31395
Cbc0038I Pass   1: suminf.    3.13917 (30) obj. -82.7476 iterations 10
Cbc0038I Pass   2: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   3: suminf.    1.91648 (20) obj. -70.4626 iterations 10
Cbc0038I Pass   4: suminf.    0.82620 (10) obj. -58.0013 iterations 10
Cbc0038I Solution found of -46.9816
Cbc0038I Rounding solution of -52.8122 is better than previous of -46.9816

Cbc0038I Before mini branch and bound, 61 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 12 rows 15 columns
Cbc0038I Mini branch and bound improved solution from -52.8122 to -72.0973 (0.03 seconds)
Cbc0038I Round again with cutoff of -76.7712
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   5: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   6: suminf.    3.13917 (30) obj. -82.7476 iterations 0
Cbc0038I Pass   7: suminf.    1.90512 (18) obj. -76.7712 iterations 28
Cbc0038I Pass   8: suminf.    1.79826 (18) obj. -76.7712 iterations 1
Cbc0038I Pass   9: suminf.    1.83120 (8) obj. -76.7712 iterations 14
Cbc0038I Pass  10: suminf.    1.81199 (9) obj. -76.7712 iterations 3
Cbc0038I Pass  11: suminf.    0.55243 (3) obj. -76.7712 iterations 12
Cbc0038I Pass  12: suminf.    0.49601 (2) obj. -76.7712 iterations 2
Cbc0038I Pass  13: suminf.    0.35082 (2) obj. -78.9839 iterations 1
Cbc0038I Pass  14: suminf.    0.21693 (2) obj. -76.7712 iterations 1
Cbc0038I Pass  15: suminf.    0.55243 (3) obj. -76.7712 iterations 4
Cbc0038I Pass  16: suminf.    2.29988 (14) obj. -76.7712 iterations 27
Cbc0038I Pass  17: suminf.    2.28734 (13) obj. -76.7712 iterations 12
Cbc0038I Pass  18: suminf.    0.86048 (2) obj. -76.7712 iterations 16
Cbc0038I Pass  19: suminf.    0.65574 (2) obj. -77.5901 iterations 2
Cbc0038I Pass  20: suminf.    3.70091 (19) obj. -76.7712 iterations 40
Cbc0038I Pass  21: suminf.    3.36029 (17) obj. -76.7712 iterations 7
Cbc0038I Pass  22: suminf.    0.82553 (5) obj. -76.7712 iterations 26
Cbc0038I Pass  23: suminf.    0.73028 (6) obj. -76.7712 iterations 2
Cbc0038I Pass  24: suminf.    1.32716 (6) obj. -76.7712 iterations 9
Cbc0038I Pass  25: suminf.    1.08738 (4) obj. -76.7712 iterations 3
Cbc0038I Pass  26: suminf.    0.53803 (2) obj. -76.7712 iterations 8
Cbc0038I Pass  27: suminf.    0.38021 (2) obj. -76.7712 iterations 5
Cbc0038I Pass  28: suminf.    0.33382 (2) obj. -76.7712 iterations 4
Cbc0038I Pass  29: suminf.    0.90486 (3) obj. -76.7712 iterations 5
Cbc0038I Pass  30: suminf.    0.90486 (3) obj. -76.7712 iterations 3
Cbc0038I Pass  31: suminf.    0.40739 (3) obj. -76.7712 iterations 3
Cbc0038I Pass  32: suminf.    0.40739 (3) obj. -76.7712 iterations 0
Cbc0038I Pass  33: suminf.    0.90486 (3) obj. -76.7712 iterations 5
Cbc0038I Pass  34: suminf.    2.62174 (11) obj. -76.7712 iterations 16
Cbc0038I Rounding solution of -73.3469 is better than previous of -72.0973

Cbc0038I Before mini branch and bound, 46 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 51 rows 59 columns
Cbc0038I Mini branch and bound improved solution from -73.3469 to -74.1265 (0.06 seconds)
Cbc0038I Round again with cutoff of -85.184
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  34: suminf.    3.42918 (34) obj. -85.184 iterations 1
Cbc0038I Pass  35: suminf.    3.42918 (34) obj. -85.184 iterations 1
Cbc0038I Pass  36: suminf.    2.41235 (20) obj. -85.184 iterations 20
Cbc0038I Pass  37: suminf.    2.34317 (20) obj. -85.4608 iterations 5
Cbc0038I Pass  38: suminf.    2.79239 (14) obj. -85.184 iterations 19
Cbc0038I Pass  39: suminf.    2.76268 (15) obj. -85.184 iterations 3
Cbc0038I Pass  40: suminf.    1.04821 (6) obj. -85.184 iterations 29
Cbc0038I Pass  41: suminf.    1.00408 (6) obj. -85.184 iterations 2
Cbc0038I Pass  42: suminf.    0.93576 (6) obj. -85.184 iterations 6
Cbc0038I Pass  43: suminf.    0.93576 (6) obj. -85.184 iterations 0
Cbc0038I Pass  44: suminf.    1.00408 (6) obj. -85.184 iterations 6
Cbc0038I Pass  45: suminf.    3.26263 (15) obj. -85.184 iterations 19
Cbc0038I Pass  46: suminf.    2.75561 (12) obj. -85.184 iterations 3
Cbc0038I Pass  47: suminf.    1.81749 (6) obj. -85.184 iterations 16
Cbc0038I Pass  48: suminf.    1.35609 (7) obj. -85.184 iterations 1
Cbc0038I Pass  49: suminf.    1.82984 (7) obj. -85.184 iterations 6
Cbc0038I Pass  50: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  51: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  52: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  53: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I Pass  54: suminf.    1.82984 (7) obj. -85.184 iterations 4
Cbc0038I Pass  55: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  56: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  57: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  58: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I Pass  59: suminf.    1.82984 (7) obj. -85.184 iterations 4
Cbc0038I Pass  60: suminf.    1.77644 (7) obj. -85.184 iterations 2
Cbc0038I Pass  61: suminf.    1.67841 (6) obj. -85.184 iterations 5
Cbc0038I Pass  62: suminf.    1.62562 (6) obj. -85.184 iterations 1
Cbc0038I Pass  63: suminf.    1.62562 (6) obj. -85.184 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 0 continuous
Cbc0038I Full problem 93 rows 106 columns, reduced to 14 rows 21 columns
Cbc0038I Mini branch and bound did not improve solution (0.08 seconds)
Cbc0038I After 0.08 seconds - Feasibility pump exiting with objective of -74.1265 - took 0.06 seconds
Cbc0012I Integer solution of -74.126471 found by feasibility pump after 0 iterations and 0 nodes (0.08 seconds)
Cbc0038I Full problem 93 rows 106 columns, reduced to 3 rows 5 columns
Cbc0031I 35 added rows had average density of 9.4
Cbc0013I At root node, 35 cuts changed objective from -118.83549 to -76.392053 in 13 passes
Cbc0014I Cut generator 0 (Probing) - 552 row cuts average 2.0 elements, 25 column cuts (25 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 57 row cuts average 42.2 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 4 row cuts average 10.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 5 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 55 row cuts average 12.4 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 132 row cuts average 41.5 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 19 row cuts average 28.7 elements, 0 column cuts (0 active)  in 0.094 seconds - new frequency is 1
Cbc0010I After 4 nodes, 3 on tree, -74.126471 best solution, best possible -76.21898 (0.59 seconds)
Cbc0012I Integer solution of -74.329841 found by rounding after 405 iterations and 6 nodes (0.69 seconds)
Cbc0012I Integer solution of -74.747571 found by rounding after 510 iterations and 12 nodes (0.90 seconds)
Cbc0001I Search completed - best objective -74.74757069999998, took 552 iterations and 14 nodes (0.96 seconds)
Cbc0032I Strong branching done 106 times (662 iterations), fathomed 1 nodes and fixed 8 variables
Cbc0035I Maximum depth 6, 79 variables fixed on reduced cost
Total time (CPU seconds):       0.60   (Wallclock seconds):       0.97

