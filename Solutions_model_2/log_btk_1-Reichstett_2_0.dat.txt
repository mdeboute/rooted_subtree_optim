Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 251 (-242) rows, 128 (-119) columns and 624 (-831) elements
Clp0000I Optimal - objective value 116818.93
Coin0511I After Postsolve, objective 116818.93, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 116818.9305 - 101 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 251 rows, 128 columns (127 integer (127 of which binary)) and 624 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.760%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 7.18614
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -21932.3 iterations 59
Cbc0038I Solution found of -21932.3
Cbc0038I Relaxing continuous gives -21932.3
Cbc0038I Rounding solution of -22357.4 is better than previous of -21932.3

Cbc0038I Before mini branch and bound, 110 integers at bound fixed and 0 continuous
Cbc0038I Full problem 251 rows 128 columns, reduced to 28 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -22357.4 to -60269.4 (0.02 seconds)
Cbc0038I Round again with cutoff of -65924.4
Cbc0038I Pass   2: suminf.    0.95807 (3) obj. -65924.4 iterations 3
Cbc0038I Pass   3: suminf.    0.21082 (1) obj. -65924.4 iterations 5
Cbc0038I Pass   4: suminf.    0.44567 (1) obj. -65924.4 iterations 2
Cbc0038I Pass   5: suminf.    1.32136 (13) obj. -65924.4 iterations 27
Cbc0038I Pass   6: suminf.    1.30987 (7) obj. -65924.4 iterations 9
Cbc0038I Pass   7: suminf.    2.38606 (6) obj. -65924.4 iterations 6
Cbc0038I Pass   8: suminf.    2.38606 (6) obj. -65924.4 iterations 0
Cbc0038I Pass   9: suminf.    2.94093 (15) obj. -65924.4 iterations 30
Cbc0038I Pass  10: suminf.    2.17611 (12) obj. -65924.4 iterations 15
Cbc0038I Pass  11: suminf.    3.07269 (14) obj. -65924.4 iterations 18
Cbc0038I Pass  12: suminf.    3.07269 (14) obj. -65924.4 iterations 0
Cbc0038I Pass  13: suminf.    2.15484 (11) obj. -65924.4 iterations 15
Cbc0038I Pass  14: suminf.    2.15484 (11) obj. -65924.4 iterations 0
Cbc0038I Pass  15: suminf.    1.00771 (6) obj. -65924.4 iterations 25
Cbc0038I Pass  16: suminf.    1.00771 (6) obj. -65924.4 iterations 3
Cbc0038I Pass  17: suminf.    1.99075 (12) obj. -65924.4 iterations 13
Cbc0038I Pass  18: suminf.    1.99075 (12) obj. -65924.4 iterations 0
Cbc0038I Pass  19: suminf.    3.64029 (11) obj. -65924.4 iterations 13
Cbc0038I Pass  20: suminf.    1.47948 (7) obj. -65924.4 iterations 5
Cbc0038I Pass  21: suminf.    1.47948 (7) obj. -65924.4 iterations 0
Cbc0038I Pass  22: suminf.    2.50727 (6) obj. -65924.4 iterations 5
Cbc0038I Pass  23: suminf.    2.50727 (6) obj. -65924.4 iterations 0
Cbc0038I Pass  24: suminf.    2.65690 (8) obj. -65924.4 iterations 19
Cbc0038I Pass  25: suminf.    2.65690 (8) obj. -65924.4 iterations 7
Cbc0038I Pass  26: suminf.    1.01217 (3) obj. -65924.4 iterations 11
Cbc0038I Pass  27: suminf.    1.22417 (3) obj. -65924.4 iterations 2
Cbc0038I Pass  28: suminf.    3.12684 (9) obj. -65924.4 iterations 20
Cbc0038I Pass  29: suminf.    1.87031 (5) obj. -65924.4 iterations 8
Cbc0038I Pass  30: suminf.    1.32533 (4) obj. -65924.4 iterations 6
Cbc0038I Pass  31: suminf.    0.88943 (3) obj. -65924.4 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous
Cbc0038I Full problem 251 rows 128 columns, reduced to 42 rows 47 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -60269.4 - took 0.03 seconds
Cbc0012I Integer solution of -60269.425 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 251 rows 128 columns, reduced to 28 rows 18 columns
Cbc0031I 27 added rows had average density of 11.888889
Cbc0013I At root node, 27 cuts changed objective from -116818.93 to -63468.616 in 24 passes
Cbc0014I Cut generator 0 (Probing) - 4694 row cuts average 3.9 elements, 9 column cuts (9 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 227 row cuts average 54.8 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 5 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 95 row cuts average 43.5 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0001I Search completed - best objective -60269.42499999999, took 887 iterations and 2 nodes (0.23 seconds)
Cbc0032I Strong branching done 122 times (1831 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.24   (Wallclock seconds):       0.24

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 280 (-212) rows, 283 (-207) columns and 9563 (-21782) elements
Clp1000I sum of infeasibilities 0.00121741 - average 4.34788e-06, 37 fixed columns
Coin0506I Presolve 228 (-52) rows, 235 (-48) columns and 6810 (-2753) elements
Clp0029I End of values pass after 235 iterations
Clp0014I Perturbing problem by 0.001% of 4.0467341 - largest nonzero change 2.965034e-05 ( 0.0027958207%) - largest zero change 2.8551193e-05
Clp0000I Optimal - objective value 157312.94
Clp0000I Optimal - objective value 157312.94
Coin0511I After Postsolve, objective 157312.94, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.8988464 - largest nonzero change 2.9989845e-05 ( 0.0028014657%) - largest zero change 2.8474181e-05
Clp0000I Optimal - objective value 161275.6
Clp0000I Optimal - objective value 161275.6
Clp0000I Optimal - objective value 161275.6
Coin0511I After Postsolve, objective 161275.6, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 161275.6 - 0 iterations time 0.172, Presolve 0.00, Idiot 0.17

Starting MIP optimization
Cgl0004I processed model has 280 rows, 283 columns (283 integer (283 of which binary)) and 9563 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 5.885%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 148 integers unsatisfied sum - 53.7071
Cbc0038I Pass   1: suminf.    4.72799 (25) obj. -55755 iterations 163
Cbc0038I Pass   2: suminf.    4.72799 (25) obj. -55755 iterations 3
Cbc0038I Solution found of -50277.8
Cbc0038I Rounding solution of -50702.9 is better than previous of -50277.8

Cbc0038I Before mini branch and bound, 129 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 150 rows 154 columns - 24 fixed gives 126, 130 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -50702.9 to -54675.4 (0.13 seconds)
Cbc0038I Round again with cutoff of -61813.5
Cbc0038I Pass   3: suminf.    5.45449 (34) obj. -61813.5 iterations 9
Cbc0038I Pass   4: suminf.    5.45449 (34) obj. -61813.5 iterations 0
Cbc0038I Pass   5: suminf.    0.87787 (11) obj. -72301.2 iterations 24
Cbc0038I Pass   6: suminf.    0.32149 (1) obj. -61813.5 iterations 11
Cbc0038I Pass   7: suminf.    0.06250 (1) obj. -67524.3 iterations 2
Cbc0038I Pass   8: suminf.    9.13828 (28) obj. -61813.5 iterations 42
Cbc0038I Pass   9: suminf.    3.14826 (12) obj. -62836.5 iterations 24
Cbc0038I Pass  10: suminf.    0.49391 (4) obj. -61813.5 iterations 11
Cbc0038I Pass  11: suminf.    0.49391 (4) obj. -61813.5 iterations 0
Cbc0038I Pass  12: suminf.    0.43579 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  13: suminf.    0.43579 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  14: suminf.    0.51476 (3) obj. -61813.5 iterations 1
Cbc0038I Pass  15: suminf.    0.51476 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  16: suminf.    0.43579 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  17: suminf.    9.86012 (28) obj. -61813.5 iterations 39
Cbc0038I Pass  18: suminf.    5.84807 (19) obj. -61813.5 iterations 15
Cbc0038I Pass  19: suminf.    1.46364 (6) obj. -61813.5 iterations 14
Cbc0038I Pass  20: suminf.    0.89610 (3) obj. -61813.5 iterations 4
Cbc0038I Pass  21: suminf.    0.89610 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  22: suminf.    0.82966 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  23: suminf.    0.82966 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  24: suminf.   11.33366 (37) obj. -61813.5 iterations 53
Cbc0038I Pass  25: suminf.    7.89111 (29) obj. -61813.5 iterations 15
Cbc0038I Pass  26: suminf.    6.95266 (27) obj. -61813.5 iterations 2
Cbc0038I Pass  27: suminf.    2.54442 (13) obj. -61813.5 iterations 14
Cbc0038I Pass  28: suminf.    0.50822 (3) obj. -61813.5 iterations 11
Cbc0038I Pass  29: suminf.    0.40728 (3) obj. -64039.1 iterations 2
Cbc0038I Pass  30: suminf.    8.30405 (28) obj. -61813.5 iterations 34
Cbc0038I Pass  31: suminf.    7.22825 (25) obj. -61813.5 iterations 7
Cbc0038I Pass  32: suminf.    0.52909 (3) obj. -61813.5 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 100 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 162 rows 177 columns - 153 fixed gives 19, 24 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -54675.4 to -54740.5 (0.19 seconds)
Cbc0038I Round again with cutoff of -74662
Cbc0038I Pass  32: suminf.    6.12221 (34) obj. -74662 iterations 0
Cbc0038I Pass  33: suminf.    6.12221 (34) obj. -74662 iterations 0
Cbc0038I Pass  34: suminf.    0.81576 (9) obj. -74662 iterations 30
Cbc0038I Pass  35: suminf.    0.81576 (9) obj. -74662 iterations 0
Cbc0038I Pass  36: suminf.    0.50565 (2) obj. -74662 iterations 8
Cbc0038I Pass  37: suminf.    0.50565 (2) obj. -74662 iterations 0
Cbc0038I Pass  38: suminf.    0.60516 (2) obj. -74662 iterations 1
Cbc0038I Pass  39: suminf.   11.01720 (32) obj. -74662 iterations 48
Cbc0038I Pass  40: suminf.    5.58295 (19) obj. -74662 iterations 19
Cbc0038I Pass  41: suminf.    0.53728 (3) obj. -74662 iterations 17
Cbc0038I Pass  42: suminf.    0.53728 (3) obj. -74662 iterations 0
Cbc0038I Pass  43: suminf.    0.74408 (3) obj. -74662 iterations 1
Cbc0038I Pass  44: suminf.    0.74408 (3) obj. -74662 iterations 0
Cbc0038I Pass  45: suminf.    0.53728 (3) obj. -74662 iterations 2
Cbc0038I Pass  46: suminf.   11.34060 (32) obj. -74662 iterations 45
Cbc0038I Pass  47: suminf.    9.01088 (26) obj. -75109.8 iterations 11
Cbc0038I Pass  48: suminf.    4.51252 (17) obj. -74662 iterations 14
Cbc0038I Pass  49: suminf.    0.86040 (4) obj. -74662 iterations 13
Cbc0038I Pass  50: suminf.    0.70147 (4) obj. -75301.7 iterations 4
Cbc0038I Pass  51: suminf.    0.86040 (4) obj. -74662 iterations 4
Cbc0038I Pass  52: suminf.   13.32702 (38) obj. -74662 iterations 51
Cbc0038I Pass  53: suminf.    9.01446 (28) obj. -75149 iterations 19
Cbc0038I Pass  54: suminf.    1.61935 (7) obj. -74662 iterations 25
Cbc0038I Pass  55: suminf.    1.13990 (6) obj. -76555.8 iterations 4
Cbc0038I Pass  56: suminf.    1.09907 (4) obj. -74662 iterations 5
Cbc0038I Pass  57: suminf.    0.70147 (4) obj. -76262.3 iterations 4
Cbc0038I Pass  58: suminf.    6.18956 (19) obj. -74662 iterations 32
Cbc0038I Pass  59: suminf.    4.81626 (16) obj. -74662 iterations 6
Cbc0038I Pass  60: suminf.    1.19495 (6) obj. -74662 iterations 10
Cbc0038I Pass  61: suminf.    1.19495 (6) obj. -74662 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 97 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 158 rows 176 columns - 152 fixed gives 19, 24 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.24 seconds)
Cbc0038I After 0.24 seconds - Feasibility pump exiting with objective of -54740.5 - took 0.14 seconds
Cbc0012I Integer solution of -54740.471 found by feasibility pump after 0 iterations and 0 nodes (0.24 seconds)
Cbc0038I Full problem 280 rows 283 columns, reduced to 150 rows 153 columns - 131 fixed gives 19, 22 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 6 rows 9 columns
Cbc0012I Integer solution of -60269.425 found by DiveCoefficient after 457 iterations and 0 nodes (0.68 seconds)
Cbc0031I 159 added rows had average density of 13.553459
Cbc0013I At root node, 159 cuts changed objective from -126056.13 to -60269.425 in 6 passes
Cbc0014I Cut generator 0 (Probing) - 7841 row cuts average 5.1 elements, 10 column cuts (10 active)  in 0.141 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 193 row cuts average 85.8 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 4 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 198 row cuts average 49.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 244 row cuts average 79.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 16 row cuts average 53.1 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0001I Search completed - best objective -60269.42499999999, took 457 iterations and 0 nodes (0.68 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.66   (Wallclock seconds):       0.70

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 251 (-242) rows, 128 (-119) columns and 624 (-831) elements
Clp0000I Optimal - objective value 116818.93
Coin0511I After Postsolve, objective 116818.93, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 116818.9305 - 101 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 251 rows, 128 columns (127 integer (127 of which binary)) and 624 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.760%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 17 integers unsatisfied sum - 7.18614
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. -21932.3 iterations 59
Cbc0038I Solution found of -21932.3
Cbc0038I Relaxing continuous gives -21932.3
Cbc0038I Rounding solution of -22357.4 is better than previous of -21932.3

Cbc0038I Before mini branch and bound, 110 integers at bound fixed and 0 continuous
Cbc0038I Full problem 251 rows 128 columns, reduced to 28 rows 18 columns
Cbc0038I Mini branch and bound improved solution from -22357.4 to -60269.4 (0.02 seconds)
Cbc0038I Round again with cutoff of -65924.4
Cbc0038I Pass   2: suminf.    0.95807 (3) obj. -65924.4 iterations 3
Cbc0038I Pass   3: suminf.    0.21082 (1) obj. -65924.4 iterations 5
Cbc0038I Pass   4: suminf.    0.44567 (1) obj. -65924.4 iterations 2
Cbc0038I Pass   5: suminf.    1.32136 (13) obj. -65924.4 iterations 27
Cbc0038I Pass   6: suminf.    1.30987 (7) obj. -65924.4 iterations 9
Cbc0038I Pass   7: suminf.    2.38606 (6) obj. -65924.4 iterations 6
Cbc0038I Pass   8: suminf.    2.38606 (6) obj. -65924.4 iterations 0
Cbc0038I Pass   9: suminf.    2.94093 (15) obj. -65924.4 iterations 30
Cbc0038I Pass  10: suminf.    2.17611 (12) obj. -65924.4 iterations 15
Cbc0038I Pass  11: suminf.    3.07269 (14) obj. -65924.4 iterations 18
Cbc0038I Pass  12: suminf.    3.07269 (14) obj. -65924.4 iterations 0
Cbc0038I Pass  13: suminf.    2.15484 (11) obj. -65924.4 iterations 15
Cbc0038I Pass  14: suminf.    2.15484 (11) obj. -65924.4 iterations 0
Cbc0038I Pass  15: suminf.    1.00771 (6) obj. -65924.4 iterations 25
Cbc0038I Pass  16: suminf.    1.00771 (6) obj. -65924.4 iterations 3
Cbc0038I Pass  17: suminf.    1.99075 (12) obj. -65924.4 iterations 13
Cbc0038I Pass  18: suminf.    1.99075 (12) obj. -65924.4 iterations 0
Cbc0038I Pass  19: suminf.    3.64029 (11) obj. -65924.4 iterations 13
Cbc0038I Pass  20: suminf.    1.47948 (7) obj. -65924.4 iterations 5
Cbc0038I Pass  21: suminf.    1.47948 (7) obj. -65924.4 iterations 0
Cbc0038I Pass  22: suminf.    2.50727 (6) obj. -65924.4 iterations 5
Cbc0038I Pass  23: suminf.    2.50727 (6) obj. -65924.4 iterations 0
Cbc0038I Pass  24: suminf.    2.65690 (8) obj. -65924.4 iterations 19
Cbc0038I Pass  25: suminf.    2.65690 (8) obj. -65924.4 iterations 7
Cbc0038I Pass  26: suminf.    1.01217 (3) obj. -65924.4 iterations 11
Cbc0038I Pass  27: suminf.    1.22417 (3) obj. -65924.4 iterations 2
Cbc0038I Pass  28: suminf.    3.12684 (9) obj. -65924.4 iterations 20
Cbc0038I Pass  29: suminf.    1.87031 (5) obj. -65924.4 iterations 8
Cbc0038I Pass  30: suminf.    1.32533 (4) obj. -65924.4 iterations 6
Cbc0038I Pass  31: suminf.    0.88943 (3) obj. -65924.4 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 74 integers at bound fixed and 0 continuous
Cbc0038I Full problem 251 rows 128 columns, reduced to 42 rows 47 columns
Cbc0038I Mini branch and bound did not improve solution (0.04 seconds)
Cbc0038I After 0.04 seconds - Feasibility pump exiting with objective of -60269.4 - took 0.03 seconds
Cbc0012I Integer solution of -60269.425 found by feasibility pump after 0 iterations and 0 nodes (0.04 seconds)
Cbc0038I Full problem 251 rows 128 columns, reduced to 28 rows 18 columns
Cbc0031I 27 added rows had average density of 11.888889
Cbc0013I At root node, 27 cuts changed objective from -116818.93 to -63468.616 in 24 passes
Cbc0014I Cut generator 0 (Probing) - 4694 row cuts average 3.9 elements, 9 column cuts (9 active)  in 0.037 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 227 row cuts average 54.8 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 5 row cuts average 4.2 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 95 row cuts average 43.5 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0001I Search completed - best objective -60269.42499999999, took 887 iterations and 2 nodes (0.21 seconds)
Cbc0032I Strong branching done 122 times (1831 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 27 variables fixed on reduced cost
Total time (CPU seconds):       0.20   (Wallclock seconds):       0.21

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 280 (-213) rows, 283 (-208) columns and 9563 (-21783) elements
Clp1000I sum of infeasibilities 0.00121741 - average 4.34788e-06, 37 fixed columns
Coin0506I Presolve 228 (-52) rows, 235 (-48) columns and 6810 (-2753) elements
Clp0029I End of values pass after 235 iterations
Clp0014I Perturbing problem by 0.001% of 4.0467341 - largest nonzero change 2.965034e-05 ( 0.0027958207%) - largest zero change 2.8551193e-05
Clp0000I Optimal - objective value 157312.94
Clp0000I Optimal - objective value 157312.94
Coin0511I After Postsolve, objective 157312.94, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 3.8988464 - largest nonzero change 2.9989845e-05 ( 0.0028014657%) - largest zero change 2.8474181e-05
Clp0000I Optimal - objective value 161275.6
Clp0000I Optimal - objective value 161275.6
Clp0000I Optimal - objective value 161275.6
Coin0511I After Postsolve, objective 161275.6, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 161275.6 - 0 iterations time 0.162, Presolve 0.00, Idiot 0.16

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 280 rows, 283 columns (283 integer (283 of which binary)) and 9563 elements
Coin3009W Conflict graph built in 0.001 seconds, density: 5.885%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 148 integers unsatisfied sum - 53.7071
Cbc0038I Pass   1: suminf.    4.72799 (25) obj. -55755 iterations 163
Cbc0038I Pass   2: suminf.    4.72799 (25) obj. -55755 iterations 3
Cbc0038I Solution found of -50277.8
Cbc0038I Rounding solution of -50702.9 is better than previous of -50277.8

Cbc0038I Before mini branch and bound, 129 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 150 rows 154 columns - 24 fixed gives 126, 130 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 19 columns
Cbc0038I Mini branch and bound improved solution from -50702.9 to -54675.4 (0.12 seconds)
Cbc0038I Round again with cutoff of -61813.5
Cbc0038I Pass   3: suminf.    5.45449 (34) obj. -61813.5 iterations 9
Cbc0038I Pass   4: suminf.    5.45449 (34) obj. -61813.5 iterations 0
Cbc0038I Pass   5: suminf.    0.87787 (11) obj. -72301.2 iterations 24
Cbc0038I Pass   6: suminf.    0.32149 (1) obj. -61813.5 iterations 11
Cbc0038I Pass   7: suminf.    0.06250 (1) obj. -67524.3 iterations 2
Cbc0038I Pass   8: suminf.    9.13828 (28) obj. -61813.5 iterations 42
Cbc0038I Pass   9: suminf.    3.14826 (12) obj. -62836.5 iterations 24
Cbc0038I Pass  10: suminf.    0.49391 (4) obj. -61813.5 iterations 11
Cbc0038I Pass  11: suminf.    0.49391 (4) obj. -61813.5 iterations 0
Cbc0038I Pass  12: suminf.    0.43579 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  13: suminf.    0.43579 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  14: suminf.    0.51476 (3) obj. -61813.5 iterations 1
Cbc0038I Pass  15: suminf.    0.51476 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  16: suminf.    0.43579 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  17: suminf.    9.86012 (28) obj. -61813.5 iterations 39
Cbc0038I Pass  18: suminf.    5.84807 (19) obj. -61813.5 iterations 15
Cbc0038I Pass  19: suminf.    1.46364 (6) obj. -61813.5 iterations 14
Cbc0038I Pass  20: suminf.    0.89610 (3) obj. -61813.5 iterations 4
Cbc0038I Pass  21: suminf.    0.89610 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  22: suminf.    0.82966 (3) obj. -61813.5 iterations 2
Cbc0038I Pass  23: suminf.    0.82966 (3) obj. -61813.5 iterations 0
Cbc0038I Pass  24: suminf.   11.33366 (37) obj. -61813.5 iterations 53
Cbc0038I Pass  25: suminf.    7.89111 (29) obj. -61813.5 iterations 15
Cbc0038I Pass  26: suminf.    6.95266 (27) obj. -61813.5 iterations 2
Cbc0038I Pass  27: suminf.    2.54442 (13) obj. -61813.5 iterations 14
Cbc0038I Pass  28: suminf.    0.50822 (3) obj. -61813.5 iterations 11
Cbc0038I Pass  29: suminf.    0.40728 (3) obj. -64039.1 iterations 2
Cbc0038I Pass  30: suminf.    8.30405 (28) obj. -61813.5 iterations 34
Cbc0038I Pass  31: suminf.    7.22825 (25) obj. -61813.5 iterations 7
Cbc0038I Pass  32: suminf.    0.52909 (3) obj. -61813.5 iterations 23
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 100 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 162 rows 177 columns - 153 fixed gives 19, 24 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 20 columns
Cbc0038I Mini branch and bound improved solution from -54675.4 to -54740.5 (0.18 seconds)
Cbc0038I Round again with cutoff of -74662
Cbc0038I Pass  32: suminf.    6.12221 (34) obj. -74662 iterations 0
Cbc0038I Pass  33: suminf.    6.12221 (34) obj. -74662 iterations 0
Cbc0038I Pass  34: suminf.    0.81576 (9) obj. -74662 iterations 30
Cbc0038I Pass  35: suminf.    0.81576 (9) obj. -74662 iterations 0
Cbc0038I Pass  36: suminf.    0.50565 (2) obj. -74662 iterations 8
Cbc0038I Pass  37: suminf.    0.50565 (2) obj. -74662 iterations 0
Cbc0038I Pass  38: suminf.    0.60516 (2) obj. -74662 iterations 1
Cbc0038I Pass  39: suminf.   11.01720 (32) obj. -74662 iterations 48
Cbc0038I Pass  40: suminf.    5.58295 (19) obj. -74662 iterations 19
Cbc0038I Pass  41: suminf.    0.53728 (3) obj. -74662 iterations 17
Cbc0038I Pass  42: suminf.    0.53728 (3) obj. -74662 iterations 0
Cbc0038I Pass  43: suminf.    0.74408 (3) obj. -74662 iterations 1
Cbc0038I Pass  44: suminf.    0.74408 (3) obj. -74662 iterations 0
Cbc0038I Pass  45: suminf.    0.53728 (3) obj. -74662 iterations 2
Cbc0038I Pass  46: suminf.   11.34060 (32) obj. -74662 iterations 45
Cbc0038I Pass  47: suminf.    9.01088 (26) obj. -75109.8 iterations 11
Cbc0038I Pass  48: suminf.    4.51252 (17) obj. -74662 iterations 14
Cbc0038I Pass  49: suminf.    0.86040 (4) obj. -74662 iterations 13
Cbc0038I Pass  50: suminf.    0.70147 (4) obj. -75301.7 iterations 4
Cbc0038I Pass  51: suminf.    0.86040 (4) obj. -74662 iterations 4
Cbc0038I Pass  52: suminf.   13.32702 (38) obj. -74662 iterations 51
Cbc0038I Pass  53: suminf.    9.01446 (28) obj. -75149 iterations 19
Cbc0038I Pass  54: suminf.    1.61935 (7) obj. -74662 iterations 25
Cbc0038I Pass  55: suminf.    1.13990 (6) obj. -76555.8 iterations 4
Cbc0038I Pass  56: suminf.    1.09907 (4) obj. -74662 iterations 5
Cbc0038I Pass  57: suminf.    0.70147 (4) obj. -76262.3 iterations 4
Cbc0038I Pass  58: suminf.    6.18956 (19) obj. -74662 iterations 32
Cbc0038I Pass  59: suminf.    4.81626 (16) obj. -74662 iterations 6
Cbc0038I Pass  60: suminf.    1.19495 (6) obj. -74662 iterations 10
Cbc0038I Pass  61: suminf.    1.19495 (6) obj. -74662 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 97 integers at bound fixed and 0 continuous
Cbc0038I Full problem 280 rows 283 columns, reduced to 158 rows 176 columns - 152 fixed gives 19, 24 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 15 rows 20 columns
Cbc0038I Mini branch and bound did not improve solution (0.23 seconds)
Cbc0038I After 0.23 seconds - Feasibility pump exiting with objective of -54740.5 - took 0.13 seconds
Cbc0012I Integer solution of -54740.471 found by feasibility pump after 0 iterations and 0 nodes (0.23 seconds)
Cbc0038I Full problem 280 rows 283 columns, reduced to 150 rows 153 columns - 131 fixed gives 19, 22 - ok now
Cbc0038I Full problem 280 rows 283 columns, reduced to 6 rows 9 columns
Cbc0012I Integer solution of -60269.425 found by DiveCoefficient after 457 iterations and 0 nodes (0.64 seconds)
Cbc0031I 159 added rows had average density of 13.553459
Cbc0013I At root node, 159 cuts changed objective from -126056.13 to -60269.425 in 6 passes
Cbc0014I Cut generator 0 (Probing) - 7841 row cuts average 5.1 elements, 10 column cuts (10 active)  in 0.139 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 193 row cuts average 85.8 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 14 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 4 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 198 row cuts average 49.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 244 row cuts average 79.0 elements, 0 column cuts (0 active)  in 0.029 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 16 row cuts average 53.1 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0001I Search completed - best objective -60269.42499999999, took 457 iterations and 0 nodes (0.64 seconds)
Cbc0035I Maximum depth 0, 2 variables fixed on reduced cost
Total time (CPU seconds):       0.63   (Wallclock seconds):       0.66

