Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 239 (-112) rows, 120 (-56) columns and 712 (-331) elements
Clp0000I Optimal - objective value 21671359
Coin0511I After Postsolve, objective 21671359, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 21671359.11 - 91 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 239 rows, 120 columns (119 integer (119 of which binary)) and 712 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.820%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 11.2321
Cbc0038I Solution found of -1.67836e+07
Cbc0038I Relaxing continuous gives -1.67836e+07
Cbc0038I Before mini branch and bound, 82 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 53 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -1.67836e+07 to -1.9643e+07 (0.02 seconds)
Cbc0038I Round again with cutoff of -1.98459e+07
Cbc0038I Pass   1: suminf.    1.28843 (5) obj. -1.98459e+07 iterations 32
Cbc0038I Pass   2: suminf.    1.28843 (5) obj. -1.98459e+07 iterations 0
Cbc0038I Pass   3: suminf.    0.12500 (1) obj. -2.00182e+07 iterations 16
Cbc0038I Pass   4: suminf.    0.12500 (1) obj. -2.00182e+07 iterations 0
Cbc0038I Pass   5: suminf.    0.18706 (1) obj. -1.98459e+07 iterations 1
Cbc0038I Pass   6: suminf.    1.71164 (4) obj. -1.98459e+07 iterations 21
Cbc0038I Pass   7: suminf.    1.23125 (5) obj. -1.98459e+07 iterations 20
Cbc0038I Pass   8: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 19
Cbc0038I Pass   9: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  10: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  11: suminf.    6.86482 (28) obj. -1.98459e+07 iterations 26
Cbc0038I Pass  12: suminf.    1.34282 (4) obj. -1.98459e+07 iterations 31
Cbc0038I Pass  13: suminf.    0.60346 (3) obj. -1.98459e+07 iterations 5
Cbc0038I Pass  14: suminf.    0.37893 (4) obj. -1.98459e+07 iterations 11
Cbc0038I Pass  15: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 15
Cbc0038I Pass  16: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  17: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  18: suminf.    0.92997 (4) obj. -1.98459e+07 iterations 17
Cbc0038I Pass  19: suminf.    0.92997 (4) obj. -1.98459e+07 iterations 13
Cbc0038I Pass  20: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 23
Cbc0038I Pass  21: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 0
Cbc0038I Pass  22: suminf.    0.30000 (1) obj. -2.00291e+07 iterations 2
Cbc0038I Pass  23: suminf.    0.56545 (5) obj. -1.98459e+07 iterations 16
Cbc0038I Pass  24: suminf.    0.56539 (2) obj. -1.98459e+07 iterations 12
Cbc0038I Pass  25: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 20
Cbc0038I Pass  26: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  27: suminf.    0.94119 (3) obj. -1.98459e+07 iterations 17
Cbc0038I Pass  28: suminf.    0.37893 (4) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  29: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 13
Cbc0038I Pass  30: suminf.    0.62986 (2) obj. -1.98459e+07 iterations 30
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 57 rows 47 columns
Cbc0038I Mini branch and bound improved solution from -1.9643e+07 to -2.03284e+07 (0.04 seconds)
Cbc0038I Round again with cutoff of -2.0597e+07
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  30: suminf.    1.58401 (7) obj. -2.0597e+07 iterations 5
Cbc0038I Pass  31: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 12
Cbc0038I Pass  32: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  33: suminf.    1.02459 (20) obj. -2.0597e+07 iterations 27
Cbc0038I Pass  34: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 9
Cbc0038I Pass  35: suminf.    9.88540 (28) obj. -2.0597e+07 iterations 45
Cbc0038I Pass  36: suminf.    9.88540 (28) obj. -2.0597e+07 iterations 4
Cbc0038I Pass  37: suminf.    0.99419 (23) obj. -2.0597e+07 iterations 10
Cbc0038I Pass  38: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 17
Cbc0038I Pass  39: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 9
Cbc0038I Pass  40: suminf.    0.50470 (3) obj. -2.0597e+07 iterations 20
Cbc0038I Pass  41: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 25
Cbc0038I Pass  42: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 6
Cbc0038I Pass  43: suminf.   10.71844 (24) obj. -2.0597e+07 iterations 30
Cbc0038I Pass  44: suminf.    0.60040 (4) obj. -2.0597e+07 iterations 26
Cbc0038I Pass  45: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 6
Cbc0038I Pass  46: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  47: suminf.    1.13407 (26) obj. -2.0597e+07 iterations 29
Cbc0038I Pass  48: suminf.    0.92064 (6) obj. -2.0597e+07 iterations 37
Cbc0038I Pass  49: suminf.    0.92064 (6) obj. -2.0597e+07 iterations 5
Cbc0038I Pass  50: suminf.    2.61411 (7) obj. -2.0597e+07 iterations 14
Cbc0038I Pass  51: suminf.    0.30707 (4) obj. -2.0597e+07 iterations 18
Cbc0038I Pass  52: suminf.    0.30707 (4) obj. -2.0597e+07 iterations 0
Cbc0038I Pass  53: suminf.    0.50701 (4) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  54: suminf.    0.59704 (6) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  55: suminf.    0.61893 (5) obj. -2.0597e+07 iterations 15
Cbc0038I Pass  56: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 19
Cbc0038I Pass  57: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 3
Cbc0038I Pass  58: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 10
Cbc0038I Pass  59: suminf.    0.49498 (9) obj. -2.0597e+07 iterations 26
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 56 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 88 rows 62 columns
Cbc0038I Mini branch and bound did not improve solution (0.05 seconds)
Cbc0038I After 0.05 seconds - Feasibility pump exiting with objective of -2.03284e+07 - took 0.04 seconds
Cbc0012I Integer solution of -20328429 found by feasibility pump after 0 iterations and 0 nodes (0.05 seconds)
Cbc0038I Full problem 239 rows 120 columns, reduced to 54 rows 40 columns
Cbc0031I 5 added rows had average density of 51
Cbc0013I At root node, 5 cuts changed objective from -21671359 to -20460800 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 27 row cuts average 3.0 elements, 16 column cuts (16 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 15.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2 row cuts average 53.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 29 row cuts average 60.6 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0001I Search completed - best objective -20328429, took 101 iterations and 2 nodes (0.10 seconds)
Cbc0032I Strong branching done 20 times (129 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 14 variables fixed on reduced cost
Total time (CPU seconds):       0.09   (Wallclock seconds):       0.10

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 227 (-123) rows, 226 (-122) columns and 6416 (-9678) elements
Clp1000I sum of infeasibilities 0.0189831 - average 8.3626e-05, 135 fixed columns
Coin0506I Presolve 88 (-139) rows, 87 (-139) columns and 346 (-6070) elements
Clp0029I End of values pass after 87 iterations
Clp0014I Perturbing problem by 0.001% of 1.8077045 - largest nonzero change 0 ( 0%) - largest zero change 2.9431263e-05
Clp0000I Optimal - objective value 20970978
Clp0000I Optimal - objective value 20970978
Coin0511I After Postsolve, objective 20970978, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 8.8393894 - largest nonzero change 2.8782446e-05 ( 0.0022384355%) - largest zero change 2.9278563e-05
Clp0000I Optimal - objective value 21696836
Clp0000I Optimal - objective value 21696836
Clp0000I Optimal - objective value 21696836
Coin0511I After Postsolve, objective 21696836, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 21696836.23 - 0 iterations time 0.102, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0004I processed model has 227 rows, 226 columns (226 integer (226 of which binary)) and 6416 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.035%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 132 integers unsatisfied sum - 25.8911
Cbc0038I Pass   1: suminf.    4.97950 (64) obj. -1.68105e+07 iterations 86
Cbc0038I Pass   2: suminf.    1.64386 (39) obj. -1.67948e+07 iterations 25
Cbc0038I Pass   3: suminf.    0.62550 (23) obj. -1.67906e+07 iterations 16
Cbc0038I Solution found of -1.67836e+07
Cbc0038I Rounding solution of -1.89331e+07 is better than previous of -1.67836e+07

Cbc0038I Before mini branch and bound, 94 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 133 rows 132 columns - 17 fixed gives 116, 115 - still too large
Cbc0038I Full problem 227 rows 226 columns, reduced to 69 rows 68 columns
Cbc0038I Mini branch and bound improved solution from -1.89331e+07 to -1.9643e+07 (0.07 seconds)
Cbc0038I Round again with cutoff of -1.98482e+07
Cbc0038I Pass   4: suminf.    6.54301 (67) obj. -1.98482e+07 iterations 9
Cbc0038I Pass   5: suminf.    6.54301 (67) obj. -1.98482e+07 iterations 1
Cbc0038I Pass   6: suminf.    3.67389 (50) obj. -1.98482e+07 iterations 38
Cbc0038I Pass   7: suminf.    1.23185 (28) obj. -1.98482e+07 iterations 27
Cbc0038I Pass   8: suminf.    1.12694 (28) obj. -1.99583e+07 iterations 9
Cbc0038I Pass   9: suminf.    0.46034 (2) obj. -1.98482e+07 iterations 33
Cbc0038I Pass  10: suminf.    0.36364 (2) obj. -1.99497e+07 iterations 10
Cbc0038I Pass  11: suminf.    1.38675 (14) obj. -1.98482e+07 iterations 70
Cbc0038I Pass  12: suminf.    1.38675 (14) obj. -1.98482e+07 iterations 6
Cbc0038I Pass  13: suminf.    0.08962 (4) obj. -2.03268e+07 iterations 26
Cbc0038I Solution found of -2.03264e+07
Cbc0038I Rounding solution of -2.03284e+07 is better than previous of -2.03264e+07

Cbc0038I Before mini branch and bound, 86 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 135 rows 136 columns - 64 fixed gives 71, 72 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 71 rows 72 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of -2.06017e+07
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 3
Cbc0038I Pass  14: suminf.    7.14469 (71) obj. -2.06017e+07 iterations 7
Cbc0038I Pass  15: suminf.    6.33000 (67) obj. -2.06017e+07 iterations 14
Cbc0038I Pass  16: suminf.    5.83478 (66) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  17: suminf.    3.90501 (55) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  18: suminf.    3.49969 (54) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  19: suminf.    2.14159 (39) obj. -2.06017e+07 iterations 25
Cbc0038I Pass  20: suminf.    1.77095 (38) obj. -2.06017e+07 iterations 10
Cbc0038I Pass  21: suminf.    1.05636 (19) obj. -2.06017e+07 iterations 31
Cbc0038I Pass  22: suminf.    0.73020 (18) obj. -2.06017e+07 iterations 12
Cbc0038I Pass  23: suminf.    0.79085 (9) obj. -2.06017e+07 iterations 22
Cbc0038I Pass  24: suminf.    0.48973 (8) obj. -2.06017e+07 iterations 12
Cbc0038I Pass  25: suminf.    0.66505 (3) obj. -2.06017e+07 iterations 18
Cbc0038I Pass  26: suminf.    0.37797 (2) obj. -2.06017e+07 iterations 13
Cbc0038I Pass  27: suminf.    1.73908 (17) obj. -2.06017e+07 iterations 41
Cbc0038I Pass  28: suminf.    1.49111 (13) obj. -2.06017e+07 iterations 25
Cbc0038I Pass  29: suminf.    0.65828 (3) obj. -2.06017e+07 iterations 22
Cbc0038I Pass  30: suminf.    0.37942 (2) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  31: suminf.    1.65175 (39) obj. -2.06017e+07 iterations 55
Cbc0038I Pass  32: suminf.    1.05224 (10) obj. -2.06017e+07 iterations 27
Cbc0038I Pass  33: suminf.    0.64037 (3) obj. -2.06017e+07 iterations 16
Cbc0038I Pass  34: suminf.    0.38325 (2) obj. -2.06017e+07 iterations 8
Cbc0038I Pass  35: suminf.    1.98715 (22) obj. -2.06017e+07 iterations 33
Cbc0038I Pass  36: suminf.    1.30506 (15) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  37: suminf.    0.64537 (3) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  38: suminf.    0.38218 (2) obj. -2.06017e+07 iterations 8
Cbc0038I Pass  39: suminf.    1.97321 (16) obj. -2.06017e+07 iterations 44
Cbc0038I Pass  40: suminf.    1.79218 (16) obj. -2.06017e+07 iterations 33
Cbc0038I Pass  41: suminf.    0.49309 (4) obj. -2.06017e+07 iterations 26
Cbc0038I Pass  42: suminf.    0.32302 (4) obj. -2.06017e+07 iterations 17
Cbc0038I Pass  43: suminf.    1.27420 (15) obj. -2.06017e+07 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 142 rows 143 columns - 65 fixed gives 77, 78 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 77 rows 78 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -2.03284e+07 - took 0.09 seconds
Cbc0012I Integer solution of -20328429 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 227 rows 226 columns, reduced to 134 rows 134 columns - 64 fixed gives 70, 70 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 70 rows 70 columns
Cbc0031I 68 added rows had average density of 6.5147059
Cbc0013I At root node, 68 cuts changed objective from -21694545 to -20469000 in 11 passes
Cbc0014I Cut generator 0 (Probing) - 2855 row cuts average 4.9 elements, 9 column cuts (9 active)  in 0.112 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 96 row cuts average 92.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 9 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 62 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 38.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 271 row cuts average 83.8 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 22 row cuts average 93.4 elements, 0 column cuts (0 active)  in 0.075 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -20328429 best solution, best possible -20449248 (0.59 seconds)
Cbc0001I Search completed - best objective -20328429, took 540 iterations and 2 nodes (0.64 seconds)
Cbc0032I Strong branching done 12 times (147 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 0, 11 variables fixed on reduced cost
Total time (CPU seconds):       0.55   (Wallclock seconds):       0.66

Welcome to the CBC MILP Solver 
Version: Trunk
Build Date: Nov 15 2020 

Starting solution of the Linear programming relaxation problem using Dual Simplex

Coin0506I Presolve 239 (-112) rows, 120 (-56) columns and 712 (-331) elements
Clp0000I Optimal - objective value 21671359
Coin0511I After Postsolve, objective 21671359, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 21671359.11 - 91 iterations time 0.002, Presolve 0.00

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 239 rows, 120 columns (119 integer (119 of which binary)) and 712 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 0.820%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 37 integers unsatisfied sum - 11.2321
Cbc0038I Solution found of -1.67836e+07
Cbc0038I Relaxing continuous gives -1.67836e+07
Cbc0038I Before mini branch and bound, 82 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 53 rows 38 columns
Cbc0038I Mini branch and bound improved solution from -1.67836e+07 to -1.9643e+07 (0.02 seconds)
Cbc0038I Round again with cutoff of -1.98459e+07
Cbc0038I Pass   1: suminf.    1.28843 (5) obj. -1.98459e+07 iterations 32
Cbc0038I Pass   2: suminf.    1.28843 (5) obj. -1.98459e+07 iterations 0
Cbc0038I Pass   3: suminf.    0.12500 (1) obj. -2.00182e+07 iterations 16
Cbc0038I Pass   4: suminf.    0.12500 (1) obj. -2.00182e+07 iterations 0
Cbc0038I Pass   5: suminf.    0.18706 (1) obj. -1.98459e+07 iterations 1
Cbc0038I Pass   6: suminf.    1.71164 (4) obj. -1.98459e+07 iterations 21
Cbc0038I Pass   7: suminf.    1.23125 (5) obj. -1.98459e+07 iterations 20
Cbc0038I Pass   8: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 19
Cbc0038I Pass   9: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  10: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  11: suminf.    6.86482 (28) obj. -1.98459e+07 iterations 26
Cbc0038I Pass  12: suminf.    1.34282 (4) obj. -1.98459e+07 iterations 31
Cbc0038I Pass  13: suminf.    0.60346 (3) obj. -1.98459e+07 iterations 5
Cbc0038I Pass  14: suminf.    0.37893 (4) obj. -1.98459e+07 iterations 11
Cbc0038I Pass  15: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 15
Cbc0038I Pass  16: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  17: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  18: suminf.    0.92997 (4) obj. -1.98459e+07 iterations 17
Cbc0038I Pass  19: suminf.    0.92997 (4) obj. -1.98459e+07 iterations 13
Cbc0038I Pass  20: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 23
Cbc0038I Pass  21: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 0
Cbc0038I Pass  22: suminf.    0.30000 (1) obj. -2.00291e+07 iterations 2
Cbc0038I Pass  23: suminf.    0.56545 (5) obj. -1.98459e+07 iterations 16
Cbc0038I Pass  24: suminf.    0.56539 (2) obj. -1.98459e+07 iterations 12
Cbc0038I Pass  25: suminf.    0.17014 (1) obj. -1.98459e+07 iterations 20
Cbc0038I Pass  26: suminf.    0.50000 (1) obj. -2.03113e+07 iterations 2
Cbc0038I Pass  27: suminf.    0.94119 (3) obj. -1.98459e+07 iterations 17
Cbc0038I Pass  28: suminf.    0.37893 (4) obj. -1.98459e+07 iterations 9
Cbc0038I Pass  29: suminf.    1.01899 (3) obj. -1.98459e+07 iterations 13
Cbc0038I Pass  30: suminf.    0.62986 (2) obj. -1.98459e+07 iterations 30
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 66 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 57 rows 47 columns
Cbc0038I Mini branch and bound improved solution from -1.9643e+07 to -2.03284e+07 (0.04 seconds)
Cbc0038I Round again with cutoff of -2.0597e+07
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 3
Cbc0038I Pass  30: suminf.    1.58401 (7) obj. -2.0597e+07 iterations 5
Cbc0038I Pass  31: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 12
Cbc0038I Pass  32: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  33: suminf.    1.02459 (20) obj. -2.0597e+07 iterations 27
Cbc0038I Pass  34: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 9
Cbc0038I Pass  35: suminf.    9.88540 (28) obj. -2.0597e+07 iterations 45
Cbc0038I Pass  36: suminf.    9.88540 (28) obj. -2.0597e+07 iterations 4
Cbc0038I Pass  37: suminf.    0.99419 (23) obj. -2.0597e+07 iterations 10
Cbc0038I Pass  38: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 17
Cbc0038I Pass  39: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 9
Cbc0038I Pass  40: suminf.    0.50470 (3) obj. -2.0597e+07 iterations 20
Cbc0038I Pass  41: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 25
Cbc0038I Pass  42: suminf.    0.99335 (31) obj. -2.0597e+07 iterations 6
Cbc0038I Pass  43: suminf.   10.71844 (24) obj. -2.0597e+07 iterations 30
Cbc0038I Pass  44: suminf.    0.60040 (4) obj. -2.0597e+07 iterations 26
Cbc0038I Pass  45: suminf.    0.37157 (2) obj. -2.0597e+07 iterations 6
Cbc0038I Pass  46: suminf.    0.69498 (3) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  47: suminf.    1.13407 (26) obj. -2.0597e+07 iterations 29
Cbc0038I Pass  48: suminf.    0.92064 (6) obj. -2.0597e+07 iterations 37
Cbc0038I Pass  49: suminf.    0.92064 (6) obj. -2.0597e+07 iterations 5
Cbc0038I Pass  50: suminf.    2.61411 (7) obj. -2.0597e+07 iterations 14
Cbc0038I Pass  51: suminf.    0.30707 (4) obj. -2.0597e+07 iterations 18
Cbc0038I Pass  52: suminf.    0.30707 (4) obj. -2.0597e+07 iterations 0
Cbc0038I Pass  53: suminf.    0.50701 (4) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  54: suminf.    0.59704 (6) obj. -2.0597e+07 iterations 13
Cbc0038I Pass  55: suminf.    0.61893 (5) obj. -2.0597e+07 iterations 15
Cbc0038I Pass  56: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 19
Cbc0038I Pass  57: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 3
Cbc0038I Pass  58: suminf.    0.92796 (6) obj. -2.0597e+07 iterations 10
Cbc0038I Pass  59: suminf.    0.49498 (9) obj. -2.0597e+07 iterations 26
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 56 integers at bound fixed and 0 continuous
Cbc0038I Full problem 239 rows 120 columns, reduced to 88 rows 62 columns
Cbc0038I Mini branch and bound did not improve solution (0.06 seconds)
Cbc0038I After 0.06 seconds - Feasibility pump exiting with objective of -2.03284e+07 - took 0.04 seconds
Cbc0012I Integer solution of -20328429 found by feasibility pump after 0 iterations and 0 nodes (0.06 seconds)
Cbc0038I Full problem 239 rows 120 columns, reduced to 54 rows 40 columns
Cbc0031I 5 added rows had average density of 51
Cbc0013I At root node, 5 cuts changed objective from -21671359 to -20460800 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 27 row cuts average 3.0 elements, 16 column cuts (16 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 1 row cuts average 15.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 2 row cuts average 53.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 29 row cuts average 60.6 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0001I Search completed - best objective -20328429, took 101 iterations and 2 nodes (0.14 seconds)
Cbc0032I Strong branching done 20 times (129 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 14 variables fixed on reduced cost
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.15

Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 227 (-124) rows, 226 (-123) columns and 6416 (-9679) elements
Clp1000I sum of infeasibilities 0.0189831 - average 8.3626e-05, 135 fixed columns
Coin0506I Presolve 88 (-139) rows, 87 (-139) columns and 346 (-6070) elements
Clp0029I End of values pass after 87 iterations
Clp0014I Perturbing problem by 0.001% of 1.8077045 - largest nonzero change 0 ( 0%) - largest zero change 2.9431263e-05
Clp0000I Optimal - objective value 20970978
Clp0000I Optimal - objective value 20970978
Coin0511I After Postsolve, objective 20970978, infeasibilities - dual 0 (0), primal 0 (0)
Clp0014I Perturbing problem by 0.001% of 8.8393894 - largest nonzero change 2.8782446e-05 ( 0.0022384355%) - largest zero change 2.9278563e-05
Clp0000I Optimal - objective value 21696836
Clp0000I Optimal - objective value 21696836
Clp0000I Optimal - objective value 21696836
Coin0511I After Postsolve, objective 21696836, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 21696836.23 - 0 iterations time 0.112, Presolve 0.00, Idiot 0.10

Starting MIP optimization
Cgl0002I 1 variables fixed
Cgl0004I processed model has 227 rows, 226 columns (226 integer (226 of which binary)) and 6416 elements
Coin3009W Conflict graph built in 0.000 seconds, density: 6.035%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cbc0038I Initial state - 132 integers unsatisfied sum - 25.8911
Cbc0038I Pass   1: suminf.    4.97950 (64) obj. -1.68105e+07 iterations 86
Cbc0038I Pass   2: suminf.    1.64386 (39) obj. -1.67948e+07 iterations 25
Cbc0038I Pass   3: suminf.    0.62550 (23) obj. -1.67906e+07 iterations 16
Cbc0038I Solution found of -1.67836e+07
Cbc0038I Rounding solution of -1.89331e+07 is better than previous of -1.67836e+07

Cbc0038I Before mini branch and bound, 94 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 133 rows 132 columns - 17 fixed gives 116, 115 - still too large
Cbc0038I Full problem 227 rows 226 columns, reduced to 69 rows 68 columns
Cbc0038I Mini branch and bound improved solution from -1.89331e+07 to -1.9643e+07 (0.07 seconds)
Cbc0038I Round again with cutoff of -1.98482e+07
Cbc0038I Pass   4: suminf.    6.54301 (67) obj. -1.98482e+07 iterations 9
Cbc0038I Pass   5: suminf.    6.54301 (67) obj. -1.98482e+07 iterations 1
Cbc0038I Pass   6: suminf.    3.67389 (50) obj. -1.98482e+07 iterations 38
Cbc0038I Pass   7: suminf.    1.23185 (28) obj. -1.98482e+07 iterations 27
Cbc0038I Pass   8: suminf.    1.12694 (28) obj. -1.99583e+07 iterations 9
Cbc0038I Pass   9: suminf.    0.46034 (2) obj. -1.98482e+07 iterations 33
Cbc0038I Pass  10: suminf.    0.36364 (2) obj. -1.99497e+07 iterations 10
Cbc0038I Pass  11: suminf.    1.38675 (14) obj. -1.98482e+07 iterations 70
Cbc0038I Pass  12: suminf.    1.38675 (14) obj. -1.98482e+07 iterations 6
Cbc0038I Pass  13: suminf.    0.08962 (4) obj. -2.03268e+07 iterations 26
Cbc0038I Solution found of -2.03264e+07
Cbc0038I Rounding solution of -2.03284e+07 is better than previous of -2.03264e+07

Cbc0038I Before mini branch and bound, 86 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 135 rows 136 columns - 64 fixed gives 71, 72 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 71 rows 72 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of -2.06017e+07
Cbc0038I Reduced cost fixing fixed 3 variables on major pass 3
Cbc0038I Pass  14: suminf.    7.14469 (71) obj. -2.06017e+07 iterations 7
Cbc0038I Pass  15: suminf.    6.33000 (67) obj. -2.06017e+07 iterations 14
Cbc0038I Pass  16: suminf.    5.83478 (66) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  17: suminf.    3.90501 (55) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  18: suminf.    3.49969 (54) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  19: suminf.    2.14159 (39) obj. -2.06017e+07 iterations 25
Cbc0038I Pass  20: suminf.    1.77095 (38) obj. -2.06017e+07 iterations 10
Cbc0038I Pass  21: suminf.    1.05636 (19) obj. -2.06017e+07 iterations 31
Cbc0038I Pass  22: suminf.    0.73020 (18) obj. -2.06017e+07 iterations 12
Cbc0038I Pass  23: suminf.    0.79085 (9) obj. -2.06017e+07 iterations 22
Cbc0038I Pass  24: suminf.    0.48973 (8) obj. -2.06017e+07 iterations 12
Cbc0038I Pass  25: suminf.    0.66505 (3) obj. -2.06017e+07 iterations 18
Cbc0038I Pass  26: suminf.    0.37797 (2) obj. -2.06017e+07 iterations 13
Cbc0038I Pass  27: suminf.    1.73908 (17) obj. -2.06017e+07 iterations 41
Cbc0038I Pass  28: suminf.    1.49111 (13) obj. -2.06017e+07 iterations 25
Cbc0038I Pass  29: suminf.    0.65828 (3) obj. -2.06017e+07 iterations 22
Cbc0038I Pass  30: suminf.    0.37942 (2) obj. -2.06017e+07 iterations 9
Cbc0038I Pass  31: suminf.    1.65175 (39) obj. -2.06017e+07 iterations 55
Cbc0038I Pass  32: suminf.    1.05224 (10) obj. -2.06017e+07 iterations 27
Cbc0038I Pass  33: suminf.    0.64037 (3) obj. -2.06017e+07 iterations 16
Cbc0038I Pass  34: suminf.    0.38325 (2) obj. -2.06017e+07 iterations 8
Cbc0038I Pass  35: suminf.    1.98715 (22) obj. -2.06017e+07 iterations 33
Cbc0038I Pass  36: suminf.    1.30506 (15) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  37: suminf.    0.64537 (3) obj. -2.06017e+07 iterations 21
Cbc0038I Pass  38: suminf.    0.38218 (2) obj. -2.06017e+07 iterations 8
Cbc0038I Pass  39: suminf.    1.97321 (16) obj. -2.06017e+07 iterations 44
Cbc0038I Pass  40: suminf.    1.79218 (16) obj. -2.06017e+07 iterations 33
Cbc0038I Pass  41: suminf.    0.49309 (4) obj. -2.06017e+07 iterations 26
Cbc0038I Pass  42: suminf.    0.32302 (4) obj. -2.06017e+07 iterations 17
Cbc0038I Pass  43: suminf.    1.27420 (15) obj. -2.06017e+07 iterations 25
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 73 integers at bound fixed and 0 continuous
Cbc0038I Full problem 227 rows 226 columns, reduced to 142 rows 143 columns - 65 fixed gives 77, 78 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 77 rows 78 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of -2.03284e+07 - took 0.10 seconds
Cbc0012I Integer solution of -20328429 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0038I Full problem 227 rows 226 columns, reduced to 134 rows 134 columns - 64 fixed gives 70, 70 - ok now
Cbc0038I Full problem 227 rows 226 columns, reduced to 70 rows 70 columns
Cbc0031I 68 added rows had average density of 6.5147059
Cbc0013I At root node, 68 cuts changed objective from -21694545 to -20469000 in 11 passes
Cbc0014I Cut generator 0 (Probing) - 2855 row cuts average 4.9 elements, 9 column cuts (9 active)  in 0.109 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 96 row cuts average 92.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 9 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 62 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is 1
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 67 row cuts average 38.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 7 (TwoMirCuts) - 271 row cuts average 83.8 elements, 0 column cuts (0 active)  in 0.049 seconds - new frequency is 1
Cbc0014I Cut generator 8 (ZeroHalf) - 22 row cuts average 93.4 elements, 0 column cuts (0 active)  in 0.081 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -20328429 best solution, best possible -20449248 (0.59 seconds)
Cbc0001I Search completed - best objective -20328429, took 540 iterations and 2 nodes (0.65 seconds)
Cbc0032I Strong branching done 12 times (147 iterations), fathomed 0 nodes and fixed 3 variables
Cbc0035I Maximum depth 0, 11 variables fixed on reduced cost
Total time (CPU seconds):       0.55   (Wallclock seconds):       0.66

